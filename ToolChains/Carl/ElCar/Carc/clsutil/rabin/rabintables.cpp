//unsigned int table32[] = {
//    0x0, 0x8d, 0x11a, 0x197, 0x234, 0x2b9,
//    0x32e, 0x3a3, 0x468, 0x4e5, 0x572, 0x5ff,
//    0x65c, 0x6d1, 0x746, 0x7cb, 0x8d0, 0x85d,
//    0x9ca, 0x947, 0xae4, 0xa69, 0xbfe, 0xb73,
//    0xcb8, 0xc35, 0xda2, 0xd2f, 0xe8c, 0xe01,
//    0xf96, 0xf1b, 0x11a0, 0x112d, 0x10ba, 0x1037,
//    0x1394, 0x1319, 0x128e, 0x1203, 0x15c8, 0x1545,
//    0x14d2, 0x145f, 0x17fc, 0x1771, 0x16e6, 0x166b,
//    0x1970, 0x19fd, 0x186a, 0x18e7, 0x1b44, 0x1bc9,
//    0x1a5e, 0x1ad3, 0x1d18, 0x1d95, 0x1c02, 0x1c8f,
//    0x1f2c, 0x1fa1, 0x1e36, 0x1ebb, 0x2340, 0x23cd,
//    0x225a, 0x22d7, 0x2174, 0x21f9, 0x206e, 0x20e3,
//    0x2728, 0x27a5, 0x2632, 0x26bf, 0x251c, 0x2591,
//    0x2406, 0x248b, 0x2b90, 0x2b1d, 0x2a8a, 0x2a07,
//    0x29a4, 0x2929, 0x28be, 0x2833, 0x2ff8, 0x2f75,
//    0x2ee2, 0x2e6f, 0x2dcc, 0x2d41, 0x2cd6, 0x2c5b,
//    0x32e0, 0x326d, 0x33fa, 0x3377, 0x30d4, 0x3059,
//    0x31ce, 0x3143, 0x3688, 0x3605, 0x3792, 0x371f,
//    0x34bc, 0x3431, 0x35a6, 0x352b, 0x3a30, 0x3abd,
//    0x3b2a, 0x3ba7, 0x3804, 0x3889, 0x391e, 0x3993,
//    0x3e58, 0x3ed5, 0x3f42, 0x3fcf, 0x3c6c, 0x3ce1,
//    0x3d76, 0x3dfb, 0x4680, 0x460d, 0x479a, 0x4717,
//    0x44b4, 0x4439, 0x45ae, 0x4523, 0x42e8, 0x4265,
//    0x43f2, 0x437f, 0x40dc, 0x4051, 0x41c6, 0x414b,
//    0x4e50, 0x4edd, 0x4f4a, 0x4fc7, 0x4c64, 0x4ce9,
//    0x4d7e, 0x4df3, 0x4a38, 0x4ab5, 0x4b22, 0x4baf,
//    0x480c, 0x4881, 0x4916, 0x499b, 0x5720, 0x57ad,
//    0x563a, 0x56b7, 0x5514, 0x5599, 0x540e, 0x5483,
//    0x5348, 0x53c5, 0x5252, 0x52df, 0x517c, 0x51f1,
//    0x5066, 0x50eb, 0x5ff0, 0x5f7d, 0x5eea, 0x5e67,
//    0x5dc4, 0x5d49, 0x5cde, 0x5c53, 0x5b98, 0x5b15,
//    0x5a82, 0x5a0f, 0x59ac, 0x5921, 0x58b6, 0x583b,
//    0x65c0, 0x654d, 0x64da, 0x6457, 0x67f4, 0x6779,
//    0x66ee, 0x6663, 0x61a8, 0x6125, 0x60b2, 0x603f,
//    0x639c, 0x6311, 0x6286, 0x620b, 0x6d10, 0x6d9d,
//    0x6c0a, 0x6c87, 0x6f24, 0x6fa9, 0x6e3e, 0x6eb3,
//    0x6978, 0x69f5, 0x6862, 0x68ef, 0x6b4c, 0x6bc1,
//    0x6a56, 0x6adb, 0x7460, 0x74ed, 0x757a, 0x75f7,
//    0x7654, 0x76d9, 0x774e, 0x77c3, 0x7008, 0x7085,
//    0x7112, 0x719f, 0x723c, 0x72b1, 0x7326, 0x73ab,
//    0x7cb0, 0x7c3d, 0x7daa, 0x7d27, 0x7e84, 0x7e09,
//    0x7f9e, 0x7f13, 0x78d8, 0x7855, 0x79c2, 0x794f,
//    0x7aec, 0x7a61, 0x7bf6, 0x7b7b
//};
//
//unsigned int table40[] = {
//    0x0, 0x8d00, 0x11a00, 0x19700, 0x23400, 0x2b900,
//    0x32e00, 0x3a300, 0x46800, 0x4e500, 0x57200, 0x5ff00,
//    0x65c00, 0x6d100, 0x74600, 0x7cb00, 0x8d000, 0x85d00,
//    0x9ca00, 0x94700, 0xae400, 0xa6900, 0xbfe00, 0xb7300,
//    0xcb800, 0xc3500, 0xda200, 0xd2f00, 0xe8c00, 0xe0100,
//    0xf9600, 0xf1b00, 0x11a000, 0x112d00, 0x10ba00, 0x103700,
//    0x139400, 0x131900, 0x128e00, 0x120300, 0x15c800, 0x154500,
//    0x14d200, 0x145f00, 0x17fc00, 0x177100, 0x16e600, 0x166b00,
//    0x197000, 0x19fd00, 0x186a00, 0x18e700, 0x1b4400, 0x1bc900,
//    0x1a5e00, 0x1ad300, 0x1d1800, 0x1d9500, 0x1c0200, 0x1c8f00,
//    0x1f2c00, 0x1fa100, 0x1e3600, 0x1ebb00, 0x234000, 0x23cd00,
//    0x225a00, 0x22d700, 0x217400, 0x21f900, 0x206e00, 0x20e300,
//    0x272800, 0x27a500, 0x263200, 0x26bf00, 0x251c00, 0x259100,
//    0x240600, 0x248b00, 0x2b9000, 0x2b1d00, 0x2a8a00, 0x2a0700,
//    0x29a400, 0x292900, 0x28be00, 0x283300, 0x2ff800, 0x2f7500,
//    0x2ee200, 0x2e6f00, 0x2dcc00, 0x2d4100, 0x2cd600, 0x2c5b00,
//    0x32e000, 0x326d00, 0x33fa00, 0x337700, 0x30d400, 0x305900,
//    0x31ce00, 0x314300, 0x368800, 0x360500, 0x379200, 0x371f00,
//    0x34bc00, 0x343100, 0x35a600, 0x352b00, 0x3a3000, 0x3abd00,
//    0x3b2a00, 0x3ba700, 0x380400, 0x388900, 0x391e00, 0x399300,
//    0x3e5800, 0x3ed500, 0x3f4200, 0x3fcf00, 0x3c6c00, 0x3ce100,
//    0x3d7600, 0x3dfb00, 0x468000, 0x460d00, 0x479a00, 0x471700,
//    0x44b400, 0x443900, 0x45ae00, 0x452300, 0x42e800, 0x426500,
//    0x43f200, 0x437f00, 0x40dc00, 0x405100, 0x41c600, 0x414b00,
//    0x4e5000, 0x4edd00, 0x4f4a00, 0x4fc700, 0x4c6400, 0x4ce900,
//    0x4d7e00, 0x4df300, 0x4a3800, 0x4ab500, 0x4b2200, 0x4baf00,
//    0x480c00, 0x488100, 0x491600, 0x499b00, 0x572000, 0x57ad00,
//    0x563a00, 0x56b700, 0x551400, 0x559900, 0x540e00, 0x548300,
//    0x534800, 0x53c500, 0x525200, 0x52df00, 0x517c00, 0x51f100,
//    0x506600, 0x50eb00, 0x5ff000, 0x5f7d00, 0x5eea00, 0x5e6700,
//    0x5dc400, 0x5d4900, 0x5cde00, 0x5c5300, 0x5b9800, 0x5b1500,
//    0x5a8200, 0x5a0f00, 0x59ac00, 0x592100, 0x58b600, 0x583b00,
//    0x65c000, 0x654d00, 0x64da00, 0x645700, 0x67f400, 0x677900,
//    0x66ee00, 0x666300, 0x61a800, 0x612500, 0x60b200, 0x603f00,
//    0x639c00, 0x631100, 0x628600, 0x620b00, 0x6d1000, 0x6d9d00,
//    0x6c0a00, 0x6c8700, 0x6f2400, 0x6fa900, 0x6e3e00, 0x6eb300,
//    0x697800, 0x69f500, 0x686200, 0x68ef00, 0x6b4c00, 0x6bc100,
//    0x6a5600, 0x6adb00, 0x746000, 0x74ed00, 0x757a00, 0x75f700,
//    0x765400, 0x76d900, 0x774e00, 0x77c300, 0x700800, 0x708500,
//    0x711200, 0x719f00, 0x723c00, 0x72b100, 0x732600, 0x73ab00,
//    0x7cb000, 0x7c3d00, 0x7daa00, 0x7d2700, 0x7e8400, 0x7e0900,
//    0x7f9e00, 0x7f1300, 0x78d800, 0x785500, 0x79c200, 0x794f00,
//    0x7aec00, 0x7a6100, 0x7bf600, 0x7b7b00
//};
//
//unsigned int table48[] = {
//    0x0, 0x8d0000, 0x11a0000, 0x1970000, 0x2340000, 0x2b90000,
//    0x32e0000, 0x3a30000, 0x4680000, 0x4e50000, 0x5720000, 0x5ff0000,
//    0x65c0000, 0x6d10000, 0x7460000, 0x7cb0000, 0x8d00000, 0x85d0000,
//    0x9ca0000, 0x9470000, 0xae40000, 0xa690000, 0xbfe0000, 0xb730000,
//    0xcb80000, 0xc350000, 0xda20000, 0xd2f0000, 0xe8c0000, 0xe010000,
//    0xf960000, 0xf1b0000, 0x11a00000, 0x112d0000, 0x10ba0000, 0x10370000,
//    0x13940000, 0x13190000, 0x128e0000, 0x12030000, 0x15c80000, 0x15450000,
//    0x14d20000, 0x145f0000, 0x17fc0000, 0x17710000, 0x16e60000, 0x166b0000,
//    0x19700000, 0x19fd0000, 0x186a0000, 0x18e70000, 0x1b440000, 0x1bc90000,
//    0x1a5e0000, 0x1ad30000, 0x1d180000, 0x1d950000, 0x1c020000, 0x1c8f0000,
//    0x1f2c0000, 0x1fa10000, 0x1e360000, 0x1ebb0000, 0x23400000, 0x23cd0000,
//    0x225a0000, 0x22d70000, 0x21740000, 0x21f90000, 0x206e0000, 0x20e30000,
//    0x27280000, 0x27a50000, 0x26320000, 0x26bf0000, 0x251c0000, 0x25910000,
//    0x24060000, 0x248b0000, 0x2b900000, 0x2b1d0000, 0x2a8a0000, 0x2a070000,
//    0x29a40000, 0x29290000, 0x28be0000, 0x28330000, 0x2ff80000, 0x2f750000,
//    0x2ee20000, 0x2e6f0000, 0x2dcc0000, 0x2d410000, 0x2cd60000, 0x2c5b0000,
//    0x32e00000, 0x326d0000, 0x33fa0000, 0x33770000, 0x30d40000, 0x30590000,
//    0x31ce0000, 0x31430000, 0x36880000, 0x36050000, 0x37920000, 0x371f0000,
//    0x34bc0000, 0x34310000, 0x35a60000, 0x352b0000, 0x3a300000, 0x3abd0000,
//    0x3b2a0000, 0x3ba70000, 0x38040000, 0x38890000, 0x391e0000, 0x39930000,
//    0x3e580000, 0x3ed50000, 0x3f420000, 0x3fcf0000, 0x3c6c0000, 0x3ce10000,
//    0x3d760000, 0x3dfb0000, 0x46800000, 0x460d0000, 0x479a0000, 0x47170000,
//    0x44b40000, 0x44390000, 0x45ae0000, 0x45230000, 0x42e80000, 0x42650000,
//    0x43f20000, 0x437f0000, 0x40dc0000, 0x40510000, 0x41c60000, 0x414b0000,
//    0x4e500000, 0x4edd0000, 0x4f4a0000, 0x4fc70000, 0x4c640000, 0x4ce90000,
//    0x4d7e0000, 0x4df30000, 0x4a380000, 0x4ab50000, 0x4b220000, 0x4baf0000,
//    0x480c0000, 0x48810000, 0x49160000, 0x499b0000, 0x57200000, 0x57ad0000,
//    0x563a0000, 0x56b70000, 0x55140000, 0x55990000, 0x540e0000, 0x54830000,
//    0x53480000, 0x53c50000, 0x52520000, 0x52df0000, 0x517c0000, 0x51f10000,
//    0x50660000, 0x50eb0000, 0x5ff00000, 0x5f7d0000, 0x5eea0000, 0x5e670000,
//    0x5dc40000, 0x5d490000, 0x5cde0000, 0x5c530000, 0x5b980000, 0x5b150000,
//    0x5a820000, 0x5a0f0000, 0x59ac0000, 0x59210000, 0x58b60000, 0x583b0000,
//    0x65c00000, 0x654d0000, 0x64da0000, 0x64570000, 0x67f40000, 0x67790000,
//    0x66ee0000, 0x66630000, 0x61a80000, 0x61250000, 0x60b20000, 0x603f0000,
//    0x639c0000, 0x63110000, 0x62860000, 0x620b0000, 0x6d100000, 0x6d9d0000,
//    0x6c0a0000, 0x6c870000, 0x6f240000, 0x6fa90000, 0x6e3e0000, 0x6eb30000,
//    0x69780000, 0x69f50000, 0x68620000, 0x68ef0000, 0x6b4c0000, 0x6bc10000,
//    0x6a560000, 0x6adb0000, 0x74600000, 0x74ed0000, 0x757a0000, 0x75f70000,
//    0x76540000, 0x76d90000, 0x774e0000, 0x77c30000, 0x70080000, 0x70850000,
//    0x71120000, 0x719f0000, 0x723c0000, 0x72b10000, 0x73260000, 0x73ab0000,
//    0x7cb00000, 0x7c3d0000, 0x7daa0000, 0x7d270000, 0x7e840000, 0x7e090000,
//    0x7f9e0000, 0x7f130000, 0x78d80000, 0x78550000, 0x79c20000, 0x794f0000,
//    0x7aec0000, 0x7a610000, 0x7bf60000, 0x7b7b0000
//};
//
//unsigned int table56[] = {
//    0x0, 0x8d000000, 0x1a00008d, 0x9700008d, 0x3400011a, 0xb900011a,
//    0x2e000197, 0xa3000197, 0x68000234, 0xe5000234, 0x720002b9, 0xff0002b9,
//    0x5c00032e, 0xd100032e, 0x460003a3, 0xcb0003a3, 0xd0000468, 0x5d000468,
//    0xca0004e5, 0x470004e5, 0xe4000572, 0x69000572, 0xfe0005ff, 0x730005ff,
//    0xb800065c, 0x3500065c, 0xa20006d1, 0x2f0006d1, 0x8c000746, 0x1000746,
//    0x960007cb, 0x1b0007cb, 0xa000085d, 0x2d00085d, 0xba0008d0, 0x370008d0,
//    0x94000947, 0x19000947, 0x8e0009ca, 0x30009ca, 0xc8000a69, 0x45000a69,
//    0xd2000ae4, 0x5f000ae4, 0xfc000b73, 0x71000b73, 0xe6000bfe, 0x6b000bfe,
//    0x70000c35, 0xfd000c35, 0x6a000cb8, 0xe7000cb8, 0x44000d2f, 0xc9000d2f,
//    0x5e000da2, 0xd3000da2, 0x18000e01, 0x95000e01, 0x2000e8c, 0x8f000e8c,
//    0x2c000f1b, 0xa1000f1b, 0x36000f96, 0xbb000f96, 0x40001037, 0xcd001037,
//    0x5a0010ba, 0xd70010ba, 0x7400112d, 0xf900112d, 0x6e0011a0, 0xe30011a0,
//    0x28001203, 0xa5001203, 0x3200128e, 0xbf00128e, 0x1c001319, 0x91001319,
//    0x6001394, 0x8b001394, 0x9000145f, 0x1d00145f, 0x8a0014d2, 0x70014d2,
//    0xa4001545, 0x29001545, 0xbe0015c8, 0x330015c8, 0xf800166b, 0x7500166b,
//    0xe20016e6, 0x6f0016e6, 0xcc001771, 0x41001771, 0xd60017fc, 0x5b0017fc,
//    0xe000186a, 0x6d00186a, 0xfa0018e7, 0x770018e7, 0xd4001970, 0x59001970,
//    0xce0019fd, 0x430019fd, 0x88001a5e, 0x5001a5e, 0x92001ad3, 0x1f001ad3,
//    0xbc001b44, 0x31001b44, 0xa6001bc9, 0x2b001bc9, 0x30001c02, 0xbd001c02,
//    0x2a001c8f, 0xa7001c8f, 0x4001d18, 0x89001d18, 0x1e001d95, 0x93001d95,
//    0x58001e36, 0xd5001e36, 0x42001ebb, 0xcf001ebb, 0x6c001f2c, 0xe1001f2c,
//    0x76001fa1, 0xfb001fa1, 0x8000206e, 0xd00206e, 0x9a0020e3, 0x170020e3,
//    0xb4002174, 0x39002174, 0xae0021f9, 0x230021f9, 0xe800225a, 0x6500225a,
//    0xf20022d7, 0x7f0022d7, 0xdc002340, 0x51002340, 0xc60023cd, 0x4b0023cd,
//    0x50002406, 0xdd002406, 0x4a00248b, 0xc700248b, 0x6400251c, 0xe900251c,
//    0x7e002591, 0xf3002591, 0x38002632, 0xb5002632, 0x220026bf, 0xaf0026bf,
//    0xc002728, 0x81002728, 0x160027a5, 0x9b0027a5, 0x20002833, 0xad002833,
//    0x3a0028be, 0xb70028be, 0x14002929, 0x99002929, 0xe0029a4, 0x830029a4,
//    0x48002a07, 0xc5002a07, 0x52002a8a, 0xdf002a8a, 0x7c002b1d, 0xf1002b1d,
//    0x66002b90, 0xeb002b90, 0xf0002c5b, 0x7d002c5b, 0xea002cd6, 0x67002cd6,
//    0xc4002d41, 0x49002d41, 0xde002dcc, 0x53002dcc, 0x98002e6f, 0x15002e6f,
//    0x82002ee2, 0xf002ee2, 0xac002f75, 0x21002f75, 0xb6002ff8, 0x3b002ff8,
//    0xc0003059, 0x4d003059, 0xda0030d4, 0x570030d4, 0xf4003143, 0x79003143,
//    0xee0031ce, 0x630031ce, 0xa800326d, 0x2500326d, 0xb20032e0, 0x3f0032e0,
//    0x9c003377, 0x11003377, 0x860033fa, 0xb0033fa, 0x10003431, 0x9d003431,
//    0xa0034bc, 0x870034bc, 0x2400352b, 0xa900352b, 0x3e0035a6, 0xb30035a6,
//    0x78003605, 0xf5003605, 0x62003688, 0xef003688, 0x4c00371f, 0xc100371f,
//    0x56003792, 0xdb003792, 0x60003804, 0xed003804, 0x7a003889, 0xf7003889,
//    0x5400391e, 0xd900391e, 0x4e003993, 0xc3003993, 0x8003a30, 0x85003a30,
//    0x12003abd, 0x9f003abd, 0x3c003b2a, 0xb1003b2a, 0x26003ba7, 0xab003ba7,
//    0xb0003c6c, 0x3d003c6c, 0xaa003ce1, 0x27003ce1, 0x84003d76, 0x9003d76,
//    0x9e003dfb, 0x13003dfb, 0xd8003e58, 0x55003e58, 0xc2003ed5, 0x4f003ed5,
//    0xec003f42, 0x61003f42, 0xf6003fcf, 0x7b003fcf
//};

#include <stdio.h>

static const int P_DEGREE = 32;
static const int X_P_DEGREE = 1 << (P_DEGREE - 1);
const int P = 0x0000008D;

int table32[256], table40[256], table48[256], table56[256];

void initializeTables() {

	int  mods[P_DEGREE];
	// We want to have mods[i] == x^(P_DEGREE+i)
	mods[0] = P;
	for (int i = 1; i < P_DEGREE; i++) {
		const int lastMod = mods[i - 1];
		// x^i == x(x^(i-1)) (mod P)
		int thisMod = lastMod << 1;
		// if x^(i-1) had a x_(P_DEGREE-1) term then x^i has a
		// x^P_DEGREE term that 'fell off' the top end.
		// Since x^P_DEGREE == P (mod P), we should add P
		// to account for this:
		if ((lastMod & X_P_DEGREE) != 0) {
			thisMod ^= P;
		}
		mods[i] = thisMod;
	}

	// Let i be a number between 0 and 255 (i.e. a byte).
	// Let its bits be b0, b1, ..., b7.
	// Let Q32 be the polynomial b0*x^39 + b1*x^38 + ... + b7*x^32 (mod P).
	// Then table32[i] is Q32, represented as an int (see below).
	// Likewise Q40 be the polynomial b0*x^47 + b1*x^46 + ... + b7*x^40 (mod P).
	// table40[i] is Q40, represented as an int. Likewise table48 and table56.

	for (int i = 0; i < 256; i++) {
		int c = i;
		for (int j = 0; j < 8 && c > 0; j++) {
			if ((c & 1) != 0) {
				table32[i] ^= mods[j];
				table40[i] ^= mods[j + 8];
				table48[i] ^= mods[j + 16];
				table56[i] ^= mods[j + 24];
			}
			c >>= 1;
		}
	}

}

int main()
{
  printf(" Rabin Fingerprint!\n");

	initializeTables();

	printf("\nunsigned int table32[] = {\n   ");
	for (int i = 0; i < 256; i++) {
	    printf(" 0x%x,", table32[i]);
	    if ((i + 1) % 6 == 0)
	        printf("\n   ");
	}
	printf("\n};\n");

	printf("\nunsigned int table40[] = {\n   ");
	for (int i = 0; i < 256; i++) {
	    printf(" 0x%x,", table40[i]);
	    if ((i + 1) % 6 == 0)
	        printf("\n   ");
	}
	printf("\n};\n");

	printf("\nunsigned int table48[] = {\n   ");
	for (int i = 0; i < 256; i++) {
	    printf(" 0x%x,", table48[i]);
	    if ((i + 1) % 6 == 0)
	        printf("\n   ");
	}
	printf("\n};\n");

	printf("\nunsigned int table56[] = {\n   ");
	for (int i = 0; i < 256; i++) {
	    printf(" 0x%x,", table56[i]);
	    if ((i + 1) % 6 == 0)
	        printf("\n   ");
	}
	printf("\n};\n");

	return 1;
}
