$;;=========================================================================
$;; Copyright (c) 2000-2007,  Elastos, Inc.  All Rights Reserved.
$;;=========================================================================
$
$ INPUT class
$
$ WITH all super DO
$ IF super is last
public:
    typedef _${class.name} Super;
$ END IF;;
$ END DO;;

private:
    ECode _QueryAllInterfaces()
    {
        ECode ec = NOERROR;
$ WITH all super DO     
$ WITH super DO
$   WITH all interfaces DO
$     IF attrib is not "callback" and attrib is not "clsobj" and attrib is not "filter" and name is not "IObject"

        _m_pSuper${name} = (${name}*)_m_pSuper->Probe(EIID_${name});
        if (!_m_pSuper${name}) {
            ec = E_NO_INTERFACE;
            goto ErrorExit;
        }
$     END IF
$   END DO ;; interfaces
$ END DO;; super
$
$ IF super.attrib is "hascallback"
        _m_pSuperCallbackTrigger = (_I${super.name}CallbackTrigger*)_m_pSuper->Probe(EIID_CALLBACK_TRIGGER);
        if (!_m_pSuperCallbackTrigger) {
            ec = E_NO_INTERFACE;
            goto ErrorExit;
        }
$ END IF
$ END DO

    ErrorExit:
        return ec;
    }

protected:
$ WITH all super DO
$   IF super is last
$    WITH super DO
    //
    // Parent's pseudo constructor
    //
$     IF attrib is not "hasctor" OR attrib is "hasdefaultctor"
    ECode constructor()
    {
        ECode ec;
        
        ec = _CObject_CreateInstance(ECLSID_${name}, RGM_SAME_DOMAIN,
                EIID_IObject, (IInterface**)&_m_pSuper);
        if (FAILED(ec)) return ec;
        
        _m_pSuper = (IObject*)_m_pSuper->Probe(EIID_IObject);
        
        ec = _QueryAllInterfaces();
        if (FAILED(ec)) goto ErrorExit;

        ec = _m_pSuper->Aggregate(AggrType_ChildConstruct, (_IInterface *)this);
        if (FAILED(ec)) goto ErrorExit;

        return ec;

    ErrorExit:
        _m_pSuper->Release();
        _m_pSuper = NULL;
        
        return ec;
    }
$    END IF ;; not "hasctor" or "hasdefaultctor"
$
$    IF attrib is "hasctor" and attrib is not "hasDefaultCtor"
$     WITH all interfaces DO
$       IF attrib is "clsobj"
$           WITH all methods DO
$             IF method.attrib is "NonDefaultCtor"

    ECode constructor($^
$               WITH all parameters DO
$                   IF parameter is not last
$                       IF parameter is not first
,$^
$                       END IF

            /* [${attrib}] */ ${type} ${prefixingname(parameter)}$^
$                   END IF
$               END DO ;; all parameters
)
    {
        ECode ec;
        I${class.name}ClassObject* pClassObject;

        ec = _CObject_AcquireClassFactory(ECLSID_${class.name}, (IRegime*)RGM_SAME_DOMAIN, 
                EIID_I${class.name}ClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->${method.name}($^
$                           WITH all parameters DO
$                               IF parameter is not last
${prefixingname(parameter)}, $^
$                               ELSE
(IInterface**)&_m_pSuper);
$                               END IF ;; parameter is not last
$                           END DO ;; all parameters
        pClassObject->Release();
        if (FAILED(ec)) return ec;
        
        _m_pSuper = (IObject*)_m_pSuper->Probe(EIID_IObject);
        
        ec = _QueryAllInterfaces();
        if (FAILED(ec)) goto ErrorExit;

        ec = _m_pSuper->Aggregate(AggrType_ChildConstruct, (_IInterface *)this);
        if (FAILED(ec)) goto ErrorExit;

        return ec;

    ErrorExit:
        _m_pSuper->Release();
        _m_pSuper = NULL;
        
        return ec;
    }
$             END IF
$           END DO ;; all methods
$       END IF ;; attrib is clsobj
$     END DO ;; all interfaces    
$   END IF ;; attrib is hasctor
$    END DO ;; super
$   END IF ;; super is last
$ END DO ;; all super

public:
$ WITH all super DO
$   IF super.attrib is "hascallback"
$     WITH super DO
$       TEMPLATE "supercallback.lub"
$     END DO;; super
$   END IF ;; 
$ END DO ;;
$

$ WITH all super DO    
$ WITH super DO
    //
    // Parent's pseudo interface methods
    //
$  WITH all methods DO
$    IF method.name is not "Aggregate" and method.name is not "GetDomain" and method.name is not "GetClassID"
    CARAPI ${name}($^
$   WITH all parameters DO

            /* [${attrib}] */ ${type} ${prefixingname(parameter)}$^
$       IF parameter is not last
,$^
$       END IF
$   END DO ;; all parameters
)
    {
        _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, TRUE);

        ECode ec = _m_pSuper${interface.name}->${name}($^
$   WITH all parameters DO
${prefixingname(parameter)}$^
$       IF parameter is not last
, $^
$       END IF
$   END DO ;; all parameters
);
        _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, FALSE);
        return ec;
    }
$    END IF    
$ END DO ;; all methods
$
$ IF attrib is "hascallback"
    //
    // Parent's pseudo callback trigger methods
    //
$   WITH all interfaces DO
$       IF attrib is "callback"
$           WITH all parents_and_me DO
$           WITH all methods DO
    CARAPI ${name}($^
$
$               WITH all parameters DO
            /* [${attrib}] */ ${type} ${prefixingname(parameter)}$^
$                       IF parameter is not last
,$^
$                       END IF
$               END DO ;; all parameters
)
    {
        _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, TRUE);

        ECode ec = _m_pSuperCallbackTrigger->${name}($^
$   WITH all parameters DO
${prefixingname(parameter)}$^
$           IF parameter is not last
, $^
$           END IF
$   END DO ;; all parameters
);
        _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, FALSE);
        return ec;
    }

$               IF IsFiltered(interface) is false
    CARAPI ${name}WithPriority(
            /* [in] */ Int32 cFlags$^
$               WITH all parameters DO
,
            /* [${attrib}] */ ${type} ${prefixingname(parameter)}$^
$               END DO ;; all parameters
)
    {
        _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, TRUE);

        ECode ec = _m_pSuperCallbackTrigger->${name}WithPriority(cFlags$^
$   WITH all parameters DO
, ${prefixingname(parameter)}$^
$   END DO ;; all parameters
);
        _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, FALSE);
        return ec;
    }
$               END IF

    CARAPI Updating${name}($^
$               WITH all parameters DO
            /* [${attrib}] */ ${type} ${prefixingname(parameter)}$^
$                       IF parameter is not last
,
$                       END IF
$               END DO ;; all parameters
)
    {
        _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, TRUE);

        ECode ec = _m_pSuperCallbackTrigger->Updating${name}($^
$   WITH all parameters DO
${prefixingname(parameter)}$^
$           IF parameter is not last
, $^
$           END IF
$   END DO ;; all parameters
);
        _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, FALSE);
        return ec;
    }

    CARAPI Updating${name}WithPriority(
            /* [in] */ Int32 cFlags$^
$               WITH all parameters DO
,
            /* [${attrib}] */ ${type} ${prefixingname(parameter)}$^
$               END DO ;; all parameters
)
    {
        _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, TRUE);

        ECode ec = _m_pSuperCallbackTrigger->Updating${name}WithPriority(cFlags$^
$   WITH all parameters DO
, ${prefixingname(parameter)}$^
$   END DO ;; all parameters
);
        _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, FALSE);
        return ec;
    }
    
$           END DO ;; all methods
$           END DO ;; all parents_and_me
$       END IF ;; callback
$   END DO ;; all interfaces
$ END IF ;; hascallback
$ END DO ;; super
$ END DO ;; all super
$
protected:
    IObject* _m_pSuper;
$ WITH all super DO
$ WITH super DO
$   WITH all interfaces DO
$     IF attrib is not "callback" and attrib is not "clsobj" and attrib is not "filter" and name is not "IObject"
    ${name}* _m_pSuper${name};
$     END IF
$   END DO ;; all interfaces
$   IF attrib is "hascallback"
    _I${name}CallbackTrigger* _m_pSuperCallbackTrigger;
$   END IF
$ END DO ;; super
$ END DO ;; all super
