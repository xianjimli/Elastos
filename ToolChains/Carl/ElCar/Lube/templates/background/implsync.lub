$;;=========================================================================
$;; Copyright (c) 2000-2008,  Elastos, Inc.  All Rights Reserved.
$;;=========================================================================
$
$INPUT class
$
$
$IF class.type is not "generic" and class.type is not "sink"
$

$  WITH all interfaces DO
$   IF lubeoption is "HaveSandwichMethod" or attrib is "virtual"
$    IF attrib is not "callback" and attrib is not "callbacksink" and attrib is not "delegatesink" and attrib is not "clsobj" and attrib is not "handler" and attrib is not "filter" and name is not "IObject" and name is not "IAspect"
$      WITH all parents_and_me DO
$        WITH all methods DO

${type} _CSandwich${class.name}::${name}($^
$          WITH all parameters DO

    ${type} ${prefixingname(parameter)}$^
$            IF parameter is not last
,$^
$            END IF
$          END DO ;; all parameters
)
{
    ECode ec = NOERROR;
$          IF interface.attrib is "virtual"
    Boolean bChildCallParent = FALSE;
$              IF lubeoption is not "inkernel"
    bChildCallParent = _Impl_CheckHelperInfoFlag(HELPER_CHILD_CALL_PARENT);
    if (bChildCallParent) _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, FALSE);
$              END IF;;

    if (NULL != _m_p${interface.name} && (!bChildCallParent)) {
        ec = _m_p${interface.name}->${name}($^
$            WITH all parameters DO
${prefixingname(parameter)}$^
$              IF parameters is not last
, $^
$              END IF
$            END DO ;; all parameters
);
    }
    else {
$          ELSE
$            IF class.attrib is "hasvirtual" and interface.attrib is not "async"
    Boolean bChildCallParent = FALSE;
$              IF lubeoption is not "inkernel"
    bChildCallParent = _Impl_CheckHelperInfoFlag(HELPER_CHILD_CALL_PARENT);
    if (bChildCallParent) _Impl_SetHelperInfoFlag(HELPER_CHILD_CALL_PARENT, FALSE);
$              END IF;;
$            END IF;;
$          END IF ;; !(interface.attrib is "virtual")
$          IF interface.attrib is "async" and class.type is not "sink"

    Boolean bAsyncCalling = _Impl_CheckHelperInfoFlag(HELPER_ASYNC_CALLING);
    if (bAsyncCalling) _Impl_SetHelperInfoFlag(HELPER_ASYNC_CALLING, FALSE);

    if (!bAsyncCalling) {
        ec = Callback::begin${name}WithPriority(CallbackPriority_Normal, $^
$                WITH all parameters DO
${prefixingname(parameter)}$^
$                  IF parameters is not last
, $^
$                  END IF
$                END DO ;; all parameters
);
    }
    else {
$          END IF;; async
    ec = ${class.name}::${name}($^
$                WITH all parameters DO
${prefixingname(parameter)}$^
$                  IF parameters is not last
, $^
$                  END IF
$                END DO ;; all parameters
);
$            IF interface.attrib is "async" and class.type is not "sink"
    }

$            END IF;; async, sink
$          IF interface.attrib is "virtual"
    }
$          END IF;; interface.attrib is "virtual"

    return ec;
}
$        END DO ;; all methods
$      END DO ;;parents_and_me
$   END IF ;; !callback and !callbacksink and !delegatesink and !clsobj and !handler and !filter
$
$  END IF;;
$ END DO ;; all interfaces
$END IF;; not generic, not sink
$
