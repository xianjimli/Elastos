$INPUT class
$OUTPUT "${name}So.cpp"
$
#include <utils/Binder.h>
#include <utils/Parcel.h>
#include <utils/IServiceManager.h>
#include <utils/IPCThreadState.h>
#include <cutils/jstring.h>
#include <Pthread.h>
#include"descriptor.h"

typedef signed long long jlong;
typedef int ECode;
#define E_FAIL  0x80050000;
#define NOERROR 0x00000000;

namespace android {

$   WITH all interfaces DO
$       IF attrib is not "clsobj"
$           WITH all methods DO
#define TRANSACTION_${name}    ${MethodIndexInInterface(method)}
$           END DO
$       END IF
$   END DO

$   IF attrib is "hascallback"
$   WITH all interfaces DO
$       IF attrib is "callback"
$           WITH all methods DO
typedef struct ${methods.name}Data {
$               WITH all parameters DO
    ${GenerateCBDataParameter(parameter)}$^
;
$               END DO ;; all parameters
} ${methods.name}_DATA;

$           END DO
$       END IF
$   END DO
$   END IF

class ${name}So : public BBinder {

public:
    ${name}So()
    {
        m_pSvrManager = defaultServiceManager();
        if (m_pSvrManager == NULL) {
            printf("GetServiceManager faild.\n");
        }

$    WITH all interfaces DO
$        IF attrib is not "clsobj" and attrib is not "callback"
        m_p${interface.name}Binder = NULL;
$        END IF
$    END DO

$   WITH all interfaces DO
$       IF attrib is "callback"
$           WITH all methods DO
        m_p${methods.name}Data = NULL;
$           END DO
$       END IF
$   END DO
    }

$   WITH all interfaces DO
$       IF attrib is not "clsobj" and attrib is not "callback"
$           WITH all methods DO
    ECode ${name}($^
$               WITH all parameters DO
${GenerateAndriodParameter(parameter)}$^
$                   IF parameter is not last
, $^
$                   END IF
$               END DO ;; all parameters
);
$           END DO
$       END IF
$   END DO
$
$   IF attrib is "hascallback"

public:
    virtual status_t onTransact(uint32_t, const Parcel&, Parcel*, uint32_t);
    ECode StartListen();

public:
$   WITH all interfaces DO
$       IF attrib is "callback"
$           WITH all methods DO
    typedef void (*${class.name}${interface.name}${method.name}Callback)(
            void* pCarServerObj,
            void* pFunc$^
$               WITH all parameters DO
,
            ${AndriodType(type)} ${PrefixingNameByName(parameter)}$^
$               END DO ;; all parameters
);

$           END DO
$       END IF
$   END DO
    void* m_pCarServerObj;
    int m_CallbackEvent;

$   WITH all interfaces DO
$       IF attrib is "callback"
$           WITH all methods DO
    ${class.name}${interface.name}${method.name}Callback m_invoke${class.name}${interface.name}${method.name}Callback;
    void* m_${class.name}${interface.name}${method.name}_func;
    ${methods.name}_DATA* m_p${methods.name}Data;

$           END DO
$       END IF
$   END DO
$   END IF
private:
    sp<IServiceManager>   m_pSvrManager;
$    WITH all interfaces DO
$        IF attrib is not "clsobj" and attrib is not "callback"
    sp<IBinder>           m_p${interface.name}Binder;
$        END IF
$    END DO

};

static ${class.name}So s_${class.name}So;
$   IF attrib is "hascallback"

static pthread_cond_t     s_startupCond  = PTHREAD_COND_INITIALIZER;
static pthread_mutex_t    s_startupMutex = PTHREAD_MUTEX_INITIALIZER;
static bool               s_exited;
$   END IF

void ReportException(int32_t nEvent, Parcel& reply)
{
    size_t expstrlen;
    char* exceptionString;

    const char16_t* expstr16 = reply.readString16Inplace(&expstrlen);
    if (expstr16 != NULL) {
        exceptionString = strndup16to8(expstr16, expstrlen);
        printf("Transact[%d] catch an exception: %s.\n", nEvent, exceptionString);
        free(exceptionString);
    }
}

$   WITH all interfaces DO
$       IF attrib is not "clsobj" and attrib is not "callback"
$           WITH all methods DO
ECode ${class.name}So::${name}($^
$               WITH all parameters DO
${GenerateAndriodParameter(parameter)}$^
$                  IF parameter is not last
, $^
$                  END IF
$               END DO ;; all parameters
)
{
${DelcareVariablesForSoMethod(method)}
    data.writeString16(String16(DESCRIPTOR${interface.name}));  //DESCRIPTOR

$               WITH all parameters DO
$                  IF attrib is "in"
    ${WriteToAndriodParcel(type)}
$                  END IF
$               END DO
$
    if (m_p${interface.name}Binder == NULL) {
        m_p${interface.name}Binder = m_pSvrManager->getService(String16(${interface.name}ServiceName));
        if (m_p${interface.name}Binder == NULL) {
            printf("GetService faild.\n");
            return E_FAIL;
        }
    }
    m_p${interface.name}Binder->transact(TRANSACTION_${method.name}, data, &reply);

$     {ReadOutParamFromParcel(method)}
    return NOERROR;
}

$           END DO
$       END IF
$   END DO
$
$   IF attrib is "hascallback"
void * ListenLoop(void * param)
{
    Parcel data, reply;
    sp<IServiceManager> sm;

    sm = defaultServiceManager();

$   WITH all interfaces DO
$       IF attrib is "callback"
    //
    data.writeStrongBinder(&s_${class.name}So);
    //
    sp<IBinder> binder = sm->getService(String16("ServiceName"));
    if (binder == 0) {
        printf("ListenLoop: Waiting for sevice ...\n");
        return NULL;
    }
    /*
    binder->transact(TRANSACTION_xxx, data, &reply);
    if (0 != reply.readInt32()) {
        ReportException(TRANSACTION_xxx, reply);
    }
    */

$       END IF
$   END DO

    IPCThreadState::self()->joinThreadPool();

}

ECode ${class.name}So::StartListen()
{
    s_exited = false;

    /* Create a linux thread to listen server's transact. */
    pthread_attr_t attr;
    pthread_attr_init(&attr);
    pthread_t tid_ListenRILResponse;
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
    if (pthread_create(&tid_ListenRILResponse, &attr, ListenLoop, NULL) < 0) {
        return -1;
    }

    while (true) {
        /* if someone has invoked stoplistener, break from while.*/
        if (s_exited) break;

        pthread_mutex_lock(&s_startupMutex);
        pthread_cond_wait(&s_startupCond, &s_startupMutex);

        if (s_exited) break;

        /* Response the change state to the client(CAR).
         * The thread must be created in elastos, for android's thread has no slot. */

        switch (m_CallbackEvent){
$   WITH all interfaces DO
$       IF attrib is "callback"
$           WITH all methods DO
            case TRANSACTION_${name}:
            {
$
                (*m_invoke${class.name}${interface.name}${method.name}Callback)(
                m_pCarServerObj,
                m_${class.name}${interface.name}${method.name}_func$^
$       WITH all parameters do
,
                m_p${methods.name}Data->${name}$^
$       END DO
);

                free(m_p${methods.name}Data);
                m_p${methods.name}Data = NULL;
                break;
            }
$           END DO
$       END IF
$   END DO
            default:{
                //
            }
        }
        pthread_mutex_unlock(&s_startupMutex);
    }

    return 1;
}

status_t ${class.name}So::onTransact(uint32_t code, const Parcel &data, Parcel *reply, uint32_t flags)
{
    size_t strlen = -1;
    const char16_t * str16 = data.readString16Inplace(&strlen);
    char * strDiscription = strndup16to8(str16, strlen);
    free(strDiscription);

    pthread_mutex_lock(&s_startupMutex);

    m_CallbackEvent = code;
    switch (code){
$   WITH all interfaces DO
$       IF attrib is "callback"
$           WITH all methods DO
        case TRANSACTION_${name}:
        {
            m_p${methods.name}Data = (${methods.name}_DATA *)malloc(sizeof(${methods.name}_DATA));

$           {ReadFromAndriodParcelOnTransact(method)}
            break;
        }
$           END DO
$       END IF
$   END DO
        default:{
            pthread_mutex_unlock(&s_startupMutex);
            return BBinder::onTransact(code, data, reply, flags);
        }
    }

    pthread_cond_broadcast(&s_startupCond);

    pthread_mutex_unlock(&s_startupMutex);

    return 1;

}
$   END IF

}; //namespace


#ifdef __cplusplus
extern "C" {
#endif
using namespace android;

int _DllMainCRTStartup() { return 1; }

$   WITH all interfaces DO
$       IF attrib is not "clsobj" and attrib is not "callback"
$           WITH all methods DO
ECode ${class.name}So${name}($^
$               WITH all parameters DO
${GenerateAndriodParameter(parameter)}$^
$                   IF parameter is not last
, $^
$                   END IF
$               END DO ;; all parameters
)
{
    return s_${class.name}So.${name}($^
$               WITH all parameters DO
${GenerateAndriodArgument(parameter)}$^
$                   IF parameter is not last
, $^
$                   END IF
$               END DO ;; all parameters
);
}

$           END DO ;; all methods
$       END IF
$   END DO ;; all interfaces

$
$   IF attrib is "hascallback"
void register${class.name}SoCarServerObj(void* pCarServerObj)
{
    s_${class.name}So.m_pCarServerObj = pCarServerObj;
}
$   END IF

$
$   WITH all interfaces DO
$       IF attrib is "callback"
$           WITH all methods DO
void register${class.name}So${method.name}Callback(void* invokeCallback, void* pFunc)
{
    s_${class.name}So.m_invoke${class.name}${interface.name}${method.name}Callback =
            (${class.name}So::${class.name}${interface.name}${method.name}Callback) invokeCallback;
    s_${class.name}So.m_${class.name}${interface.name}${method.name}_func = pFunc;
}

$           END DO
$       END IF
$   END DO
$
$   IF attrib is "hascallback"
ECode ${class.name}SoStartListen()
{
    return s_${class.name}So.StartListen();
}

void StopListener()
{
    s_exited = true;

    pthread_mutex_lock(&s_startupMutex);
    pthread_cond_broadcast(&s_startupCond);
    pthread_mutex_unlock(&s_startupMutex);
}
$   END IF

#ifdef __cplusplus
}
#endif
$
$END OUTPUT