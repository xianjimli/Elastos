$;;=========================================================================
$;; Copyright (c) 2000-2005,  Elastos, Inc.  All Rights Reserved.
$;;=========================================================================
$
$INPUT class
$OUTPUT "${name}.cpp"

#include "${name}.h"
#include "_${name}.cpp"
#include "..\so\${name}So.h"

typedef signed long long jlong;

$   IF attrib is "hascallback"
ECode ${class.name}StartListen(void *pArg)
{
    ${class.name}SoStartListen();

    return NOERROR;
}
$   END IF

$WITH all interfaces DO
$    IF attrib is "callback"
$        WITH all methods DO
typedef ECode (${class.name}::*${class.name}${interface.name}${method.name}Func)($^
$            WITH all parameters DO

        ${type} ${PrefixingNameByName(parameter)}$^
$                IF parameter is not last
,$^
$                END IF
$            END DO
);

void invoke${class.name}${interface.name}${method.name}Callback(
        void* pCarServerObj,
        void* pFunc$^
$            WITH all parameters DO
,
        ${AndriodType(type)} _${PrefixingNameByName(parameter)}$^
$            END DO
)
{
$            WITH all parameters DO
${PrepareParamForResponseCallback(parameter)}
$            END DO
    ((${class.name}*)pCarServerObj->*(*(${class.name}${interface.name}${method.name}Func*)pFunc))($^
$            WITH all parameters DO

            ${PrefixingNameByName(parameter)}$^
$                IF parameter is not last
,$^
$                END IF
$            END DO
);
}

ECode ${class.name}::Response${class.name}${interface.name}${method.name}Callback($^
$            WITH all parameters DO

        ${type} ${PrefixingNameByName(parameter)}$^
$                IF parameter is not last
,$^
$                END IF
$            END DO
)
{
    Callback::${method.name}($^
$            WITH all parameters DO

            ${PrefixingNameByName(parameter)}$^
$                IF parameter is not last
,$^
$                END IF
$            END DO
);

    return NOERROR;
}

$        END DO
$    END IF
$END DO
$
$WITH all interfaces DO
$   IF attrib is not "callback" and attrib is not "callbacksink" and attrib is not "clsobj" and attrib is not "filter"
$       WITH all parents_and_me DO
$       WITH all methods DO
${type} ${class.name}::${name}($^
$           WITH all parameters DO

    /* [${attrib}] */ ${type} ${PrefixingNameByName(parameter)}$^
$           IF parameter is not last
,$^
$           END IF
$           END DO ;; all parameters
)
{
    ECode ec;
${CallSoMethod(method)}
    return ec;
}

$       END DO ;; all methods
$       END DO ;; parents_and_me
$   END IF ;; is not "callback" and not "callbacksink" and not "clsobj" and not "filter"
$
$   IF attrib is "callbacksink"
$       WITH all parents_and_me DO
$       WITH all methods DO
ECode ${class.name}::On${name}(
    /* [in] */ IInterface *pSender$^
$    WITH all parameters DO
,$^
    /* [${attrib}] */ ${type} ${PrefixingNameByName(parameter)}$^
$    END DO ;; all parameters
)
{
    // TODO: Add your code here
    return E_NOT_IMPLEMENTED;
}

$       END DO ;; all methods
$       END DO ;; parents_and_me
$   END IF ;; is "callbacksink"
$
$   IF attrib is "delegatesink"
$       WITH all parents_and_me DO
$       WITH all methods DO
ECode ${class.name}::Do${name}(
    /* [in] */ IInterface *pSender$^
$    WITH all parameters DO
,$^
    /* [${attrib}] */ ${type} ${PrefixingNameByName(parameter)}$^
$    END DO ;; all parameters
)
{
    // TODO: Add your code here
    return E_NOT_IMPLEMENTED;
}

$       END DO ;; all methods
$       END DO ;; parents_and_me
$   END IF ;; is "delegatesink"
$END DO ;; all interfaces

${class.name}::~${class.name}()
{
$IF attrib is "hascallback"
    if (m_pIThread) {
        StopListener();

        WaitResult wr;
        m_pIThread->Join(INFINITE, &wr);/* Waiting for thread exit */
        m_pIThread->Release();
        m_pIThread = NULL;
    }
$END IF
}

$
$IF attrib is "hascallback"
$   WITH all interfaces DO
$       IF attrib is "callback"
$           WITH all methods DO
${class.name}${interface.name}${method.name}Func g_p${method.name};
$           END DO
$       END IF
$   END DO
$END IF

$IF class.attrib is not "hasTrivialCtor"
ECode ${class.name}::constructor()
{
$IF attrib is "hascallback"
    ECode ec;

$   WITH all interfaces DO
$       IF attrib is "callback"
    register${class.name}SoCarServerObj(this);

$           WITH all methods DO
    g_p${method.name} = &(${class.name}::Response${class.name}${interface.name}${method.name}Callback);
    register${class.name}So${method.name}Callback(
            (void*)invoke${class.name}${interface.name}${method.name}Callback,
            &g_p${method.name});

$           END DO
$       END IF
$   END DO
$
    ec = CThread::New(
            ${class.name}StartListen, NULL, ThreadCreationFlag_Started, &m_pIThread);
    if (FAILED(ec)) {
        return ec;
    }
$ END IF

    return NOERROR;
}
$ END IF

$END OUTPUT
