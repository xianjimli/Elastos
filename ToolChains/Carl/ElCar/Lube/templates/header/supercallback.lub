$;;=========================================================================
$;; Copyright (c) 2000-2005,  Elastos, Inc.  All Rights Reserved.
$;;=========================================================================
$
$INPUT class
$
$   WITH all interfaces DO
$       IF attrib is "callback" and attrib is not "clsobj"
$           WITH all parents_and_me DO
    // callback interface ${name}
$           	WITH all methods DO

    static _ELASTOS ECode $^
$                 IF interface.attrib is "delegate"
Assign${name}Delegate(
$                 ELSE
Add${name}Callback(
$                 END IF;;
            PInterface pServerObj,
            _ELASTOS ECode (*pFunc)(
                    void*, 
                    PInterface$^
$                   WITH all parameters DO
, 
                    ${ParamNamespaceType(type)}$^
$                   END DO
),
            void* pUserData=NULL)
    {
        _ELASTOS ECode ec;
        
        if (NULL == pServerObj) return E_INVALID_ARGUMENT;
        
        ec = _Impl_CheckClsId(pServerObj, &ECLSID_${class.name}, &pServerObj);
        if (FAILED(ec)) return ec;
        
        ec = _CObject_AddCallback(pServerObj, ${class.name}_${name}, 
                Elastos::EventHandler::Make((void*)pUserData, *(void**)&pFunc));

        return ec;
    }

    static _ELASTOS ECode $^
$                 IF interface.attrib is "delegate"
Revoke${name}Delegate(
$                 ELSE
Remove${name}Callback(
$                 END IF;;
            PInterface pServerObj,
            _ELASTOS ECode (*pFunc)(
                    void*, 
                    PInterface$^
$                   WITH all parameters DO
,
                    ${ParamNamespaceType(type)}$^
$                   END DO
),
            void* pUserData=NULL)
    {
        _ELASTOS ECode ec;
        
        if (NULL == pServerObj) return E_INVALID_ARGUMENT;
        
        ec = _Impl_CheckClsId(pServerObj, &ECLSID_${class.name}, &pServerObj);
        if (FAILED(ec)) return ec;

        ec = _CObject_RemoveCallback(pServerObj, ${class.name}_${name},
                Elastos::EventHandler::Make((void*)pUserData, *(void**)&pFunc));
        
        return ec;
    }

$                 IF interface.attrib is not "delegate"
    static _ELASTOS ECode Acquire${name}Rendezvous(
            PInterface pServerObj,
            ICallbackRendezvous** ppRendezvous)
    {
        _ELASTOS ECode ec;
        
        if (NULL == pServerObj) return E_INVALID_ARGUMENT;
        
        ec = _Impl_CheckClsId(pServerObj, &ECLSID_${class.name}, &pServerObj);
        if (FAILED(ec)) return ec;

        ec = _CObject_AcquireCallbackRendezvous(pServerObj, ${class.name}_${name}, ppRendezvous);
        
        return ec;
    }
$                 END IF;; not delegate

    template <class T>
    static _ELASTOS ECode $^
$                 IF interface.attrib is "delegate"
Assign${name}Delegate(
$                 ELSE
Add${name}Callback(
$                 END IF;;
            PInterface pServerObj,
            T *pThis,
            _ELASTOS ECode (CARAPICALLTYPE T::*pFunc)(
                    PInterface$^
$                   WITH all parameters DO
, 
                    ${ParamNamespaceType(type)}$^
$                   END DO
))
    {
        _ELASTOS ECode ec;
        
        if (NULL == pServerObj) return E_INVALID_ARGUMENT;
        
        ec = _Impl_CheckClsId(pServerObj, &ECLSID_${class.name}, &pServerObj);
        if (FAILED(ec)) return ec;

        if (Conversion<T, CCarObject>::exists) {
            ec  = _CObject_AddCallback(pServerObj, ${class.name}_${name}, 
                    Elastos::EventHandler::Make(pThis,*(void**)&pFunc, CallbackType_CAR));
        }
        else {
            ec = _CObject_AddCallback(pServerObj, ${class.name}_${name}, 
                    Elastos::EventHandler::Make(pThis,*(void**)&pFunc, CallbackType_CPP));
        }
        
        return ec;
    }

    template <class T>
    static _ELASTOS ECode $^
$                 IF interface.attrib is "delegate"
Revoke${name}Delegate(
$                 ELSE
Remove${name}Callback(
$                 END IF;;
            PInterface pServerObj,
            T *pThis,
            _ELASTOS ECode (CARAPICALLTYPE T::*pFunc)(
                    PInterface$^
$                   WITH all parameters DO
, 
                    ${ParamNamespaceType(type)}$^
$                   END DO
))
    {
        _ELASTOS ECode ec;
        
        if (NULL == pServerObj) return E_INVALID_ARGUMENT;
        
        ec = _Impl_CheckClsId(pServerObj, &ECLSID_${class.name}, &pServerObj);
        if (FAILED(ec)) return ec;

        ec = _CObject_RemoveCallback(pServerObj, ${class.name}_${name}, 
                Elastos::EventHandler::Make(pThis,*(void**)&pFunc));
        
        return ec;
    }
$
$           	END DO ;; all methods
$           END DO ;; all parents_and_me
$       END IF ;; callback clsobj
$   END DO ;; all interfaces
