$ INPUT class
$ IF type is not "aspect"
$   IF attrib is not "hasctor" OR attrib is "hasdefaultctor"
$   WITH all interfaces DO
$       IF attrib is not "clsobj" AND attrib is not "callback" and attrib is not "callbacksink" and attrib is not "delegatesink" and attrib is not "filter" and name is not "IObject"

$           IF class.attrib is "singleton"
    static _ELASTOS ECode AcquireSingletonInRegime($^
$           ELSE
    static _ELASTOS ECode NewInRegime($^
$           END IF ;; is singleton
/* [in] */ IRegime* pRegime,/* [out] */ ${name}** pp${name})
    {

        return _CObject_CreateInstance(ECLSID_${class.name},pRegime,EIID_${name},(IInterface**)pp${name});
        
    }


$           IF class.attrib is "singleton"
    static _ELASTOS ECode AcquireSingleton($^
$           ELSE
    static _ELASTOS ECode New($^
$           END IF ;; is singleton
/* [out] */ ${name}** pp${name})
    {
        return _CObject_CreateInstance(ECLSID_${class.name},RGM_SAME_DOMAIN,EIID_${name},(PInterface*)pp${name});
    }
$
$       END IF ;; attrib is not clsobj and is not callback and ...
$   END DO ;; all interfaces
$   END IF ;; not hasctor OR hasdefaultctor
$
$   IF attrib is "hasctor"
$   WITH all interfaces DO
$       IF attrib is "clsobj"
$           WITH all methods DO
$               IF attrib is not "defaultctor"
$                   WITH all interfaces DO
$                       IF attrib is not "clsobj" AND attrib is not "callback" and attrib is not "callbacksink" and attrib is not "delegatesink" and attrib is not "filter" and name is not "IObject"

$                           IF class.attrib is "singleton"
    static _ELASTOS ECode AcquireSingletonInRegime($^
$                           ELSE
    static _ELASTOS ECode NewInRegime($^
$                           END IF ;; is singleton
/* [in] */ PInterface __pRegime$^
$                           WITH all parameters DO
,$^
$                               IF parameter is not last
/* [${attrib}] */ ${ParamNamespaceType(type)} ${prefixingname(parameter)}$^
$                               ELSE
/* [out] */ ${interface.name}** __pp${interface.name})
$                               END IF ;; parameter is not last
$                           END DO ;; all parameters
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = $^
$                           IF class.attrib is "singleton"
_AcquireSingletonInRegime($^
$                           ELSE
_NewInRegime($^
$                           END IF ;; is singleton
pRegime$^
$                           WITH all parameters DO
, $^
$                               IF parameter is not last
${prefixingname(parameter)}$^
$                               ELSE
&__pNewObj);
$                               END IF ;; parameter is not last
$                           END DO ;; all parameters
        if (FAILED(ec)) return ec;

        *__pp${name} = ${name}::Probe(__pNewObj);
        if (*__pp${name}) (*__pp${name})->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

$                           IF class.attrib is "singleton"
    static _ELASTOS ECode AcquireSingleton($^
$                           ELSE
    static _ELASTOS ECode New($^
$                           END IF ;; is singleton
$                           WITH all parameters DO
$                               IF parameter is not last
/* [${attrib}] */ ${ParamNamespaceType(type)} ${prefixingname(parameter)},
$                               ELSE
/* [out] */ ${interface.name}** __pp${interface.name})
$                               END IF ;; parameter is not last
$                           END DO ;; all parameters
    {
        return $^
$                           IF class.attrib is "singleton"
AcquireSingletonInRegime($^
$                           ELSE
NewInRegime($^
$                           END IF ;; is singleton
RGM_SAME_DOMAIN$^
$                           WITH all parameters DO
, $^
$                               IF parameter is not last
${prefixingname(parameter)}$^
$                               ELSE
__pp${interface.name});
$                               END IF ;; parameter is not last
$                           END DO ;; all parameters
    }
$                       END IF ;; attrib is not clsobj and is not callback and ...
$                   END DO ;; all interfaces
$               END IF ;; is not defaultctor
$           END DO ;; all methods
$       END IF ;; is clsobj
$   END DO ;; all interfaces
$   END IF ;; attrib is hasctor
$
$ ELSE ;; !(is not aspect)
$
    CAR_INLINE static _ELASTOS ECode Attach(/* [in] */ IInterface* pObject)
    {
        return _CObject_AttachAspect(pObject, ECLSID_${name});
    }

    CAR_INLINE static _ELASTOS ECode Detach(/* [in] */ IInterface* pObject)
    {
        return _CObject_DetachAspect(pObject, ECLSID_${name});
    }
$
$ END IF ;; is not aspect
