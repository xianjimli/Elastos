module Elastos.Framework.Core.eco
{
    importlib("Elastos.Core.eco");
    importlib("Elastos.Utility.eco");
    importlib("Elastos.IO.eco");
    importlib("Elastos.Xml.eco"); 

    interface IDescribable;
    interface IComparable;
    interface IAttributeSet;
    interface ICompatibilityInfo;
    interface IDisplayMetrics;
    interface IDisplayMetricsHelper;
    interface ITypedValue;
    interface ITypedValueHelper;
    interface IObjectIntegerMap;
    interface IPoolable;
    interface IPool;
    interface IPoolableManager;
    interface IApartment;
    interface IApartmentHelper;
    interface IClassLoader;
    interface IBinderDeathRecipient;
    interface IBinder;
    interface IBatteryStats;
    interface IBatteryStatsUid;
    interface IBatteryStatsUidProc;
    interface IBatteryStatsUidCap;
    interface IBatteryStatsUidCapServ;
    interface IParcelFileDescriptor;
    interface IParcelFileDescriptorHelper;
    interface IBundle;
    interface IServiceManager;
    interface IPatternMatcher;
    interface IFileObserver;
    interface IVibrator;
    interface IWorkSource;
    interface IResultReceiver;
    interface IMountServiceListener;
    interface IMountShutdownObserver;
    interface IObbActionListener;
    interface IMountService;
    interface IHandlerCallback;
    interface IHandler;
    interface IMessage;
    interface IUri;
    interface ICredentials;
    interface ILocalSocketAddress;
    interface ILocalSocket;
    interface INetworkInfo;
    interface ILocalConnectivityManager;
    interface ILocalConnectivityManagerHelper;
    interface IConnectivityManager;
    interface IHeaderCallback;
    interface IHeaders;
    interface IDName;
    interface ISslCertificate;
    interface IHttpAuthHandler;
    interface ISslError;
    interface IWebAddress;
    interface ISQLiteClosable;
    interface ISQLiteProgram;
    interface ICursor;
    interface ICursorFactory;
    interface ISQLiteCursorDriver;
    interface ISQLiteQuery;
    interface ISQLiteStatement;
    interface ISQLiteTransactionListener;
    interface IContentValues;
    interface ISQLiteDatabase;
    interface ISQLiteDatabaseHelper;
    interface ISQLiteOpenHelper;
    interface ISQLiteQueryBuilder;
    interface ICharArrayBuffer;
    interface ILocalContentObserver;
    interface IDataSetObserver;
    interface IContentResolver;
    interface IContentObserver;
    interface IObservable;
    interface IDataSetObservable;
    interface IContentObservable;
    interface ICursorWrapper;
    interface ICursorWindow;
    interface ICursorJoiner;
    interface IBulkCursor;
    interface ICrossProcessCursor;
    interface IAbstractWindowedCursor;
    interface IMergeCursor;
    interface IRowBuilder;
    interface IMatrixCursor;
    interface IBulkCursorToCursorAdaptor;
    interface ICursorToBulkCursorAdaptor;
    interface ISQLiteCursor;
    interface IRect;
    interface IRegion;
    interface ICanvas;
    interface IWindowManagerLayoutParams;
    interface IMotionEvent;
    interface ITranslator;
    interface ICompatibilityInfoHelper;
    interface IColorStateList;
    interface IAssetFileDescriptor;
    interface ITypedArray;
    interface IDrawable;
    interface IMovie;
    interface IXmlResourceParser;
    interface IConfiguration;
    interface IAssetManager;
    interface IDisplay;
    interface ITheme;
    interface IResources;
    interface IResourcesFactory;
    interface IAssetInputStream;
    interface ICapsuleManager;
    interface ICapsuleItemInfo;
    interface IApplicationInfo;
    interface IComponentInfo;
    interface IActivityInfo;
    interface IServiceInfo;
    interface IPathPermission;
    interface IContentProviderInfo;
    interface IAuthorInfo;
    interface IIntentFilter;
    interface IResolveInfo;
    interface IInstrumentationInfo;
    interface IPermissionInfo;
    interface ISignature;
    interface IConfigurationInfo;
    interface IFeatureInfo;
    interface ICapsuleInfo;
    interface ICapsuleInfoLite;
    interface IPermissionGroupInfo;
    interface IParceledListSlice;
    interface ICapsuleInstallObserver;
    interface ICapsuleDeleteObserver;
    interface ICapsuleDataObserver;
    interface ICapsuleStats;
    interface ICapsuleStatsObserver;
    interface ICapsuleMoveObserver;
    interface IComponentName;
    interface IIntent;
    interface IIntentSender;
    interface IServiceConnection;
    interface IContext;
    interface IContextWrapper;
    interface IOpenResourceIdResult;
    interface IContentProvider;
    interface IIntentReceiver;
    interface IOnFinished;
    interface IBroadcastReceiver;
    interface IComponentCallbacks;
    interface IIntentFilterComparison;
    interface IComponentNameHelper;
    interface IAuthorityEntry;
    interface IDialogInterface;
    interface IKeyEvent;
    interface IDialogInterfaceOnCancelListener;
    interface IDialogInterfaceOnDismissListener;
    interface IDialogInterfaceOnShowListener;
    interface IDialogInterfaceOnClickListener;
    interface IDialogInterfaceOnMultiChoiceClickListener;
    interface IDialogInterfaceOnKeyListener;
    interface IContextThemeWrapper;
    interface IApplicationApartment;
    interface IPoint;
    interface IRectF;
    interface IPath;
    interface IPaint;
    interface IBitmap;
    interface IMatrix;
    interface IBitmapFactoryOptions;
    interface IBitmapFactory;
    interface IShader;
    interface IXfermode;
    interface IPathEffect;
    interface IDashPathEffect;
    interface IMaskFilter;
    interface ITypeface;
    interface ITypefaceFactory;
    interface IRasterizer;
    interface IColorFilter;
    interface IPaintFontMetrics;
    interface IPaintFontMetricsInt;
    interface IDrawFilter;
    interface IPicture;
    interface IGL;
    interface INinePatch;
    interface IDrawableCallback;
    interface IDrawableConstantState;
    interface IBitmapState;
    interface IBitmapDrawable;
    interface INinePatchDrawable;
    interface IColorState;
    interface IColorDrawable;
    interface IDrawableContainer;
    interface IStateListDrawable;
    interface IAnimatable;
    interface IAnimatedRotateDrawable;
    interface ILayerDrawable;
    interface IGradientState;
    interface IGradientDrawable;
    interface IClipState;
    interface IClipDrawable;
    interface IAnimationDrawable;
    interface IShape;
    interface IShaderFactory;
    interface IShapeDrawable;
    interface IRotateDrawable;
    interface IInsetDrawable;
    interface IScaleDrawable;
    interface ITransitionDrawable;
    interface ILevelListDrawable;
    interface IPaintDrawable;
    interface IPictureDrawable;
    interface IAbsSavedState;
    interface IMenuItem;
    interface ISubMenu;
    interface IMenuBuilderCallback;
    interface IMenuAdapter;
    interface IContextMenuInfo;
    interface ILayoutInflater;
    interface IView;
    interface IViewGroup;
    interface IMenuView;
    interface IMenu;
    interface IMenuInflater;
    interface IMenuItemView;
    interface IOnMenuItemClickListener;
    interface IContextMenu;
    interface ISurface;
    interface ISurfaceHelper;
    interface ISurfaceSession;
    interface IViewParent;
    interface IViewGroupLayoutParams;
    interface ITouchDelegate;
    interface IDispatcherState;
    interface IAccessibilityEvent;
    interface IAnimation;
    interface IViewTreeObserver;
    interface IEditorInfo;
    interface IInputConnection;
    interface IViewOnKeyListener;
    interface IViewOnTouchListener;
    interface IViewOnLongClickListener;
    interface IViewOnFocusChangeListener;
    interface IViewOnClickListener;
    interface IViewOnCreateContextMenuListener;
    interface IViewBaseSavedState;
    interface ILayoutAnimationController;
    interface IAnimationListener;
    interface IViewGroupOnHierarchyChangeListener;
    interface IViewGroupMarginLayoutParams;
    interface IViewManager;
    interface IWindowManagerLayoutParamsHelper;
    interface IWindowManager;
    interface IWindowManagerStub;
    interface IWindowState;
    interface IApplicationToken;
    interface IWindowManagerPolicy;
    interface IGravity;
    interface ISurfaceHolder;
    interface ISurfaceHolderCallback;
    interface ISurfaceHolderCallback2;
    interface IWindowCallback;
    interface IWindow;
    interface ILayoutInflaterFilter;
    interface ILayoutInflaterFactory;
    interface IOnGlobalLayoutListener;
    interface IOnPreDrawListener;
    interface IOnTouchModeChangeListener;
    interface IOnScrollChangedListener;
    interface IOnGlobalFocusChangeListener;
    interface IInternalInsetsInfo;
    interface IOnComputeInternalInsetsListener;
    interface IInterpolator;
    interface ITransformation;
    interface IAnimationSet;
    interface IGridLayoutAnimationController;
    interface IAnimationUtils;
    interface IInputDevice;
    interface IInputEvent;
    interface IKeyEventCallback;
    interface IMotionEventHelper;
    interface IAccessibilityEventSource;
    interface IExtractedText;
    interface IExtractedTextRequest;
    interface ICompletionInfo;
    interface IInputBinding;
    interface ILocalInputMethodSession;
    interface ILocalInputMethodSessionCallback;
    interface ILocalInputMethod;
    interface IInputMethodInfo;
    interface ILocalInputMethodSessionEventCallback;
    interface IInputMethodClientStub;
    interface IInputMethodCallbackStub;
    interface IInputContextStub;
    interface ILocalInputMethodManager;
    interface IInputMethodSessionStub;
    interface IInputBindResult;
    interface IInputContextCallbackStub;
    interface IInputChannel;
    interface IInputChannelHelper;
    interface IMotionRange;
    interface IInputMethodStub;
    interface IInputMethodManagerStub;
    interface IOnKeyguardExitResult;
    interface IRotationWatcher;
    interface IInnerWindow;
    interface IWindowSession;
    interface ISurfaceView;
    interface IInstrumentation;
    interface IApplication;
    interface IActivity;
    interface IActivityManager;
    interface IService;
    interface IActivityResult;
    interface IInstrumentationWatcher;
    interface IServiceConnectionInner;
    interface IPendingIntent;
    interface IRemoteViews;
    interface INotification;
    interface IThumbnailReceiver;
    interface IActivityWatcher;
    interface IActivityController;
    interface IContentProviderHolder;
    interface IWaitResult;
    interface IMemoryInfo;
    interface IObbInfo;
    interface IMediaContainerService;
    interface IRestoreSession;
    interface IBackupManager;
    interface IRestoreObserver;
    interface IDialog;
    interface IButton;
    interface IListView;
    interface IListAdapter;
    interface IOnItemSelectedListener;
    interface IAlertDialog;
    interface IAlertDialogBuilder;
    interface ITransientNotification;
    interface INotificationManager;
    interface INotificationManagerProxy;
    interface IResultInfo;
    interface IRunningAppProcessInfo;
    interface IEllipsizeCallback;
    interface ITextPaint;
    interface IDirections;
    interface ILayout;
    interface IBoringLayoutMetrics;
    interface IBoringLayout;
    interface IStaticLayout;
    interface IDynamicLayout;
    interface IGetChars;
    interface ISpanned;
    interface ISpannable;
    interface ISpannableFactory;
    interface IGraphicsOperations;
    interface INoCopySpan;
    interface ISpanWatcher;
    interface IEditable;
    interface IEditableFactory;
    interface ISpannableStringBuilder;
    interface IParagraphStyle;
    interface ILineBackgroundSpan;
    interface IAlignmentSpan;
    interface ILeadingMarginSpan;
    interface ILeadingMarginSpan2;
    interface ITabStopSpan;
    interface ICharacterStyle;
    interface ICharacterStyleHelper;
    interface IMetricAffectingSpan;
    interface IReplacementSpan;
    interface IWrapTogetherSpan;
    interface ILineHeightSpan;
    interface ILineHeightSpanWithDensity;
    interface IUpdateAppearance;
    interface IUpdateLayout;
    interface IParcelableSpan;
    interface IClickableSpan;
    interface IURLSpan;
    interface IBackgroundColorSpan;
    interface IForegroundColorSpan;
    interface IUnderlineSpan;
    interface IKeyListener;
    interface ITransformationMethod;
    interface ITextView;
    interface IMovementMethod;
    interface ITextKeyListener;
    interface IQwertyKeyListener;
    interface IClipboardManager;
    interface IScrollBarDrawable;
    interface IFrameLayoutLayoutParams;
    interface IFrameLayout;
    interface IImageView;
    interface ILinearLayoutLayoutParams;
    interface ILinearLayout;
    interface IRelativeLayoutLayoutParams;
    interface IRelativeLayout;
    interface IAbsoluteLayoutLayoutParams;
    interface IAbsoluteLayout;
    interface ITableRowLayoutParams;
    interface ITableRow;
    interface ITableLayoutLayoutParams;
    interface ITableLayout;
    interface IOnEditorActionListener;
    interface ITextViewSavedState;
    interface IEditText;
    interface IOnItemClickListener;
    interface IValidator;
    interface IAutoCompleteTextView;
    interface IAdapter;
    interface IAdapterView;
    interface IOnItemLongClickListener;
    interface IAbsListView;
    interface IOnScrollListener;
    interface IAbsListViewSavedState;
    interface IAbsListViewLayoutParams;
    interface IRecyclerListener;
    interface ISectionIndexer;
    interface IFilterListener;
    interface IFilterResults;
    interface IFilterDelayer;
    interface IFilter;
    interface ITextWatcher;
    interface IImageButton;
    interface ICompoundButton;
    interface ICompoundButtonOnCheckedChangeListener;
    interface ICheckBox;
    interface IRadioButton;
    interface IToggleButton;
    interface IFixedViewInfo;
    interface IListViewSavedState;
    interface IFilterable;
    interface IWrapperListAdapter;
    interface IHeaderViewListAdapter;
    interface ISpinnerAdapter;
    interface IBaseAdapter;
    interface IArrayAdapter;
    interface IViewBinder;
    interface ISimpleAdapter;
    interface ICheckable;
    interface IScrollView;
    interface IHorizontalScrollView;
    interface IAbsSpinnerSavedState;
    interface IAbsSpinner;
    interface IGalleryLayoutParams;
    interface IGallery;
    interface IPopupWindowOnDismissListener;
    interface IPopupWindow;
    interface IProgressBarSavedState;
    interface IProgressBar;
    interface ITabWidgetOnTabSelectionChanged;
    interface ITabWidget;
    interface ITabHostOnTabChangeListener;
    interface ITabHostTabContentFactory;
    interface ITabSpec;
    interface ITabHost;
    interface IRadioGroup;
    interface IRadioGroupOnCheckedChangeListener;
    interface IRadioGroupLayoutParams;
    interface IHeterogeneousExpandableList;
    interface IExpandableListAdapter;
    interface IGroupMetadata;
    interface IPositionMetadata;
    interface IExpandableListConnector;
    interface IExpandableListPosition;
    interface IExpandableListView;
    interface IOnGroupCollapseListener;
    interface IOnGroupExpandListener;
    interface IOnGroupClickListener;
    interface IOnChildClickListener;
    interface IExpandableListContextMenuInfo;
    interface IExpandableListViewSavedState;
    interface IGridView;
    interface IAbsSeekBar;
    interface IAlphabetIndexer;
    interface IAnalogClock;
    interface IBaseExpandableListAdapter;
    interface ICheckedTextView;
    interface IChronometer;
    interface IOnChronometerTickListener;
    interface IFilterQueryProvider;
    interface ICursorAdapter;
    interface IAlertControllerRecycleListView;
    interface ICursorFilterClient;
    interface ICursorFilter;
    interface ICursorTreeAdapter;
    interface INumberPicker;
    interface IOnChangedListener;
    interface IFormatter;
    interface INumberPickerButton;
    interface IDatePicker;
    interface IOnDateChangedListener;
    interface IInputMethodService;
    interface IExtractEditText;
    interface IAbstractInputMethodImpl;
    interface IAbstractInputMethodSessionImpl;
    interface IAbstractInputMethodService;
    interface IOnKeyboardActionListener;
    interface IKeyboardView;
    interface ISubMenuBuilder;
    interface IMenuItemImpl;
    interface IMenuBuilder;
    interface IMenuBuilderItemInvoker;
    interface IIconMenuItemView;
    interface IIconMenuView;
    interface IIconMenuViewLayoutParams;
    interface IExpandedMenuView;
    interface IPolicy;
    interface IPolicyManager;
    interface IStatusBarIcon;
    interface IStatusBarNotification;
    interface IStatusBar;
    interface IStatusBarIconList;
    interface IStatusBarService;
    interface IAddress;
    interface ICriteria;
    interface IGeocoderParams;
    interface ILocalGpsStatusListener;
    interface ILocalGpsStatusNmeaListener;
    interface IGpsStatus;
    interface IGpsStatusListener;
    interface IGpsStatusProvider;
    interface ILocation;
    interface ILocationListener;
    interface ILocationManager;
    interface ILocationProvider;
    interface INetInitiatedListener;
    interface ILocalLocationListener;
    interface ILocalLocationProvider;
    interface ILocalLocationManager;
    interface IGeocoder;
    interface IGpsSatellite;
    interface IStatusBarView;
    interface IFixedSizeDrawable;
    interface IBrowserFrame;
    interface IByteArrayBuilderChunk;
    interface IByteArrayBuilder;
    interface ICacheManagerCacheResult;
    interface ICacheManager;
    interface IWebSettings;
    interface IWebViewCore;
    interface IValueCallback;
    interface IWebView;
    interface IWebViewClient;
    interface IDownloadListener;
    interface IWebChromeClient;
    interface IWebBackForwardListClient;
    interface IWebViewTransport;
    interface IWebViewPictureListener;
    interface IWebViewHitTestResult;
    interface IWebViewDragTracker;
    interface IWebStorageQuotaUpdater;
    interface IGeolocationPermissionsCallback;
    interface IConsoleMessage;
    interface IJsResult;
    interface IJsPromptResult;
    interface IWebChromeClientCustomViewCallback;
    interface IWebStorage;
    interface IGeolocationPermissions;
    interface ISslErrorHandler;
    interface IWebHistoryItem;
    interface IWebBackForwardList;
    interface ICallbackProxy;
    interface ICookieManager;
    interface ICookieSyncManager;
    interface IDateSorter;
    interface IDebugFlags;
    interface IPluginPreferencesClickHandler;
    interface IPlugin;
    interface IPluginData;
    interface IPluginList;
    interface IPluginStub;
    interface IURLUtil;
    interface IUrlInterceptHandler;
    interface IUrlInterceptRegistry;
    interface IWebViewDatabase;
    interface IWebIconDatabaseIconListener;
    interface IWebIconDatabase;
    interface IPluginManager;
    interface IMockGeolocation;
    interface IMimeTypeMap;

    enum ApartmentAttr {
        ApartmentAttr_Current = 0x00000001,
        ApartmentAttr_New = 0x00000002,
    }

    enum LocalSocketAddressNamespace {
        LocalSocketAddressNamespace_ABSTRACT = 0,
        LocalSocketAddressNamespace_RESERVED = 1,
        LocalSocketAddressNamespace_FILESYSTEM = 2,
    }

    enum NetworkInfoState {
        NetworkInfoState_CONNECTING = 0,
        NetworkInfoState_CONNECTED = 1,
        NetworkInfoState_SUSPENDED = 2,
        NetworkInfoState_DISCONNECTING = 3,
        NetworkInfoState_DISCONNECTED = 4,
        NetworkInfoState_UNKNOWN = 5,
    }

    enum NetworkInfoDetailedState {
        NetworkInfoDetailedState_IDLE = 0,
        NetworkInfoDetailedState_SCANNING = 1,
        NetworkInfoDetailedState_CONNECTING = 2,
        NetworkInfoDetailedState_AUTHENTICATING = 3,
        NetworkInfoDetailedState_OBTAINING_IPADDR = 4,
        NetworkInfoDetailedState_CONNECTED = 5,
        NetworkInfoDetailedState_SUSPENDED = 6,
        NetworkInfoDetailedState_DISCONNECTING = 7,
        NetworkInfoDetailedState_DISCONNECTED = 8,
        NetworkInfoDetailedState_FAILED = 9,
    }

    enum CursorJoinerResult {
        CursorJoinerResult_RIGHT = 0,
        CursorJoinerResult_LEFT = 1,
        CursorJoinerResult_BOTH = 2,
    }

    enum RegionOp {
        RegionOp_DIFFERENCE = 0x00000000,
        RegionOp_INTERSECT = 0x00000001,
        RegionOp_UNION = 0x00000002,
        RegionOp_XOR = 0x00000003,
        RegionOp_REVERSE_DIFFERENCE = 0x00000004,
        RegionOp_REPLACE = 0x00000005,
    }

    enum BitmapConfig {
        BitmapConfig_ALPHA_8 = 0x00000002,
        BitmapConfig_RGB_565 = 0x00000004,
        BitmapConfig_ARGB_4444 = 0x00000005,
        BitmapConfig_ARGB_8888 = 0x00000006,
    }

    enum BitmapCompressFormat {
        BitmapCompressFormat_JPEG = 0x00000000,
        BitmapCompressFormat_PNG = 0x00000001,
    }

    enum ShaderTileMode {
        ShaderTileMode_CLAMP = 0,
        ShaderTileMode_REPEAT = 1,
        ShaderTileMode_MIRROR = 2,
    }

    enum PaintStyle {
        PaintStyle_FILL = 0x00000000,
        PaintStyle_STROKE = 0x00000001,
        PaintStyle_FILL_AND_STROKE = 0x00000002,
    }

    enum PaintCap {
        PaintCap_BUTT = 0x00000000,
        PaintCap_ROUND = 0x00000001,
        PaintCap_SQUARE = 0x00000002,
    }

    enum PaintJoin {
        PaintJoin_MITER = 0x00000000,
        PaintJoin_ROUND = 0x00000001,
        PaintJoin_BEVEL = 0x00000002,
    }

    enum PaintAlign {
        PaintAlign_LEFT = 0x00000000,
        PaintAlign_CENTER = 0x00000001,
        PaintAlign_RIGHT = 0x00000002,
    }

    enum MatrixScaleToFit {
        MatrixScaleToFit_FILL = 0,
        MatrixScaleToFit_START = 1,
        MatrixScaleToFit_CENTER = 2,
        MatrixScaleToFit_END = 3,
    }

    enum PathFillType {
        PathFillType_WINDING = 0,
        PathFillType_EVEN_ODD = 1,
        PathFillType_INVERSE_WINDING = 2,
        PathFillType_INVERSE_EVEN_ODD = 3,
    }

    enum PathDirection {
        PathDirection_CW = 0,
        PathDirection_CCW = 1,
    }

    enum PorterDuffMode {
        PorterDuffMode_CLEAR = 0x00000000,
        PorterDuffMode_SRC = 0x00000001,
        PorterDuffMode_DST = 0x00000002,
        PorterDuffMode_SRC_OVER = 0x00000003,
        PorterDuffMode_DST_OVER = 0x00000004,
        PorterDuffMode_SRC_IN = 0x00000005,
        PorterDuffMode_DST_IN = 0x00000006,
        PorterDuffMode_SRC_OUT = 0x00000007,
        PorterDuffMode_DST_OUT = 0x00000008,
        PorterDuffMode_SRC_ATOP = 0x00000009,
        PorterDuffMode_DST_ATOP = 0x0000000a,
        PorterDuffMode_XOR = 0x0000000b,
        PorterDuffMode_DARKEN = 0x0000000c,
        PorterDuffMode_LIGHTEN = 0x0000000d,
        PorterDuffMode_MULTIPLY = 0x0000000e,
        PorterDuffMode_SCREEN = 0x0000000f,
    }

    enum CanvasEdgeType {
        CanvasEdgeType_BW = 0x00000000,
        CanvasEdgeType_AA = 0x00000001,
    }

    enum CanvasVertexMode {
        CanvasVertexMode_TRIANGLES = 0x00000000,
        CanvasVertexMode_TRIANGLE_STRIP = 0x00000001,
        CanvasVertexMode_TRIANGLE_FAN = 0x00000002,
    }

    enum GradientDrawableOrientation {
        GradientDrawableOrientation_TOP_BOTTOM = 0,
        GradientDrawableOrientation_TR_BL = 1,
        GradientDrawableOrientation_RIGHT_LEFT = 2,
        GradientDrawableOrientation_BR_TL = 3,
        GradientDrawableOrientation_BOTTOM_TOP = 4,
        GradientDrawableOrientation_BL_TR = 5,
        GradientDrawableOrientation_LEFT_RIGHT = 6,
        GradientDrawableOrientation_TL_BR = 7,
    }

    enum TextUtilsTruncateAt {
        TextUtilsTruncateAt_START = 0,
        TextUtilsTruncateAt_MIDDLE = 1,
        TextUtilsTruncateAt_END = 2,
        TextUtilsTruncateAt_MARQUEE = 3,
    }

    enum LayoutAlignment {
        LayoutAlignment_ALIGN_NORMAL = 0,
        LayoutAlignment_ALIGN_OPPOSITE = 1,
        LayoutAlignment_ALIGN_CENTER = 2,
    }

    enum Capitalize {
        Capitalize_NONE = 0,
        Capitalize_SENTENCES = 1,
        Capitalize_WORDS = 2,
        Capitalize_CHARACTERS = 3,
    }

    enum ImageViewScaleType {
        ImageViewScaleType_MATRIX = 0,
        ImageViewScaleType_FIT_XY = 1,
        ImageViewScaleType_FIT_START = 2,
        ImageViewScaleType_FIT_CENTER = 3,
        ImageViewScaleType_FIT_END = 4,
        ImageViewScaleType_CENTER = 5,
        ImageViewScaleType_CENTER_CROP = 6,
        ImageViewScaleType_CENTER_INSIDE = 7,
    }

    enum BufferType {
        BufferType_NORMAL = 0,
        BufferType_SPANNABLE = 1,
        BufferType_EDITABLE = 2,
    }

    const DisplayMetrics_DENSITY_LOW = 120;

    const DisplayMetrics_DENSITY_MEDIUM = 160;

    const DisplayMetrics_DENSITY_HIGH = 240;

    const DisplayMetrics_DENSITY_XHIGH = 320;

    const DisplayMetrics_DENSITY_DEFAULT = 160;

    const TypedValue_TYPE_NULL = 0x00000000;

    const TypedValue_TYPE_REFERENCE = 0x00000001;

    const TypedValue_TYPE_ATTRIBUTE = 0x00000002;

    const TypedValue_TYPE_STRING = 0x00000003;

    const TypedValue_TYPE_FLOAT = 0x00000004;

    const TypedValue_TYPE_DIMENSION = 0x00000005;

    const TypedValue_TYPE_FRACTION = 0x00000006;

    const TypedValue_TYPE_FIRST_INT = 0x00000010;

    const TypedValue_TYPE_INT_DEC = 0x00000010;

    const TypedValue_TYPE_INT_HEX = 0x00000011;

    const TypedValue_TYPE_INT_BOOLEAN = 0x00000012;

    const TypedValue_TYPE_FIRST_COLOR_INT = 0x0000001c;

    const TypedValue_TYPE_INT_COLOR_ARGB8 = 0x0000001c;

    const TypedValue_TYPE_INT_COLOR_RGB8 = 0x0000001d;

    const TypedValue_TYPE_INT_COLOR_ARGB4 = 0x0000001e;

    const TypedValue_TYPE_INT_COLOR_RGB4 = 0x0000001f;

    const TypedValue_TYPE_LAST_COLOR_INT = 0x0000001f;

    const TypedValue_TYPE_LAST_INT = 0x0000001f;

    const TypedValue_COMPLEX_UNIT_SHIFT = 0;

    const TypedValue_COMPLEX_UNIT_MASK = 0x0000000f;

    const TypedValue_COMPLEX_UNIT_PX = 0;

    const TypedValue_COMPLEX_UNIT_DIP = 1;

    const TypedValue_COMPLEX_UNIT_SP = 2;

    const TypedValue_COMPLEX_UNIT_PT = 3;

    const TypedValue_COMPLEX_UNIT_IN = 4;

    const TypedValue_COMPLEX_UNIT_MM = 5;

    const TypedValue_COMPLEX_UNIT_FRACTION = 0;

    const TypedValue_COMPLEX_UNIT_FRACTION_PARENT = 1;

    const TypedValue_COMPLEX_RADIX_SHIFT = 4;

    const TypedValue_COMPLEX_RADIX_MASK = 0x00000003;

    const TypedValue_COMPLEX_RADIX_23p0 = 0;

    const TypedValue_COMPLEX_RADIX_16p7 = 1;

    const TypedValue_COMPLEX_RADIX_8p15 = 2;

    const TypedValue_COMPLEX_RADIX_0p23 = 3;

    const TypedValue_COMPLEX_MANTISSA_SHIFT = 8;

    const TypedValue_COMPLEX_MANTISSA_MASK = 0x00ffffff;

    const TypedValue_DENSITY_DEFAULT = 0;

    const TypedValue_DENSITY_NONE = 0x0000ffff;

    const ParcelFileDescriptor_MODE_WORLD_READABLE = 0x00000001;

    const ParcelFileDescriptor_MODE_WORLD_WRITEABLE = 0x00000002;

    const ParcelFileDescriptor_MODE_READ_ONLY = 0x10000000;

    const ParcelFileDescriptor_MODE_WRITE_ONLY = 0x20000000;

    const ParcelFileDescriptor_MODE_READ_WRITE = 0x30000000;

    const ParcelFileDescriptor_MODE_CREATE = 0x08000000;

    const ParcelFileDescriptor_MODE_TRUNCATE = 0x04000000;

    const ParcelFileDescriptor_MODE_APPEND = 0x02000000;

    const PatternMatcher_PATTERN_LITERAL = 0;

    const PatternMatcher_PATTERN_PREFIX = 1;

    const PatternMatcher_PATTERN_SIMPLE_GLOB = 2;

    const FileObserver_ACCESS = 0x00000001;

    const FileObserver_MODIFY = 0x00000002;

    const FileObserver_ATTRIB = 0x00000004;

    const FileObserver_CLOSE_WRITE = 0x00000008;

    const FileObserver_CLOSE_NOWRITE = 0x00000010;

    const FileObserver_OPEN = 0x00000020;

    const FileObserver_MOVED_FROM = 0x00000040;

    const FileObserver_MOVED_TO = 0x00000080;

    const FileObserver_CREATE = 0x00000100;

    const FileObserver_DELETE = 0x00000200;

    const FileObserver_DELETE_SELF = 0x00000400;

    const FileObserver_MOVE_SELF = 0x00000800;

    const FileObserver_ALL_EVENTS = 0x00000fff;

    const ConnectivityManager_CONNECTIVITY_ACTION = "elastos.net.conn.CONNECTIVITY_CHANGE";

    const ConnectivityManager_EXTRA_NETWORK_INFO = "networkInfo";

    const ConnectivityManager_EXTRA_IS_FAILOVER = "isFailover";

    const ConnectivityManager_EXTRA_OTHER_NETWORK_INFO = "otherNetwork";

    const ConnectivityManager_EXTRA_NO_CONNECTIVITY = "noConnectivity";

    const ConnectivityManager_EXTRA_REASON = "reason";

    const ConnectivityManager_EXTRA_EXTRA_INFO = "extraInfo";

    const ConnectivityManager_ACTION_BACKGROUND_DATA_SETTING_CHANGED = "elastos.net.conn.BACKGROUND_DATA_SETTING_CHANGED";

    const ConnectivityManager_TYPE_MOBILE = 0;

    const ConnectivityManager_TYPE_WIFI = 1;

    const ConnectivityManager_TYPE_MOBILE_MMS = 2;

    const ConnectivityManager_TYPE_MOBILE_SUPL = 3;

    const ConnectivityManager_TYPE_MOBILE_DUN = 4;

    const ConnectivityManager_TYPE_MOBILE_HIPRI = 5;

    const ConnectivityManager_TYPE_WIMAX = 6;

    const ConnectivityManager_TYPE_BLUETOOTH = 7;

    const ConnectivityManager_TYPE_DUMMY = 8;

    const ConnectivityManager_TYPE_ETHERNET = 9;

    const ConnectivityManager_MAX_RADIO_TYPE = 9;

    const ConnectivityManager_MAX_NETWORK_TYPE = 9;

    const ConnectivityManager_DEFAULT_NETWORK_PREFERENCE = 1;

    const ConnectivityManager_TETHER_ERROR_NO_ERROR = 0;

    const ConnectivityManager_TETHER_ERROR_UNKNOWN_IFACE = 1;

    const ConnectivityManager_TETHER_ERROR_SERVICE_UNAVAIL = 2;

    const ConnectivityManager_TETHER_ERROR_UNSUPPORTED = 3;

    const ConnectivityManager_TETHER_ERROR_UNAVAIL_IFACE = 4;

    const ConnectivityManager_TETHER_ERROR_MASTER_ERROR = 5;

    const ConnectivityManager_TETHER_ERROR_TETHER_IFACE_ERROR = 6;

    const ConnectivityManager_TETHER_ERROR_UNTETHER_IFACE_ERROR = 7;

    const ConnectivityManager_TETHER_ERROR_ENABLE_NAT_ERROR = 8;

    const ConnectivityManager_TETHER_ERROR_DISABLE_NAT_ERROR = 9;

    const ConnectivityManager_TETHER_ERROR_IFACE_CFG_ERROR = 10;

    const Contacts_People_CONTENT_URI = "content://contacts/people";

    const Contacts_Phones_CONTENT_URI = "content://contacts/phones";

    const Contacts_ContactMethods_CONTENT_URI = "content://contacts/people/contact_methods";

    const Contacts_PeopleColumns_NAME = "name";

    const Contacts_PeopleColumns_NOTES = "notes";

    const Contacts_PeopleColumns_CUSTOM_RINGTONE = "custom_ringtone";

    const Contacts_PeopleColumns_DISPLAY_NAME = "display_name";

    const Contacts_PeopleColumns_LAST_TIME_CONTACTED = "last_time_contacted";

    const Contacts_PeopleColumns_STARRED = "starred";

    const Contacts_PeopleColumns_TIMES_CONTACTED = "times_contacted";

    const Contacts_ContactMethodsColumns_TYPE = "type";

    const Contacts_ContactMethodsColumns_TYPE_CUSTOM = 0;

    const Contacts_ContactMethodsColumns_TYPE_HOME = 1;

    const Contacts_ContactMethodsColumns_TYPE_WORK = 2;

    const Contacts_ContactMethodsColumns_TYPE_OTHER = 3;

    const Contacts_ContactMethodsColumns_DATA = "data";

    const Contacts_ContactMethodsColumns_KIND = "kind";

    const Contacts_KIND_EMAIL = 1;

    const Contacts_KIND_POSTAL = 2;

    const Contacts_KIND_IM = 3;

    const Contacts_KIND_ORGANIZATION = 4;

    const Contacts_KIND_PHONE = 5;

    const Contacts_PhonesColumns_NUMBER = "number";

    const Contacts_PhonesColumns_TYPE = "type";

    const Contacts_PhonesColumns_ISPRIMARY = "isprimary";

    const CallLog_CONTENT_URI = "content://call_log";

    const CallLog_Calls_NEW = "new";

    const CallLog_Calls_NUMBER = "number";

    const CallLog_Calls_TYPE = "type";

    const CallLog_Calls_INCOMING_TYPE = 1;

    const CallLog_Calls_OUTGOING_TYPE = 2;

    const CallLog_Calls_MISSED_TYPE = 3;

    const CallLog_Calls_DATE = "date";

    const CallLog_Calls_DURATION = "duration";

    const BaseColumns_COUNT = "_count";

    const BaseColumns_ID = "_id";

    const SQLiteDatabase_CONFLICT_ROLLBACK = 1;

    const SQLiteDatabase_CONFLICT_ABORT = 2;

    const SQLiteDatabase_CONFLICT_FAIL = 3;

    const SQLiteDatabase_CONFLICT_IGNORE = 4;

    const SQLiteDatabase_CONFLICT_REPLACE = 5;

    const SQLiteDatabase_CONFLICT_NONE = 0;

    const SQLiteDatabase_SQLITE_MAX_LIKE_PATTERN_LENGTH = 50000;

    const SQLiteDatabase_OPEN_READWRITE = 0x00000000;

    const SQLiteDatabase_OPEN_READONLY = 0x00000001;

    const SQLiteDatabase_NO_LOCALIZED_COLLATORS = 0x00000010;

    const SQLiteDatabase_CREATE_IF_NECESSARY = 0x10000000;

    const SQLiteDatabase_MAX_SQL_CACHE_SIZE = 250;

    const AssetManager_ACCESS_UNKNOWN = 0;

    const AssetManager_ACCESS_RANDOM = 1;

    const AssetManager_ACCESS_STREAMING = 2;

    const AssetManager_ACCESS_BUFFER = 3;

    const Configuration_SCREENLAYOUT_SIZE_MASK = 0x0000000f;

    const Configuration_SCREENLAYOUT_SIZE_UNDEFINED = 0x00000000;

    const Configuration_SCREENLAYOUT_SIZE_SMALL = 0x00000001;

    const Configuration_SCREENLAYOUT_SIZE_NORMAL = 0x00000002;

    const Configuration_SCREENLAYOUT_SIZE_LARGE = 0x00000003;

    const Configuration_SCREENLAYOUT_SIZE_XLARGE = 0x00000004;

    const Configuration_SCREENLAYOUT_LONG_MASK = 0x00000030;

    const Configuration_SCREENLAYOUT_LONG_UNDEFINED = 0x00000000;

    const Configuration_SCREENLAYOUT_LONG_NO = 0x00000010;

    const Configuration_SCREENLAYOUT_LONG_YES = 0x00000020;

    const Configuration_SCREENLAYOUT_COMPAT_NEEDED = 0x10000000;

    const Configuration_TOUCHSCREEN_UNDEFINED = 0;

    const Configuration_TOUCHSCREEN_NOTOUCH = 1;

    const Configuration_TOUCHSCREEN_STYLUS = 2;

    const Configuration_TOUCHSCREEN_FINGER = 3;

    const Configuration_KEYBOARD_UNDEFINED = 0;

    const Configuration_KEYBOARD_NOKEYS = 1;

    const Configuration_KEYBOARD_QWERTY = 2;

    const Configuration_KEYBOARD_12KEY = 3;

    const Configuration_KEYBOARDHIDDEN_UNDEFINED = 0;

    const Configuration_KEYBOARDHIDDEN_NO = 1;

    const Configuration_KEYBOARDHIDDEN_YES = 2;

    const Configuration_KEYBOARDHIDDEN_SOFT = 3;

    const Configuration_HARDKEYBOARDHIDDEN_UNDEFINED = 0;

    const Configuration_HARDKEYBOARDHIDDEN_NO = 1;

    const Configuration_HARDKEYBOARDHIDDEN_YES = 2;

    const Configuration_NAVIGATION_UNDEFINED = 0;

    const Configuration_NAVIGATION_NONAV = 1;

    const Configuration_NAVIGATION_DPAD = 2;

    const Configuration_NAVIGATION_TRACKBALL = 3;

    const Configuration_NAVIGATION_WHEEL = 4;

    const Configuration_NAVIGATIONHIDDEN_UNDEFINED = 0;

    const Configuration_NAVIGATIONHIDDEN_NO = 1;

    const Configuration_NAVIGATIONHIDDEN_YES = 2;

    const Configuration_ORIENTATION_UNDEFINED = 0;

    const Configuration_ORIENTATION_PORTRAIT = 1;

    const Configuration_ORIENTATION_LANDSCAPE = 2;

    const Configuration_ORIENTATION_SQUARE = 3;

    const Configuration_UI_MODE_TYPE_MASK = 0x0000000f;

    const Configuration_UI_MODE_TYPE_UNDEFINED = 0x00000000;

    const Configuration_UI_MODE_TYPE_NORMAL = 0x00000001;

    const Configuration_UI_MODE_TYPE_DESK = 0x00000002;

    const Configuration_UI_MODE_TYPE_CAR = 0x00000003;

    const Configuration_UI_MODE_NIGHT_MASK = 0x00000030;

    const Configuration_UI_MODE_NIGHT_UNDEFINED = 0x00000000;

    const Configuration_UI_MODE_NIGHT_NO = 0x00000010;

    const Configuration_UI_MODE_NIGHT_YES = 0x00000020;

    const ActivityInfo_LAUNCH_MULTIPLE = 0;

    const ActivityInfo_LAUNCH_SINGLE_TOP = 1;

    const ActivityInfo_LAUNCH_SINGLE_TASK = 2;

    const ActivityInfo_LAUNCH_SINGLE_INSTANCE = 3;

    const ActivityInfo_FLAG_MULTIPROCESS = 0x00000001;

    const ActivityInfo_FLAG_FINISH_ON_TASK_LAUNCH = 0x00000002;

    const ActivityInfo_FLAG_CLEAR_TASK_ON_LAUNCH = 0x00000004;

    const ActivityInfo_FLAG_ALWAYS_RETAIN_TASK_STATE = 0x00000008;

    const ActivityInfo_FLAG_STATE_NOT_NEEDED = 0x00000010;

    const ActivityInfo_FLAG_EXCLUDE_FROM_RECENTS = 0x00000020;

    const ActivityInfo_FLAG_ALLOW_TASK_REPARENTING = 0x00000040;

    const ActivityInfo_FLAG_NO_HISTORY = 0x00000080;

    const ActivityInfo_FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS = 0x00000100;

    const ActivityInfo_SCREEN_ORIENTATION_UNSPECIFIED = -1;

    const ActivityInfo_SCREEN_ORIENTATION_LANDSCAPE = 0;

    const ActivityInfo_SCREEN_ORIENTATION_PORTRAIT = 1;

    const ActivityInfo_SCREEN_ORIENTATION_USER = 2;

    const ActivityInfo_SCREEN_ORIENTATION_BEHIND = 3;

    const ActivityInfo_SCREEN_ORIENTATION_SENSOR = 4;

    const ActivityInfo_SCREEN_ORIENTATION_NOSENSOR = 5;

    const ActivityInfo_SCREEN_ORIENTATION_SENSOR_LANDSCAPE = 6;

    const ActivityInfo_SCREEN_ORIENTATION_SENSOR_PORTRAIT = 7;

    const ActivityInfo_SCREEN_ORIENTATION_REVERSE_LANDSCAPE = 8;

    const ActivityInfo_SCREEN_ORIENTATION_REVERSE_PORTRAIT = 9;

    const ActivityInfo_SCREEN_ORIENTATION_FULL_SENSOR = 10;

    const ActivityInfo_CONFIG_MCC = 0x00000001;

    const ActivityInfo_CONFIG_MNC = 0x00000002;

    const ActivityInfo_CONFIG_LOCALE = 0x00000004;

    const ActivityInfo_CONFIG_TOUCHSCREEN = 0x00000008;

    const ActivityInfo_CONFIG_KEYBOARD = 0x00000010;

    const ActivityInfo_CONFIG_KEYBOARD_HIDDEN = 0x00000020;

    const ActivityInfo_CONFIG_NAVIGATION = 0x00000040;

    const ActivityInfo_CONFIG_ORIENTATION = 0x00000080;

    const ActivityInfo_CONFIG_SCREEN_LAYOUT = 0x00000100;

    const ActivityInfo_CONFIG_UI_MODE = 0x00000200;

    const ActivityInfo_CONFIG_FONT_SCALE = 0x40000000;

    const ApplicationInfo_FLAG_SYSTEM = 0x00000001;

    const ApplicationInfo_FLAG_DEBUGGABLE = 0x00000002;

    const ApplicationInfo_FLAG_HAS_CODE = 0x00000004;

    const ApplicationInfo_FLAG_PERSISTENT = 0x00000008;

    const ApplicationInfo_FLAG_FACTORY_TEST = 0x00000010;

    const ApplicationInfo_FLAG_ALLOW_TASK_REPARENTING = 0x00000020;

    const ApplicationInfo_FLAG_ALLOW_CLEAR_USER_DATA = 0x00000040;

    const ApplicationInfo_FLAG_UPDATED_SYSTEM_APP = 0x00000080;

    const ApplicationInfo_FLAG_TEST_ONLY = 0x00000100;

    const ApplicationInfo_FLAG_SUPPORTS_SMALL_SCREENS = 0x00000200;

    const ApplicationInfo_FLAG_SUPPORTS_NORMAL_SCREENS = 0x00000400;

    const ApplicationInfo_FLAG_SUPPORTS_LARGE_SCREENS = 0x00000800;

    const ApplicationInfo_FLAG_RESIZEABLE_FOR_SCREENS = 0x00001000;

    const ApplicationInfo_FLAG_SUPPORTS_SCREEN_DENSITIES = 0x00002000;

    const ApplicationInfo_FLAG_VM_SAFE_MODE = 0x00004000;

    const ApplicationInfo_FLAG_ALLOW_BACKUP = 0x00008000;

    const ApplicationInfo_FLAG_KILL_AFTER_RESTORE = 0x00010000;

    const ApplicationInfo_FLAG_RESTORE_ANY_VERSION = 0x00020000;

    const ApplicationInfo_FLAG_EXTERNAL_STORAGE = 0x00040000;

    const ApplicationInfo_FLAG_SUPPORTS_XLARGE_SCREENS = 0x00080000;

    const ApplicationInfo_FLAG_NEVER_ENCRYPT = 0x40000000;

    const ApplicationInfo_FLAG_FORWARD_LOCK = 0x20000000;

    const ApplicationInfo_FLAG_CANT_SAVE_STATE = 0x08000000;

    const CapsuleInfo_INSTALL_LOCATION_UNSPECIFIED = -1;

    const CapsuleInfo_INSTALL_LOCATION_AUTO = 0;

    const CapsuleInfo_INSTALL_LOCATION_INTERNAL_ONLY = 1;

    const CapsuleInfo_INSTALL_LOCATION_PREFER_EXTERNAL = 2;

    const ConfigurationInfo_INPUT_FEATURE_HARD_KEYBOARD = 0x00000001;

    const ConfigurationInfo_INPUT_FEATURE_FIVE_WAY_NAV = 0x00000002;

    const ConfigurationInfo_GL_ES_VERSION_UNDEFINED = 0;

    const PermissionInfo_PROTECTION_NORMAL = 0;

    const PermissionInfo_PROTECTION_DANGEROUS = 1;

    const PermissionInfo_PROTECTION_SIGNATURE = 2;

    const PermissionInfo_PROTECTION_SIGNATURE_OR_SYSTEM = 3;

    const FeatureInfo_GL_ES_VERSION_UNDEFINED = 0;

    const FeatureInfo_FLAG_REQUIRED = 0x00000001;

    const CapsuleManager_GET_ACTIVITIES = 0x00000001;

    const CapsuleManager_GET_RECEIVERS = 0x00000002;

    const CapsuleManager_GET_SERVICES = 0x00000004;

    const CapsuleManager_GET_PROVIDERS = 0x00000008;

    const CapsuleManager_GET_INSTRUMENTATION = 0x00000010;

    const CapsuleManager_GET_INTENT_FILTERS = 0x00000020;

    const CapsuleManager_GET_SIGNATURES = 0x00000040;

    const CapsuleManager_GET_RESOLVED_FILTER = 0x00000040;

    const CapsuleManager_GET_META_DATA = 0x00000080;

    const CapsuleManager_GET_GIDS = 0x00000100;

    const CapsuleManager_GET_DISABLED_COMPONENTS = 0x00000200;

    const CapsuleManager_GET_SHARED_LIBRARY_FILES = 0x00000400;

    const CapsuleManager_GET_URI_PERMISSION_PATTERNS = 0x00000800;

    const CapsuleManager_GET_PERMISSIONS = 0x00001000;

    const CapsuleManager_GET_UNINSTALLED_CAPSULES = 0x00002000;

    const CapsuleManager_GET_CONFIGURATIONS = 0x00004000;

    const CapsuleManager_MATCH_DEFAULT_ONLY = 0x00010000;

    const CapsuleManager_PERMISSION_GRANTED = 0;

    const CapsuleManager_PERMISSION_DENIED = -1;

    const CapsuleManager_SIGNATURE_MATCH = 0;

    const CapsuleManager_SIGNATURE_NEITHER_SIGNED = 1;

    const CapsuleManager_SIGNATURE_FIRST_NOT_SIGNED = -1;

    const CapsuleManager_SIGNATURE_SECOND_NOT_SIGNED = -2;

    const CapsuleManager_SIGNATURE_NO_MATCH = -3;

    const CapsuleManager_SIGNATURE_UNKNOWN_CAPSULE = -4;

    const CapsuleManager_COMPONENT_ENABLED_STATE_DEFAULT = 0;

    const CapsuleManager_COMPONENT_ENABLED_STATE_ENABLED = 1;

    const CapsuleManager_COMPONENT_ENABLED_STATE_DISABLED = 2;

    const CapsuleManager_DONT_DELETE_DATA = 0x00000001;

    const CapsuleManager_MOVE_SUCCEEDED = 1;

    const CapsuleManager_MOVE_FAILED_INSUFFICIENT_STORAGE = -1;

    const CapsuleManager_MOVE_FAILED_DOESNT_EXIST = -2;

    const CapsuleManager_MOVE_FAILED_SYSTEM_CAPSULE = -3;

    const CapsuleManager_MOVE_FAILED_FORWARD_LOCKED = -4;

    const CapsuleManager_MOVE_FAILED_INVALID_LOCATION = -5;

    const CapsuleManager_MOVE_FAILED_INTERNAL_ERROR = -6;

    const CapsuleManager_MOVE_FAILED_OPERATION_PENDING = -7;

    const CapsuleManager_MOVE_INTERNAL = 0x00000001;

    const CapsuleManager_MOVE_EXTERNAL_MEDIA = 0x00000002;

    const Context_MODE_PRIVATE = 0x00000000;

    const Context_MODE_WORLD_READABLE = 0x00000001;

    const Context_MODE_WORLD_WRITEABLE = 0x00000002;

    const Context_MODE_APPEND = 0x00008000;

    const Context_BIND_AUTO_CREATE = 0x00000001;

    const Context_BIND_DEBUG_UNBIND = 0x00000002;

    const Context_BIND_NOT_FOREGROUND = 0x00000004;

    const Context_POWER_SERVICE = "power";

    const Context_WINDOW_SERVICE = "window";

    const Context_LAYOUT_INFLATER_SERVICE = "layout_inflater";

    const Context_ACCOUNT_SERVICE = "account";

    const Context_ACTIVITY_SERVICE = "activity";

    const Context_ALARM_SERVICE = "alarm";

    const Context_NOTIFICATION_SERVICE = "notification";

    const Context_ACCESSIBILITY_SERVICE = "accessibility";

    const Context_KEYGUARD_SERVICE = "keyguard";

    const Context_LOCATION_SERVICE = "location";

    const Context_SEARCH_SERVICE = "search";

    const Context_SENSOR_SERVICE = "sensor";

    const Context_STORAGE_SERVICE = "storage";

    const Context_WALLPAPER_SERVICE = "wallpaper";

    const Context_VIBRATOR_SERVICE = "vibrator";

    const Context_STATUS_BAR_SERVICE = "statusbar";

    const Context_CONNECTIVITY_SERVICE = "connectivity";

    const Context_THROTTLE_SERVICE = "throttle";

    const Context_NETWORKMANAGEMENT_SERVICE = "network_management";

    const Context_WIFI_SERVICE = "wifi";

    const Context_AUDIO_SERVICE = "audio";

    const Context_TELEPHONY_SERVICE = "phone";

    const Context_CLIPBOARD_SERVICE = "clipboard";

    const Context_INPUT_METHOD_SERVICE = "input_method";

    const Context_APPWIDGET_SERVICE = "appwidget";

    const Context_BACKUP_SERVICE = "backup";

    const Context_DROPBOX_SERVICE = "dropbox";

    const Context_DEVICE_POLICY_SERVICE = "device_policy";

    const Context_UI_MODE_SERVICE = "uimode";

    const Context_DOWNLOAD_SERVICE = "download";

    const Context_NFC_SERVICE = "nfc";

    const Context_SIP_SERVICE = "sip";

    const Context_USB_SERVICE = "usb";

    const Context_CONTEXT_INCLUDE_CODE = 0x00000001;

    const Context_CONTEXT_IGNORE_SECURITY = 0x00000002;

    const Context_CONTEXT_RESTRICTED = 0x00000004;

    const ContentResolver_SCHEME_CONTENT = "content";

    const ContentResolver_SCHEME_ANDROID_RESOURCE = "elastos.resource";

    const ContentResolver_SCHEME_FILE = "file";

    const Intent_ACTION_MAIN = "elastos.intent.action.MAIN";

    const Intent_ACTION_SCREEN_OFF = "elastos.intent.action.SCREEN_OFF";

    const Intent_ACTION_SCREEN_ON = "elastos.intent.action.SCREEN_ON";

    const Intent_ACTION_USER_PRESENT = "elastos.intent.action.USER_PRESENT";

    const Intent_ACTION_TIME_TICK = "elastos.intent.action.TIME_TICK";

    const Intent_ACTION_TIME_CHANGED = "elastos.intent.action.TIME_SET";

    const Intent_ACTION_DATE_CHANGED = "elastos.intent.action.DATE_CHANGED";

    const Intent_ACTION_TIMEZONE_CHANGED = "elastos.intent.action.TIMEZONE_CHANGED";

    const Intent_ACTION_ALARM_CHANGED = "elastos.intent.action.ALARM_CHANGED";

    const Intent_ACTION_SYNC_STATE_CHANGED = "elastos.intent.action.SYNC_STATE_CHANGED";

    const Intent_ACTION_BOOT_COMPLETED = "elastos.intent.action.BOOT_COMPLETED";

    const Intent_ACTION_CLOSE_SYSTEM_DIALOGS = "elastos.intent.action.CLOSE_SYSTEM_DIALOGS";

    const Intent_ACTION_CAPSULE_INSTALL = "elastos.intent.action.CAPSULE_INSTALL";

    const Intent_ACTION_CAPSULE_ADDED = "elastos.intent.action.CAPSULE_ADDED";

    const Intent_ACTION_CAPSULE_REPLACED = "elastos.intent.action.CAPSULE_REPLACED";

    const Intent_ACTION_CAPSULE_REMOVED = "elastos.intent.action.CAPSULE_REMOVED";

    const Intent_ACTION_CAPSULE_CHANGED = "elastos.intent.action.CAPSULE_CHANGED";

    const Intent_ACTION_QUERY_CAPSULE_RESTART = "elastos.intent.action.QUERY_CAPSULE_RESTART";

    const Intent_ACTION_CAPSULE_RESTARTED = "elastos.intent.action.CAPSULE_RESTARTED";

    const Intent_ACTION_CAPSULE_DATA_CLEARED = "elastos.intent.action.CAPSULE_DATA_CLEARED";

    const Intent_ACTION_UID_REMOVED = "elastos.intent.action.UID_REMOVED";

    const Intent_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE = "elastos.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE";

    const Intent_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE = "elastos.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE";

    const Intent_ACTION_WALLPAPER_CHANGED = "elastos.intent.action.WALLPAPER_CHANGED";

    const Intent_ACTION_CONFIGURATION_CHANGED = "elastos.intent.action.CONFIGURATION_CHANGED";

    const Intent_ACTION_LOCALE_CHANGED = "elastos.intent.action.LOCALE_CHANGED";

    const Intent_ACTION_BATTERY_CHANGED = "elastos.intent.action.BATTERY_CHANGED";

    const Intent_ACTION_BATTERY_LOW = "elastos.intent.action.BATTERY_LOW";

    const Intent_ACTION_BATTERY_OKAY = "elastos.intent.action.BATTERY_OKAY";

    const Intent_ACTION_POWER_CONNECTED = "elastos.intent.action.Intent_ACTION_POWER_CONNECTED";

    const Intent_ACTION_POWER_DISCONNECTED = "elastos.intent.action.Intent_ACTION_POWER_DISCONNECTED";

    const Intent_ACTION_SHUTDOWN = "elastos.intent.action.Intent_ACTION_SHUTDOWN";

    const Intent_ACTION_REQUEST_SHUTDOWN = "elastos.intent.action.Intent_ACTION_REQUEST_SHUTDOWN";

    const Intent_ACTION_DEVICE_STORAGE_LOW = "elastos.intent.action.DEVICE_STORAGE_LOW";

    const Intent_ACTION_DEVICE_STORAGE_OK = "elastos.intent.action.DEVICE_STORAGE_OK";

    const Intent_ACTION_DEVICE_STORAGE_FULL = "elastos.intent.action.DEVICE_STORAGE_FULL";

    const Intent_ACTION_DEVICE_STORAGE_NOT_FULL = "elastos.intent.action.DEVICE_STORAGE_NOT_FULL";

    const Intent_ACTION_MANAGE_CAPSULE_STORAGE = "elastos.intent.action.MANAGE_CAPSULE_STORAGE";

    const Intent_ACTION_UMS_CONNECTED = "elastos.intent.action.UMS_CONNECTED";

    const Intent_ACTION_UMS_DISCONNECTED = "elastos.intent.action.UMS_DISCONNECTED";

    const Intent_ACTION_MEDIA_REMOVED = "elastos.intent.action.MEDIA_REMOVED";

    const Intent_ACTION_MEDIA_UNMOUNTED = "elastos.intent.action.MEDIA_UNMOUNTED";

    const Intent_ACTION_MEDIA_CHECKING = "elastos.intent.action.MEDIA_CHECKING";

    const Intent_ACTION_MEDIA_NOFS = "elastos.intent.action.MEDIA_NOFS";

    const Intent_ACTION_MEDIA_MOUNTED = "elastos.intent.action.MEDIA_MOUNTED";

    const Intent_ACTION_MEDIA_SHARED = "elastos.intent.action.MEDIA_SHARED";

    const Intent_ACTION_MEDIA_UNSHARED = "elastos.intent.action.MEDIA_UNSHARED";

    const Intent_ACTION_MEDIA_BAD_REMOVAL = "elastos.intent.action.MEDIA_BAD_REMOVAL";

    const Intent_ACTION_MEDIA_UNMOUNTABLE = "elastos.intent.action.MEDIA_UNMOUNTABLE";

    const Intent_ACTION_MEDIA_EJECT = "elastos.intent.action.MEDIA_EJECT";

    const Intent_ACTION_MEDIA_SCANNER_STARTED = "elastos.intent.action.MEDIA_SCANNER_STARTED";

    const Intent_ACTION_MEDIA_SCANNER_FINISHED = "elastos.intent.action.MEDIA_SCANNER_FINISHED";

    const Intent_ACTION_MEDIA_SCANNER_SCAN_FILE = "elastos.intent.action.MEDIA_SCANNER_SCAN_FILE";

    const Intent_ACTION_MEDIA_BUTTON = "elastos.intent.action.MEDIA_BUTTON";

    const Intent_ACTION_CAMERA_BUTTON = "elastos.intent.action.CAMERA_BUTTON";

    const Intent_ACTION_GTALK_SERVICE_CONNECTED = "elastos.intent.action.GTALK_CONNECTED";

    const Intent_ACTION_GTALK_SERVICE_DISCONNECTED = "elastos.intent.action.GTALK_DISCONNECTED";

    const Intent_ACTION_INPUT_METHOD_CHANGED = "elastos.intent.action.INPUT_METHOD_CHANGED";

    const Intent_ACTION_AIRPLANE_MODE_CHANGED = "elastos.intent.action.AIRPLANE_MODE";

    const Intent_ACTION_PROVIDER_CHANGED = "elastos.intent.action.PROVIDER_CHANGED";

    const Intent_ACTION_HEADSET_PLUG = "elastos.intent.action.HEADSET_PLUG";

    const Intent_ACTION_NEW_OUTGOING_CALL = "elastos.intent.action.NEW_OUTGOING_CALL";

    const Intent_ACTION_REBOOT = "elastos.intent.action.REBOOT";

    const Intent_ACTION_DOCK_EVENT = "elastos.intent.action.DOCK_EVENT";

    const Intent_ACTION_REMOTE_INTENT = "com.kortide.elastos.c2dm.intent.RECEIVE";

    const Intent_ACTION_PRE_BOOT_COMPLETED = "elastos.intent.action.PRE_BOOT_COMPLETED";

    const Intent_CATEGORY_DEFAULT = "elastos.intent.category.DEFAULT";

    const Intent_CATEGORY_BROWSABLE = "elastos.intent.category.BROWSABLE";

    const Intent_CATEGORY_ALTERNATIVE = "elastos.intent.category.ALTERNATIVE";

    const Intent_CATEGORY_SELECTED_ALTERNATIVE = "elastos.intent.category.SELECTED_ALTERNATIVE";

    const Intent_CATEGORY_TAB = "elastos.intent.category.TAB";

    const Intent_CATEGORY_LAUNCHER = "elastos.intent.category.LAUNCHER";

    const Intent_CATEGORY_INFO = "elastos.intent.category.INFO";

    const Intent_CATEGORY_HOME = "elastos.intent.category.HOME";

    const Intent_CATEGORY_PREFERENCE = "elastos.intent.category.PREFERENCE";

    const Intent_CATEGORY_DEVELOPMENT_PREFERENCE = "elastos.intent.category.DEVELOPMENT_PREFERENCE";

    const Intent_CATEGORY_EMBED = "elastos.intent.category.EMBED";

    const Intent_CATEGORY_MONKEY = "elastos.intent.category.MONKEY";

    const Intent_CATEGORY_TEST = "elastos.intent.category.TEST";

    const Intent_CATEGORY_UNIT_TEST = "elastos.intent.category.UNIT_TEST";

    const Intent_CATEGORY_SAMPLE_CODE = "elastos.intent.category.SAMPLE_CODE";

    const Intent_CATEGORY_OPENABLE = "elastos.intent.category.OPENABLE";

    const Intent_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST = "elastos.intent.category.FRAMEWORK_INSTRUMENTATION_TEST";

    const Intent_CATEGORY_CAR_DOCK = "elastos.intent.category.CAR_DOCK";

    const Intent_CATEGORY_DESK_DOCK = "elastos.intent.category.DESK_DOCK";

    const Intent_CATEGORY_CAR_MODE = "elastos.intent.category.CAR_MODE";

    const Intent_EXTRA_TEMPLATE = "android.intent.extra.TEMPLATE";

    const Intent_EXTRA_TEXT = "android.intent.extra.TEXT";

    const Intent_EXTRA_STREAM = "android.intent.extra.STREAM";

    const Intent_EXTRA_EMAIL = "android.intent.extra.EMAIL";

    const Intent_EXTRA_CC = "android.intent.extra.CC";

    const Intent_EXTRA_BCC = "android.intent.extra.BCC";

    const Intent_EXTRA_SUBJECT = "android.intent.extra.SUBJECT";

    const Intent_EXTRA_INTENT = "android.intent.extra.INTENT";

    const Intent_EXTRA_TITLE = "android.intent.extra.TITLE";

    const Intent_EXTRA_INITIAL_INTENTS = "android.intent.extra.INITIAL_INTENTS";

    const Intent_EXTRA_KEY_EVENT = "android.intent.extra.KEY_EVENT";

    const Intent_EXTRA_KEY_CONFIRM = "android.intent.extra.KEY_CONFIRM";

    const Intent_EXTRA_DONT_KILL_APP = "android.intent.extra.DONT_KILL_APP";

    const Intent_EXTRA_PHONE_NUMBER = "android.intent.extra.PHONE_NUMBER";

    const Intent_EXTRA_UID = "android.intent.extra.UID";

    const Intent_EXTRA_CAPSULES = "android.intent.extra.CAPSULES";

    const Intent_EXTRA_DATA_REMOVED = "android.intent.extra.DATA_REMOVED";

    const Intent_EXTRA_REPLACING = "android.intent.extra.REPLACING";

    const Intent_EXTRA_ALARM_COUNT = "android.intent.extra.ALARM_COUNT";

    const Intent_EXTRA_DOCK_STATE = "android.intent.extra.DOCK_STATE";

    const Intent_EXTRA_DOCK_STATE_UNDOCKED = 0;

    const Intent_EXTRA_DOCK_STATE_DESK = 1;

    const Intent_EXTRA_DOCK_STATE_CAR = 2;

    const METADATA_DOCK_HOME = "android.dock_home";

    const Intent_EXTRA_BUG_REPORT = "android.intent.extra.BUG_REPORT";

    const Intent_EXTRA_INSTALLER_CAPSULE_NAME = "android.intent.extra.INSTALLER_CAPSULE_NAME";

    const Intent_EXTRA_REMOTE_INTENT_TOKEN = "android.intent.extra.remote_intent_token";

    const Intent_EXTRA_CHANGED_COMPONENT_NAME = "android.intent.extra.changed_component_name";

    const Intent_EXTRA_CHANGED_COMPONENT_NAME_LIST = "android.intent.extra.changed_component_name_list";

    const Intent_EXTRA_CHANGED_CAPSULE_LIST = "android.intent.extra.changed_package_list";

    const Intent_EXTRA_CHANGED_UID_LIST = "android.intent.extra.changed_uid_list";

    const Intent_EXTRA_CLIENT_LABEL = "android.intent.extra.client_label";

    const Intent_EXTRA_CLIENT_INTENT = "android.intent.extra.client_intent";

    const Intent_FLAG_GRANT_READ_URI_PERMISSION = 0x00000001;

    const Intent_FLAG_GRANT_WRITE_URI_PERMISSION = 0x00000002;

    const Intent_FLAG_FROM_BACKGROUND = 0x00000004;

    const Intent_FLAG_DEBUG_LOG_RESOLUTION = 0x00000008;

    const Intent_FLAG_ACTIVITY_NO_HISTORY = 0x40000000;

    const Intent_FLAG_ACTIVITY_SINGLE_TOP = 0x20000000;

    const Intent_FLAG_ACTIVITY_NEW_TASK = 0x10000000;

    const Intent_FLAG_ACTIVITY_MULTIPLE_TASK = 0x08000000;

    const Intent_FLAG_ACTIVITY_CLEAR_TOP = 0x04000000;

    const Intent_FLAG_ACTIVITY_FORWARD_RESULT = 0x02000000;

    const Intent_FLAG_ACTIVITY_PREVIOUS_IS_TOP = 0x01000000;

    const Intent_FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS = 0x00800000;

    const Intent_FLAG_ACTIVITY_BROUGHT_TO_FRONT = 0x00400000;

    const Intent_FLAG_ACTIVITY_RESET_TASK_IF_NEEDED = 0x00200000;

    const Intent_FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = 0x00100000;

    const Intent_FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = 0x00080000;

    const Intent_FLAG_ACTIVITY_NO_USER_ACTION = 0x00040000;

    const Intent_FLAG_ACTIVITY_REORDER_TO_FRONT = 0x00020000;

    const Intent_FLAG_ACTIVITY_NO_ANIMATION = 0x00010000;

    const Intent_FLAG_RECEIVER_REGISTERED_ONLY = 0x40000000;

    const Intent_FLAG_RECEIVER_REPLACE_PENDING = 0x20000000;

    const Intent_FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT = 0x10000000;

    const Intent_FLAG_RECEIVER_BOOT_UPGRADE = 0x08000000;

    const Intent_IMMUTABLE_FLAGS = 0x00000003;

    const Intent_URI_INTENT_SCHEME = 1;

    const Intent_FILL_IN_ACTION = 1;

    const Intent_FILL_IN_DATA = 2;

    const Intent_FILL_IN_CATEGORIES = 4;

    const Intent_FILL_IN_COMPONENT = 8;

    const Intent_FILL_IN_PACKAGE = 16;

    const Intent_FILL_IN_SOURCE_BOUNDS = 32;

    const IntentFilter_SYSTEM_HIGH_PRIORITY = 1000;

    const IntentFilter_SYSTEM_LOW_PRIORITY = -1000;

    const IntentFilter_MATCH_CATEGORY_MASK = 0x0fff0000;

    const IntentFilter_MATCH_ADJUSTMENT_MASK = 0x0000ffff;

    const IntentFilter_MATCH_ADJUSTMENT_NORMAL = 0x00008000;

    const IntentFilter_MATCH_CATEGORY_EMPTY = 0x00100000;

    const IntentFilter_MATCH_CATEGORY_SCHEME = 0x00200000;

    const IntentFilter_MATCH_CATEGORY_HOST = 0x00300000;

    const IntentFilter_MATCH_CATEGORY_PORT = 0x00400000;

    const IntentFilter_MATCH_CATEGORY_PATH = 0x00500000;

    const IntentFilter_MATCH_CATEGORY_TYPE = 0x00600000;

    const IntentFilter_NO_MATCH_TYPE = -1;

    const IntentFilter_NO_MATCH_DATA = -2;

    const IntentFilter_NO_MATCH_ACTION = -3;

    const IntentFilter_NO_MATCH_CATEGORY = -4;

    const DialogInterface_BUTTON_POSITIVE = -1;

    const DialogInterface_BUTTON_NEGATIVE = -2;

    const DialogInterface_BUTTON_NEUTRAL = -3;

    const Bitmap_DENSITY_NONE = 0x00000000;

    const Typeface_NORMAL = 0;

    const Typeface_BOLD = 1;

    const Typeface_ITALIC = 2;

    const Typeface_BOLD_ITALIC = 3;

    const Paint_ANTI_ALIAS_FLAG = 0x00000001;

    const Paint_FILTER_BITMAP_FLAG = 0x00000002;

    const Paint_DITHER_FLAG = 0x00000004;

    const Paint_UNDERLINE_TEXT_FLAG = 0x00000008;

    const Paint_STRIKE_THRU_TEXT_FLAG = 0x00000010;

    const Paint_FAKE_BOLD_TEXT_FLAG = 0x00000020;

    const Paint_LINEAR_TEXT_FLAG = 0x00000040;

    const Paint_SUBPIXEL_TEXT_FLAG = 0x00000080;

    const Paint_DEV_KERN_TEXT_FLAG = 0x00000100;

    const Matrix_MSCALE_X = 0;

    const Matrix_MSKEW_X = 1;

    const Matrix_MTRANS_X = 2;

    const Matrix_MSKEW_Y = 3;

    const Matrix_MSCALE_Y = 4;

    const Matrix_MTRANS_Y = 5;

    const Matrix_MPERSP_0 = 6;

    const Matrix_MPERSP_1 = 7;

    const Matrix_MPERSP_2 = 8;

    const Canvas_MATRIX_SAVE_FLAG = 0x00000001;

    const Canvas_CLIP_SAVE_FLAG = 0x00000002;

    const Canvas_HAS_ALPHA_LAYER_SAVE_FLAG = 0x00000004;

    const Canvas_FULL_COLOR_LAYER_SAVE_FLAG = 0x00000008;

    const Canvas_CLIP_TO_LAYER_SAVE_FLAG = 0x00000010;

    const Canvas_ALL_SAVE_FLAG = 0x0000001f;

    const GradientDrawable_RECTANGLE = 0;

    const GradientDrawable_OVAL = 1;

    const GradientDrawable_LINE = 2;

    const GradientDrawable_RING = 3;

    const GradientDrawable_LINEAR_GRADIENT = 0;

    const GradientDrawable_RADIAL_GRADIENT = 1;

    const GradientDrawable_SWEEP_GRADIENT = 2;

    const ClipDrawable_HORIZONTAL = 1;

    const ClipDrawable_VERTICAL = 2;

    const MENU_USER_MASK = 0x0000ffff;

    const MENU_USER_SHIFT = 0;

    const MENU_CATEGORY_MASK = 0xffff0000;

    const MENU_CATEGORY_SHIFT = 16;

    const MENU_NONE = 0;

    const MENU_FIRST = 1;

    const MENU_CATEGORY_CONTAINER = 0x00010000;

    const MENU_CATEGORY_SYSTEM = 0x00020000;

    const MENU_CATEGORY_SECONDARY = 0x00030000;

    const MENU_CATEGORY_ALTERNATIVE = 0x00040000;

    const MENU_FLAG_APPEND_TO_GROUP = 0x00000001;

    const MENU_FLAG_PERFORM_NO_CLOSE = 0x00000001;

    const MENU_FLAG_ALWAYS_PERFORM_CLOSE = 0x00000002;

    const Surface_HIDDEN = 0x00000004;

    const Surface_HARDWARE = 0x00000010;

    const Surface_GPU = 0x00000028;

    const Surface_SECURE = 0x00000080;

    const Surface_NON_PREMULTIPLIED = 0x00000100;

    const Surface_PUSH_BUFFERS = 0x00000200;

    const Surface_FX_SURFACE_NORMAL = 0x00000000;

    const Surface_FX_SURFACE_BLUR = 0x00010000;

    const Surface_FX_SURFACE_DIM = 0x00020000;

    const Surface_FX_SURFACE_MASK = 0x000f0000;

    const Surface_SURFACE_HIDDEN = 0x00000001;

    const Surface_SURFACE_FROZEN = 0x00000002;

    const Surface_SURACE_FROZEN = 0x00000002;

    const Surface_SURFACE_DITHER = 0x00000004;

    const Surface_SURFACE_BLUR_FREEZE = 0x00000010;

    const Surface_ROTATION_0 = 0;

    const Surface_ROTATION_90 = 1;

    const Surface_ROTATION_180 = 2;

    const Surface_ROTATION_270 = 3;

    const Surface_FLAGS_ORIENTATION_ANIMATION_DISABLE = 0x00000001;

    const View_NO_ID = -1;

    const View_VISIBLE = 0x00000000;

    const View_INVISIBLE = 0x00000004;

    const View_GONE = 0x00000008;

    const View_VISIBILITY_MASK = 0x0000000c;

    const View_ENABLED = 0x00000000;

    const View_DISABLED = 0x00000020;

    const View_ENABLED_MASK = 0x00000020;

    const View_WILL_NOT_DRAW = 0x00000080;

    const View_DRAW_MASK = 0x00000080;

    const View_SCROLLBARS_NONE = 0x00000000;

    const View_SCROLLBARS_HORIZONTAL = 0x00000100;

    const View_SCROLLBARS_VERTICAL = 0x00000200;

    const View_SCROLLBARS_MASK = 0x00000300;

    const View_FILTER_TOUCHES_WHEN_OBSCURED = 0x00000400;

    const View_FADING_EDGE_NONE = 0x00000000;

    const View_CLICKABLE = 0x00004000;

    const View_DRAWING_CACHE_ENABLED = 0x00008000;

    const View_SAVE_DISABLED = 0x00010000;

    const View_SAVE_DISABLED_MASK = 0x00010000;

    const View_WILL_NOT_CACHE_DRAWING = 0x00020000;

    const View_FOCUSABLE_IN_TOUCH_MODE = 0x00040000;

    const View_DRAWING_CACHE_QUALITY_LOW = 0x00080000;

    const View_DRAWING_CACHE_QUALITY_HIGH = 0x00100000;

    const View_DRAWING_CACHE_QUALITY_AUTO = 0x00000000;

    const View_DRAWING_CACHE_QUALITY_MASK = 0x00180000;

    const View_LONG_CLICKABLE = 0x00200000;

    const View_DUPLICATE_PARENT_STATE = 0x00400000;

    const View_FADING_EDGE_HORIZONTAL = 0x00001000;

    const View_FADING_EDGE_VERTICAL = 0x00002000;

    const View_FADING_EDGE_MASK = 0x00003000;

    const View_SCROLLBARS_INSIDE_OVERLAY = 0;

    const View_SCROLLBARS_INSIDE_INSET = 0x01000000;

    const View_SCROLLBARS_OUTSIDE_OVERLAY = 0x02000000;

    const View_SCROLLBARS_OUTSIDE_INSET = 0x03000000;

    const View_SCROLLBARS_INSET_MASK = 0x01000000;

    const View_SCROLLBARS_OUTSIDE_MASK = 0x02000000;

    const View_SCROLLBARS_STYLE_MASK = 0x03000000;

    const View_KEEP_SCREEN_ON = 0x04000000;

    const View_SOUND_EFFECTS_ENABLED = 0x08000000;

    const View_HAPTIC_FEEDBACK_ENABLED = 0x10000000;

    const View_FOCUSABLES_ALL = 0x00000000;

    const View_FOCUSABLES_TOUCH_MODE = 0x00000001;

    const View_FOCUS_BACKWARD = 0x00000001;

    const View_FOCUS_FORWARD = 0x00000002;

    const View_FOCUS_LEFT = 0x00000011;

    const View_FOCUS_UP = 0x00000021;

    const View_FOCUS_RIGHT = 0x00000042;

    const View_FOCUS_DOWN = 0x00000082;

    const ViewGroupLayoutParams_FILL_PARENT = -1;

    const ViewGroupLayoutParams_MATCH_PARENT = -1;

    const ViewGroupLayoutParams_WRAP_CONTENT = -2;

    const ViewGroup_FOCUS_BEFORE_DESCENDANTS = 0x00020000;

    const ViewGroup_FOCUS_AFTER_DESCENDANTS = 0x00040000;

    const ViewGroup_FOCUS_BLOCK_DESCENDANTS = 0x00060000;

    const ViewGroup_PERSISTENT_NO_CACHE = 0x00000000;

    const ViewGroup_PERSISTENT_ANIMATION_CACHE = 0x00000001;

    const ViewGroup_PERSISTENT_SCROLLING_CACHE = 0x00000002;

    const ViewGroup_PERSISTENT_ALL_CACHES = 0x00000003;

    const WindowManagerLayoutParams_FIRST_APPLICATION_WINDOW = 1;

    const WindowManagerLayoutParams_TYPE_BASE_APPLICATION = 1;

    const WindowManagerLayoutParams_TYPE_APPLICATION = 2;

    const WindowManagerLayoutParams_TYPE_APPLICATION_STARTING = 3;

    const WindowManagerLayoutParams_LAST_APPLICATION_WINDOW = 99;

    const WindowManagerLayoutParams_FIRST_SUB_WINDOW = 1000;

    const WindowManagerLayoutParams_TYPE_APPLICATION_PANEL = 1000;

    const WindowManagerLayoutParams_TYPE_APPLICATION_MEDIA = 1001;

    const WindowManagerLayoutParams_TYPE_APPLICATION_SUB_PANEL = 1002;

    const WindowManagerLayoutParams_TYPE_APPLICATION_ATTACHED_DIALOG = 1003;

    const WindowManagerLayoutParams_TYPE_APPLICATION_MEDIA_OVERLAY = 1004;

    const WindowManagerLayoutParams_LAST_SUB_WINDOW = 1999;

    const WindowManagerLayoutParams_FIRST_SYSTEM_WINDOW = 2000;

    const WindowManagerLayoutParams_TYPE_STATUS_BAR = 2000;

    const WindowManagerLayoutParams_TYPE_SEARCH_BAR = 2001;

    const WindowManagerLayoutParams_TYPE_PHONE = 2002;

    const WindowManagerLayoutParams_TYPE_SYSTEM_ALERT = 2003;

    const WindowManagerLayoutParams_TYPE_KEYGUARD = 2004;

    const WindowManagerLayoutParams_TYPE_TOAST = 2005;

    const WindowManagerLayoutParams_TYPE_SYSTEM_OVERLAY = 2006;

    const WindowManagerLayoutParams_TYPE_PRIORITY_PHONE = 2007;

    const WindowManagerLayoutParams_TYPE_SYSTEM_DIALOG = 2008;

    const WindowManagerLayoutParams_TYPE_KEYGUARD_DIALOG = 2009;

    const WindowManagerLayoutParams_TYPE_SYSTEM_ERROR = 2010;

    const WindowManagerLayoutParams_TYPE_INPUT_METHOD = 2011;

    const WindowManagerLayoutParams_TYPE_INPUT_METHOD_DIALOG = 2012;

    const WindowManagerLayoutParams_TYPE_WALLPAPER = 2013;

    const WindowManagerLayoutParams_TYPE_STATUS_BAR_PANEL = 2014;

    const WindowManagerLayoutParams_TYPE_SECURE_SYSTEM_OVERLAY = 2015;

    const WindowManagerLayoutParams_LAST_SYSTEM_WINDOW = 2999;

    const WindowManagerLayoutParams_MEMORY_TYPE_NORMAL = 0;

    const WindowManagerLayoutParams_MEMORY_TYPE_HARDWARE = 1;

    const WindowManagerLayoutParams_MEMORY_TYPE_GPU = 2;

    const WindowManagerLayoutParams_MEMORY_TYPE_PUSH_BUFFERS = 3;

    const WindowManagerLayoutParams_FLAG_ALLOW_LOCK_WHILE_SCREEN_ON = 0x00000001;

    const WindowManagerLayoutParams_FLAG_DIM_BEHIND = 0x00000002;

    const WindowManagerLayoutParams_FLAG_BLUR_BEHIND = 0x00000004;

    const WindowManagerLayoutParams_FLAG_NOT_FOCUSABLE = 0x00000008;

    const WindowManagerLayoutParams_FLAG_NOT_TOUCHABLE = 0x00000010;

    const WindowManagerLayoutParams_FLAG_NOT_TOUCH_MODAL = 0x00000020;

    const WindowManagerLayoutParams_FLAG_TOUCHABLE_WHEN_WAKING = 0x00000040;

    const WindowManagerLayoutParams_FLAG_KEEP_SCREEN_ON = 0x00000080;

    const WindowManagerLayoutParams_FLAG_LAYOUT_IN_SCREEN = 0x00000100;

    const WindowManagerLayoutParams_FLAG_LAYOUT_NO_LIMITS = 0x00000200;

    const WindowManagerLayoutParams_FLAG_FULLSCREEN = 0x00000400;

    const WindowManagerLayoutParams_FLAG_FORCE_NOT_FULLSCREEN = 0x00000800;

    const WindowManagerLayoutParams_FLAG_DITHER = 0x00001000;

    const WindowManagerLayoutParams_FLAG_SECURE = 0x00002000;

    const WindowManagerLayoutParams_FLAG_SCALED = 0x00004000;

    const WindowManagerLayoutParams_FLAG_IGNORE_CHEEK_PRESSES = 0x00008000;

    const WindowManagerLayoutParams_FLAG_LAYOUT_INSET_DECOR = 0x00010000;

    const WindowManagerLayoutParams_FLAG_ALT_FOCUSABLE_IM = 0x00020000;

    const WindowManagerLayoutParams_FLAG_WATCH_OUTSIDE_TOUCH = 0x00040000;

    const WindowManagerLayoutParams_FLAG_SHOW_WHEN_LOCKED = 0x00080000;

    const WindowManagerLayoutParams_FLAG_SHOW_WALLPAPER = 0x00100000;

    const WindowManagerLayoutParams_FLAG_TURN_SCREEN_ON = 0x00200000;

    const WindowManagerLayoutParams_FLAG_DISMISS_KEYGUARD = 0x00400000;

    const WindowManagerLayoutParams_FLAG_SPLIT_TOUCH = 0x00800000;

    const WindowManagerLayoutParams_FLAG_KEEP_SURFACE_WHILE_ANIMATING = 0x10000000;

    const WindowManagerLayoutParams_FLAG_COMPATIBLE_WINDOW = 0x20000000;

    const WindowManagerLayoutParams_FLAG_SYSTEM_ERROR = 0x40000000;

    const WindowManagerLayoutParams_SOFT_INPUT_MASK_STATE = 0x0000000f;

    const WindowManagerLayoutParams_SOFT_INPUT_STATE_UNSPECIFIED = 0;

    const WindowManagerLayoutParams_SOFT_INPUT_STATE_UNCHANGED = 1;

    const WindowManagerLayoutParams_SOFT_INPUT_STATE_HIDDEN = 2;

    const WindowManagerLayoutParams_SOFT_INPUT_STATE_ALWAYS_HIDDEN = 3;

    const WindowManagerLayoutParams_SOFT_INPUT_STATE_VISIBLE = 4;

    const WindowManagerLayoutParams_SOFT_INPUT_STATE_ALWAYS_VISIBLE = 5;

    const WindowManagerLayoutParams_SOFT_INPUT_MASK_ADJUST = 0x000000f0;

    const WindowManagerLayoutParams_SOFT_INPUT_ADJUST_UNSPECIFIED = 0x00000000;

    const WindowManagerLayoutParams_SOFT_INPUT_ADJUST_RESIZE = 0x00000010;

    const WindowManagerLayoutParams_SOFT_INPUT_ADJUST_PAN = 0x00000020;

    const WindowManagerLayoutParams_SOFT_INPUT_IS_FORWARD_NAVIGATION = 0x00000100;

    const WindowManagerLayoutParams_BRIGHTNESS_OVERRIDE_NONE = -1;

    const WindowManagerLayoutParams_BRIGHTNESS_OVERRIDE_OFF = 0;

    const WindowManagerLayoutParams_BRIGHTNESS_OVERRIDE_FULL = 1;

    const WindowManagerLayoutParams_LAYOUT_CHANGED = 1;

    const WindowManagerLayoutParams_TYPE_CHANGED = 2;

    const WindowManagerLayoutParams_FLAGS_CHANGED = 4;

    const WindowManagerLayoutParams_FORMAT_CHANGED = 8;

    const WindowManagerLayoutParams_ANIMATION_CHANGED = 16;

    const WindowManagerLayoutParams_DIM_AMOUNT_CHANGED = 32;

    const WindowManagerLayoutParams_TITLE_CHANGED = 64;

    const WindowManagerLayoutParams_ALPHA_CHANGED = 128;

    const WindowManagerLayoutParams_MEMORY_TYPE_CHANGED = 256;

    const WindowManagerLayoutParams_SOFT_INPUT_MODE_CHANGED = 512;

    const WindowManagerLayoutParams_SCREEN_ORIENTATION_CHANGED = 1024;

    const WindowManagerLayoutParams_SCREEN_BRIGHTNESS_CHANGED = 2048;

    const WindowManagerLayoutParams_BUTTON_BRIGHTNESS_CHANGED = 4096;

    const WindowManagerImpl_RELAYOUT_IN_TOUCH_MODE = 0x00000001;

    const WindowManagerImpl_RELAYOUT_FIRST_TIME = 0x00000002;

    const WindowManagerImpl_ADD_FLAG_APP_VISIBLE = 0x00000002;

    const WindowManagerImpl_ADD_FLAG_IN_TOUCH_MODE = 0x00000001;

    const WindowManagerImpl_ADD_OKAY = 0;

    const WindowManagerImpl_ADD_BAD_APP_TOKEN = -1;

    const WindowManagerImpl_ADD_BAD_SUBWINDOW_TOKEN = -2;

    const WindowManagerImpl_ADD_NOT_APP_TOKEN = -3;

    const WindowManagerImpl_ADD_APP_EXITING = -4;

    const WindowManagerImpl_ADD_DUPLICATE_ADD = -5;

    const WindowManagerImpl_ADD_STARTING_NOT_NEEDED = -6;

    const WindowManagerImpl_ADD_MULTIPLE_SINGLETON = -7;

    const WindowManagerImpl_ADD_PERMISSION_DENIED = -8;

    const WindowManagerPolicy_TRANSIT_ENTER_MASK = 0x00001000;

    const WindowManagerPolicy_TRANSIT_EXIT_MASK = 0x00002000;

    const WindowManagerPolicy_TRANSIT_UNSET = -1;

    const WindowManagerPolicy_TRANSIT_NONE = 0;

    const WindowManagerPolicy_TRANSIT_ENTER = 0x00001001;

    const WindowManagerPolicy_TRANSIT_EXIT = 0x00002002;

    const WindowManagerPolicy_TRANSIT_SHOW = 0x00001003;

    const WindowManagerPolicy_TRANSIT_HIDE = 0x00002004;

    const WindowManagerPolicy_TRANSIT_PREVIEW_DONE = 5;

    const WindowManagerPolicy_TRANSIT_ACTIVITY_OPEN = 0x00001006;

    const WindowManagerPolicy_TRANSIT_ACTIVITY_CLOSE = 0x00002007;

    const WindowManagerPolicy_TRANSIT_TASK_OPEN = 0x00001008;

    const WindowManagerPolicy_TRANSIT_TASK_CLOSE = 0x00002009;

    const WindowManagerPolicy_TRANSIT_TASK_TO_FRONT = 0x0000100a;

    const WindowManagerPolicy_TRANSIT_TASK_TO_BACK = 0x0000200b;

    const WindowManagerPolicy_TRANSIT_WALLPAPER_CLOSE = 0x0000200c;

    const WindowManagerPolicy_TRANSIT_WALLPAPER_OPEN = 0x0000100d;

    const WindowManagerPolicy_TRANSIT_WALLPAPER_INTRA_OPEN = 0x0000100e;

    const WindowManagerPolicy_TRANSIT_WALLPAPER_INTRA_CLOSE = 0x0000200f;

    const Gravity_NO_GRAVITY = 0x00000000;

    const Gravity_AXIS_SPECIFIED = 0x00000001;

    const Gravity_AXIS_PULL_BEFORE = 0x00000002;

    const Gravity_AXIS_PULL_AFTER = 0x00000004;

    const Gravity_AXIS_CLIP = 0x00000008;

    const Gravity_AXIS_X_SHIFT = 0;

    const Gravity_AXIS_Y_SHIFT = 4;

    const Gravity_TOP = 0x00000030;

    const Gravity_BOTTOM = 0x00000050;

    const Gravity_LEFT = 0x00000003;

    const Gravity_RIGHT = 0x00000005;

    const Gravity_CENTER_VERTICAL = 0x00000010;

    const Gravity_FILL_VERTICAL = 0x00000070;

    const Gravity_CENTER_HORIZONTAL = 0x00000001;

    const Gravity_FILL_HORIZONTAL = 0x00000007;

    const Gravity_CENTER = 0x00000011;

    const Gravity_FILL = 0x00000077;

    const Gravity_CLIP_VERTICAL = 0x00000080;

    const Gravity_CLIP_HORIZONTAL = 0x00000008;

    const Gravity_HORIZONTAL_GRAVITY_MASK = 0x00000007;

    const Gravity_VERTICAL_GRAVITY_MASK = 0x00000070;

    const Gravity_DISPLAY_CLIP_VERTICAL = 0x10000000;

    const Gravity_DISPLAY_CLIP_HORIZONTAL = 0x01000000;

    const SurfaceHolder_SURFACE_TYPE_NORMAL = 0;

    const SurfaceHolder_SURFACE_TYPE_HARDWARE = 1;

    const SurfaceHolder_SURFACE_TYPE_GPU = 2;

    const SurfaceHolder_SURFACE_TYPE_PUSH_BUFFERS = 3;

    const Window_FEATURE_OPTIONS_PANEL = 0;

    const Window_FEATURE_NO_TITLE = 1;

    const Window_FEATURE_PROGRESS = 2;

    const Window_FEATURE_LEFT_ICON = 3;

    const Window_FEATURE_RIGHT_ICON = 4;

    const Window_FEATURE_INDETERMINATE_PROGRESS = 5;

    const Window_FEATURE_CONTEXT_MENU = 6;

    const Window_FEATURE_CUSTOM_TITLE = 7;

    const Window_FEATURE_OPENGL = 8;

    const Window_PROGRESS_VISIBILITY_ON = -1;

    const Window_PROGRESS_VISIBILITY_OFF = -2;

    const Window_PROGRESS_INDETERMINATE_ON = -3;

    const Window_PROGRESS_INDETERMINATE_OFF = -4;

    const Window_PROGRESS_START = 0;

    const Window_PROGRESS_END = 10000;

    const Window_PROGRESS_SECONDARY_START = 20000;

    const Window_PROGRESS_SECONDARY_END = 30000;

    const Animation_INFINITE = -1;

    const Animation_RESTART = 1;

    const Animation_REVERSE = 2;

    const Animation_START_ON_FIRST_FRAME = -1;

    const Animation_ABSOLUTE = 0;

    const Animation_RELATIVE_TO_SELF = 1;

    const Animation_RELATIVE_TO_PARENT = 2;

    const Animation_ZORDER_NORMAL = 0;

    const Animation_ZORDER_TOP = 1;

    const Animation_ZORDER_BOTTOM = -1;

    const Transformation_TYPE_IDENTITY = 0x00000000;

    const Transformation_TYPE_ALPHA = 0x00000001;

    const Transformation_TYPE_MATRIX = 0x00000002;

    const Transformation_TYPE_BOTH = 0x00000003;

    const LayoutAnimationController_ORDER_NORMAL = 0;

    const LayoutAnimationController_ORDER_REVERSE = 1;

    const LayoutAnimationController_ORDER_RANDOM = 2;

    const GridLayoutAnimationController_DIRECTION_LEFT_TO_RIGHT = 0x00000000;

    const GridLayoutAnimationController_DIRECTION_RIGHT_TO_LEFT = 0x00000001;

    const GridLayoutAnimationController_DIRECTION_TOP_TO_BOTTOM = 0x00000000;

    const GridLayoutAnimationController_DIRECTION_BOTTOM_TO_TOP = 0x00000002;

    const GridLayoutAnimationController_DIRECTION_HORIZONTAL_MASK = 0x00000001;

    const GridLayoutAnimationController_DIRECTION_VERTICAL_MASK = 0x00000002;

    const GridLayoutAnimationController_PRIORITY_NONE = 0;

    const GridLayoutAnimationController_PRIORITY_COLUMN = 1;

    const GridLayoutAnimationController_PRIORITY_ROW = 2;

    const KeyEvent_KEYCODE_UNKNOWN = 0;

    const KeyEvent_KEYCODE_SOFT_LEFT = 1;

    const KeyEvent_KEYCODE_SOFT_RIGHT = 2;

    const KeyEvent_KEYCODE_HOME = 3;

    const KeyEvent_KEYCODE_BACK = 4;

    const KeyEvent_KEYCODE_CALL = 5;

    const KeyEvent_KEYCODE_ENDCALL = 6;

    const KeyEvent_KEYCODE_0 = 7;

    const KeyEvent_KEYCODE_1 = 8;

    const KeyEvent_KEYCODE_2 = 9;

    const KeyEvent_KEYCODE_3 = 10;

    const KeyEvent_KEYCODE_4 = 11;

    const KeyEvent_KEYCODE_5 = 12;

    const KeyEvent_KEYCODE_6 = 13;

    const KeyEvent_KEYCODE_7 = 14;

    const KeyEvent_KEYCODE_8 = 15;

    const KeyEvent_KEYCODE_9 = 16;

    const KeyEvent_KEYCODE_STAR = 17;

    const KeyEvent_KEYCODE_POUND = 18;

    const KeyEvent_KEYCODE_DPAD_UP = 19;

    const KeyEvent_KEYCODE_DPAD_DOWN = 20;

    const KeyEvent_KEYCODE_DPAD_LEFT = 21;

    const KeyEvent_KEYCODE_DPAD_RIGHT = 22;

    const KeyEvent_KEYCODE_DPAD_CENTER = 23;

    const KeyEvent_KEYCODE_VOLUME_UP = 24;

    const KeyEvent_KEYCODE_VOLUME_DOWN = 25;

    const KeyEvent_KEYCODE_POWER = 26;

    const KeyEvent_KEYCODE_CAMERA = 27;

    const KeyEvent_KEYCODE_CLEAR = 28;

    const KeyEvent_KEYCODE_A = 29;

    const KeyEvent_KEYCODE_B = 30;

    const KeyEvent_KEYCODE_C = 31;

    const KeyEvent_KEYCODE_D = 32;

    const KeyEvent_KEYCODE_E = 33;

    const KeyEvent_KEYCODE_F = 34;

    const KeyEvent_KEYCODE_G = 35;

    const KeyEvent_KEYCODE_H = 36;

    const KeyEvent_KEYCODE_I = 37;

    const KeyEvent_KEYCODE_J = 38;

    const KeyEvent_KEYCODE_K = 39;

    const KeyEvent_KEYCODE_L = 40;

    const KeyEvent_KEYCODE_M = 41;

    const KeyEvent_KEYCODE_N = 42;

    const KeyEvent_KEYCODE_O = 43;

    const KeyEvent_KEYCODE_P = 44;

    const KeyEvent_KEYCODE_Q = 45;

    const KeyEvent_KEYCODE_R = 46;

    const KeyEvent_KEYCODE_S = 47;

    const KeyEvent_KEYCODE_T = 48;

    const KeyEvent_KEYCODE_U = 49;

    const KeyEvent_KEYCODE_V = 50;

    const KeyEvent_KEYCODE_W = 51;

    const KeyEvent_KEYCODE_X = 52;

    const KeyEvent_KEYCODE_Y = 53;

    const KeyEvent_KEYCODE_Z = 54;

    const KeyEvent_KEYCODE_COMMA = 55;

    const KeyEvent_KEYCODE_PERIOD = 56;

    const KeyEvent_KEYCODE_ALT_LEFT = 57;

    const KeyEvent_KEYCODE_ALT_RIGHT = 58;

    const KeyEvent_KEYCODE_SHIFT_LEFT = 59;

    const KeyEvent_KEYCODE_SHIFT_RIGHT = 60;

    const KeyEvent_KEYCODE_TAB = 61;

    const KeyEvent_KEYCODE_SPACE = 62;

    const KeyEvent_KEYCODE_SYM = 63;

    const KeyEvent_KEYCODE_EXPLORER = 64;

    const KeyEvent_KEYCODE_ENVELOPE = 65;

    const KeyEvent_KEYCODE_ENTER = 66;

    const KeyEvent_KEYCODE_DEL = 67;

    const KeyEvent_KEYCODE_GRAVE = 68;

    const KeyEvent_KEYCODE_MINUS = 69;

    const KeyEvent_KEYCODE_EQUALS = 70;

    const KeyEvent_KEYCODE_LEFT_BRACKET = 71;

    const KeyEvent_KEYCODE_RIGHT_BRACKET = 72;

    const KeyEvent_KEYCODE_BACKSLASH = 73;

    const KeyEvent_KEYCODE_SEMICOLON = 74;

    const KeyEvent_KEYCODE_APOSTROPHE = 75;

    const KeyEvent_KEYCODE_SLASH = 76;

    const KeyEvent_KEYCODE_AT = 77;

    const KeyEvent_KEYCODE_NUM = 78;

    const KeyEvent_KEYCODE_HEADSETHOOK = 79;

    const KeyEvent_KEYCODE_FOCUS = 80;

    const KeyEvent_KEYCODE_PLUS = 81;

    const KeyEvent_KEYCODE_MENU = 82;

    const KeyEvent_KEYCODE_NOTIFICATION = 83;

    const KeyEvent_KEYCODE_SEARCH = 84;

    const KeyEvent_KEYCODE_MEDIA_PLAY_PAUSE = 85;

    const KeyEvent_KEYCODE_MEDIA_STOP = 86;

    const KeyEvent_KEYCODE_MEDIA_NEXT = 87;

    const KeyEvent_KEYCODE_MEDIA_PREVIOUS = 88;

    const KeyEvent_KEYCODE_MEDIA_REWIND = 89;

    const KeyEvent_KEYCODE_MEDIA_FAST_FORWARD = 90;

    const KeyEvent_KEYCODE_MUTE = 91;

    const KeyEvent_KEYCODE_PAGE_UP = 92;

    const KeyEvent_KEYCODE_PAGE_DOWN = 93;

    const KeyEvent_KEYCODE_PICTSYMBOLS = 94;

    const KeyEvent_KEYCODE_SWITCH_CHARSET = 95;

    const KeyEvent_KEYCODE_BUTTON_A = 96;

    const KeyEvent_KEYCODE_BUTTON_B = 97;

    const KeyEvent_KEYCODE_BUTTON_C = 98;

    const KeyEvent_KEYCODE_BUTTON_X = 99;

    const KeyEvent_KEYCODE_BUTTON_Y = 100;

    const KeyEvent_KEYCODE_BUTTON_Z = 101;

    const KeyEvent_KEYCODE_BUTTON_L1 = 102;

    const KeyEvent_KEYCODE_BUTTON_R1 = 103;

    const KeyEvent_KEYCODE_BUTTON_L2 = 104;

    const KeyEvent_KEYCODE_BUTTON_R2 = 105;

    const KeyEvent_KEYCODE_BUTTON_THUMBL = 106;

    const KeyEvent_KEYCODE_BUTTON_THUMBR = 107;

    const KeyEvent_KEYCODE_BUTTON_START = 108;

    const KeyEvent_KEYCODE_BUTTON_SELECT = 109;

    const KeyEvent_KEYCODE_BUTTON_MODE = 110;

    const KeyEvent_MAX_KEYCODE = 84;

    const KeyEvent_ACTION_DOWN = 0;

    const KeyEvent_ACTION_UP = 1;

    const KeyEvent_ACTION_MULTIPLE = 2;

    const KeyEvent_META_ALT_ON = 0x00000002;

    const KeyEvent_META_ALT_LEFT_ON = 0x00000010;

    const KeyEvent_META_ALT_RIGHT_ON = 0x00000020;

    const KeyEvent_META_SHIFT_ON = 0x00000001;

    const KeyEvent_META_SHIFT_LEFT_ON = 0x00000040;

    const KeyEvent_META_SHIFT_RIGHT_ON = 0x00000080;

    const KeyEvent_META_SYM_ON = 0x00000004;

    const KeyEvent_FLAG_WOKE_HERE = 0x00000001;

    const KeyEvent_FLAG_SOFT_KEYBOARD = 0x00000002;

    const KeyEvent_FLAG_KEEP_TOUCH_MODE = 0x00000004;

    const KeyEvent_FLAG_FROM_SYSTEM = 0x00000008;

    const KeyEvent_FLAG_EDITOR_ACTION = 0x00000010;

    const KeyEvent_FLAG_CANCELED = 0x00000020;

    const KeyEvent_FLAG_VIRTUAL_HARD_KEY = 0x00000040;

    const KeyEvent_FLAG_LONG_PRESS = 0x00000080;

    const KeyEvent_FLAG_CANCELED_LONG_PRESS = 0x00000100;

    const KeyEvent_FLAG_TRACKING = 0x00000200;

    const KeyEvent_FLAG_START_TRACKING = 0x40000000;

    const MotionEvent_ACTION_MASK = 0x000000ff;

    const MotionEvent_ACTION_DOWN = 0;

    const MotionEvent_ACTION_UP = 1;

    const MotionEvent_ACTION_MOVE = 2;

    const MotionEvent_ACTION_CANCEL = 3;

    const MotionEvent_ACTION_OUTSIDE = 4;

    const MotionEvent_ACTION_POINTER_DOWN = 5;

    const MotionEvent_ACTION_POINTER_UP = 6;

    const MotionEvent_ACTION_POINTER_INDEX_MASK = 0x0000ff00;

    const MotionEvent_ACTION_POINTER_INDEX_SHIFT = 8;

    const MotionEvent_ACTION_POINTER_1_DOWN = 0x00000005;

    const MotionEvent_ACTION_POINTER_2_DOWN = 0x00000105;

    const MotionEvent_ACTION_POINTER_3_DOWN = 0x00000205;

    const MotionEvent_ACTION_POINTER_1_UP = 0x00000006;

    const MotionEvent_ACTION_POINTER_2_UP = 0x00000106;

    const MotionEvent_ACTION_POINTER_3_UP = 0x00000206;

    const MotionEvent_ACTION_POINTER_ID_MASK = 0x0000ff00;

    const MotionEvent_ACTION_POINTER_ID_SHIFT = 8;

    const MotionEvent_FLAG_WINDOW_IS_OBSCURED = 0x00000001;

    const MotionEvent_EDGE_TOP = 0x00000001;

    const MotionEvent_EDGE_BOTTOM = 0x00000002;

    const MotionEvent_EDGE_LEFT = 0x00000004;

    const MotionEvent_EDGE_RIGHT = 0x00000008;

    const AccessibilityEvent_INVALID_POSITION = -1;

    const AccessibilityEvent_MAX_TEXT_LENGTH = 500;

    const AccessibilityEvent_TYPE_VIEW_CLICKED = 0x00000001;

    const AccessibilityEvent_TYPE_VIEW_LONG_CLICKED = 0x00000002;

    const AccessibilityEvent_TYPE_VIEW_SELECTED = 0x00000004;

    const AccessibilityEvent_TYPE_VIEW_FOCUSED = 0x00000008;

    const AccessibilityEvent_TYPE_VIEW_TEXT_CHANGED = 0x00000010;

    const AccessibilityEvent_TYPE_WINDOW_STATE_CHANGED = 0x00000020;

    const AccessibilityEvent_TYPE_NOTIFICATION_STATE_CHANGED = 0x00000040;

    const EditorInfo_IME_MASK_ACTION = 0x000000ff;

    const EditorInfo_IME_ACTION_UNSPECIFIED = 0x00000000;

    const EditorInfo_IME_ACTION_NONE = 0x00000001;

    const EditorInfo_IME_ACTION_GO = 0x00000002;

    const EditorInfo_IME_ACTION_SEARCH = 0x00000003;

    const EditorInfo_IME_ACTION_SEND = 0x00000004;

    const EditorInfo_IME_ACTION_NEXT = 0x00000005;

    const EditorInfo_IME_ACTION_DONE = 0x00000006;

    const EditorInfo_IME_FLAG_NO_EXTRACT_UI = 0x10000000;

    const EditorInfo_IME_FLAG_NO_ACCESSORY_ACTION = 0x20000000;

    const EditorInfo_IME_FLAG_NO_ENTER_ACTION = 0x40000000;

    const EditorInfo_IME_FLAG_NO_FULLSCREEN = 0x80000000;

    const EditorInfo_IME_NULL = 0x00000000;

    const InputConnection_GET_TEXT_WITH_STYLES = 0x00000001;

    const InputConnection_GET_EXTRACTED_TEXT_MONITOR = 0x00000001;

    const InputMethod_SERVICE_INTERFACE = "android.view.InputMethod";

    const InputMethod_SERVICE_META_DATA = "android.view.im";

    const InputMethod_SHOW_EXPLICIT = 0x00000001;

    const InputMethod_SHOW_FORCED = 0x00000002;

    const InputMethodManager_SHOW_IMPLICIT = 0x00000001;

    const InputMethodManager_SHOW_FORCED = 0x00000002;

    const InputMethodManager_RESULT_UNCHANGED_SHOWN = 0;

    const InputMethodManager_RESULT_UNCHANGED_HIDDEN = 1;

    const InputMethodManager_RESULT_SHOWN = 2;

    const InputMethodManager_RESULT_HIDDEN = 3;

    const InputMethodManager_HIDE_IMPLICIT_ONLY = 0x00000001;

    const InputMethodManager_HIDE_NOT_ALWAYS = 0x00000002;

    const InputDevice_SOURCE_CLASS_MASK = 0x000000ff;

    const InputDevice_SOURCE_CLASS_BUTTON = 0x00000001;

    const InputDevice_SOURCE_CLASS_POINTER = 0x00000002;

    const InputDevice_SOURCE_CLASS_TRACKBALL = 0x00000004;

    const InputDevice_SOURCE_CLASS_POSITION = 0x00000008;

    const InputDevice_SOURCE_UNKNOWN = 0x00000000;

    const InputDevice_SOURCE_KEYBOARD = 0x00000101;

    const InputDevice_SOURCE_DPAD = 0x00000201;

    const InputDevice_SOURCE_TOUCHSCREEN = 0x00001002;

    const InputDevice_SOURCE_MOUSE = 0x00002002;

    const InputDevice_SOURCE_TRACKBALL = 0x00010004;

    const InputDevice_SOURCE_TOUCHPAD = 0x00100002;

    const InputDevice_SOURCE_ANY = 0xffffff00;

    const InputDevice_MOTION_RANGE_X = 0;

    const InputDevice_MOTION_RANGE_Y = 1;

    const InputDevice_MOTION_RANGE_PRESSURE = 2;

    const InputDevice_MOTION_RANGE_SIZE = 3;

    const InputDevice_MOTION_RANGE_TOUCH_MAJOR = 4;

    const InputDevice_MOTION_RANGE_TOUCH_MINOR = 5;

    const InputDevice_MOTION_RANGE_TOOL_MAJOR = 6;

    const InputDevice_MOTION_RANGE_TOOL_MINOR = 7;

    const InputDevice_MOTION_RANGE_ORIENTATION = 8;

    const InputDevice_KEYBOARD_TYPE_NONE = 0;

    const InputDevice_KEYBOARD_TYPE_NON_ALPHABETIC = 1;

    const InputDevice_KEYBOARD_TYPE_ALPHABETIC = 2;

    const SoundEffectConstants_CLICK = 0;

    const SoundEffectConstants_NAVIGATION_LEFT = 1;

    const SoundEffectConstants_NAVIGATION_UP = 2;

    const SoundEffectConstants_NAVIGATION_RIGHT = 3;

    const SoundEffectConstants_NAVIGATION_DOWN = 4;

    const HapticFeedbackConstants_LONG_PRESS = 0;

    const HapticFeedbackConstants_VIRTUAL_KEY = 1;

    const HapticFeedbackConstants_KEYBOARD_TAP = 3;

    const HapticFeedbackConstants_SAFE_MODE_DISABLED = 10000;

    const HapticFeedbackConstants_SAFE_MODE_ENABLED = 10001;

    const HapticFeedbackConstants_FLAG_IGNORE_VIEW_SETTING = 0x00000001;

    const HapticFeedbackConstants_FLAG_IGNORE_GLOBAL_SETTING = 0x00000002;

    const Activity_RESULT_CANCELED = 0;

    const Activity_RESULT_OK = -1;

    const Activity_RESULT_FIRST_USER = 1;

    const Activity_DEFAULT_KEYS_DISABLE = 0;

    const Activity_DEFAULT_KEYS_DIALER = 1;

    const Activity_DEFAULT_KEYS_SHORTCUT = 2;

    const Activity_DEFAULT_KEYS_SEARCH_LOCAL = 3;

    const Activity_DEFAULT_KEYS_SEARCH_GLOBAL = 4;

    const Service_START_CONTINUATION_MASK = 0x0000000f;

    const Service_START_STICKY_COMPATIBILITY = 0;

    const Service_START_STICKY = 1;

    const Service_START_NOT_STICKY = 2;

    const Service_START_REDELIVER_INTENT = 3;

    const Service_START_FLAG_REDELIVERY = 0x00000001;

    const Service_START_FLAG_RETRY = 0x00000002;

    const ApplicationApartment_DEBUG_OFF = 0;

    const ApplicationApartment_DEBUG_ON = 1;

    const ApplicationApartment_DEBUG_WAIT = 2;

    const ApplicationApartment_CAPSULE_REMOVED = 0;

    const ApplicationApartment_EXTERNAL_STORAGE_UNAVAILABLE = 1;

    const Notification_DEFAULT_ALL = 0xffffffff;

    const Notification_DEFAULT_SOUND = 1;

    const Notification_DEFAULT_VIBRATE = 2;

    const Notification_DEFAULT_LIGHTS = 4;

    const Notification_STREAM_DEFAULT = -1;

    const Notification_FLAG_SHOW_LIGHTS = 0x00000001;

    const Notification_FLAG_ONGOING_EVENT = 0x00000002;

    const Notification_FLAG_INSISTENT = 0x00000004;

    const Notification_FLAG_ONLY_ALERT_ONCE = 0x00000008;

    const Notification_FLAG_AUTO_CANCEL = 0x00000010;

    const Notification_FLAG_NO_CLEAR = 0x00000020;

    const Notification_FLAG_FOREGROUND_SERVICE = 0x00000040;

    const PendingIntent_FLAG_ONE_SHOT = 0x40000000;

    const PendingIntent_FLAG_NO_CREATE = 0x20000000;

    const PendingIntent_FLAG_CANCEL_CURRENT = 0x10000000;

    const PendingIntent_FLAG_UPDATE_CURRENT = 0x08000000;

    const ActivityManager_START_SWITCHES_CANCELED = 4;

    const ActivityManager_START_DELIVERED_TO_TOP = 3;

    const ActivityManager_START_TASK_TO_FRONT = 2;

    const ActivityManager_START_RETURN_INTENT_TO_CALLER = 1;

    const ActivityManager_START_SUCCESS = 0;

    const ActivityManager_START_INTENT_NOT_RESOLVED = -1;

    const ActivityManager_START_CLASS_NOT_FOUND = -2;

    const ActivityManager_START_FORWARD_AND_REQUEST_CONFLICT = -3;

    const ActivityManager_START_PERMISSION_DENIED = -4;

    const ActivityManager_INTENT_SENDER_BROADCAST = 1;

    const ActivityManager_INTENT_SENDER_ACTIVITY = 2;

    const ActivityManager_INTENT_SENDER_ACTIVITY_RESULT = 3;

    const ActivityManager_INTENT_SENDER_SERVICE = 4;

    const RunningAppProcessInfo_REASON_UNKNOWN = 0;

    const RunningAppProcessInfo_REASON_PROVIDER_IN_USE = 1;

    const RunningAppProcessInfo_REASON_SERVICE_IN_USE = 2;

    const TextUtils_ALIGNMENT_SPAN = 1;

    const TextUtils_FOREGROUND_COLOR_SPAN = 2;

    const TextUtils_RELATIVE_SIZE_SPAN = 3;

    const TextUtils_SCALE_X_SPAN = 4;

    const TextUtils_STRIKETHROUGH_SPAN = 5;

    const TextUtils_UNDERLINE_SPAN = 6;

    const TextUtils_STYLE_SPAN = 7;

    const TextUtils_BULLET_SPAN = 8;

    const TextUtils_QUOTE_SPAN = 9;

    const TextUtils_LEADING_MARGIN_SPAN = 10;

    const TextUtils_URL_SPAN = 11;

    const TextUtils_BACKGROUND_COLOR_SPAN = 12;

    const TextUtils_TYPEFACE_SPAN = 13;

    const TextUtils_SUPERSCRIPT_SPAN = 14;

    const TextUtils_SUBSCRIPT_SPAN = 15;

    const TextUtils_ABSOLUTE_SIZE_SPAN = 16;

    const TextUtils_TEXT_APPEARANCE_SPAN = 17;

    const ANNOTATION = 18;

    const Spanned_SPAN_POINT_MARK_MASK = 0x00000033;

    const Spanned_SPAN_MARK_MARK = 0x00000011;

    const Spanned_SPAN_MARK_POINT = 0x00000012;

    const Spanned_SPAN_POINT_MARK = 0x00000021;

    const Spanned_SPAN_POINT_POINT = 0x00000022;

    const Spanned_SPAN_PARAGRAPH = 0x00000033;

    const Spanned_SPAN_INCLUSIVE_EXCLUSIVE = 0x00000011;

    const Spanned_SPAN_INCLUSIVE_INCLUSIVE = 0x00000012;

    const Spanned_SPAN_EXCLUSIVE_EXCLUSIVE = 0x00000021;

    const Spanned_SPAN_EXCLUSIVE_INCLUSIVE = 0x00000022;

    const Spanned_SPAN_COMPOSING = 0x00000100;

    const Spanned_SPAN_INTERMEDIATE = 0x00000200;

    const Spanned_SPAN_USER_SHIFT = 24;

    const Spanned_SPAN_USER = 0xff000000;

    const Spanned_SPAN_PRIORITY_SHIFT = 16;

    const Spanned_SPAN_PRIORITY = 0x00ff0000;

    const InputType_TYPE_MASK_CLASS = 0x0000000f;

    const InputType_TYPE_MASK_VARIATION = 0x00000ff0;

    const InputType_TYPE_MASK_FLAGS = 0x00fff000;

    const InputType_TYPE_NULL = 0x00000000;

    const InputType_TYPE_CLASS_TEXT = 0x00000001;

    const InputType_TYPE_TEXT_FLAG_CAP_CHARACTERS = 0x00001000;

    const InputType_TYPE_TEXT_FLAG_CAP_WORDS = 0x00002000;

    const InputType_TYPE_TEXT_FLAG_CAP_SENTENCES = 0x00004000;

    const InputType_TYPE_TEXT_FLAG_AUTO_CORRECT = 0x00008000;

    const InputType_TYPE_TEXT_FLAG_AUTO_COMPLETE = 0x00010000;

    const InputType_TYPE_TEXT_FLAG_MULTI_LINE = 0x00020000;

    const InputType_TYPE_TEXT_FLAG_IME_MULTI_LINE = 0x00040000;

    const InputType_TYPE_TEXT_FLAG_NO_SUGGESTIONS = 0x00080000;

    const InputType_TYPE_TEXT_VARIATION_NORMAL = 0x00000000;

    const InputType_TYPE_TEXT_VARIATION_URI = 0x00000010;

    const InputType_TYPE_TEXT_VARIATION_EMAIL_ADDRESS = 0x00000020;

    const InputType_TYPE_TEXT_VARIATION_EMAIL_SUBJECT = 0x00000030;

    const InputType_TYPE_TEXT_VARIATION_SHORT_MESSAGE = 0x00000040;

    const InputType_TYPE_TEXT_VARIATION_LONG_MESSAGE = 0x00000050;

    const InputType_TYPE_TEXT_VARIATION_PERSON_NAME = 0x00000060;

    const InputType_TYPE_TEXT_VARIATION_POSTAL_ADDRESS = 0x00000070;

    const InputType_TYPE_TEXT_VARIATION_PASSWORD = 0x00000080;

    const InputType_TYPE_TEXT_VARIATION_VISIBLE_PASSWORD = 0x00000090;

    const InputType_TYPE_TEXT_VARIATION_WEB_EDIT_TEXT = 0x000000a0;

    const InputType_TYPE_TEXT_VARIATION_FILTER = 0x000000b0;

    const InputType_TYPE_TEXT_VARIATION_PHONETIC = 0x000000c0;

    const InputType_TYPE_CLASS_NUMBER = 0x00000002;

    const InputType_TYPE_NUMBER_FLAG_SIGNED = 0x00001000;

    const InputType_TYPE_NUMBER_FLAG_DECIMAL = 0x00002000;

    const InputType_TYPE_CLASS_PHONE = 0x00000003;

    const InputType_TYPE_CLASS_DATETIME = 0x00000004;

    const InputType_TYPE_DATETIME_VARIATION_NORMAL = 0x00000000;

    const InputType_TYPE_DATETIME_VARIATION_DATE = 0x00000010;

    const InputType_TYPE_DATETIME_VARIATION_TIME = 0x00000020;

    const RelativeLayout_TRUE = -1;

    const RelativeLayout_LEFT_OF = 0;

    const RelativeLayout_RIGHT_OF = 1;

    const RelativeLayout_ABOVE = 2;

    const RelativeLayout_BELOW = 3;

    const RelativeLayout_ALIGN_BASELINE = 4;

    const RelativeLayout_ALIGN_LEFT = 5;

    const RelativeLayout_ALIGN_TOP = 6;

    const RelativeLayout_ALIGN_RIGHT = 7;

    const RelativeLayout_ALIGN_BOTTOM = 8;

    const RelativeLayout_ALIGN_PARENT_LEFT = 9;

    const RelativeLayout_ALIGN_PARENT_TOP = 10;

    const RelativeLayout_ALIGN_PARENT_RIGHT = 11;

    const RelativeLayout_ALIGN_PARENT_BOTTOM = 12;

    const RelativeLayout_CENTER_IN_PARENT = 13;

    const RelativeLayout_CENTER_HORIZONTAL = 14;

    const RelativeLayout_CENTER_VERTICAL = 15;

    const Adapter_IGNORE_ITEM_VIEW_TYPE = -1;

    const Adapter_NO_SELECTION = 0x80000000;

    const AdapterView_ITEM_VIEW_TYPE_IGNORE = -1;

    const AdapterView_ITEM_VIEW_TYPE_HEADER_OR_FOOTER = -2;

    const AdapterView_INVALID_POSITION = -1;

    const AdapterView_INVALID_ROW_ID = 0x00000000;

    const OnScrollListener_SCROLL_STATE_IDLE = 0;

    const OnScrollListener_SCROLL_STATE_TOUCH_SCROLL = 1;

    const OnScrollListener_SCROLL_STATE_FLING = 2;

    const AbsListView_TRANSCRIPT_MODE_DISABLED = 0;

    const AbsListView_TRANSCRIPT_MODE_NORMAL = 1;

    const AbsListView_TRANSCRIPT_MODE_ALWAYS_SCROLL = 2;

    const PopupWindow_INPUT_METHOD_FROM_FOCUSABLE = 0;

    const PopupWindow_INPUT_METHOD_NEEDED = 1;

    const PopupWindow_INPUT_METHOD_NOT_NEEDED = 2;

    const Criteria_NO_REQUIREMENT = 0;

    const Criteria_POWER_LOW = 1;

    const Criteria_POWER_MEDIUM = 2;

    const Criteria_POWER_HIGH = 3;

    const Criteria_ACCURACY_FINE = 1;

    const Criteria_ACCURACY_COARSE = 2;

    const Criteria_ACCURACY_LOW = 1;

    const Criteria_ACCURACY_MEDIUM = 2;

    const Criteria_ACCURACY_HIGH = 3;

    const GpsStatus_GPS_EVENT_STARTED = 1;

    const GpsStatus_GPS_EVENT_STOPPED = 2;

    const GpsStatus_GPS_EVENT_FIRST_FIX = 3;

    const GpsStatus_GPS_EVENT_SATELLITE_STATUS = 4;

    const Location_FORMAT_DEGREES = 0;

    const Location_FORMAT_MINUTES = 1;

    const Location_FORMAT_SECONDS = 2;

    const LocationManager_NETWORK_PROVIDER = "network";

    const LocationManager_GPS_PROVIDER = "gps";

    const LocationManager_PASSIVE_PROVIDER = "passive";

    const LocationManager_KEY_PROXIMITY_ENTERING = "entering";

    const LocationManager_KEY_STATUS_CHANGED = "status";

    const LocationManager_KEY_PROVIDER_ENABLED = "providerEnabled";

    const LocationManager_KEY_LOCATION_CHANGED = "location";

    const LocationManager_GPS_ENABLED_CHANGE_ACTION = "elastos.location.GPS_ENABLED_CHANGE";

    const LocationManager_PROVIDERS_CHANGED_ACTION = "elastos.location.PROVIDERS_CHANGED";

    const LocationManager_GPS_FIX_CHANGE_ACTION = "elastos.location.GPS_FIX_CHANGE";

    const LocationManager_EXTRA_GPS_ENABLED = "enabled";

    const LocationProvider_BAD_CHARS_REGEX = "[^a-zA-Z0-9]";

    const LocationProvider_OUT_OF_SERVICE = 0;

    const LocationProvider_TEMPORARILY_UNAVAILABLE = 1;

    const LocationProvider_AVAILABLE = 2;

    const FRAME_COMPLETED = 1001;

    const ORIENTATION_CHANGED = 1002;

    const POLICY_FUNCTION = 1003;

    const FRAME_LOADTYPE_STANDARD = 0;

    const FRAME_LOADTYPE_BACK = 1;

    const FRAME_LOADTYPE_FORWARD = 2;

    const FRAME_LOADTYPE_INDEXEDBACKFORWARD = 3;

    const FRAME_LOADTYPE_RELOAD = 4;

    const FRAME_LOADTYPE_RELOADALLOWINGSTALEDATA = 5;

    const FRAME_LOADTYPE_SAME = 6;

    const FRAME_LOADTYPE_REDIRECT = 7;

    const FRAME_LOADTYPE_REPLACE = 8;

    const HEADER_KEY_IFMODIFIEDSINCE = "if-modified-since";

    const HEADER_KEY_IFNONEMATCH = "if-none-match";

    const LOAD_DEFAULT = -1;

    const LOAD_NORMAL = 0;

    const LOAD_CACHE_ELSE_NETWORK = 1;

    const LOAD_NO_CACHE = 2;

    const LOAD_CACHE_ONLY = 3;

    const SCHEME_TEL = "tel:";

    const SCHEME_MAILTO = "mailto:";

    const SCHEME_GEO = "geo:0,0?q=";

    const UNKNOWN_TYPE = 0;

    const ANCHOR_TYPE = 1;

    const PHONE_TYPE = 2;

    const GEO_TYPE = 3;

    const EMAIL_TYPE = 4;

    const IMAGE_TYPE = 5;

    const IMAGE_ANCHOR_TYPE = 6;

    const SRC_ANCHOR_TYPE = 7;

    const SRC_IMAGE_ANCHOR_TYPE = 8;

    const EDIT_TEXT_TYPE = 9;

    const GET_ORIGINS_GP = 0;

    const GET_ALLOWED = 1;

    const CLEAR = 2;

    const ALLOW = 3;

    const CLEAR_ALL = 4;

    const RETURN_ORIGINS_GP = 0;

    const RETURN_ALLOWED = 1;

    const ERROR_UNKNOWN = -1;

    const ERROR_HOST_LOOKUP = -2;

    const ERROR_UNSUPPORTED_AUTH_SCHEME = -3;

    const ERROR_AUTHENTICATION = -4;

    const ERROR_PROXY_AUTHENTICATION = -5;

    const ERROR_CONNECT = -6;

    const ERROR_IO = -7;

    const ERROR_TIMEOUT = -8;

    const ERROR_REDIRECT_LOOP = -9;

    const ERROR_UNSUPPORTED_SCHEME = -10;

    const ERROR_FAILED_SSL_HANDSHAKE = -11;

    const ERROR_BAD_URL = -12;

    const ERROR_FILE = -13;

    const ERROR_FILE_NOT_FOUND = -14;

    const ERROR_TOO_MANY_REQUESTS = -15;

    const DAY_COUNT = 5;

    const BROWSER_FRAME = 0;

    const CACHE_MANAGER = 0;

    const CALLBACK_PROXY = 0;

    const COOKIE_MANAGER = 0;

    const COOKIE_SYNC_MANAGER = 0;

    const DRAG_TRACKER = 0;

    const DRAG_TRACKER_LOGTAG = "skia";

    const FRAME_LOADER = 0;

    const J_WEB_CORE_JAVA_BRIDGE = 0;

    const LOAD_LISTENER = 0;

    const NETWORK = 0;

    const SSL_ERROR_HANDLER = 0;

    const STREAM_LOADER = 0;

    const URL_UTIL = 0;

    const WEB_BACK_FORWARD_LIST = 0;

    const WEB_SETTINGS = 0;

    const WEB_SYNC_MANAGER = 0;

    const WEB_TEXT_VIEW = 0;

    const WEB_VIEW = 0;

    const WEB_VIEW_CORE = 0;

    const PLUGIN_ACTION = "android.webkit.PLUGIN";

    const PLUGIN_PERMISSION = "android.webkit.permission.PLUGIN";

    struct FileStatus {
        Int32 mDev;
        Int32 mIno;
        Int32 mMode;
        Int32 mNlink;
        Int32 mUid;
        Int32 mGid;
        Int32 mRdev;
        Int64 mSize;
        Int32 mBlksize;
        Int64 mBlocks;
        Int64 mAtime;
        Int64 mMtime;
        Int64 mCtime;
    }

    interface IDescribable {
        GetDescription(
            [out] String * description);
    }

    interface IComparable : IDescribable {
        GetHashCode(
            [out] Int32 * hashCode);
    }

    interface IAttributeSet {
        GetAttributeCount(
            [out] Int32 * count);

        GetAttributeName(
            [in] Int32 index, 
            [out] String * name);

        GetAttributeValue(
            [in] Int32 index, 
            [out] String * value);

        GetAttributeValueEx(
            [in] CString namespace, 
            [in] CString name, 
            [out] String * value);

        GetPositionDescription(
            [out] String * des);

        GetAttributeNameResource(
            [in] Int32 index, 
            [out] Int32 * resId);

        GetAttributeListValue(
            [in] const String& namespace, 
            [in] const String& attribute, 
            [in] ArrayOf<String> options, 
            [in] Int32 defaultValue, 
            [out] Int32 * index);

        GetAttributeBooleanValue(
            [in] const String& namespace, 
            [in] const String& attribute, 
            [in] Boolean defaultValue, 
            [out] Boolean * value);

        GetAttributeResourceValue(
            [in] const String& namespace, 
            [in] const String& attribute, 
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetAttributeIntValue(
            [in] const String& namespace, 
            [in] const String& attribute, 
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetAttributeUnsignedIntValue(
            [in] const String& namespace, 
            [in] const String& attribute, 
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetAttributeFloatValue(
            [in] const String& namespace, 
            [in] const String& attribute, 
            [in] Float defaultValue, 
            [out] Float * value);

        GetAttributeListValueEx(
            [in] Int32 index, 
            [in] ArrayOf<String> options, 
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetAttributeBooleanValueEx(
            [in] Int32 index, 
            [in] Boolean defaultValue, 
            [out] Boolean * value);

        GetAttributeResourceValueEx(
            [in] Int32 index, 
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetAttributeIntValueEx(
            [in] Int32 index, 
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetAttributeUnsignedIntValueEx(
            [in] Int32 index, 
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetAttributeFloatValueEx(
            [in] Int32 index, 
            [in] Float defaultValue, 
            [out] Float * value);

        GetIdAttribute(
            [out] String * attr);

        GetClassAttribute(
            [out] String * attr);

        GetIdAttributeResourceValue(
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetStyleAttribute(
            [out] Int32 * value);
    }

    interface ICompatibilityInfo {
        Copy(
            [out] ICompatibilityInfo ** info);

        SetExpandable(
            [in] Boolean expandable);

        SetLargeScreens(
            [in] Boolean expandable);

        SetXLargeScreens(
            [in] Boolean expandable);

        IsConfiguredExpandable(
            [out] Boolean * isEnable);

        IsConfiguredLargeScreens(
            [out] Boolean * isLarge);

        IsConfiguredXLargeScreens(
            [out] Boolean * isLarge);

        IsScalingRequired(
            [out] Boolean * isRequire);

        SupportsScreen(
            [out] Boolean * isSupport);

        GetDescription(
            [out] String * str);

        GetTranslator(
            [out] ITranslator ** translator);

        UpdateCompatibleScreenFrame(
            [in] IDisplayMetrics * dm, 
            [in] Int32 orientation, 
            [in] IRect * outRect);
    }

    interface IDisplayMetrics {
        SetTo(
            [in] IDisplayMetrics * o);

        SetToDefaults();

        UpdateMetrics(
            [in] ICompatibilityInfo * compatibilityInfo, 
            [in] Int32 orientation, 
            [in] Int32 screenLayout);

        GetDescription(
            [out] String * str);

        GetDensity(
            [out] Float * density);

        SetDensity(
            [in] Float density);
    }

    interface IDisplayMetricsHelper {
        GetDensityDevice(
            [out] Int32 * result);
    }

    interface ITypedValue {
        GetFloat(
            [out] Float * f);

        GetDimension(
            [in] IDisplayMetrics * metrics, 
            [out] Float * dimension);

        GetFraction(
            [in] Float base, 
            [in] Float pbase, 
            [out] Float * fraction);

        CoerceToString(
            [out] ICharSequence ** csq);

        SetTo(
            [in] ITypedValue * other);

        GetDescription(
            [out] String * str);

        GetType(
            [out] Int32 * type);

        SetType(
            [in] Int32 type);

        GetString(
            [out] ICharSequence ** string);

        SetString(
            [in] ICharSequence * string);

        GetData(
            [out] Int32 * data);

        SetData(
            [in] Int32 data);

        GetResourceId(
            [out] Int32 * resId);

        SetResourceId(
            [in] Int32 resId);
    }

    interface ITypedValueHelper {
        ComplexToFloat(
            [in] Int32 complex, 
            [out] Float * value);

        ComplexToDimension(
            [in] Int32 data, 
            [in] IDisplayMetrics * metrics, 
            [out] Float * dimension);

        ComplexToDimensionPixelOffset(
            [in] Int32 data, 
            [in] IDisplayMetrics * metrics, 
            [out] Int32 * pixelOffset);

        ComplexToDimensionPixelSize(
            [in] Int32 data, 
            [in] IDisplayMetrics * metrics, 
            [out] Int32 * pixelSize);

        ComplexToDimensionNoisy(
            [in] Int32 data, 
            [in] IDisplayMetrics * metrics, 
            [out] Float * noisy);

        ApplyDimension(
            [in] Int32 unit, 
            [in] Float value, 
            [in] IDisplayMetrics * metrics, 
            [out] Float * result);

        ComplexToFraction(
            [in] Int32 data, 
            [in] Float base, 
            [in] Float pbase, 
            [out] Float * fraction);

        CoerceToString(
            [in] Int32 type, 
            [in] Int32 data, 
            [out] String * str);
    }

    interface IObjectIntegerMap {
        Get(
            [in] Int32 key, 
            [out] IInterface ** value);

        Put(
            [in] Int32 key, 
            [in] IInterface * value);
    }

    interface IPoolable {
        SetNextPoolable(
            [in] IPoolable * element);

        GetNextPoolable(
            [out] IPoolable ** element);
    }

    interface IPool {
        Acquire(
            [out] IPoolable ** element);

        ReleaseElement(
            [in] IPoolable * element);
    }

    interface IPoolableManager {
        NewInstance(
            [out] IPoolable ** element);

        OnAcquired(
            [in] IPoolable * element);

        OnReleased(
            [in] IPoolable * element);
    }

    interface IApartment {
        Start(
            [in] ApartmentAttr attr);

        Finish();

        PostCppCallback(
            [in] Handle32 target, 
            [in] Handle32 func, 
            [in] IParcel * params, 
            [in] Int32 id);

        PostCppCallbackAtTime(
            [in] Handle32 target, 
            [in] Handle32 func, 
            [in] IParcel * params, 
            [in] Int32 id, 
            [in] Millisecond64 uptimeMillis);

        PostCppCallbackDelayed(
            [in] Handle32 target, 
            [in] Handle32 func, 
            [in] IParcel * params, 
            [in] Int32 id, 
            [in] Millisecond64 delayMillis);

        PostCppCallbackAtFrontOfQueue(
            [in] Handle32 target, 
            [in] Handle32 func, 
            [in] IParcel * params, 
            [in] Int32 id);

        RemoveCppCallbacks(
            [in] Handle32 target, 
            [in] Handle32 func);

        RemoveCppCallbacksEx(
            [in] Handle32 target, 
            [in] Handle32 func, 
            [in] Int32 id);

        HasCppCallbacks(
            [in] Handle32 target, 
            [in] Handle32 func, 
            [out] Boolean * result);

        HasCppCallbacksEx(
            [in] Handle32 target, 
            [in] Handle32 func, 
            [in] Int32 id, 
            [out] Boolean * result);
    }

    interface IApartmentHelper {
        GetDefaultApartment(
            [out] IApartment ** apartment);
    }

    interface IClassLoader {
        LoadClass(
            [in] const String& className, 
            [out] Handle32 * clazz);
    }

    interface IBinderDeathRecipient {
        BinderDied();
    }

    interface IBinder : IDescribable {
    }

    interface IBatteryStats {
    }

    interface IBatteryStatsUid {
    }

    interface IBatteryStatsUidProc {
    }

    interface IBatteryStatsUidCap {
    }

    interface IBatteryStatsUidCapServ {
    }

    interface IParcelFileDescriptor {
        Close();
    }

    interface IParcelFileDescriptorHelper {
        Open(
            [in] IFile * file, 
            [in] Int32 mode, 
            [out] IParcelFileDescriptor ** descriptor);
    }

    interface IBundle : IDescribable {
        GetPairValue(
            [out] String * result);

        SetClassLoader(
            [in] IClassLoader * loader);

        Clone(
            [out] IInterface ** result);

        Size(
            [out] Int32 * result);

        IsEmpty(
            [out] Boolean * result);

        Clear();

        ContainsKey(
            [in] const String& key, 
            [out] Boolean * result);

        Get(
            [in] const String& key, 
            [out] IInterface ** value);

        Remove(
            [in] const String& key);

        PutAll(
            [in] IBundle * map);

        KeySet(
            [out] IObjectContainer ** result);

        HasFileDescriptors(
            [out] Boolean * result);

        PutBoolean(
            [in] const String& key, 
            [in] Boolean value);

        PutByte(
            [in] const String& key, 
            [in] Byte value);

        PutChar(
            [in] const String& key, 
            [in] Char32 value);

        PutInt16(
            [in] const String& key, 
            [in] Int16 value);

        PutInt32(
            [in] const String& key, 
            [in] Int32 value);

        PutInt64(
            [in] const String& key, 
            [in] Int64 value);

        PutFloat(
            [in] const String& key, 
            [in] Float value);

        PutDouble(
            [in] const String& key, 
            [in] Double value);

        PutString(
            [in] const String& key, 
            [in] const String& value);

        PutCharSequence(
            [in] const String& key, 
            [in] ICharSequence * value);

        PutParcelable(
            [in] const String& key, 
            [in] IParcelable * value);

        PutParcelableArray(
            [in] const String& key, 
            [in] ArrayOf<IParcelable *> * value);

        PutParcelableArrayList(
            [in] const String& key, 
            [in] IObjectContainer * value);

        PutIntegerArrayList(
            [in] const String& key, 
            [in] IObjectContainer * value);

        PutStringArrayList(
            [in] const String& key, 
            [in] IObjectContainer * value);

        PutCharSequenceArrayList(
            [in] const String& key, 
            [in] IObjectContainer * value);

        PutBooleanArray(
            [in] const String& key, 
            [in] ArrayOf<Boolean> * value);

        PutByteArray(
            [in] const String& key, 
            [in] ArrayOf<Byte> * value);

        PutInt16Array(
            [in] const String& key, 
            [in] ArrayOf<Int16> * value);

        PutCharArray(
            [in] const String& key, 
            [in] ArrayOf<Char32> * value);

        PutInt32Array(
            [in] const String& key, 
            [in] ArrayOf<Int32> * value);

        PutInt64Array(
            [in] const String& key, 
            [in] ArrayOf<Int64> * value);

        PutFloatArray(
            [in] const String& key, 
            [in] ArrayOf<Float> * value);

        PutDoubleArray(
            [in] const String& key, 
            [in] ArrayOf<Double> * value);

        PutStringArray(
            [in] const String& key, 
            [in] ArrayOf<String> * value);

        PutCharSequenceArray(
            [in] const String& key, 
            [in] ArrayOf<ICharSequence *> * value);

        PutBundle(
            [in] const String& key, 
            [in] IBundle * value);

        PutIBinder(
            [in] const String& key, 
            [in] IBinder * value);

        GetBoolean(
            [in] const String& key, 
            [out] Boolean * value);

        GetBooleanEx(
            [in] const String& key, 
            [in] Boolean defaultValue, 
            [out] Boolean * value);

        GetByte(
            [in] const String& key, 
            [out] Byte * value);

        GetByteEx(
            [in] const String& key, 
            [in] Byte defaultValue, 
            [out] Byte * value);

        GetChar(
            [in] const String& key, 
            [out] Char32 * value);

        GetCharEx(
            [in] const String& key, 
            [in] Char32 defaultValue, 
            [out] Char32 * value);

        GetInt16(
            [in] const String& key, 
            [out] Int16 * value);

        GetInt16Ex(
            [in] const String& key, 
            [in] Int16 defaultValue, 
            [out] Int16 * value);

        GetInt32(
            [in] const String& key, 
            [out] Int32 * value);

        GetInt32Ex(
            [in] const String& key, 
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetInt64(
            [in] const String& key, 
            [out] Int64 * value);

        GetInt64Ex(
            [in] const String& key, 
            [in] Int64 defaultValue, 
            [out] Int64 * value);

        GetFloat(
            [in] const String& key, 
            [out] Float * value);

        GetFloatEx(
            [in] const String& key, 
            [in] Float defaultValue, 
            [out] Float * value);

        GetDouble(
            [in] const String& key, 
            [out] Double * value);

        GetDoubleEx(
            [in] const String& key, 
            [in] Double defaultValue, 
            [out] Double * value);

        GetString(
            [in] const String& key, 
            [out] String * value);

        GetCharSequence(
            [in] const String& key, 
            [out] ICharSequence ** value);

        GetBundle(
            [in] const String& key, 
            [out] IBundle ** value);

        GetParcelable(
            [in] const String& key, 
            [out] IParcelable ** value);

        GetParcelableArray(
            [in] const String& key, 
            [out, callee] ArrayOf<IParcelable *> * value);

        GetParcelableArrayList(
            [in] const String& key, 
            [out] IObjectContainer ** value);

        GetIntegerArrayList(
            [in] const String& key, 
            [out] IObjectContainer ** value);

        GetStringArrayList(
            [in] const String& key, 
            [out] IObjectContainer ** value);

        GetCharSequenceArrayList(
            [in] const String& key, 
            [out] IObjectContainer ** value);

        GetBooleanArray(
            [in] const String& key, 
            [out, callee] ArrayOf<Boolean> * value);

        GetByteArray(
            [in] const String& key, 
            [out, callee] ArrayOf<Byte> * value);

        GetInt16Array(
            [in] const String& key, 
            [out, callee] ArrayOf<Int16> * value);

        GetCharArray(
            [in] const String& key, 
            [out, callee] ArrayOf<Char32> * value);

        GetInt32Array(
            [in] const String& key, 
            [out, callee] ArrayOf<Int32> * value);

        GetInt64Array(
            [in] const String& key, 
            [out, callee] ArrayOf<Int64> * value);

        GetFloatArray(
            [in] const String& key, 
            [out, callee] ArrayOf<Float> * value);

        GetDoubleArray(
            [in] const String& key, 
            [out, callee] ArrayOf<Double> * value);

        GetStringArray(
            [in] const String& key, 
            [out, callee] ArrayOf<String> * value);

        GetCharSequenceArray(
            [in] const String& key, 
            [out, callee] ArrayOf<ICharSequence *> * value);

        GetIBinder(
            [in] const String& key, 
            [out] IBinder ** value);
    }

    interface IServiceManager {
        AddService(
            [in] const String& name, 
            [in] IInterface * service);

        GetService(
            [in] const String& name, 
            [out] IInterface ** service);

        RemoveService(
            [in] const String& name);
    }

    interface IPatternMatcher {
        GetPath(
            [out] String * path);

        GetType(
            [out] Int32 * type);

        Match(
            [in] const String& str, 
            [out] Boolean * isMatch);

        GetDescription(
            [out] String * des);

        DescribeContents(
            [out] Int32 * count);
    }

    interface IFileObserver {
        StartWatching();

        StopWatching();

        OnEvent(
            [in] Int32 event, 
            [in] const String& path);
    }

    interface IVibrator {
        Vibrate(
            [in] Int64 milliseconds);

        VibrateEx(
            [in] ArrayOf<Int64> pattern, 
            [in] Int32 repeat);

        Cancel();
    }

    interface IWorkSource {
        Size(
            [out] Int32 * size);

        Get(
            [in] Int32 index, 
            [out] Int32 * uid);

        Clear();

        Diff(
            [in] IWorkSource * other, 
            [out] Boolean * result);

        Set(
            [in] IWorkSource * other);

        SetEx(
            [in] Int32 uid);

        SetReturningDiffs(
            [in] IWorkSource * other, 
            [out, callee] ArrayOf<IWorkSource> * diffs);

        Add(
            [in] IWorkSource * other, 
            [out] Boolean * result);

        AddReturningNewbs(
            [in] IWorkSource * other, 
            [out] IWorkSource ** result);

        AddEx(
            [in] Int32 uid, 
            [out] Boolean * result);

        AddReturningNewbsEx(
            [in] Int32 uid, 
            [out] IWorkSource ** result);

        Remove(
            [in] IWorkSource * other, 
            [out] Boolean * result);
    }

    interface IResultReceiver {
        Send(
            [in] Int32 resultCode, 
            [in] IBundle * resultData);
    }

    interface IMountServiceListener {
        OnUsbMassStorageConnectionChanged(
            [in] Boolean connected);

        OnStorageStateChanged(
            [in] const String& path, 
            [in] const String& oldState, 
            [in] const String& newState);
    }

    interface IMountShutdownObserver {
        OnShutDownComplete(
            [in] Int32 statusCode);
    }

    interface IObbActionListener {
        OnObbResult(
            [in] const String& filename, 
            [in] Int32 nonce, 
            [in] Int32 status);
    }

    interface IMountService {
        CreateSecureContainer(
            [in] const String& id, 
            [in] Int32 sizeMb, 
            [in] const String& fstype, 
            [in] const String& key, 
            [in] Int32 ownerUid, 
            [out] Int32 * result);

        DestroySecureContainer(
            [in] CString id, 
            [in] Boolean force, 
            [out] Int32 * result);

        FinalizeSecureContainer(
            [in] CString id, 
            [out] Int32 * result);

        FinishMediaUpdate();

        FormatVolume(
            [in] CString mountPoint, 
            [out] Int32 * result);

        GetMountedObbPath(
            [in] CString filename, 
            [out] String * obbPath);

        GetSecureContainerList(
            [out, callee] ArrayOf<String> * ids);

        GetSecureContainerPath(
            [in] CString id, 
            [out] String * path);

        GetStorageUsers(
            [in] CString path, 
            [out, callee] ArrayOf<Int32> * pids);

        GetVolumeState(
            [in] CString mountPoint, 
            [out] String * state);

        IsObbMounted(
            [in] CString filename, 
            [out] Boolean * isMounted);

        IsSecureContainerMounted(
            [in] CString id, 
            [out] Boolean * isMounted);

        IsUsbMassStorageConnected(
            [out] Boolean * isConnected);

        IsUsbMassStorageEnabled(
            [out] Boolean * isEnabled);

        MountObb(
            [in] const String& filename, 
            [in] const String& key, 
            [in] IObbActionListener * token, 
            [in] Int32 nonce);

        MountSecureContainer(
            [in] const String& id, 
            [in] const String& key, 
            [in] Int32 ownerUid, 
            [out] Int32 * result);

        MountVolume(
            [in] const String& mountPoint, 
            [out] Int32 * result);

        RegisterListener(
            [in] IMountServiceListener * listener);

        RenameSecureContainer(
            [in] const String& oldId, 
            [in] const String& newId, 
            [out] Int32 * result);

        SetUsbMassStorageEnabled(
            [in] Boolean value);

        Shutdown(
            [in] IMountShutdownObserver * observer);

        UnmountObb(
            [in] CString filename, 
            [in] Boolean force, 
            [in] IObbActionListener * token, 
            [in] Int32 nonce);

        UnmountSecureContainer(
            [in] CString id, 
            [in] Boolean force, 
            [out] Int32 * result);

        UnmountVolume(
            [in] CString mountPoint, 
            [in] Boolean force);

        UnregisterListener(
            [in] IMountServiceListener * listener);
    }

    interface IHandlerCallback {
    }

    interface IHandler {
    }

    interface IMessage {
    }

    interface IUri : IComparable {
        IsHierarchical(
            [out] Boolean * isHierarchical);

        IsOpaque(
            [out] Boolean * isOpaque);

        IsRelative(
            [out] Boolean * isRelative);

        IsAbsolute(
            [out] Boolean * isAbsolute);

        GetScheme(
            [out] String * scheme);

        GetSchemeSpecificPart(
            [out] String * ssp);

        GetEncodedSchemeSpecificPart(
            [out] String * essp);

        GetAuthority(
            [out] String * authority);

        GetEncodedAuthority(
            [out] String * authority);

        GetUserInfo(
            [out] String * userInfo);

        GetEncodedUserInfo(
            [out] String * userInfo);

        GetHost(
            [out] String * host);

        GetPort(
            [out] Int32 * port);

        GetPath(
            [out] String * path);

        GetEncodedPath(
            [out] String * path);

        GetQuery(
            [out] String * query);

        GetEncodedQuery(
            [out] String * query);

        GetFragment(
            [out] String * fragment);

        GetEncodedFragment(
            [out] String * fragment);

        GetPathSegments(
            [out, callee] ArrayOf<String> * pathSegments);

        GetLastPathSegment(
            [out] String * pathSegment);

        Equals(
            [in] IUri * other, 
            [out] Boolean * isEqual);

        CompareTo(
            [in] IUri * other, 
            [out] Int32 * result);
    }

    interface ICredentials {
        GetPid(
            [out] Int32 * pid);

        GetUid(
            [out] Int32 * uid);

        GetGid(
            [out] Int32 * gid);
    }

    interface ILocalSocketAddress {
        GetName(
            [out] String * name);

        GetNamespace(
            [out] LocalSocketAddressNamespace * ns);
    }

    interface ILocalSocket {
        Connect(
            [in] ILocalSocketAddress * endpoint);

        Bind(
            [in] ILocalSocketAddress * bindpoint);

        GetLocalSocketAddress(
            [out] ILocalSocketAddress ** bindpoint);

        GetInputStream(
            [out] IInputStream ** inStream);

        GetOutputStream(
            [out] IOutputStream ** outStream);

        Close();

        ShutdownInput();

        ShutdownOutput();

        SetReceiveBufferSize(
            [in] Int32 size);

        GetReceiveBufferSize(
            [out] Int32 * size);

        SetSoTimeout(
            [in] Int32 n);

        GetSoTimeout(
            [out] Int32 * n);

        SetSendBufferSize(
            [in] Int32 n);

        GetSendBufferSize(
            [out] Int32 * n);

        GetRemoteSocketAddress(
            [out] ILocalSocketAddress ** bindpoint);

        IsConnected(
            [out] Boolean * isConnected);

        IsClosed(
            [out] Boolean * isClosed);

        IsBound(
            [out] Boolean * isBound);

        IsOutputShutdown(
            [out] Boolean * isOutputShutdown);

        IsInputShutdown(
            [out] Boolean * isInputShutdown);

        ConnectEx(
            [in] ILocalSocketAddress * endpoint, 
            [in] Int32 timeout);

        SetFileDescriptorsForSend(
            [in] ArrayOf<IFileDescriptor *> fds);

        GetAncillaryFileDescriptors(
            [out, callee] ArrayOf<IFileDescriptor *> * fds);

        GetPeerCredentials(
            [out] ICredentials ** creds);

        GetFileDescriptor(
            [out] IFileDescriptor ** fd);
    }

    interface INetworkInfo {
        GetType(
            [out] Int32 * type);

        GetSubtype(
            [out] Int32 * subtype);

        GetTypeName(
            [out] String * typeName);

        GetSubtypeName(
            [out] String * subtypeName);

        IsConnectedOrConnecting(
            [out] Boolean * result);

        IsConnected(
            [out] Boolean * connected);

        IsAvailable(
            [out] Boolean * available);

        SetIsAvailable(
            [in] Boolean isAvailable);

        IsFailover(
            [out] Boolean * failover);

        SetFailover(
            [in] Boolean isFailover);

        IsRoaming(
            [out] Boolean * roaming);

        GetState(
            [out] NetworkInfoState * state);

        GetDetailedState(
            [out] NetworkInfoDetailedState * state);

        GetReason(
            [out] String * reason);

        GetExtraInfo(
            [out] String * info);
    }

    interface ILocalConnectivityManager {
        SetNetworkPreference(
            [in] Int32 preference);

        GetNetworkPreference(
            [out] Int32 * preference);

        GetActiveNetworkInfo(
            [out] INetworkInfo ** networkInfo);

        GetNetworkInfo(
            [in] Int32 networkType, 
            [out] INetworkInfo ** networkInfo);

        GetAllNetworkInfo(
            [out] IObjectContainer ** networkInfo);

        SetRadios(
            [in] Boolean turnOn, 
            [out] Boolean * result);

        SetRadio(
            [in] Int32 networkType, 
            [in] Boolean turnOn, 
            [out] Boolean * result);

        StartUsingNetworkFeature(
            [in] Int32 networkType, 
            [in] const String& feature, 
            [out] Int32 * outcome);

        StopUsingNetworkFeature(
            [in] Int32 networkType, 
            [in] const String& feature, 
            [out] Int32 * outcome);

        RequestRouteToHost(
            [in] Int32 networkType, 
            [in] Int32 hostAddress, 
            [out] Boolean * result);

        GetBackgroundDataSetting(
            [out] Boolean * isAllowed);

        SetBackgroundDataSetting(
            [in] Boolean allowBackgroundData);

        GetMobileDataEnabled(
            [out] Boolean * result);

        SetMobileDataEnabled(
            [in] Boolean enabled);

        GetTetherableIfaces(
            [out, callee] ArrayOf<String> * result);

        GetTetheredIfaces(
            [out, callee] ArrayOf<String> * result);

        GetTetheringErroredIfaces(
            [out, callee] ArrayOf<String> * result);

        Tether(
            [in] const String& iface, 
            [out] Int32 * result);

        Untether(
            [in] const String& iface, 
            [out] Int32 * result);

        IsTetheringSupported(
            [out] Boolean * result);

        GetTetherableUsbRegexs(
            [out, callee] ArrayOf<String> * result);

        GetTetherableWifiRegexs(
            [out, callee] ArrayOf<String> * result);

        GetLastTetherError(
            [in] const String& iface, 
            [out] Int32 * result);

        ReportInetCondition(
            [in] Int32 networkType, 
            [in] Int32 percentage);
    }

    interface ILocalConnectivityManagerHelper {
        IsNetworkTypeValid(
            [in] Int32 networkType, 
            [out] Boolean * isNetworkTypeValid);
    }

    interface IConnectivityManager {
        SetNetworkPreference(
            [in] Int32 pref);

        GetNetworkPreference(
            [out] Int32 * result);

        GetActiveNetworkInfo(
            [out] INetworkInfo ** result);

        GetNetworkInfo(
            [in] Int32 networkType, 
            [out] INetworkInfo ** result);

        GetAllNetworkInfo(
            [out] IObjectContainer ** result);

        SetRadios(
            [in] Boolean onOff, 
            [out] Boolean * result);

        SetRadio(
            [in] Int32 networkType, 
            [in] Boolean turnOn, 
            [out] Boolean * result);

        StartUsingNetworkFeature(
            [in] Int32 networkType, 
            [in] const String& feature, 
            [in] IBinder * binder, 
            [out] Int32 * result);

        StopUsingNetworkFeature(
            [in] Int32 networkType, 
            [in] const String& feature, 
            [out] Int32 * result);

        RequestRouteToHost(
            [in] Int32 networkType, 
            [in] Int32 hostAddress, 
            [out] Boolean * result);

        GetBackgroundDataSetting(
            [out] Boolean * result);

        SetBackgroundDataSetting(
            [in] Boolean allowBackgroundData);

        GetMobileDataEnabled(
            [out] Boolean * result);

        SetMobileDataEnabled(
            [in] Boolean enabled);

        Tether(
            [in] const String& iface, 
            [out] Int32 * result);

        Untether(
            [in] const String& iface, 
            [out] Int32 * result);

        GetLastTetherError(
            [in] const String& iface, 
            [out] Int32 * result);

        IsTetheringSupported(
            [out] Boolean * result);

        GetTetherableIfaces(
            [out, callee] ArrayOf<String> * result);

        GetTetheredIfaces(
            [out, callee] ArrayOf<String> * result);

        GetTetheringErroredIfaces(
            [out, callee] ArrayOf<String> * result);

        GetTetherableUsbRegexs(
            [out, callee] ArrayOf<String> * result);

        GetTetherableWifiRegexs(
            [out, callee] ArrayOf<String> * result);

        ReportInetCondition(
            [in] Int32 networkType, 
            [in] Int32 percentage);
    }

    interface IHeaderCallback {
    }

    interface IHeaders {
    }

    interface IDName {
    }

    interface ISslCertificate {
    }

    interface IHttpAuthHandler : IHandler {
        HandleMessage(
            [in] IMessage * msg);

        Proceed(
            [in] CString username, 
            [in] CString password);

        Cancel();

        UseHttpAuthUsernamePassword(
            [out] Boolean * flag);

        OnReceivedCredentials(
            [in] Handle32 loader, 
            [in] CString host, 
            [in] CString realm, 
            [in] CString username, 
            [in] CString password);
    }

    interface ISslError {
    }

    interface IWebAddress {
    }

    interface ISQLiteClosable {
        AcquireReference();

        ReleaseReference();

        ReleaseReferenceFromContainer();
    }

    interface ISQLiteProgram : ISQLiteClosable {
        GetUniqueId(
            [out] Int32 * value);

        BindNull(
            [in] Int32 index);

        BindInt64(
            [in] Int32 index, 
            [in] Int64 value);

        BindDouble(
            [in] Int32 index, 
            [in] Double value);

        BindString(
            [in] Int32 index, 
            [in] const String& value);

        BindBlob(
            [in] Int32 index, 
            [in] ArrayOf<Byte> value);

        ClearBindings();

        Close();
    }

    interface ICursor {
        GetCount(
            [out] Int32 * count);

        GetPosition(
            [out] Int32 * position);

        Move(
            [in] Int32 offset, 
            [out] Boolean * succeeded);

        MoveToPosition(
            [in] Int32 position, 
            [out] Boolean * succeeded);

        MoveToFirst(
            [out] Boolean * succeeded);

        MoveToLast(
            [out] Boolean * succeeded);

        MoveToNext(
            [out] Boolean * succeeded);

        MoveToPrevious(
            [out] Boolean * succeeded);

        IsFirst(
            [out] Boolean * isFirst);

        IsLast(
            [out] Boolean * isLast);

        IsBeforeFirst(
            [out] Boolean * isBeforeFirst);

        IsAfterLast(
            [out] Boolean * isAfterLast);

        DeleteRow(
            [out] Boolean * succeeded);

        GetColumnIndex(
            [in] const String& columnName, 
            [out] Int32 * columnIndex);

        GetColumnIndexOrThrow(
            [in] const String& columnName, 
            [out] Int32 * columnIndex);

        GetColumnName(
            [in] Int32 columnIndex, 
            [out] String * columnName);

        GetColumnNames(
            [out, callee] ArrayOf<String> * columnNames);

        GetColumnCount(
            [out] Int32 * columnCount);

        GetBlob(
            [in] Int32 columnIndex, 
            [out, callee] ArrayOf<Byte> * blob);

        GetString(
            [in] Int32 columnIndex, 
            [out] String * columnValue);

        CopyStringToBuffer(
            [in] Int32 columnIndex, 
            [in] ICharArrayBuffer * buf);

        GetInt16(
            [in] Int32 columnIndex, 
            [out] Int16 * columnValue);

        GetInt32(
            [in] Int32 columnIndex, 
            [out] Int32 * columnValue);

        GetInt64(
            [in] Int32 columnIndex, 
            [out] Int64 * columnValue);

        GetFloat(
            [in] Int32 columnIndex, 
            [out] Float * columnValue);

        GetDouble(
            [in] Int32 columnIndex, 
            [out] Double * columnValue);

        IsNull(
            [in] Int32 columnIndex, 
            [out] Boolean * isNull);

        SupportsUpdates(
            [out] Boolean * result);

        HasUpdates(
            [out] Boolean * result);

        UpdateBlob(
            [in] Int32 columnIndex, 
            [in] ArrayOf<Byte> value, 
            [out] Boolean * succeeded);

        UpdateString(
            [in] Int32 columnIndex, 
            [in] const String& value, 
            [out] Boolean * succeeded);

        UpdateInt16(
            [in] Int32 columnIndex, 
            [in] Int16 value, 
            [out] Boolean * succeeded);

        UpdateInt32(
            [in] Int32 columnIndex, 
            [in] Int32 value, 
            [out] Boolean * succeeded);

        UpdateInt64(
            [in] Int32 columnIndex, 
            [in] Int64 value, 
            [out] Boolean * succeeded);

        UpdateFloat(
            [in] Int32 columnIndex, 
            [in] Float value, 
            [out] Boolean * succeeded);

        UpdateDouble(
            [in] Int32 columnIndex, 
            [in] Double value, 
            [out] Boolean * succeeded);

        UpdateToNull(
            [in] Int32 columnIndex, 
            [out] Boolean * succeeded);

        CommitUpdates(
            [out] Boolean * succeeded);

        AbortUpdates();

        Deactivate();

        Requery(
            [out] Boolean * succeeded);

        Close();

        IsClosed(
            [out] Boolean * closed);

        RegisterContentObserver(
            [in] ILocalContentObserver * observer);

        UnregisterContentObserver(
            [in] ILocalContentObserver * observer);

        RegisterDataSetObserver(
            [in] IDataSetObserver * observer);

        UnregisterDataSetObserver(
            [in] IDataSetObserver * observer);

        SetNotificationUri(
            [in] IContentResolver * cr, 
            [in] IUri * uri);

        GetWantsAllOnMoveCalls(
            [out] Boolean * result);

        GetExtras(
            [out] IBundle ** extras);

        Respond(
            [in] IBundle * extras, 
            [out] IBundle ** result);
    }

    interface ICursorFactory {
        NewCursor(
            [in] ISQLiteDatabase * db, 
            [in] ISQLiteCursorDriver * masterQuery, 
            [in] const String& editTable, 
            [in] ISQLiteQuery * query, 
            [out] ICursor ** newCursor);
    }

    interface ISQLiteCursorDriver {
        Query(
            [in] ICursorFactory * factory, 
            [in] ArrayOf<String> * bindArgs, 
            [out] ICursor ** cursor);

        CursorDeactivated();

        CursorRequeried(
            [in] ICursor * cursor);

        CursorClosed();

        SetBindArguments(
            [in] ArrayOf<String> * bindArgs);
    }

    interface ISQLiteQuery : ISQLiteProgram {
    }

    interface ISQLiteStatement : ISQLiteProgram {
        Execute();

        ExecuteInsert(
            [out] Int64 * value);

        SimpleQueryForInt64(
            [out] Int64 * value);

        SimpleQueryForString(
            [out] String * value);
    }

    interface ISQLiteTransactionListener {
        OnBegin();

        OnCommit();

        OnRollback();
    }

    interface IContentValues {
        PutInt32(
            [in] const String& key, 
            [in] Int32 value);

        GetInt32(
            [in] const String& key, 
            [out] Int32 * value);

        GetSize(
            [out] Int32 * size);

        ValueSet(
            [out] IObjectStringMap ** values);
    }

    interface ISQLiteDatabase : ISQLiteClosable {
        SetLockingEnabled(
            [in] Boolean lockingEnabled);

        BeginTransaction();

        BeginTransactionWithListener(
            [in] ISQLiteTransactionListener * transactionListener);

        EndTransaction();

        SetTransactionSuccessful();

        InTransaction(
            [out] Boolean * result);

        IsDbLockedByCurrentThread(
            [out] Boolean * isLocked);

        IsDbLockedByOtherThreads(
            [out] Boolean * isLocked);

        YieldIfContended(
            [out] Boolean * isYielded);

        YieldIfContendedSafely(
            [out] Boolean * isYielded);

        YieldIfContendedSafelyEx(
            [in] Int64 sleepAfterYieldDelay, 
            [out] Boolean * isYielded);

        Close();

        GetVersion(
            [out] Int32 * versions);

        SetVersion(
            [in] Int32 versions);

        GetMaximumSize(
            [out] Int64 * numBytes);

        SetMaximumSize(
            [in] Int64 numBytes, 
            [out] Int64 * maxSize);

        GetPageSize(
            [out] Int64 * numBytes);

        SetPageSize(
            [in] Int64 numBytes);

        MarkTableSyncable(
            [in] const String& table, 
            [in] const String& deletedTable);

        MarkTableSyncableEx(
            [in] const String& table, 
            [in] const String& foreignKey, 
            [in] const String& updateTable);

        CompileStatement(
            [in] const String& sql, 
            [out] ISQLiteStatement ** statement);

        Query(
            [in] Boolean distinct, 
            [in] const String& table, 
            [in] ArrayOf<String> * columns, 
            [in] const String& selection, 
            [in] ArrayOf<String> * selectionArgs, 
            [in] const String& groupBy, 
            [in] const String& having, 
            [in] const String& orderBy, 
            [in] const String& limit, 
            [out] ICursor ** cursor);

        QueryWithFactory(
            [in] ICursorFactory * cursorFactory, 
            [in] Boolean distinct, 
            [in] const String& table, 
            [in] ArrayOf<String> * columns, 
            [in] const String& selection, 
            [in] ArrayOf<String> * selectionArgs, 
            [in] const String& groupBy, 
            [in] const String& having, 
            [in] const String& orderBy, 
            [in] const String& limit, 
            [out] ICursor ** cursor);

        QueryEx(
            [in] const String& table, 
            [in] ArrayOf<String> * columns, 
            [in] const String& selection, 
            [in] ArrayOf<String> * selectionArgs, 
            [in] const String& groupBy, 
            [in] const String& having, 
            [in] const String& orderBy, 
            [out] ICursor ** cursor);

        QueryEx2(
            [in] const String& table, 
            [in] ArrayOf<String> * columns, 
            [in] const String& selection, 
            [in] ArrayOf<String> * selectionArgs, 
            [in] const String& groupBy, 
            [in] const String& having, 
            [in] const String& orderBy, 
            [in] const String& limit, 
            [out] ICursor ** cursor);

        RawQuery(
            [in] const String& sql, 
            [in] ArrayOf<String> * selectionArgs, 
            [out] ICursor ** cursor);

        RawQueryWithFactory(
            [in] ICursorFactory * cursorFactory, 
            [in] const String& sql, 
            [in] ArrayOf<String> * selectionArgs, 
            [in] const String& editTable, 
            [out] ICursor ** cursor);

        RawQueryEx(
            [in] const String& sql, 
            [in] ArrayOf<String> * selectionArgs, 
            [in] Int32 initialRead, 
            [in] Int32 maxRead, 
            [out] ICursor ** cursor);

        Insert(
            [in] const String& table, 
            [in] const String& nullColumnHack, 
            [in] IContentValues * values, 
            [out] Int64 * value);

        InsertOrThrow(
            [in] const String& table, 
            [in] const String& nullColumnHack, 
            [in] IContentValues * values, 
            [out] Int64 * value);

        Replace(
            [in] const String& table, 
            [in] const String& nullColumnHack, 
            [in] IContentValues * initialValues, 
            [out] Int64 * value);

        ReplaceOrThrow(
            [in] const String& table, 
            [in] const String& nullColumnHack, 
            [in] IContentValues * initialValues, 
            [out] Int64 * value);

        InsertWithOnConflict(
            [in] const String& table, 
            [in] const String& nullColumnHack, 
            [in] IContentValues * initialValues, 
            [in] Int32 conflictAlgorithm, 
            [out] Int64 * value);

        Delete(
            [in] const String& table, 
            [in] const String& whereClause, 
            [in] ArrayOf<String> * whereArgs, 
            [out] Int32 * value);

        Update(
            [in] const String& table, 
            [in] IContentValues * values, 
            [in] const String& whereClause, 
            [in] ArrayOf<String> * whereArgs, 
            [out] Int32 * value);

        UpdateWithOnConflict(
            [in] const String& table, 
            [in] IContentValues * values, 
            [in] const String& whereClause, 
            [in] ArrayOf<String> * whereArgs, 
            [in] Int32 conflictAlgorithm, 
            [out] Int32 * value);

        ExecSQL(
            [in] CString sql);

        ExecSQLEx(
            [in] CString sql, 
            [in] ArrayOf<IInterface *> * bindArgs);

        IsReadOnly(
            [out] Boolean * isReadOnlyed);

        IsOpen(
            [out] Boolean * isOpened);

        NeedUpgrade(
            [in] Int32 newVersion, 
            [out] Boolean * result);

        GetPath(
            [out] String * path);

        SetLocale(
            [in] ILocale * locale);

        IsInCompiledSqlCache(
            [in] const String& sql, 
            [out] Boolean * isInCompiledSqlCached);

        PurgeFromCompiledSqlCache(
            [in] const String& sql);

        ResetCompiledSqlCache();

        GetMaxSqlCacheSize(
            [out] Int32 * maxSqlCacheSize);

        SetMaxSqlCacheSize(
            [in] Int32 cacheSize);
    }

    interface ISQLiteDatabaseHelper {
        OpenDatabase(
            [in] const String& path, 
            [in] ICursorFactory * factory, 
            [in] Int32 flags, 
            [out] ISQLiteDatabase ** db);

        OpenOrCreateDatabase(
            [in] IFile * file, 
            [in] ICursorFactory * factory, 
            [out] ISQLiteDatabase ** db);

        OpenOrCreateDatabaseEx(
            [in] const String& path, 
            [in] ICursorFactory * factory, 
            [out] ISQLiteDatabase ** db);

        Create(
            [in] ICursorFactory * factory, 
            [out] ISQLiteDatabase ** db);

        FindEditTable(
            [in] const String& tables, 
            [out] String * resultTables);
    }

    interface ISQLiteOpenHelper {
        GetWritableDatabase(
            [out] ISQLiteDatabase ** database);

        GetReadableDatabase(
            [out] ISQLiteDatabase ** database);

        Close();

        OnCreate(
            [in] ISQLiteDatabase * database);

        OnUpgrade(
            [in] ISQLiteDatabase * db, 
            [in] Int32 oldVersion, 
            [in] Int32 newVersion);

        OnOpen(
            [in] ISQLiteDatabase * db);
    }

    interface ISQLiteQueryBuilder {
        SetDistinct(
            [in] Boolean distinct);

        GetTables(
            [out] String * tables);

        SetTables(
            [in] const String& inTables);

        AppendWhere(
            [in] ICharSequence * inWhere);

        AppendWhereEscapeString(
            [in] const String& inWhere);

        SetCursorFactory(
            [in] ICursorFactory * factory);

        SetStrictProjectionMap(
            [in] Boolean flag);

        Query(
            [in] ISQLiteDatabase * db, 
            [in] ArrayOf<String> * projectionIn, 
            [in] const String& selection, 
            [in] ArrayOf<String> * selectionArgs, 
            [in] const String& groupBy, 
            [in] const String& having, 
            [in] const String& sortOrder, 
            [out] ICursor ** cursor);

        QueryEx(
            [in] ISQLiteDatabase * db, 
            [in] ArrayOf<String> * projectionIn, 
            [in] const String& selection, 
            [in] ArrayOf<String> * selectionArgs, 
            [in] const String& groupBy, 
            [in] const String& having, 
            [in] const String& sortOrder, 
            [in] const String& limit, 
            [out] ICursor ** cursor);

        BuildQuery(
            [in] ArrayOf<String> * projectionIn, 
            [in] const String& selection, 
            [in] ArrayOf<String> * selectionArgs, 
            [in] const String& groupBy, 
            [in] const String& having, 
            [in] const String& sortOrder, 
            [in] const String& limit, 
            [out] String * str);

        BuildUnionSubQuery(
            [in] const String& typeDiscriminatorColumn, 
            [in] ArrayOf<String> unionColumns, 
            [in] Int32 computedColumnsOffset, 
            [in] const String& typeDiscriminatorValue, 
            [in] const String& selection, 
            [in] ArrayOf<String> * selectionArgs, 
            [in] const String& groupBy, 
            [in] const String& having, 
            [out] String * str);

        BuildUnionQuery(
            [in] ArrayOf<String> subQueries, 
            [in] const String& sortOrder, 
            [in] const String& limit, 
            [out] String * str);
    }

    interface ICharArrayBuffer {
        GetData(
            [out, callee] ArrayOf<Char32> * data);

        SetData(
            [in] ArrayOf<Char32> * data);
    }

    interface ILocalContentObserver {
        GetContentObserver(
            [out] IContentObserver ** observer);

        ReleaseContentObserver(
            [out] IContentObserver ** oldObserver);

        DeliverSelfNotifications(
            [out] Boolean * result);

        OnChange(
            [in] Boolean selfChange);

        DispatchChange(
            [in] Boolean selfChange);
    }

    interface IDataSetObserver {
        OnChanged();

        OnInvalidated();
    }

    interface IContentResolver {
        GetType(
            [in] IUri * uri, 
            [out] String * type);

        Query(
            [in] IUri * uri, 
            [in] ArrayOf<String> projection, 
            [in] const String& selection, 
            [in] ArrayOf<String> selectionArgs, 
            [in] const String& sortOrder, 
            [out] ICursor ** cursor);

        OpenInputStream(
            [in] IUri * uri, 
            [out] IInputStream ** istream);

        GetResourceId(
            [in] IUri * uri, 
            [out] IOpenResourceIdResult ** result);

        Insert(
            [in] IUri * uri, 
            [in] IContentValues * values, 
            [out] IUri ** insertedItemUri);

        Delete(
            [in] IUri * uri, 
            [in] const String& selection, 
            [in] ArrayOf<String> selectionArgs, 
            [out] Int32 * rowsAffected);

        Update(
            [in] IUri * uri, 
            [in] IContentValues * values, 
            [in] const String& selection, 
            [in] ArrayOf<String> selectionArgs, 
            [out] Int32 * rowsAffected);
    }

    interface IContentObserver {
        OnChange(
            [in] Boolean selfUpdate);
    }

    interface IObservable {
        RegisterObserver(
            [in] IInterface * observer);

        UnregisterObserver(
            [in] IInterface * observer);

        UnregisterAll();
    }

    interface IDataSetObservable : IObservable {
        NotifyChanged();

        NotifyInvalidated();
    }

    interface IContentObservable : IObservable {
        DispatchChange(
            [in] Boolean selfChange);

        NotifyChange(
            [in] Boolean selfChange);
    }

    interface ICursorWrapper : ICursor {
    }

    interface ICursorWindow : ISQLiteClosable {
        GetStartPosition(
            [out] Int32 * pos);

        SetStartPosition(
            [in] Int32 pos);

        GetNumRows(
            [out] Int32 * num);

        SetNumColumns(
            [in] Int32 columnNum, 
            [out] Boolean * succeeded);

        AllocRow(
            [out] Boolean * succeeded);

        FreeLastRow();

        PutBlob(
            [in] ArrayOf<Byte> value, 
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Boolean * succeeded);

        PutString(
            [in] const String& value, 
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Boolean * succeeded);

        PutInt64(
            [in] Int64 value, 
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Boolean * succeeded);

        PutDouble(
            [in] Double value, 
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Boolean * succeeded);

        PutNull(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Boolean * succeeded);

        IsNull(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Boolean * succeeded);

        GetBlob(
            [in] Int32 row, 
            [in] Int32 col, 
            [out, callee] ArrayOf<Byte> * blob);

        IsBlob(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Boolean * isBlob);

        IsInt64(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Boolean * isInt64);

        IsFloat(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Boolean * isFloat);

        IsString(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Boolean * isString);

        GetString(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] String * rst);

        CopyStringToBuffer(
            [in] Int32 row, 
            [in] Int32 col, 
            [in] ICharArrayBuffer * buffer);

        GetInt64(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Int64 * value);

        GetDouble(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Double * value);

        GetInt16(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Int16 * value);

        GetInt32(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Int32 * value);

        GetFloat(
            [in] Int32 row, 
            [in] Int32 col, 
            [out] Float * value);

        Clear();

        Close();
    }

    interface ICursorJoiner {
        HasNext(
            [out] Boolean * result);

        GetNext(
            [out] CursorJoinerResult * result);

        Remove();
    }

    interface IBulkCursor {
        GetWindow(
            [in] Int32 startPos, 
            [out] ICursorWindow ** cw);

        OnMove(
            [in] Int32 position);

        GetCount(
            [out] Int32 * count);

        GetColumnNames(
            [out, callee] ArrayOf<String> * names);

        DeleteRow(
            [in] Int32 position, 
            [out] Boolean * succeeded);

        Deactivate();

        Close();

        Requery(
            [in] IContentObserver * observer, 
            [in] ICursorWindow * window, 
            [out] Int32 * value);

        GetWantsAllOnMoveCalls(
            [out] Boolean * result);

        GetExtras(
            [out] IBundle ** extras);

        Respond(
            [in] IBundle * extras, 
            [out] IBundle ** result);
    }

    interface ICrossProcessCursor : ICursor {
        GetWindow(
            [out] ICursorWindow ** window);

        FillWindow(
            [in] Int32 pos, 
            [in] ICursorWindow * window);

        OnMove(
            [in] Int32 oldPosition, 
            [in] Int32 newPosition, 
            [out] Boolean * succeeded);
    }

    interface IAbstractWindowedCursor : ICrossProcessCursor {
        IsBlob(
            [in] Int32 columnIndex, 
            [out] Boolean * result);

        IsString(
            [in] Int32 columnIndex, 
            [out] Boolean * result);

        IsInt64(
            [in] Int32 columnIndex, 
            [out] Boolean * result);

        IsFloat(
            [in] Int32 columnIndex, 
            [out] Boolean * result);

        SetWindow(
            [in] ICursorWindow * window);

        HasWindow(
            [out] Boolean * result);
    }

    interface IMergeCursor : ICrossProcessCursor {
    }

    interface IRowBuilder {
        Add(
            [in] IInterface * columnValue);
    }

    interface IMatrixCursor : ICrossProcessCursor {
        NewRow(
            [out] IRowBuilder ** builder);

        AddRow(
            [in] ArrayOf<IInterface *> columnValues);

        AddRowEx(
            [in] IObjectContainer * columnValues);
    }

    interface IBulkCursorToCursorAdaptor : IAbstractWindowedCursor {
        Set(
            [in] IBulkCursor * bulkCursor);

        SetEx(
            [in] IBulkCursor * bulkCursor, 
            [in] Int32 count, 
            [in] Int32 idIndex);

        GetObserver(
            [out] IContentObserver ** observer);
    }

    interface ICursorToBulkCursorAdaptor : IBulkCursor {
        BinderDied();
    }

    interface ISQLiteCursor : ICrossProcessCursor {
        SetLoadStyle(
            [in] Int32 initialRead, 
            [in] Int32 maxRead);

        GetDatabase(
            [out] ISQLiteDatabase ** database);

        SetSelectionArguments(
            [in] ArrayOf<String> * selectionArgs);
    }

    interface IRect {
        Equals(
            [in] IRect * r, 
            [out] Boolean * result);

        IsEmpty(
            [out] Boolean * result);

        GetWidth(
            [out] Int32 * width);

        GetHeight(
            [out] Int32 * height);

        SetEmpty();

        Set(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        SetEx(
            [in] IRect * src);

        Offset(
            [in] Int32 dx, 
            [in] Int32 dy);

        Inset(
            [in] Int32 dx, 
            [in] Int32 dy);

        Contains(
            [in] Int32 x, 
            [in] Int32 y, 
            [out] Boolean * result);

        ContainsEx(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom, 
            [out] Boolean * result);

        ContainsEx2(
            [in] IRect * r, 
            [out] Boolean * result);

        Intersect(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom, 
            [out] Boolean * result);

        IntersectEx(
            [in] IRect * r, 
            [out] Boolean * result);

        Intersects(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom, 
            [out] Boolean * result);

        IntersectsEx(
            [in] IRect * a, 
            [in] IRect * b, 
            [out] Boolean * result);

        Union(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        UnionEx(
            [in] IRect * r);

        Scale(
            [in] Float scale);

        GetLeft(
            [out] Int32 * left);

        SetLeft(
            [in] Int32 left);

        GetTop(
            [out] Int32 * top);

        SetTop(
            [in] Int32 top);

        GetRight(
            [out] Int32 * right);

        SetRight(
            [in] Int32 right);

        GetBottom(
            [out] Int32 * bottom);

        SetBottom(
            [in] Int32 bottom);
    }

    interface IRegion {
        SetEmpty();

        Set(
            [in] IRegion * src, 
            [out] Boolean * result);

        SetEx(
            [in] IRect * r, 
            [out] Boolean * result);

        SetEx2(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom, 
            [out] Boolean * result);

        SetPath(
            [in] IPath * path, 
            [in] IRegion * clip, 
            [out] Boolean * result);

        IsEmpty(
            [out] Boolean * isEmpty);

        IsRect(
            [out] Boolean * isRect);

        IsComplex(
            [out] Boolean * isComplex);

        GetBounds(
            [out] IRect ** bounds);

        GetBoundsEx(
            [in] IRect * r, 
            [out] Boolean * result);

        GetBoundaryPath(
            [out] IPath ** path);

        GetBoundaryPathEx(
            [in] IPath * path, 
            [out] Boolean * result);

        Contains(
            [in] Int32 x, 
            [in] Int32 y, 
            [out] Boolean * result);

        QuickContains(
            [in] IRect * r, 
            [out] Boolean * result);

        QuickContainsEx(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom, 
            [out] Boolean * result);

        QuickReject(
            [in] IRect * r, 
            [out] Boolean * result);

        QuickRejectEx(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom, 
            [out] Boolean * result);

        QuickRejectEx2(
            [in] IRegion * rgn, 
            [out] Boolean * result);

        Translate(
            [in] Int32 dx, 
            [in] Int32 dy);

        TranslateEx(
            [in] Int32 dx, 
            [in] Int32 dy, 
            [in] IRegion * dst);

        Scale(
            [in] Float scale);

        ScaleEx(
            [in] Float scale, 
            [in] IRegion * dst);

        Union(
            [in] IRect * r, 
            [out] Boolean * result);

        Op(
            [in] IRect * r, 
            [in] RegionOp op, 
            [out] Boolean * result);

        OpEx(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom, 
            [in] RegionOp op, 
            [out] Boolean * result);

        OpEx2(
            [in] IRegion * region, 
            [in] RegionOp op, 
            [out] Boolean * result);

        OpEx3(
            [in] IRect * rect, 
            [in] IRegion * region, 
            [in] RegionOp op, 
            [out] Boolean * result);

        OpEx4(
            [in] IRegion * region1, 
            [in] IRegion * region2, 
            [in] RegionOp op, 
            [out] Boolean * result);

        Equals(
            [in] IRegion * r, 
            [out] Boolean * result);
    }

    interface ICanvas {
        GetGL(
            [out] IGL ** gl);

        SetBitmap(
            [in] IBitmap * bitmap);

        SetViewport(
            [in] Int32 width, 
            [in] Int32 height);

        IsOpaque(
            [out] Boolean * isOpaque);

        GetWidth(
            [out] Int32 * width);

        GetHeight(
            [out] Int32 * height);

        GetDensity(
            [out] Int32 * density);

        SetDensity(
            [in] Int32 density);

        SetScreenDensity(
            [in] Int32 density);

        Save(
            [out] Int32 * count);

        SaveEx(
            [in] Int32 saveFlags, 
            [out] Int32 * count);

        SaveLayer(
            [in] IRectF * bounds, 
            [in] IPaint * paint, 
            [in] Int32 saveFlags, 
            [out] Int32 * count);

        SaveLayerEx(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom, 
            [in] IPaint * paint, 
            [in] Int32 saveFlags, 
            [out] Int32 * count);

        SaveLayerAlpha(
            [in] IRectF * bounds, 
            [in] Int32 alpha, 
            [in] Int32 saveFlags, 
            [out] Int32 * count);

        SaveLayerAlphaEx(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom, 
            [in] Int32 alpha, 
            [in] Int32 saveFlags, 
            [out] Int32 * count);

        Restore();

        GetSaveCount(
            [out] Int32 * count);

        RestoreToCount(
            [in] Int32 saveCount);

        Translate(
            [in] Float dx, 
            [in] Float dy);

        Scale(
            [in] Float sx, 
            [in] Float sy);

        ScaleEx(
            [in] Float sx, 
            [in] Float sy, 
            [in] Float px, 
            [in] Float py);

        Rotate(
            [in] Float degrees);

        RotateEx(
            [in] Float degrees, 
            [in] Float px, 
            [in] Float py);

        Skew(
            [in] Float sx, 
            [in] Float sy);

        Concat(
            [in] IMatrix * matrix);

        SetMatrix(
            [in] IMatrix * matrix);

        GetMatrix(
            [in] IMatrix * ctm);

        GetMatrixEx(
            [out] IMatrix ** metrix);

        ClipRect(
            [in] IRectF * rect, 
            [in] RegionOp op, 
            [out] Boolean * isNonEmpty);

        ClipRectEx(
            [in] IRect * rect, 
            [in] RegionOp op, 
            [out] Boolean * isNonEmpty);

        ClipRectEx2(
            [in] IRectF * rect, 
            [out] Boolean * isNonEmpty);

        ClipRectEx3(
            [in] IRect * rect, 
            [out] Boolean * isNonEmpty);

        ClipRectEx4(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom, 
            [in] RegionOp op, 
            [out] Boolean * isNonEmpty);

        ClipRectEx5(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom, 
            [out] Boolean * isNonEmpty);

        ClipRectEx6(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom, 
            [out] Boolean * isNonEmpty);

        ClipPath(
            [in] IPath * path, 
            [in] RegionOp op, 
            [out] Boolean * isNonEmpty);

        ClipPathEx(
            [in] IPath * path, 
            [out] Boolean * IsNonEmpty);

        ClipRegion(
            [in] IRegion * region, 
            [in] RegionOp op, 
            [out] Boolean * IsNonEmpty);

        ClipRegionEx(
            [in] IRegion * region, 
            [out] Boolean * IsNonEmpty);

        GetDrawFilter(
            [out] IDrawFilter ** filter);

        SetDrawFilter(
            [in] IDrawFilter * filter);

        QuickRejectWithRectF(
            [in] IRectF * rect, 
            [in] CanvasEdgeType type, 
            [out] Boolean * isNotIntersect);

        QuickRejectWithPath(
            [in] IPath * path, 
            [in] CanvasEdgeType type, 
            [out] Boolean * isNotIntersect);

        QuickReject(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom, 
            [in] CanvasEdgeType type, 
            [out] Boolean * isNotIntersect);

        GetClipBounds(
            [in] IRect * bounds, 
            [out] Boolean * isNonEmpty);

        GetClipBoundsEx(
            [out] IRect ** bounds);

        DrawRGB(
            [in] Int32 r, 
            [in] Int32 g, 
            [in] Int32 b);

        DrawARGB(
            [in] Int32 a, 
            [in] Int32 r, 
            [in] Int32 g, 
            [in] Int32 b);

        DrawColor(
            [in] Int32 color);

        DrawColorEx(
            [in] Int32 color, 
            [in] PorterDuffMode mode);

        DrawPaint(
            [in] IPaint * paint);

        DrawPoints(
            [in] ArrayOf<Float> pts, 
            [in] Int32 offset, 
            [in] Int32 count, 
            [in] IPaint * paint);

        DrawPointsEx(
            [in] ArrayOf<Float> pts, 
            [in] IPaint * paint);

        DrawPoint(
            [in] Float x, 
            [in] Float y, 
            [in] IPaint * paint);

        DrawLine(
            [in] Float startX, 
            [in] Float startY, 
            [in] Float stopX, 
            [in] Float stopY, 
            [in] IPaint * paint);

        DrawLines(
            [in] ArrayOf<Float> pts, 
            [in] Int32 offset, 
            [in] Int32 count, 
            [in] IPaint * paint);

        DrawLinesEx(
            [in] ArrayOf<Float> pts, 
            [in] IPaint * paint);

        DrawRect(
            [in] IRectF * rect, 
            [in] IPaint * paint);

        DrawRectEx(
            [in] IRect * r, 
            [in] IPaint * paint);

        DrawRectEx2(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom, 
            [in] IPaint * paint);

        DrawOval(
            [in] IRectF * oval, 
            [in] IPaint * paint);

        DrawCircle(
            [in] Float cx, 
            [in] Float cy, 
            [in] Float radius, 
            [in] IPaint * paint);

        DrawArc(
            [in] IRectF * oval, 
            [in] Float startAngle, 
            [in] Float sweepAngle, 
            [in] Boolean useCenter, 
            [in] IPaint * paint);

        DrawRoundRect(
            [in] IRectF * rect, 
            [in] Float rx, 
            [in] Float ry, 
            [in] IPaint * paint);

        DrawPath(
            [in] IPath * path, 
            [in] IPaint * paint);

        DrawBitmap(
            [in] IBitmap * bitmap, 
            [in] Float left, 
            [in] Float top, 
            [in] IPaint * paint);

        DrawBitmapEx(
            [in] IBitmap * bitmap, 
            [in] IRect * src, 
            [in] IRectF * dst, 
            [in] IPaint * paint);

        DrawBitmapEx2(
            [in] IBitmap * bitmap, 
            [in] IRect * src, 
            [in] IRect * dst, 
            [in] IPaint * paint);

        DrawBitmapEx3(
            [in] ArrayOf<Int32> colors, 
            [in] Int32 offset, 
            [in] Int32 stride, 
            [in] Float x, 
            [in] Float y, 
            [in] Int32 width, 
            [in] Int32 height, 
            [in] Boolean hasAlpha, 
            [in] IPaint * paint);

        DrawBitmapEx4(
            [in] ArrayOf<Int32> colors, 
            [in] Int32 offset, 
            [in] Int32 stride, 
            [in] Int32 x, 
            [in] Int32 y, 
            [in] Int32 width, 
            [in] Int32 height, 
            [in] Boolean hasAlpha, 
            [in] IPaint * paint);

        DrawBitmapEx5(
            [in] IBitmap * bitmap, 
            [in] IMatrix * matrix, 
            [in] IPaint * paint);

        DrawBitmapMesh(
            [in] IBitmap * bitmap, 
            [in] Int32 meshWidth, 
            [in] Int32 meshHeight, 
            [in] ArrayOf<Float> verts, 
            [in] Int32 vertOffset, 
            [in] ArrayOf<Int32> * colors, 
            [in] Int32 colorOffset, 
            [in] IPaint * paint);

        DrawVertices(
            [in] CanvasVertexMode mode, 
            [in] Int32 vertexCount, 
            [in] ArrayOf<Float> verts, 
            [in] Int32 vertOffset, 
            [in] ArrayOf<Float> * texs, 
            [in] Int32 texOffset, 
            [in] ArrayOf<Int32> * colors, 
            [in] Int32 colorOffset, 
            [in] ArrayOf<Int16> * indices, 
            [in] Int32 indexOffset, 
            [in] Int32 indexCount, 
            [in] IPaint * paint);

        DrawTextInBuffer(
            [in] ArrayOf<Char8> text, 
            [in] Int32 index, 
            [in] Int32 count, 
            [in] Float x, 
            [in] Float y, 
            [in] IPaint * paint);

        DrawTextInString(
            [in] const String& text, 
            [in] Float x, 
            [in] Float y, 
            [in] IPaint * paint);

        DrawTextInStringEx(
            [in] const String& text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Float x, 
            [in] Float y, 
            [in] IPaint * paint);

        DrawTextInCharSequence(
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Float x, 
            [in] Float y, 
            [in] IPaint * paint);

        DrawPosTextInBuffer(
            [in] ArrayOf<Char8> text, 
            [in] Int32 index, 
            [in] Int32 count, 
            [in] ArrayOf<Float> pos, 
            [in] IPaint * paint);

        DrawPosTextInString(
            [in] const String& text, 
            [in] ArrayOf<Float> pos, 
            [in] IPaint * paint);

        DrawTextOnPathInBuffer(
            [in] ArrayOf<Char8> text, 
            [in] Int32 index, 
            [in] Int32 count, 
            [in] IPath * path, 
            [in] Float hOffset, 
            [in] Float vOffset, 
            [in] IPaint * paint);

        DrawTextOnPathInString(
            [in] const String& text, 
            [in] IPath * path, 
            [in] Float hOffset, 
            [in] Float vOffset, 
            [in] IPaint * paint);

        DrawPicture(
            [in] IPicture * picture);

        DrawPictureEx(
            [in] IPicture * picture, 
            [in] IRectF * dst);

        DrawPictureEx2(
            [in] IPicture * picture, 
            [in] IRect * dst);
    }

    interface IWindowManagerLayoutParams : IViewGroupLayoutParams {
        SetTitle(
            [in] ICharSequence * title);

        GetTitle(
            [out] ICharSequence ** title);

        CopyFrom(
            [in] IWindowManagerLayoutParams * source, 
            [out] Int32 * changes);

        Scale(
            [in] Float scale);

        Backup();

        Restore();

        GetX(
            [out] Int32 * x);

        SetX(
            [in] Int32 x);

        GetY(
            [out] Int32 * y);

        SetY(
            [in] Int32 y);

        GetType(
            [out] Int32 * type);

        SetType(
            [in] Int32 type);

        GetMemoryType(
            [out] Int32 * type);

        SetMemoryType(
            [in] Int32 type);

        GetFlags(
            [out] Int32 * flags);

        SetFlags(
            [in] Int32 flags);

        GetGravity(
            [out] Int32 * gravity);

        SetGravity(
            [in] Int32 gravity);

        GetHorizontalMargin(
            [out] Float * horizontalMargin);

        SetHorizontalMargin(
            [in] Float horizontalMargin);

        GetVerticalMargin(
            [out] Float * verticalMargin);

        SetVerticalMargin(
            [in] Float verticalMargin);

        GetFormat(
            [out] Int32 * format);

        SetFormat(
            [in] Int32 format);

        GetAlpha(
            [out] Float * alpha);

        SetAlpha(
            [in] Float alpha);

        GetDimAmount(
            [out] Float * dimAmount);

        SetDimAmount(
            [in] Float dimAmount);

        GetScreenBrightness(
            [out] Float * brightness);

        SetScreenBrightness(
            [in] Float brightness);

        GetButtonBrightness(
            [out] Float * brightness);

        SetButtonBrightness(
            [in] Float brightness);

        GetToken(
            [out] IBinder ** token);

        SetToken(
            [in] IBinder * token);

        GetScreenOrientation(
            [out] Int32 * orientation);

        SetScreenOrientation(
            [in] Int32 orientation);
    }

    interface IMotionEvent : IInputEvent {
        Recycle();

        Scale(
            [in] Float scale);

        GetAction(
            [out] Int32 * action);

        GetActionMasked(
            [out] Int32 * actionMasked);

        GetActionIndex(
            [out] Int32 * actionIndex);

        GetFlags(
            [out] Int32 * flags);

        GetDownTime(
            [out] Int64 * downTime);

        GetEventTime(
            [out] Int64 * eventTime);

        GetEventTimeNano(
            [out] Int64 * eventTimeNano);

        GetX(
            [out] Float * x);

        GetY(
            [out] Float * y);

        GetPressure(
            [out] Float * pressure);

        GetSize(
            [out] Float * size);

        GetTouchMajor(
            [out] Float * touchMajor);

        GetTouchMinor(
            [out] Float * touchMinor);

        GetToolMajor(
            [out] Float * toolMajor);

        GetToolMinor(
            [out] Float * toolMinor);

        GetOrientation(
            [out] Float * orientation);

        GetPointerCount(
            [out] Int32 * count);

        GetPointerId(
            [in] Int32 pointerIndex, 
            [out] Int32 * pointerId);

        FindPointerIndex(
            [in] Int32 pointerId, 
            [out] Int32 * pointerIndex);

        GetXEx(
            [in] Int32 pointerIndex, 
            [out] Float * x);

        GetYEx(
            [in] Int32 pointerIndex, 
            [out] Float * y);

        GetPressureEx(
            [in] Int32 pointerIndex, 
            [out] Float * pressure);

        GetSizeEx(
            [in] Int32 pointerIndex, 
            [out] Float * size);

        GetTouchMajorEx(
            [in] Int32 pointerIndex, 
            [out] Float * touchMajor);

        GetTouchMinorEx(
            [in] Int32 pointerIndex, 
            [out] Float * touchMinor);

        GetToolMajorEx(
            [in] Int32 pointerIndex, 
            [out] Float * toolMajor);

        GetToolMinorEx(
            [in] Int32 pointerIndex, 
            [out] Float * toolMinor);

        GetOrientationEx(
            [in] Int32 pointerIndex, 
            [out] Float * orientation);

        GetPointerCoords(
            [in] Int32 pointerIndex, 
            [in] Handle32 outPointerCoords);

        GetMetaState(
            [out] Int32 * metaState);

        GetRawX(
            [out] Float * rawX);

        GetRawY(
            [out] Float * rawY);

        GetXPrecision(
            [out] Float * xPrecision);

        GetYPrecision(
            [out] Float * yPrecision);

        GetHistorySize(
            [out] Int32 * historySize);

        GetHistoricalEventTime(
            [in] Int32 pos, 
            [out] Int64 * hEventTime);

        GetHistoricalX(
            [in] Int32 pos, 
            [out] Float * hX);

        GetHistoricalY(
            [in] Int32 pos, 
            [out] Float * hY);

        GetHistoricalPressure(
            [in] Int32 pos, 
            [out] Float * hPressure);

        GetHistoricalSize(
            [in] Int32 pos, 
            [out] Float * hSize);

        GetHistoricalTouchMajor(
            [in] Int32 pos, 
            [out] Float * hTouchMajor);

        GetHistoricalTouchMinor(
            [in] Int32 pos, 
            [out] Float * hTouchMinor);

        GetHistoricalToolMajor(
            [in] Int32 pos, 
            [out] Float * hToolMajor);

        GetHistoricalToolMinor(
            [in] Int32 pos, 
            [out] Float * hToolMinor);

        GetHistoricalOrientation(
            [in] Int32 pos, 
            [out] Float * hOrientation);

        GetHistoricalXEx(
            [in] Int32 pointerIndex, 
            [in] Int32 pos, 
            [out] Float * hX);

        GetHistoricalYEx(
            [in] Int32 pointerIndex, 
            [in] Int32 pos, 
            [out] Float * hY);

        GetHistoricalPressureEx(
            [in] Int32 pointerIndex, 
            [in] Int32 pos, 
            [out] Float * hPressure);

        GetHistoricalSizeEx(
            [in] Int32 pointerIndex, 
            [in] Int32 pos, 
            [out] Float * hSize);

        GetHistoricalTouchMajorEx(
            [in] Int32 pointerIndex, 
            [in] Int32 pos, 
            [out] Float * hTouchMajor);

        GetHistoricalTouchMinorEx(
            [in] Int32 pointerIndex, 
            [in] Int32 pos, 
            [out] Float * hTouchMinor);

        GetHistoricalToolMajorEx(
            [in] Int32 pointerIndex, 
            [in] Int32 pos, 
            [out] Float * hToolMajor);

        GetHistoricalToolMinorEx(
            [in] Int32 pointerIndex, 
            [in] Int32 pos, 
            [out] Float * hToolMinorEx);

        GetHistoricalOrientationEx(
            [in] Int32 pointerIndex, 
            [in] Int32 pos, 
            [out] Float * hOrientation);

        GetHistoricalPointerCoords(
            [in] Int32 pointerIndex, 
            [in] Int32 pos, 
            [in] Handle32 outPointerCoords);

        GetEdgeFlags(
            [out] Int32 * edgeFlags);

        SetEdgeFlags(
            [in] Int32 flags);

        SetAction(
            [in] Int32 action);

        OffsetLocation(
            [in] Float deltaX, 
            [in] Float deltaY);

        SetLocation(
            [in] Float x, 
            [in] Float y);
    }

    interface ITranslator {
        TranslateRectInScreenToAppWinFrame(
            [in] IRect * rect);

        TranslateRegionInWindowToScreen(
            [in] IRegion * transparentRegion);

        TranslateCanvas(
            [in] ICanvas * canvas);

        TranslateEventInScreenToAppWindow(
            [in] IMotionEvent * event);

        TranslateWindowLayout(
            [in] IWindowManagerLayoutParams * params);

        TranslateRectInAppWindowToScreen(
            [in] IRect * rect);

        TranslateRectInScreenToAppWindow(
            [in] IRect * rect);

        GetTranslatedContentInsets(
            [in] IRect * contentInsets, 
            [out] IRect ** rect);

        GetTranslatedVisbileInsets(
            [in] IRect * visibleInsets, 
            [out] IRect ** rect);
    }

    interface ICompatibilityInfoHelper {
        UpdateCompatibleScreenFrame(
            [in] IDisplayMetrics * dm, 
            [in] Int32 orientation, 
            [in] IRect * outRect);
    }

    interface IColorStateList {
        WithAlpha(
            [in] Int32 alpha, 
            [out] IColorStateList ** colors);

        IsStateful(
            [out] Boolean * isStateful);

        GetColorForState(
            [in] ArrayOf<Int32> * stateSet, 
            [in] Int32 defaultColor, 
            [out] Int32 * color);

        GetDefaultColor(
            [out] Int32 * color);
    }

    interface IAssetFileDescriptor {
    }

    interface ITypedArray {
        Length(
            [out] Int32 * len);

        GetIndexCount(
            [out] Int32 * count);

        GetIndex(
            [in] Int32 at, 
            [out] Int32 * index);

        GetResources(
            [out] IResources ** res);

        GetText(
            [in] Int32 index, 
            [out] ICharSequence ** csq);

        GetString(
            [in] Int32 index, 
            [out] String * str);

        GetNonResourceString(
            [in] Int32 index, 
            [out] String * str);

        GetNonConfigurationString(
            [in] Int32 index, 
            [in] Int32 allowedChangingConfigs, 
            [out] String * str);

        GetBoolean(
            [in] Int32 index, 
            [in] Boolean defValue, 
            [out] Boolean * value);

        GetInt32(
            [in] Int32 index, 
            [in] Int32 defValue, 
            [out] Int32 * value);

        GetFloat(
            [in] Int32 index, 
            [in] Float defValue, 
            [out] Float * value);

        GetColor(
            [in] Int32 index, 
            [in] Int32 defValue, 
            [out] Int32 * value);

        GetColorStateList(
            [in] Int32 index, 
            [out] IColorStateList ** list);

        GetInteger(
            [in] Int32 index, 
            [in] Int32 defValue, 
            [out] Int32 * value);

        GetDimension(
            [in] Int32 index, 
            [in] Float defValue, 
            [out] Float * value);

        GetDimensionPixelOffset(
            [in] Int32 index, 
            [in] Int32 defValue, 
            [out] Int32 * value);

        GetDimensionPixelSize(
            [in] Int32 index, 
            [in] Int32 defValue, 
            [out] Int32 * value);

        GetLayoutDimension(
            [in] Int32 index, 
            [in] const String& name, 
            [out] Int32 * dimension);

        GetLayoutDimensionEx(
            [in] Int32 index, 
            [in] Int32 defValue, 
            [out] Int32 * dimension);

        GetFraction(
            [in] Int32 index, 
            [in] Int32 base, 
            [in] Int32 pbase, 
            [in] Float defValue, 
            [out] Float * value);

        GetResourceId(
            [in] Int32 index, 
            [in] Int32 defValue, 
            [out] Int32 * value);

        GetDrawable(
            [in] Int32 index, 
            [out] IDrawable ** drawable);

        GetTextArray(
            [in] Int32 index, 
            [out, callee] ArrayOf<ICharSequence *> * array);

        GetValue(
            [in] Int32 index, 
            [in] ITypedValue * outValue, 
            [out] Boolean * value);

        HasValue(
            [in] Int32 index, 
            [out] Boolean * hasValue);

        PeekValue(
            [in] Int32 index, 
            [out] ITypedValue ** value);

        GetPositionDescription(
            [out] String * msg);

        Recycle();

        GetDescription(
            [out] String * str);
    }

    interface IDrawable {
        Draw(
            [in] ICanvas * canvas);

        SetBounds(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        SetBoundsEx(
            [in] IRect * bounds);

        CopyBounds(
            [in] IRect * bounds);

        CopyBoundsEx(
            [out] IRect ** rect);

        GetBounds(
            [out] IRect ** rect);

        SetChangingConfigurations(
            [in] Int32 configs);

        GetChangingConfigurations(
            [out] Int32 * configs);

        SetDither(
            [in] Boolean dither);

        SetFilterBitmap(
            [in] Boolean filter);

        SetCallback(
            [in] IDrawableCallback * cb);

        InvalidateSelf();

        ScheduleSelf(
            [in] IRunnable * what, 
            [in] Int32 when);

        UnscheduleSelf(
            [in] IRunnable * what);

        SetAlpha(
            [in] Int32 alpha);

        SetColorFilter(
            [in] IColorFilter * cf);

        SetColorFilterEx(
            [in] Int32 color, 
            [in] PorterDuffMode mode);

        ClearColorFilter();

        IsStateful(
            [out] Boolean * isStateful);

        SetState(
            [in] ArrayOf<Int32> * stateSet, 
            [out] Boolean * isStateful);

        GetState(
            [out, callee] ArrayOf<Int32> * stateSet);

        GetCurrent(
            [out] IDrawable ** drawable);

        SetLevel(
            [in] Int32 level, 
            [out] Boolean * changed);

        GetLevel(
            [out] Int32 * curLevel);

        SetVisible(
            [in] Boolean visible, 
            [in] Boolean restart, 
            [out] Boolean * isDifferent);

        IsVisible(
            [out] Boolean * visible);

        GetOpacity(
            [out] Int32 * opacity);

        ResolveOpacity(
            [in] Int32 op1, 
            [in] Int32 op2, 
            [out] Int32 * opacity);

        GetTransparentRegion(
            [out] IRegion ** bounds);

        GetIntrinsicWidth(
            [out] Int32 * width);

        GetIntrinsicHeight(
            [out] Int32 * height);

        GetMinimumWidth(
            [out] Int32 * width);

        GetMinimumHeight(
            [out] Int32 * height);

        GetPadding(
            [in] IRect * padding, 
            [out] Boolean * isPadding);

        Mutate(
            [out] IDrawable ** drawable);

        Inflate(
            [in] IResources * r, 
            [in] IXmlPullParser * parser, 
            [in] IAttributeSet * attrs);

        GetConstantState(
            [out] IDrawableConstantState ** state);
    }

    interface IMovie {
        Width(
            [out] Int32 * width);

        Height(
            [out] Int32 * height);

        IsOpaque(
            [out] Boolean * isOpaque);

        Duration(
            [out] Int32 * height);

        SetTime(
            [in] Int32 relativeMilliseconds, 
            [out] Boolean * isSet);

        Draw(
            [in] ICanvas * canvas, 
            [in] Float x, 
            [in] Float y, 
            [in] IPaint * paint);

        DrawEx(
            [in] ICanvas * canvas, 
            [in] Float x, 
            [in] Float y);
    }

    interface IXmlResourceParser : IXmlPullParser {
        Close();
    }

    interface IConfiguration : IComparable {
        SetTo(
            [in] IConfiguration * source);

        SetToDefaults();

        UpdateFrom(
            [in] IConfiguration * delta, 
            [out] Int32 * changes);

        Diff(
            [in] IConfiguration * delta, 
            [out] Int32 * result);

        IsOtherSeqNewer(
            [in] IConfiguration * other, 
            [out] Boolean * isBetter);

        Equals(
            [in] IConfiguration * that, 
            [out] Boolean * isEqual);

        EqualsEx(
            [in] IInterface * that, 
            [out] Boolean * isEqual);

        GetFontScale(
            [out] Float * fontScale);

        SetFontScale(
            [in] Float fontScale);

        GetScreenLayout(
            [out] Int32 * layout);

        SetScreenLayout(
            [in] Int32 layout);

        GetTouchscreen(
            [out] Int32 * touchscreen);

        SetTouchscreen(
            [in] Int32 touchscreen);

        GetKeyboard(
            [out] Int32 * keyboard);

        SetKeyboard(
            [in] Int32 keyboard);

        GetKeyboardHidden(
            [out] Int32 * keyboardHidden);

        SetKeyboardHidden(
            [in] Int32 keyboardHidden);

        GetHardKeyboardHidden(
            [out] Int32 * hardKeyboardHidden);

        SetHardKeyboardHidden(
            [in] Int32 hardKeyboardHidden);

        GetNavigation(
            [out] Int32 * navigation);

        SetNavigation(
            [in] Int32 navigation);

        GetOrientation(
            [out] Int32 * orientation);

        SetOrientation(
            [in] Int32 orientation);

        GetSeq(
            [out] Int32 * seq);

        SetSeq(
            [in] Int32 seq);
    }

    interface IAssetManager {
        EnsureStringBlocks();

        Close();

        Open(
            [in] const String& fileName, 
            [out] IInputStream ** stream);

        OpenEx(
            [in] const String& fileName, 
            [in] Int32 accessMode, 
            [out] IInputStream ** stream);

        OpenFd(
            [in] const String& fileName, 
            [out] IAssetFileDescriptor ** fd);

        List(
            [in] const String& path, 
            [out, callee] ArrayOf<String> * names);

        OpenNonAsset(
            [in] const String& fileName, 
            [out] IInputStream ** stream);

        OpenNonAssetEx(
            [in] const String& fileName, 
            [in] Int32 accessMode, 
            [out] IInputStream ** stream);

        OpenNonAssetEx2(
            [in] Int32 cookie, 
            [in] const String& fileName, 
            [out] IInputStream ** stream);

        OpenNonAssetEx3(
            [in] Int32 cookie, 
            [in] const String& fileName, 
            [in] Int32 accessMode, 
            [out] IInputStream ** stream);

        OpenNonAssetFd(
            [in] const String& fileName, 
            [out] IAssetFileDescriptor ** fd);

        OpenNonAssetFdEx(
            [in] Int32 cookie, 
            [in] const String& fileName, 
            [out] IAssetFileDescriptor ** fd);

        OpenXmlResourceParser(
            [in] const String& fileName, 
            [out] IXmlResourceParser ** parser);

        OpenXmlResourceParserEx(
            [in] Int32 cookie, 
            [in] const String& fileName, 
            [out] IXmlResourceParser ** parser);

        AddAssetPath(
            [in] const String& path, 
            [out] Int32 * cookie);

        AddAssetPaths(
            [in] ArrayOf<String> paths, 
            [out, callee] ArrayOf<Int32> * cookies);

        IsUpToDate(
            [out] Boolean * isUp);

        SetLocale(
            [in] const String& locale);

        GetLocales(
            [out, callee] ArrayOf<String> * locales);

        SetConfiguration(
            [in] Int32 mcc, 
            [in] Int32 mnc, 
            [in] const String& locale, 
            [in] Int32 orientation, 
            [in] Int32 touchscreen, 
            [in] Int32 density, 
            [in] Int32 keyboard, 
            [in] Int32 keyboardHidden, 
            [in] Int32 navigation, 
            [in] Int32 screenWidth, 
            [in] Int32 screenHeight, 
            [in] Int32 screenLayout, 
            [in] Int32 uiMode, 
            [in] Int32 majorVersion);

        GetCookieName(
            [in] Int32 cookie, 
            [out] String * name);

        GetGlobalAssetCount(
            [out] Int32 * count);

        GetAssetAllocations(
            [out] String * allocations);

        GetGlobalAssetManagerCount(
            [out] Int32 * count);
    }

    interface IDisplay {
        GetDisplayId(
            [out] Int32 * id);

        GetWidth(
            [out] Int32 * width);

        GetHeight(
            [out] Int32 * height);

        GetRotation(
            [out] Int32 * rotation);

        GetPixelFormat(
            [out] Int32 * pixelFormat);

        GetRefreshRate(
            [out] Float * refreshRate);

        GetMetrics(
            [in] IDisplayMetrics * outMetrics);
    }

    interface ITheme {
        ApplyStyle(
            [in] Int32 resid, 
            [in] Boolean force);

        SetTo(
            [in] ITheme * other);

        ObtainStyledAttributes(
            [in] ArrayOf<Int32> attrs, 
            [out] ITypedArray ** styles);

        ObtainStyledAttributesEx(
            [in] Int32 resid, 
            [in] ArrayOf<Int32> attrs, 
            [out] ITypedArray ** styles);

        ObtainStyledAttributesEx2(
            [in] IAttributeSet * set, 
            [in] ArrayOf<Int32> attrs, 
            [in] Int32 defStyleAttr, 
            [in] Int32 defStyleRes, 
            [out] ITypedArray ** styles);

        ResolveAttribute(
            [in] Int32 resid, 
            [in] ITypedValue * outValue, 
            [in] Boolean resolveRefs, 
            [out] Boolean * isFounded);

        Dump(
            [in] Int32 priority, 
            [in] const String& tag, 
            [in] const String& prefix);
    }

    interface IResources {
        GetText(
            [in] Int32 id, 
            [out] ICharSequence ** csq);

        GetQuantityText(
            [in] Int32 id, 
            [in] Int32 quantity, 
            [out] ICharSequence ** seq);

        GetString(
            [in] Int32 id, 
            [out] String * str);

        GetQuantityString(
            [in] Int32 id, 
            [in] Int32 quantity, 
            [out] String * str);

        GetTextEx(
            [in] Int32 id, 
            [in] ICharSequence * def, 
            [out] ICharSequence ** csq);

        GetTextArray(
            [in] Int32 id, 
            [out, callee] ArrayOf<ICharSequence *> * seqs);

        GetStringArray(
            [in] Int32 id, 
            [out, callee] ArrayOf<String> * array);

        GetIntArray(
            [in] Int32 id, 
            [out, callee] ArrayOf<Int32> * ints);

        ObtainTypedArray(
            [in] Int32 id, 
            [out] ITypedArray ** array);

        GetDimension(
            [in] Int32 id, 
            [out] Float * dim);

        GetDimensionPixelOffset(
            [in] Int32 id, 
            [out] Int32 * offset);

        GetDimensionPixelSize(
            [in] Int32 id, 
            [out] Int32 * size);

        GetFraction(
            [in] Int32 id, 
            [in] Int32 base, 
            [in] Int32 pbase, 
            [out] Float * fraction);

        GetDrawable(
            [in] Int32 id, 
            [out] IDrawable ** drawable);

        GetMovie(
            [in] Int32 id, 
            [out] IMovie ** movie);

        GetColor(
            [in] Int32 id, 
            [out] Int32 * color);

        GetColorStateList(
            [in] Int32 id, 
            [out] IColorStateList ** list);

        GetBoolean(
            [in] Int32 id, 
            [out] Boolean * b);

        GetInteger(
            [in] Int32 id, 
            [out] Int32 * i);

        GetLayout(
            [in] Int32 id, 
            [out] IXmlResourceParser ** parser);

        GetAnimation(
            [in] Int32 id, 
            [out] IXmlResourceParser ** animation);

        GetXml(
            [in] Int32 id, 
            [out] IXmlResourceParser ** xml);

        OpenRawResource(
            [in] Int32 id, 
            [out] IInputStream ** res);

        OpenRawResourceEx(
            [in] Int32 id, 
            [in] ITypedValue * value, 
            [out] IInputStream ** res);

        OpenRawResourceFd(
            [in] Int32 id, 
            [out] IAssetFileDescriptor ** des);

        GetValue(
            [in] Int32 id, 
            [in] ITypedValue * outValue, 
            [in] Boolean resolveRefs);

        GetValueEx(
            [in] const String& name, 
            [in] ITypedValue * outValue, 
            [in] Boolean resolveRefs);

        NewTheme(
            [out] ITheme ** theme);

        ObtainAttributes(
            [in] IAttributeSet * set, 
            [in] ArrayOf<Int32> attrs, 
            [out] ITypedArray ** array);

        UpdateConfiguration(
            [in] IConfiguration * config, 
            [in] IDisplayMetrics * metrics);

        GetDisplayMetrics(
            [out] IDisplayMetrics ** metrics);

        GetConfiguration(
            [out] IConfiguration ** config);

        GetCompatibilityInfo(
            [out] ICompatibilityInfo ** ci);

        SetCompatibilityInfo(
            [in] ICompatibilityInfo * ci);

        GetIdentifier(
            [in] const String& name, 
            [in] const String& defType, 
            [in] const String& defCapsule, 
            [out] Int32 * id);

        GetResourceName(
            [in] Int32 resid, 
            [out] String * name);

        GetResourceCapsuleName(
            [in] Int32 resid, 
            [out] String * name);

        GetResourceTypeName(
            [in] Int32 resid, 
            [out] String * name);

        GetResourceEntryName(
            [in] Int32 resid, 
            [out] String * name);

        ParseBundleExtras(
            [in] IXmlResourceParser * parser, 
            [in] IBundle * outBundle);

        ParseBundleExtra(
            [in] const String& tagName, 
            [in] IAttributeSet * attrs, 
            [in] IBundle * outBundle);

        GetAssets(
            [out] IAssetManager ** manager);

        FlushLayoutCache();

        StartPreloading();

        FinishPreloading();

        GetDefaultDisplay(
            [in] IDisplay * defaultDisplay, 
            [out] IDisplay ** display);
    }

    interface IResourcesFactory {
        GetSystem(
            [out] IResources ** res);

        UpdateSystemConfiguration(
            [in] IConfiguration * config, 
            [in] IDisplayMetrics * metrics);
    }

    interface IAssetInputStream : IInputStream {
        GetAssetInt32(
            [out] Int32 * value);
    }

    interface ICapsuleManager {
        GetCapsuleInfo(
            [in] const String& capsuleName, 
            [in] Int32 flags, 
            [out] ICapsuleInfo ** capInfo);

        GetCapsuleUid(
            [in] const String& capsuleName, 
            [out] Int32 * uid);

        GetCapsuleGids(
            [in] const String& capsuleName, 
            [out, callee] ArrayOf<Int32> * gids);

        CurrentToCanonicalCapsuleNames(
            [in] ArrayOf<String> names, 
            [out, callee] ArrayOf<String> * cnames);

        CanonicalToCurrentCapsuleNames(
            [in] ArrayOf<String> names, 
            [out, callee] ArrayOf<String> * cnames);

        GetPermissionInfo(
            [in] const String& name, 
            [in] Int32 flags, 
            [out] IPermissionInfo ** info);

        QueryPermissionsByGroup(
            [in] const String& group, 
            [in] Int32 flags, 
            [out] IObjectContainer ** infos);

        GetPermissionGroupInfo(
            [in] const String& name, 
            [in] Int32 flags, 
            [out] IPermissionGroupInfo ** info);

        GetAllPermissionGroups(
            [in] Int32 flags, 
            [out] IObjectContainer ** infos);

        GetApplicationInfo(
            [in] const String& capsuleName, 
            [in] Int32 flags, 
            [out] IApplicationInfo ** appInfo);

        GetActivityInfo(
            [in] IComponentName * component, 
            [in] Int32 flags, 
            [out] IActivityInfo ** activityInfo);

        GetReceiverInfo(
            [in] IComponentName * component, 
            [in] Int32 flags, 
            [out] IActivityInfo ** info);

        GetServiceInfo(
            [in] IComponentName * component, 
            [in] Int32 flags, 
            [out] IServiceInfo ** info);

        GetContentProviderInfo(
            [in] IComponentName * className, 
            [in] Int32 flags, 
            [out] IContentProviderInfo ** info);

        CheckPermission(
            [in] const String& permName, 
            [in] const String& capName, 
            [out] Int32 * perm);

        CheckUidPermission(
            [in] const String& permName, 
            [in] Int32 uid, 
            [out] Int32 * perm);

        AddPermission(
            [in] IPermissionInfo * info, 
            [out] Boolean * isAdded);

        RemovePermission(
            [in] const String& name);

        IsProtectedBroadcast(
            [in] const String& actionName, 
            [out] Boolean * result);

        CheckSignatures(
            [in] const String& cap1, 
            [in] const String& cap2, 
            [out] Int32 * sig);

        CheckUidSignatures(
            [in] Int32 uid1, 
            [in] Int32 uid2, 
            [out] Int32 * sig);

        GetCapsulesForUid(
            [in] Int32 uid, 
            [out, callee] ArrayOf<String> * capsules);

        GetNameForUid(
            [in] Int32 uid, 
            [out] String * name);

        GetUidForSharedUser(
            [in] const String& sharedUserName, 
            [out] Int32 * uid);

        ResolveIntent(
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] Int32 flags, 
            [out] IResolveInfo ** resolveInfo);

        QueryIntentActivities(
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] Int32 flags, 
            [out] IObjectContainer ** infos);

        QueryIntentActivityOptions(
            [in] IComponentName * caller, 
            [in] ArrayOf<IIntent *> * specifics, 
            [in] ArrayOf<String> * specificTypes, 
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] Int32 flags, 
            [out] IObjectContainer ** infos);

        QueryIntentReceivers(
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] Int32 flags, 
            [out] IObjectContainer ** receivers);

        ResolveService(
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] Int32 flags, 
            [out] IResolveInfo ** resolveInfo);

        QueryIntentServices(
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] Int32 flags, 
            [out] IObjectContainer ** infos);

        GetInstalledCapsules(
            [in] Int32 flags, 
            [in] const String& lastRead, 
            [out] IParceledListSlice ** slice);

        GetInstalledApplications(
            [in] Int32 flags, 
            [in] const String& lastRead, 
            [out] IParceledListSlice ** slice);

        GetPersistentApplications(
            [in] Int32 flags, 
            [out] IObjectContainer ** infos);

        ResolveContentProvider(
            [in] const String& name, 
            [in] Int32 flags, 
            [out] IContentProviderInfo ** info);

        QuerySyncProviders(
            [in] IObjectContainer * outNames, 
            [in] IObjectContainer * outInfo);

        QueryContentProviders(
            [in] const String& processName, 
            [in] Int32 uid, 
            [in] Int32 flags, 
            [out] IObjectContainer ** providers);

        GetInstrumentationInfo(
            [in] IComponentName * className, 
            [in] Int32 flags, 
            [out] IInstrumentationInfo ** info);

        QueryInstrumentation(
            [in] const String& targetCapsule, 
            [in] Int32 flags, 
            [out] IObjectContainer ** infos);

        InstallCapsule(
            [in] IUri * capsuleURI, 
            [in] ICapsuleInstallObserver * observer, 
            [in] Int32 flags, 
            [in] const String& installerCapsuleName);

        InstallCapsuleEx2(
            [in] const String& path);

        FinishCapsuleInstall(
            [in] Int32 token);

        DeleteCapsule(
            [in] const String& capsuleName, 
            [in] ICapsuleDeleteObserver * observer, 
            [in] Int32 flags);

        GetInstallerCapsuleName(
            [in] const String& capsuleName, 
            [out] String * name);

        AddCapsuleToPreferred(
            [in] const String& capsuleName);

        RemoveCapsuleFromPreferred(
            [in] const String& capsuleName);

        GetPreferredCapsules(
            [in] Int32 flags, 
            [out] IObjectContainer ** infos);

        AddPreferredActivity(
            [in] IIntentFilter * filter, 
            [in] Int32 match, 
            [in] IObjectContainer * set, 
            [in] IComponentName * activity);

        ReplacePreferredActivity(
            [in] IIntentFilter * filter, 
            [in] Int32 match, 
            [in] IObjectContainer * set, 
            [in] IComponentName * activity);

        ClearCapsulePreferredActivities(
            [in] const String& capsuleName);

        GetPreferredActivities(
            [in] IObjectContainer * outFilters, 
            [in] IObjectContainer * outActivities, 
            [in] const String& capsuleName, 
            [out] Int32 * count);

        SetComponentEnabledSetting(
            [in] IComponentName * componentName, 
            [in] Int32 newState, 
            [in] Int32 flags);

        GetComponentEnabledSetting(
            [in] IComponentName * componentName, 
            [out] Int32 * setting);

        SetApplicationEnabledSetting(
            [in] const String& capsuleName, 
            [in] Int32 newState, 
            [in] Int32 flags);

        GetApplicationEnabledSetting(
            [in] const String& capsuleName, 
            [out] Int32 * setting);

        FreeStorageAndNotify(
            [in] Int64 freeStorageSize, 
            [in] ICapsuleDataObserver * observer);

        FreeStorage(
            [in] Int64 freeStorageSize, 
            [in] IIntentSender * pi);

        DeleteApplicationCacheFiles(
            [in] const String& capsuleName, 
            [in] ICapsuleDataObserver * observer);

        ClearApplicationUserData(
            [in] const String& capsuleName, 
            [in] ICapsuleDataObserver * observer);

        GetCapsuleSizeInfo(
            [in] const String& capsuleName, 
            [in] ICapsuleStatsObserver * observer);

        GetSystemSharedLibraryNames(
            [out, callee] ArrayOf<String> * names);

        GetSystemAvailableFeatures(
            [out] IObjectContainer ** infos);

        HasSystemFeature(
            [in] const String& name, 
            [out] Boolean * result);

        EnterSafeMode();

        IsSafeMode(
            [out] Boolean * isSafeMode);

        SystemReady();

        HasSystemUidErrors(
            [out] Boolean * result);

        UpdateExternalMediaStatus(
            [in] Boolean mounted, 
            [in] Boolean reportStatus);

        NextCapsuleToClean(
            [in] const String& lastCapsule, 
            [out] String * nextCapsule);

        MoveCapsule(
            [in] const String& capsuleName, 
            [in] ICapsuleMoveObserver * observer, 
            [in] Int32 flags);

        AddPermissionAsync(
            [in] IPermissionInfo * info, 
            [out] Boolean * isAdded);

        SetInstallLocation(
            [in] Int32 loc, 
            [out] Boolean * isSetted);

        GetInstallLocation(
            [out] Int32 * loc);
    }

    interface ICapsuleItemInfo {
        LoadLabel(
            [in] ICapsuleManager * pm, 
            [out] ICharSequence ** label);

        LoadIcon(
            [in] ICapsuleManager * pm, 
            [out] IDrawable ** icon);

        LoadLogo(
            [in] ICapsuleManager * pm, 
            [out] IDrawable ** icon);

        LoadXmlMetaData(
            [in] ICapsuleManager * pm, 
            [in] const String& name, 
            [out] IXmlResourceParser ** resource);

        GetName(
            [out] String * name);

        SetName(
            [in] const String& name);

        GetCapsuleName(
            [out] String * name);

        SetCapsuleName(
            [in] const String& name);

        GetLabelRes(
            [out] Int32 * labelRes);

        SetLabelRes(
            [in] Int32 labelRes);

        GetNonLocalizedLabel(
            [out] ICharSequence ** label);

        SetNonLocalizedLabel(
            [in] ICharSequence * label);

        GetIcon(
            [out] Int32 * icon);

        SetIcon(
            [in] Int32 icon);

        GetLogo(
            [out] Int32 * logo);

        SetLogo(
            [in] Int32 logo);

        GetMetaData(
            [out] IBundle ** metaData);

        SetMetaData(
            [in] IBundle * metaData);
    }

    interface IApplicationInfo : ICapsuleItemInfo {
        DisableCompatibilityMode();

        GetTaskAffinity(
            [out] String * task);

        SetTaskAffinity(
            [in] const String& task);

        GetPermission(
            [out] String * permission);

        SetPermission(
            [in] const String& permission);

        GetProcessName(
            [out] String * name);

        SetProcessName(
            [in] const String& name);

        GetClassName(
            [out] String * name);

        SetClassName(
            [in] const String& name);

        GetDescriptionRes(
            [out] Int32 * desRes);

        SetDescriptionRes(
            [in] Int32 desRes);

        GetTheme(
            [out] Int32 * theme);

        SetTheme(
            [in] Int32 theme);

        GetManageSpaceActivityName(
            [out] String * name);

        SetManageSpaceActivityName(
            [in] const String& name);

        GetBackupAgentName(
            [out] String * name);

        SetBackupAgentName(
            [in] const String& name);

        GetFlags(
            [out] Int32 * flags);

        SetFlags(
            [in] Int32 flags);

        GetSourceDir(
            [out] String * sourceDir);

        SetSourceDir(
            [in] const String& sourceDir);

        GetPublicSourceDir(
            [out] String * publicSourceDir);

        SetPublicSourceDir(
            [in] const String& pubicSourceDir);

        SetSharedLibraryFiles(
            [in] ArrayOf<String> * sharedLibraryFiles);

        GetDataDir(
            [out] String * dataDir);

        SetDataDir(
            [in] const String& dataDir);

        GetNativeLibraryDir(
            [out] String * libraryDir);

        SetNativeLibraryDir(
            [in] const String& libraryDir);

        GetUid(
            [out] Int32 * uid);

        SetUid(
            [in] Int32 uid);

        GetTargetSdkVersion(
            [out] Int32 * sdkVersion);

        SetTargetSdkVersion(
            [in] Int32 sdkVersion);

        IsEnabled(
            [out] Boolean * isEnabled);

        SetEnabled(
            [in] Boolean enabled);

        GetInstallLocation(
            [out] Int32 * location);

        SetInstallLocation(
            [in] Int32 location);

        GetDescription(
            [out] String * description);
    }

    interface IComponentInfo : ICapsuleItemInfo {
        GetComponentName(
            [out] String * capsuleName, 
            [out] String * className);

        SetComponentName(
            [in] const String& capsuleName, 
            [in] const String& className);

        GetApplicationInfo(
            [out] IApplicationInfo ** info);

        SetApplicationInfo(
            [in] IApplicationInfo * info);

        GetProcessName(
            [out] String * processName);

        SetProcessName(
            [in] const String& processName);

        GetDescriptionRes(
            [out] Int32 * desRes);

        SetDescriptionRes(
            [in] Int32 desRes);

        IsEnabled(
            [out] Boolean * enabled);

        SetEnabled(
            [in] Boolean enabled);

        IsExported(
            [out] Boolean * exported);

        SetExported(
            [in] Boolean exported);
    }

    interface IActivityInfo : IComponentInfo {
        GetTheme(
            [out] Int32 * theme);

        SetTheme(
            [in] Int32 theme);

        GetLaunchMode(
            [out] Int32 * mode);

        SetLaunchMode(
            [in] Int32 mode);

        GetPermission(
            [out] String * permission);

        SetPermission(
            [in] const String& permission);

        GetTaskAffinity(
            [out] String * task);

        SetTaskAffinity(
            [in] const String& task);

        GetTargetActivity(
            [out] String * target);

        SetTargetActivity(
            [in] const String& target);

        GetFlags(
            [out] Int32 * flags);

        SetFlags(
            [in] Int32 flags);

        GetScreenOrientation(
            [out] Int32 * orientation);

        SetScreenOrientation(
            [in] Int32 orientation);

        GetConfigChanges(
            [out] Int32 * changes);

        SetConfigChanges(
            [in] Int32 changes);

        GetSoftInputMode(
            [out] Int32 * mode);

        SetSoftInputMode(
            [in] Int32 mode);
    }

    interface IServiceInfo : IComponentInfo {
        GetPermission(
            [out] String * permission);

        SetPermission(
            [in] const String& permission);
    }

    interface IPathPermission : IPatternMatcher {
        GetReadPermission(
            [out] String * permission);

        GetWritePermission(
            [out] String * permission);
    }

    interface IContentProviderInfo : IComponentInfo {
        GetAuthority(
            [out] String * authority);

        SetAuthority(
            [in] const String& authority);

        GetReadPermission(
            [out] String * permission);

        SetReadPermission(
            [in] const String& permission);

        GetWritePermission(
            [out] String * permission);

        SetWritePermission(
            [in] const String& permission);

        SetGrantUriPermissions(
            [in] Boolean grant);

        InitUriPermissionPatterns();

        AddUriPermissionPatterns(
            [in] IPatternMatcher * pattern);

        GetUriPermissionPatterns(
            [out] IObjectContainer ** permissions);

        ClearUriPermissionPatterns();

        InitPathPermissions();

        AddPathPermission(
            [in] IPathPermission * permission);

        GetPathPermissions(
            [out] IObjectContainer ** permissions);

        SetPathPermissions(
            [in] IObjectContainer * permissions);

        SetMultiprocess(
            [in] Boolean multiprocess);

        SetInitOrder(
            [in] Int32 initOrder);

        GetSyncable(
            [out] Boolean * syncable);

        SetSyncable(
            [in] Boolean syncable);
    }

    interface IAuthorInfo {
        GetAuthorInfo(
            [in] const String& attrName, 
            [out] String * attrValue);

        SetAuthorInfo(
            [in] const String& attrName, 
            [in] const String& attrValue);
    }

    interface IIntentFilter {
        SetPriority(
            [in] Int32 priority);

        GetPriority(
            [out] Int32 * priority);

        AddAction(
            [in] const String& action);

        CountActions(
            [out] Int32 * count);

        GetAction(
            [in] Int32 index, 
            [out] String * action);

        HasAction(
            [in] const String& action, 
            [out] Boolean * hasAction);

        MatchAction(
            [in] const String& action, 
            [out] Boolean * isMatched);

        GetActions(
            [out, callee] ArrayOf<String> * actions);

        AddDataType(
            [in] const String& type);

        HasDataType(
            [in] const String& type, 
            [out] Boolean * hasDataType);

        CountDataTypes(
            [out] Int32 * count);

        GetDataType(
            [in] Int32 index, 
            [out] String * type);

        GetTypes(
            [out, callee] ArrayOf<String> * types);

        AddDataScheme(
            [in] const String& scheme);

        CountDataSchemes(
            [out] Int32 * count);

        GetDataScheme(
            [in] Int32 index, 
            [out] String * scheme);

        HasDataScheme(
            [in] const String& scheme, 
            [out] Boolean * result);

        GetSchemes(
            [out, callee] ArrayOf<String> * schemes);

        AddDataAuthority(
            [in] const String& host, 
            [in] const String& port);

        CountDataAuthorities(
            [out] Int32 * count);

        GetDataAuthority(
            [in] Int32 index, 
            [out] IAuthorityEntry ** authority);

        HasDataAuthority(
            [in] IUri * data, 
            [out] Boolean * result);

        AddDataPath(
            [in] const String& path, 
            [in] Int32 type);

        CountDataPaths(
            [out] Int32 * count);

        GetDataPath(
            [in] Int32 index, 
            [out] IPatternMatcher ** path);

        HasDataPath(
            [in] const String& data, 
            [out] Boolean * result);

        MatchDataAuthority(
            [in] IUri * data, 
            [out] Int32 * result);

        MatchData(
            [in] const String& type, 
            [in] const String& scheme, 
            [in] IUri * data, 
            [out] Int32 * result);

        AddCategory(
            [in] const String& category);

        CountCategories(
            [out] Int32 * count);

        GetCategory(
            [in] Int32 index, 
            [out] String * category);

        HasCategory(
            [in] const String& category, 
            [out] Boolean * hasCategory);

        MatchCategories(
            [in] ArrayOf<String> * categories, 
            [out] String * result);

        Match(
            [in] const String& action, 
            [in] const String& type, 
            [in] const String& scheme, 
            [in] IUri * data, 
            [in] ArrayOf<String> * categories, 
            [in] CString logTag, 
            [out] Int32 * result);

        MatchEx(
            [in] IContentResolver * resolver, 
            [in] IIntent * intent, 
            [in] Boolean resolve, 
            [in] CString logTag, 
            [out] Int32 * result);

        WriteToXml(
            [in] IXmlSerializer * serializer);

        ReadFromXml(
            [in] IXmlPullParser * parser);
    }

    interface IResolveInfo {
        GetActivityInfo(
            [out] IActivityInfo ** activityInfo);

        SetActivityInfo(
            [in] IActivityInfo * activityInfo);

        GetServiceInfo(
            [out] IServiceInfo ** serviceInfo);

        SetServiceInfo(
            [in] IServiceInfo * serviceInfo);

        GetIntentFilter(
            [out] IIntentFilter ** intentFilter);

        SetIntentFilter(
            [in] IIntentFilter * intentFilter);

        GetPriority(
            [out] Int32 * priority);

        SetPriority(
            [in] Int32 priority);

        GetPreferredOrder(
            [out] Int32 * order);

        SetPreferredOrder(
            [in] Int32 order);

        GetMatch(
            [out] Int32 * match);

        SetMatch(
            [in] Int32 match);

        GetSpecificIndex(
            [out] Int32 * index);

        SetSpecificIndex(
            [in] Int32 index);

        IsDefault(
            [out] Boolean * isDefault);

        SetDefault(
            [in] Boolean isDefault);

        GetLabelRes(
            [out] Int32 * labelRes);

        SetLabelRes(
            [in] Int32 labelRes);

        GetNonLocalizedLabel(
            [out] ICharSequence ** label);

        SetNonLocalizedLabel(
            [in] ICharSequence * label);

        GetIcon(
            [out] Int32 * icon);

        SetIcon(
            [in] Int32 icon);

        GetResolveCapsuleName(
            [out] String * capsuleName);

        SetResolveCapsuleName(
            [in] const String& capsuleName);
    }

    interface IInstrumentationInfo : ICapsuleItemInfo {
        GetTargetCapsule(
            [out] String * capsule);

        SetTargetCapsule(
            [in] const String& capsule);

        GetSourceDir(
            [out] String * sourceDir);

        SetSourceDir(
            [in] const String& sourceDir);

        GetPublicSourceDir(
            [out] String * pubSrcDir);

        SetPublicSourceDir(
            [in] const String& pubSrcDir);

        GetDataDir(
            [out] String * dataDir);

        SetDataDir(
            [in] const String& dataDir);

        GetNativeLibraryDir(
            [out] String * libraryDir);

        SetNativeLibraryDir(
            [in] const String& libraryDir);

        IsHandleProfiling(
            [out] Boolean * handleProfiling);

        SetHandleProfiling(
            [in] Boolean handleProfiling);

        IsFunctionalTest(
            [out] Boolean * functionalTest);

        SetFunctionalTest(
            [in] Boolean functionalTest);
    }

    interface IPermissionInfo : ICapsuleItemInfo {
        LoadDescription(
            [in] ICapsuleManager * cm, 
            [out, callee] ArrayOf<Char8> * des);

        GetDescription(
            [out] String * des);

        GetGroup(
            [out] String * group);

        SetGroup(
            [in] const String& group);

        GetDescriptionRes(
            [out] Int32 * desRes);

        SetDescriptionRes(
            [in] Int32 desRes);

        GetNonLocalizedDescription(
            [out] ICharSequence ** des);

        SetNonLocalizedDescription(
            [in] ICharSequence * des);

        GetProtectionLevel(
            [out] Int32 * level);

        SetProtectionLevel(
            [in] Int32 level);
    }

    interface ISignature {
        ToChars(
            [out, callee] ArrayOf<Char8> * text);

        ToCharsEx(
            [in] ArrayOf<Char8> * existingArray, 
            [in] ArrayOf<Int32> * outLen, 
            [out, callee] ArrayOf<Char8> * text);

        ToCharsString(
            [out] String * str);

        ToByteArray(
            [out, callee] ArrayOf<Byte> * bytes);

        Equals(
            [in] ISignature * obj, 
            [out] Boolean * isEqual);

        GetHashCode(
            [out] Int32 * hashCode);
    }

    interface IConfigurationInfo {
        GetDescription(
            [out] String * des);

        GetGlEsVersion(
            [out] String * ver);

        GetReqTouchScreen(
            [out] Int32 * reqTouchScreen);

        SetReqTouchScreen(
            [in] Int32 reqTouchScreen);

        GetReqKeyboardType(
            [out] Int32 * reqKeyboardType);

        SetReqKeyboardType(
            [in] Int32 reqKeyboardType);

        GetReqNavigation(
            [out] Int32 * reqNavigation);

        SetReqNavigation(
            [in] Int32 reqNavigation);

        GetReqInputFeatures(
            [out] Int32 * reqInputFeatures);

        SetReqInputFeatures(
            [in] Int32 reqInputFeatures);

        GetReqGlEsVersion(
            [out] Int32 * reqGlEsVersion);

        SetReqGlEsVersion(
            [in] Int32 reqGlEsVersion);
    }

    interface IFeatureInfo {
        GetDescription(
            [out] String * des);

        GetGlEsVersion(
            [out] String * ver);

        GetName(
            [out] String * name);

        SetName(
            [in] const String& name);

        GetReqGlEsVersion(
            [out] Int32 * reqGlEsVersion);

        SetReqGlEsVersion(
            [in] Int32 reqGlEsVersion);

        GetFlags(
            [out] Int32 * flags);

        SetFlags(
            [in] Int32 flags);
    }

    interface ICapsuleInfo {
        GetCapsuleName(
            [out] String * name);

        SetCapsuleName(
            [in] const String& name);

        GetVersionCode(
            [out] Int32 * versionCode);

        SetVersionCode(
            [in] Int32 versionCode);

        GetVersionName(
            [out] String * versionName);

        SetVersionName(
            [in] const String& versionName);

        GetSharedUserId(
            [out] String * id);

        SetSharedUserId(
            [in] const String& id);

        GetSharedUserLabel(
            [out] Int32 * label);

        SetSharedUserLabel(
            [in] Int32 label);

        GetApplicationInfo(
            [out] IApplicationInfo ** info);

        SetApplicationInfo(
            [in] IApplicationInfo * info);

        GetFirstInstallTime(
            [out] Int64 * time);

        SetFirstInstallTime(
            [in] Int64 time);

        GetLastUpdateTime(
            [out] Int64 * time);

        SetLastUpdateTime(
            [in] Int64 time);

        GetGids(
            [out, callee] ArrayOf<Int32> * gids);

        SetGids(
            [in] ArrayOf<Int32> * gids);

        AddActivity(
            [in] IActivityInfo * activity);

        AddReceiver(
            [in] IActivityInfo * receiver);

        AddService(
            [in] IServiceInfo * service);

        AddContentProvider(
            [in] IContentProviderInfo * provider);

        AddInstrumentation(
            [in] IInstrumentationInfo * instumentation);

        AddPermission(
            [in] IPermissionInfo * permission);

        AddRequestedPermission(
            [in] const String& permission);

        AddSignature(
            [in] ISignature * signature);

        AddConfigPreference(
            [in] IConfigurationInfo * config);

        AddReqFeature(
            [in] IFeatureInfo * feature);

        GetInstallLocation(
            [out] Int32 * location);

        SetInstallLocation(
            [in] Int32 location);
    }

    interface ICapsuleInfoLite {
        ToString(
            [out] String * des);

        DescribeContents(
            [out] Int32 * ret);

        GetCapsuleName(
            [out] String * name);

        SetCapsuleName(
            [in] const String& name);

        GetRecommendedInstallLocation(
            [out] Int32 * location);

        SetRecommendedInstallLocation(
            [in] Int32 location);

        GetInstallLocation(
            [out] Int32 * location);

        SetInstallLocation(
            [in] Int32 location);
    }

    interface IPermissionGroupInfo : ICapsuleItemInfo {
        LoadDescription(
            [in] ICapsuleManager * cm, 
            [out] ICharSequence ** des);

        GetDescription(
            [out] String * des);

        GetDescriptionRes(
            [out] Int32 * desRes);

        SetDescriptionRes(
            [in] Int32 desRes);
    }

    interface IParceledListSlice {
        Append(
            [in] IParcelable * item, 
            [out] Boolean * isFull);

        SetLastSlice(
            [in] Boolean lastSlice);

        IsLastSlice(
            [out] Boolean * isLast);
    }

    interface ICapsuleInstallObserver {
        CapsuleInstalled(
            [in] const String& capsuleName, 
            [in] Int32 returnCode);
    }

    interface ICapsuleDeleteObserver {
        CapsuleDeleted(
            [in] Boolean succeeded);
    }

    interface ICapsuleDataObserver {
        OnRemoveCompleted(
            [in] const String& capsuleName, 
            [in] Boolean succeeded);
    }

    interface ICapsuleStats {
        GetDescription(
            [out] String * str);
    }

    interface ICapsuleStatsObserver {
        OnGetStatsCompleted(
            [in] ICapsuleStats * stats, 
            [in] Boolean succeeded);
    }

    interface ICapsuleMoveObserver {
        CapsuleMoved(
            [in] const String& capName, 
            [in] Int32 retCode);
    }

    interface IComponentName : IComparable {
        GetCapsuleName(
            [out] String * capsuleName);

        GetClassName(
            [out] String * className);

        FlattenToString(
            [out] String * name);

        FlattenToShortString(
            [out] String * name);

        Equals(
            [in] IComponentName * other, 
            [out] Boolean * isEqual);

        GetShortDescription(
            [out] String * description);
    }

    interface IIntent : IDescribable {
        CloneFilter(
            [out] IIntent ** result);

        GetAction(
            [out] String * action);

        GetData(
            [out] IUri ** data);

        GetDataString(
            [out] String * dataString);

        GetScheme(
            [out] String * scheme);

        GetType(
            [out] String * type);

        ResolveType(
            [in] IContext * context, 
            [out] String * type);

        ResolveTypeEx(
            [in] IContentResolver * resolver, 
            [out] String * type);

        ResolveTypeIfNeeded(
            [in] IContentResolver * resolver, 
            [out] String * type);

        HasCategory(
            [in] const String& category, 
            [out] Boolean * result);

        GetCategories(
            [out, callee] ArrayOf<String> * categories);

        SetExtrasClassLoader(
            [in] IClassLoader * loader);

        HasExtra(
            [in] const String& name, 
            [out] Boolean * result);

        HasFileDescriptors(
            [out] Boolean * result);

        GetBooleanExtraEx(
            [in] const String& name, 
            [in] Boolean defaultValue, 
            [out] Boolean * value);

        GetByteExtraEx(
            [in] const String& name, 
            [in] Byte defaultValue, 
            [out] Byte * value);

        GetInt16ExtraEx(
            [in] const String& name, 
            [in] Int16 defaultValue, 
            [out] Int16 * value);

        GetCharExtraEx(
            [in] const String& name, 
            [in] Char32 defaultValue, 
            [out] Char32 * value);

        GetInt32ExtraEx(
            [in] const String& name, 
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetInt64ExtraEx(
            [in] const String& name, 
            [in] Int64 defaultValue, 
            [out] Int64 * value);

        GetFloatExtraEx(
            [in] const String& name, 
            [in] Float defaultValue, 
            [out] Float * value);

        GetDoubleExtraEx(
            [in] const String& name, 
            [in] Double defaultValue, 
            [out] Double * value);

        GetStringExtra(
            [in] const String& name, 
            [out] String * value);

        GetCharSequenceExtra(
            [in] const String& name, 
            [out] ICharSequence ** value);

        GetParcelableExtra(
            [in] const String& name, 
            [out] IParcelable ** value);

        GetParcelableArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<IParcelable *> * value);

        GetParcelableArrayListExtra(
            [in] const String& name, 
            [out] IObjectContainer ** value);

        GetIntegerArrayListExtra(
            [in] const String& name, 
            [out] IObjectContainer ** value);

        GetStringArrayListExtra(
            [in] const String& name, 
            [out] IObjectContainer ** value);

        GetCharSequenceArrayListExtra(
            [in] const String& name, 
            [out] IObjectContainer ** value);

        GetBooleanArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<Boolean> * value);

        GetByteArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<Byte> * value);

        GetInt16ArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<Int16> * value);

        GetCharArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<Char32> * value);

        GetInt32ArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<Int32> * value);

        GetInt64ArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<Int64> * value);

        GetFloatArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<Float> * value);

        GetDoubleArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<Double> * value);

        GetStringArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<String> * value);

        GetCharSequenceArrayExtra(
            [in] const String& name, 
            [out, callee] ArrayOf<ICharSequence *> * value);

        GetBundleExtra(
            [in] const String& name, 
            [out] IBundle ** value);

        GetExtras(
            [out] IBundle ** extras);

        GetFlags(
            [out] Int32 * flags);

        GetCapsule(
            [out] String * capsuleName);

        GetComponent(
            [out] IComponentName ** result);

        GetSourceBounds(
            [out] IRect ** result);

        ResolveActivity(
            [in] ICapsuleManager * cm, 
            [out] IComponentName ** result);

        ResolveActivityInfo(
            [in] ICapsuleManager * cm, 
            [in] Int32 flags, 
            [out] IActivityInfo ** result);

        SetActionEx(
            [in] const String& action, 
            [out] IIntent ** result);

        SetDataEx(
            [in] IUri * data, 
            [out] IIntent ** result);

        SetTypeEx(
            [in] const String& type, 
            [out] IIntent ** result);

        SetDataAndTypeEx(
            [in] IUri * data, 
            [in] const String& type, 
            [out] IIntent ** result);

        AddCategoryEx(
            [in] const String& category, 
            [out] IIntent ** result);

        RemoveCategory(
            [in] const String& category);

        PutBooleanExtraEx(
            [in] const String& name, 
            [in] Boolean value, 
            [out] IIntent ** result);

        PutByteExtraEx(
            [in] const String& name, 
            [in] Byte value, 
            [out] IIntent ** result);

        PutCharExtraEx(
            [in] const String& name, 
            [in] Char32 value, 
            [out] IIntent ** result);

        PutInt16ExtraEx(
            [in] const String& name, 
            [in] Int16 value, 
            [out] IIntent ** result);

        PutInt32ExtraEx(
            [in] const String& name, 
            [in] Int32 value, 
            [out] IIntent ** result);

        PutInt64ExtraEx(
            [in] const String& name, 
            [in] Int64 value, 
            [out] IIntent ** result);

        PutFloatExtraEx(
            [in] const String& name, 
            [in] Float value, 
            [out] IIntent ** result);

        PutDoubleExtraEx(
            [in] const String& name, 
            [in] Double value, 
            [out] IIntent ** result);

        PutStringExtraEx(
            [in] const String& name, 
            [in] const String& value, 
            [out] IIntent ** result);

        PutCharSequenceExtra(
            [in] const String& name, 
            [in] ICharSequence * value, 
            [out] IIntent ** result);

        PutParcelableExtraEx(
            [in] const String& name, 
            [in] IParcelable * value, 
            [out] IIntent ** result);

        PutParcelableArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<IParcelable *> * value, 
            [out] IIntent ** result);

        PutParcelableArrayListExtra(
            [in] const String& name, 
            [in] IObjectContainer * value, 
            [out] IIntent ** result);

        PutIntegerArrayListExtra(
            [in] const String& name, 
            [in] IObjectContainer * value, 
            [out] IIntent ** result);

        PutStringArrayListExtra(
            [in] const String& name, 
            [in] IObjectContainer * value, 
            [out] IIntent ** result);

        PutCharSequenceArrayListExtra(
            [in] const String& name, 
            [in] IObjectContainer * value, 
            [out] IIntent ** result);

        PutBooleanArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<Boolean> * value, 
            [out] IIntent ** result);

        PutByteArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<Byte> * value, 
            [out] IIntent ** result);

        PutInt16ArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<Int16> * value, 
            [out] IIntent ** result);

        PutCharArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<Char32> * value, 
            [out] IIntent ** result);

        PutInt32ArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<Int32> * value, 
            [out] IIntent ** result);

        PutInt64ArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<Int64> * value, 
            [out] IIntent ** result);

        PutFloatArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<Float> * value, 
            [out] IIntent ** result);

        PutDoubleArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<Double> * value, 
            [out] IIntent ** result);

        PutStringArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<String> * value, 
            [out] IIntent ** result);

        PutCharSequenceArrayExtra(
            [in] const String& name, 
            [in] ArrayOf<ICharSequence *> * value, 
            [out] IIntent ** result);

        PutBundleExtra(
            [in] const String& name, 
            [in] IBundle * value, 
            [out] IIntent ** result);

        PutExtras2(
            [in] IIntent * src, 
            [out] IIntent ** result);

        PutExtrasEx(
            [in] IBundle * extras, 
            [out] IIntent ** result);

        ReplaceExtrasEx(
            [in] IIntent * src, 
            [out] IIntent ** result);

        ReplaceExtras2(
            [in] IBundle * extras, 
            [out] IIntent ** result);

        RemoveExtra(
            [in] const String& name);

        SetFlagsEx(
            [in] Int32 flags, 
            [out] IIntent ** result);

        AddFlagsEx(
            [in] Int32 flags, 
            [out] IIntent ** result);

        SetCapsule(
            [in] const String& capsuleName);

        SetComponentEx(
            [in] IComponentName * component, 
            [out] IIntent ** result);

        SetClassName2(
            [in] IContext * packageContext, 
            [in] const String& className, 
            [out] IIntent ** result);

        SetClassNameEx(
            [in] const String& packageName, 
            [in] const String& className, 
            [out] IIntent ** result);

        SetSourceBounds(
            [in] IRect * r);

        FillIn(
            [in] IIntent * other, 
            [in] Int32 flags, 
            [out] Int32 * result);

        FilterEquals(
            [in] IIntent * other, 
            [out] Boolean * isEqual);

        FilterHashCode(
            [out] Int32 * result);

        ToShortString(
            [in] Boolean comp, 
            [in] Boolean extras, 
            [out] String * result);

        ToShortString2(
            [in] const String& b, 
            [in] Boolean comp, 
            [in] Boolean extras);

        ToUri(
            [in] Int32 flags, 
            [out] String * result);

        SetComponent(
            [in] IComponentName * component);

        SetAction(
            [in] const String& action);

        SetData(
            [in] IUri * data);

        SetType(
            [in] const String& type);

        SetDataAndType(
            [in] IUri * data, 
            [in] const String& type);

        SetFlags(
            [in] Int32 flags);

        AddFlags(
            [in] Int32 flags);

        SetClassName(
            [in] const String& capsuleName, 
            [in] const String& className);

        AddCategory(
            [in] const String& category);

        PutBooleanExtra(
            [in] const String& name, 
            [in] Boolean value);

        GetBooleanExtra(
            [in] const String& name, 
            [out] Boolean * value);

        PutByteExtra(
            [in] const String& name, 
            [in] Byte value);

        GetByteExtra(
            [in] const String& name, 
            [out] Byte * value);

        PutCharExtra(
            [in] const String& name, 
            [in] Char32 value);

        GetCharExtra(
            [in] const String& name, 
            [out] Char32 * value);

        PutInt16Extra(
            [in] const String& name, 
            [in] Int16 value);

        GetInt16Extra(
            [in] const String& name, 
            [out] Int16 * value);

        PutInt32Extra(
            [in] const String& name, 
            [in] Int32 value);

        GetInt32Extra(
            [in] const String& name, 
            [out] Int32 * value);

        PutInt64Extra(
            [in] const String& name, 
            [in] Int64 value);

        GetInt64Extra(
            [in] const String& name, 
            [out] Int64 * value);

        PutFloatExtra(
            [in] const String& name, 
            [in] Float value);

        GetFloatExtra(
            [in] const String& name, 
            [out] Float * value);

        PutDoubleExtra(
            [in] const String& name, 
            [in] Double value);

        GetDoubleExtra(
            [in] const String& name, 
            [out] Double * value);

        PutStringExtra(
            [in] const String& name, 
            [in] const String& value);

        PutExtras(
            [in] IBundle * extras);

        PutParcelableExtra(
            [in] const String& name, 
            [in] IParcelable * value);

        ReplaceExtras(
            [in] IIntent * src);
    }

    interface IIntentSender {
        Send(
            [in] Int32 code, 
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] IIntentReceiver * finishedReceiver, 
            [out] Int32 * result);

        SendIntent(
            [in] IContext * context, 
            [in] Int32 code, 
            [in] IIntent * intent, 
            [in] IOnFinished * onFinished, 
            [in] IHandler * handler);
    }

    interface IServiceConnection {
        OnServiceConnected(
            [in] IComponentName * name, 
            [in] IBinder * service);

        OnServiceDisconnected(
            [in] IComponentName * name);
    }

    interface IContext {
        GetAssets(
            [out] IAssetManager ** assetManager);

        GetResources(
            [out] IResources ** resources);

        GetContentResolver(
            [out] IContentResolver ** resolver);

        GetApplicationContext(
            [out] IContext ** ctx);

        GetText(
            [in] Int32 resId, 
            [out] ICharSequence ** text);

        GetString(
            [in] Int32 resId, 
            [out] String * str);

        SetTheme(
            [in] Int32 resid);

        GetTheme(
            [out] ITheme ** theme);

        ObtainStyledAttributes(
            [in] ArrayOf<Int32> attrs, 
            [out] ITypedArray ** styles);

        ObtainStyledAttributesEx(
            [in] Int32 resid, 
            [in] ArrayOf<Int32> attrs, 
            [out] ITypedArray ** styles);

        ObtainStyledAttributesEx2(
            [in] IAttributeSet * set, 
            [in] ArrayOf<Int32> attrs, 
            [out] ITypedArray ** styles);

        ObtainStyledAttributesEx3(
            [in] IAttributeSet * set, 
            [in] ArrayOf<Int32> attrs, 
            [in] Int32 defStyleAttr, 
            [in] Int32 defStyleRes, 
            [out] ITypedArray ** styles);

        GetClassLoader(
            [out] IClassLoader ** loader);

        GetCapsuleName(
            [out] String * capsuleName);

        GetApplicationInfo(
            [out] IApplicationInfo ** info);

        StartActivity(
            [in] IIntent * intent);

        SendBroadcast(
            [in] IIntent * intent);

        StartService(
            [in] IIntent * service, 
            [out] IComponentName ** name);

        StopService(
            [in] IIntent * service, 
            [out] Boolean * succeeded);

        BindService(
            [in] IIntent * service, 
            [in] IServiceConnection * conn, 
            [in] Int32 flags, 
            [out] Boolean * succeeded);

        UnbindService(
            [in] IServiceConnection * conn);

        GetSystemService(
            [in] CString name, 
            [out] IInterface ** object);

        CreateCapsuleContext(
            [in] const String& capsuleName, 
            [in] Int32 flags, 
            [out] IContext ** ctx);

        CheckCallingPermission(
            [in] const String& permission, 
            [out] Int32 * value);

        EnforceCallingOrSelfPermission(
            [in] CString permission, 
            [in] CString message);

        RevokeUriPermission(
            [in] IUri * uri, 
            [in] Int32 modeFlags);

        CheckCallingOrSelfPermission(
            [in] const String& permission, 
            [out] Int32 * perm);

        GrantUriPermission(
            [in] const String& toCapsule, 
            [in] IUri * uri, 
            [in] Int32 modeFlags);
    }

    interface IContextWrapper : IContext {
        GetBaseContext(
            [out] IContext ** ctx);
    }

    interface IOpenResourceIdResult {
        GetResources(
            [out] IResources ** resources);

        GetResourceId(
            [out] Int32 * id);
    }

    interface IContentProvider {
        Query(
            [in] IUri * uri, 
            [in] ArrayOf<String> projection, 
            [in] const String& selection, 
            [in] ArrayOf<String> selectionArgs, 
            [in] const String& sortOrder, 
            [out] ICursor ** cursor);

        GetType(
            [in] IUri * uri, 
            [out] String * type);

        Insert(
            [in] IUri * uri, 
            [in] IContentValues * values, 
            [out] IUri ** insertedItemUri);

        Delete(
            [in] IUri * uri, 
            [in] const String& selection, 
            [in] ArrayOf<String> selectionArgs, 
            [out] Int32 * rowsAffected);

        Update(
            [in] IUri * uri, 
            [in] IContentValues * values, 
            [in] const String& selection, 
            [in] ArrayOf<String> selectionArgs, 
            [out] Int32 * rowsAffected);

        AttachInfo(
            [in] IContext * ctx, 
            [in] IContentProviderInfo * providerInfo);
    }

    interface IIntentReceiver : IBinder {
        PerformReceive(
            [in] IIntent * intent, 
            [in] Int32 resultCode, 
            [in] const String& dataStr, 
            [in] IBundle * extras, 
            [in] Boolean ordered, 
            [in] Boolean sticky);

        GetHashCode(
            [out] Int32 * hashCode);
    }

    interface IOnFinished {
    }

    interface IBroadcastReceiver {
        ReceiveBroadcast(
            [in] IContext * ctx, 
            [in] IIntent * intent);

        SetResultCode(
            [in] Int32 code);

        GetResultCode(
            [out] Int32 * code);

        SetResultData(
            [in] const String& data);

        GetResultData(
            [out] String * data);

        SetResultExtras(
            [in] IBundle * extras);

        GetResultExtras(
            [in] Boolean makeMap, 
            [out] IBundle ** extras);

        SetResult(
            [in] Int32 code, 
            [in] const String& data, 
            [in] IBundle * extras);

        GetAbortBroadcast(
            [out] Boolean * aborted);

        AbortBroadcast();

        ClearAbortBroadcast();

        SetOrderedHint(
            [in] Boolean isOrdered);

        SetInitialStickyHint(
            [in] Boolean isInitialSticky);
    }

    interface IComponentCallbacks {
        OnConfigurationChanged(
            [in] IConfiguration * newConfig);

        OnLowMemory();
    }

    interface IIntentFilterComparison {
        GetIntent(
            [out] IIntent ** intent);

        Equals(
            [in] IIntentFilterComparison * other, 
            [out] Boolean * isEqual);

        GetHashCode(
            [out] Int32 * hashCode);

        GetDescription(
            [out] String * description);
    }

    interface IComponentNameHelper {
        UnflattenFromString(
            [in] const String& str, 
            [out] IComponentName ** component);
    }

    interface IAuthorityEntry {
        GetHost(
            [out] String * host);

        GetPort(
            [out] Int32 * port);

        Match(
            [in] IUri * data, 
            [out] Int32 * result);
    }

    interface IDialogInterface {
        Cancel();

        Dismiss();
    }

    interface IKeyEvent : IInputEvent {
        IsDown(
            [out] Boolean * isDown);

        IsSystem(
            [out] Boolean * isSystem);

        HasDefaultAction(
            [out] Boolean * hasDefaultAction);

        GetMetaState(
            [out] Int32 * metaState);

        GetFlags(
            [out] Int32 * flags);

        IsAltPressed(
            [out] Boolean * isAltPressed);

        IsShiftPressed(
            [out] Boolean * isShiftPressed);

        IsSymPressed(
            [out] Boolean * isSymPressed);

        GetAction(
            [out] Int32 * action);

        IsCanceled(
            [out] Boolean * isCanceled);

        StartTracking();

        IsTracking(
            [out] Boolean * isTracking);

        IsLongPress(
            [out] Boolean * isLongPress);

        GetKeyCode(
            [out] Int32 * keyCode);

        GetCharacters(
            [out] String * characters);

        GetScanCode(
            [out] Int32 * scanCode);

        GetRepeatCount(
            [out] Int32 * repeatCount);

        GetDownTime(
            [out] Int64 * downTime);

        GetEventTime(
            [out] Int64 * eventTime);

        GetKeyboardDevice(
            [out] Int32 * deviceId);

        GetDisplayLabel(
            [out] Char16 * displayLabel);

        GetUnicodeChar(
            [out] Int32 * unicodeChar);

        GetUnicodeCharEx(
            [in] Int32 meta, 
            [out] Int32 * unicodeChar);

        GetKeyData(
            [in] Handle32 keyData, 
            [out] Boolean * result);

        GetMatch(
            [in] ArrayOf<Char16> chars, 
            [out] Char16 * match);

        GetMatchEx(
            [in] ArrayOf<Char16> chars, 
            [in] Int32 modifiers, 
            [out] Char16 * match);

        GetNumber(
            [out] Char16 * ch);

        IsPrintingKey(
            [out] Boolean * result);

        Dispatch(
            [in] IKeyEventCallback * receiver, 
            [out] Boolean * result);

        DispatchEx(
            [in] IKeyEventCallback * receiver, 
            [in] IDispatcherState * state, 
            [in] IInterface * target, 
            [out] Boolean * result);
    }

    interface IDialogInterfaceOnCancelListener {
        OnCancel(
            [in] IDialogInterface * dialog);
    }

    interface IDialogInterfaceOnDismissListener {
        OnDismiss(
            [in] IDialogInterface * dialog);
    }

    interface IDialogInterfaceOnShowListener {
        OnShow(
            [in] IDialogInterface * dialog);
    }

    interface IDialogInterfaceOnClickListener {
        OnClick(
            [in] IDialogInterface * dialog, 
            [in] Int32 which);
    }

    interface IDialogInterfaceOnMultiChoiceClickListener {
        OnClick(
            [in] IDialogInterface * dialog, 
            [in] Int32 which, 
            [in] Boolean isChecked);
    }

    interface IDialogInterfaceOnKeyListener {
        OnKey(
            [in] IDialogInterface * dialog, 
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * consumed);
    }

    interface IContextThemeWrapper : IContextWrapper {
    }

    interface IApplicationApartment : IBinder {
        BindApplication(
            [in] const String& processName, 
            [in] IApplicationInfo * appInfo, 
            [in] IObjectContainer * providers, 
            [in] IComponentName * instrumentationName, 
            [in] const String& profileFile, 
            [in] IBundle * instrumentationArgs, 
            [in] IInstrumentationWatcher * instrumentationWatcher, 
            [in] Int32 debugMode, 
            [in] Boolean isRestrictedBackupMode, 
            [in] IConfiguration * config, 
            [in] IObjectStringMap * services);

        AcquireProvider(
            [in] IContext * ctx, 
            [in] const String& name, 
            [out] IContentProvider ** provider);

        AcquireExistingProvider(
            [in] IContext * ctx, 
            [in] const String& name, 
            [out] IContentProvider ** provider);

        ReleaseProvider(
            [in] IContentProvider * provider);

        ScheduleExit();

        ScheduleLaunchActivity(
            [in] IIntent * intent, 
            [in] IBinder * token, 
            [in] Int32 ident, 
            [in] IActivityInfo * info, 
            [in] IBundle * state, 
            [in] IObjectContainer * pendingResults, 
            [in] IObjectContainer * pendingNewIntents, 
            [in] Boolean notResumed, 
            [in] Boolean isForward);

        ScheduleRelaunchActivity(
            [in] IBinder * token, 
            [in] IObjectContainer * pendingResults, 
            [in] IObjectContainer * pendingNewIntents, 
            [in] Int32 configChanges, 
            [in] Boolean notResumed, 
            [in] IConfiguration * config);

        ScheduleSendResult(
            [in] IBinder * token, 
            [in] IObjectContainer * results);

        ScheduleResumeActivity(
            [in] IBinder * token, 
            [in] Boolean isForward);

        SchedulePauseActivity(
            [in] IBinder * token, 
            [in] Boolean finished, 
            [in] Boolean userLeaving, 
            [in] Int32 configChanges);

        ScheduleStopActivity(
            [in] IBinder * token, 
            [in] Boolean showWindow, 
            [in] Int32 configChanges);

        ScheduleWindowVisibility(
            [in] IBinder * token, 
            [in] Boolean showWindow);

        ScheduleDestroyActivity(
            [in] IBinder * token, 
            [in] Boolean finishing, 
            [in] Int32 configChanges);

        ScheduleReceiver(
            [in] IIntent * intent, 
            [in] IActivityInfo * info, 
            [in] Int32 resultCode, 
            [in] const String& data, 
            [in] IBundle * extras, 
            [in] Boolean sync);

        ScheduleRegisteredReceiver(
            [in] IIntentReceiver * receiver, 
            [in] IIntent * intent, 
            [in] Int32 resultCode, 
            [in] const String& dataStr, 
            [in] IBundle * extras, 
            [in] Boolean ordered, 
            [in] Boolean sticky);

        ScheduleNewIntent(
            [in] IObjectContainer * intents, 
            [in] IBinder * token);

        SendActivityResult(
            [in] IBinder * token, 
            [in] const String& id, 
            [in] Int32 requestCode, 
            [in] Int32 resultCode, 
            [in] IIntent * data);

        ScheduleCreateService(
            [in] IBinder * token, 
            [in] IServiceInfo * info);

        ScheduleBindService(
            [in] IBinder * token, 
            [in] IIntent * intent, 
            [in] Boolean rebind);

        ScheduleUnbindService(
            [in] IBinder * token, 
            [in] IIntent * intent);

        ScheduleServiceArgs(
            [in] IBinder * token, 
            [in] Int32 startId, 
            [in] Int32 flags, 
            [in] IIntent * args);

        ScheduleStopService(
            [in] IBinder * token);

        ScheduleConfigurationChanged(
            [in] IConfiguration * config);

        ScheduleActivityConfigurationChanged(
            [in] IBinder * token);

        DispatchCapsuleBroadcast(
            [in] Int32 cmd, 
            [in] ArrayOf<String> capsules);

        Startup(
            [in] ApartmentAttr attr);
    }

    interface IPoint {
        Set(
            [in] Int32 x, 
            [in] Int32 y);

        Negate();

        Offset(
            [in] Int32 dx, 
            [in] Int32 dy);

        Equals(
            [in] Int32 x, 
            [in] Int32 y, 
            [out] Boolean * result);

        EqualsEx(
            [in] IInterface * p, 
            [out] Boolean * result);
    }

    interface IRectF {
        IsEmpty(
            [out] Boolean * isEmpty);

        Width(
            [out] Float * width);

        Height(
            [out] Float * height);

        CenterX(
            [out] Float * x);

        CenterY(
            [out] Float * y);

        SetEmpty();

        Set(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom);

        SetEx(
            [in] IRectF * src);

        SetEx2(
            [in] IRect * src);

        Offset(
            [in] Float dx, 
            [in] Float dy);

        OffsetTo(
            [in] Float newLeft, 
            [in] Float newTop);

        Inset(
            [in] Float dx, 
            [in] Float dy);

        Contains(
            [in] Float x, 
            [in] Float y, 
            [out] Boolean * isContained);

        ContainsEx(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom, 
            [out] Boolean * isContained);

        ContainsEx2(
            [in] IRectF * r, 
            [out] Boolean * isContained);

        Intersect(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom, 
            [out] Boolean * isIntersected);

        IntersectEx(
            [in] IRectF * r, 
            [out] Boolean * isIntersected);

        SetIntersect(
            [in] IRectF * a, 
            [in] IRectF * b, 
            [out] Boolean * isIntersected);

        Intersects(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom, 
            [out] Boolean * isIntersected);

        Round(
            [in] IRect * dst);

        RoundOut(
            [in] IRect * dst);

        Union(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom);

        UnionEx(
            [in] IRectF * r);

        UnionEx2(
            [in] Float x, 
            [in] Float y);

        Sort();
    }

    interface IPath {
        Reset();

        Rewind();

        Set(
            [in] IPath * src);

        GetFillType(
            [out] PathFillType * type);

        SetFillType(
            [in] PathFillType ft);

        IsInverseFillType(
            [out] Boolean * isInverseFillType);

        ToggleInverseFillType();

        IsEmpty(
            [out] Boolean * isEmpty);

        IsRect(
            [in] IRectF * rect, 
            [out] Boolean * isRect);

        ComputeBounds(
            [in] IRectF * bounds, 
            [in] Boolean exact);

        IncReserve(
            [in] Int32 extraPtCount);

        MoveTo(
            [in] Float x, 
            [in] Float y);

        RMoveTo(
            [in] Float dx, 
            [in] Float dy);

        LineTo(
            [in] Float x, 
            [in] Float y);

        RLineTo(
            [in] Float dx, 
            [in] Float dy);

        QuadTo(
            [in] Float x1, 
            [in] Float y1, 
            [in] Float x2, 
            [in] Float y2);

        RQuadTo(
            [in] Float dx1, 
            [in] Float dy1, 
            [in] Float dx2, 
            [in] Float dy2);

        CubicTo(
            [in] Float x1, 
            [in] Float y1, 
            [in] Float x2, 
            [in] Float y2, 
            [in] Float x3, 
            [in] Float y3);

        RCubicTo(
            [in] Float x1, 
            [in] Float y1, 
            [in] Float x2, 
            [in] Float y2, 
            [in] Float x3, 
            [in] Float y3);

        ArcTo(
            [in] IRectF * oval, 
            [in] Float startAngle, 
            [in] Float sweepAngle, 
            [in] Boolean forceMoveTo);

        ArcToEx(
            [in] IRectF * oval, 
            [in] Float startAngle, 
            [in] Float sweepAngle);

        Close();

        AddRect(
            [in] IRectF * rect, 
            [in] PathDirection dir);

        AddRectEx(
            [in] Float left, 
            [in] Float top, 
            [in] Float right, 
            [in] Float bottom, 
            [in] PathDirection dir);

        AddOval(
            [in] IRectF * oval, 
            [in] PathDirection dir);

        AddCircle(
            [in] Float x, 
            [in] Float y, 
            [in] Float radius, 
            [in] PathDirection dir);

        AddArc(
            [in] IRectF * oval, 
            [in] Float startAngle, 
            [in] Float sweepAngle);

        AddRoundRect(
            [in] IRectF * rect, 
            [in] Float rx, 
            [in] Float ry, 
            [in] PathDirection dir);

        AddRoundRectEx(
            [in] IRectF * rect, 
            [in] ArrayOf<Float> radii, 
            [in] PathDirection dir);

        AddPath(
            [in] IPath * src, 
            [in] Float dx, 
            [in] Float dy);

        AddPathEx(
            [in] IPath * src);

        AddPathEx2(
            [in] IPath * src, 
            [in] IMatrix * matrix);

        Offset(
            [in] Float dx, 
            [in] Float dy, 
            [in] IPath * dst);

        OffsetEx(
            [in] Float dx, 
            [in] Float dy);

        SetLastPoint(
            [in] Float dx, 
            [in] Float dy);

        Transform(
            [in] IMatrix * matrix, 
            [in] IPath * dst);

        TransformEx(
            [in] IMatrix * matrix);
    }

    interface IPaint {
        Reset();

        Set(
            [in] IPaint * src);

        SetCompatibilityScaling(
            [in] Float factor);

        GetFlags(
            [out] Int32 * flags);

        SetFlags(
            [in] Int32 flags);

        IsAntiAlias(
            [out] Boolean * isAntiAlias);

        SetAntiAlias(
            [in] Boolean aa);

        IsDither(
            [out] Boolean * isDither);

        SetDither(
            [in] Boolean dither);

        IsLinearText(
            [out] Boolean * isLinearText);

        SetLinearText(
            [in] Boolean linearText);

        IsSubpixelText(
            [out] Boolean * isSubpixelText);

        SetSubpixelText(
            [in] Boolean subpixelText);

        IsUnderlineText(
            [out] Boolean * isUnderlineText);

        SetUnderlineText(
            [in] Boolean underlineText);

        IsStrikeThruText(
            [out] Boolean * IsStrikeThruText);

        SetStrikeThruText(
            [in] Boolean strikeThruText);

        IsFakeBoldText(
            [out] Boolean * IsFakeBoldText);

        SetFakeBoldText(
            [in] Boolean fakeBoldText);

        IsFilterBitmap(
            [out] Boolean * isFilterBitmap);

        SetFilterBitmap(
            [in] Boolean filter);

        GetStyle(
            [out] PaintStyle * style);

        SetStyle(
            [in] PaintStyle style);

        GetColor(
            [out] Int32 * color);

        SetColor(
            [in] Int32 color);

        GetAlpha(
            [out] Int32 * alpha);

        SetAlpha(
            [in] Int32 a);

        SetARGB(
            [in] Int32 a, 
            [in] Int32 r, 
            [in] Int32 g, 
            [in] Int32 b);

        GetStrokeWidth(
            [out] Float * width);

        SetStrokeWidth(
            [in] Float width);

        GetStrokeMiter(
            [out] Float * strokeMiter);

        SetStrokeMiter(
            [in] Float miter);

        GetStrokeCap(
            [out] PaintCap * cap);

        SetStrokeCap(
            [in] PaintCap cap);

        GetStrokeJoin(
            [out] PaintJoin * join);

        SetStrokeJoin(
            [in] PaintJoin join);

        GetFillPath(
            [in] IPath * src, 
            [in] IPath * dst, 
            [out] Boolean * isShouldFilled);

        GetShader(
            [out] IShader ** shader);

        SetShader(
            [in] IShader * shader);

        GetColorFilter(
            [out] IColorFilter ** filter);

        SetColorFilter(
            [in] IColorFilter * filter);

        GetXfermode(
            [out] IXfermode ** xfermode);

        SetXfermode(
            [in] IXfermode * xfermode);

        GetPathEffect(
            [out] IPathEffect ** effect);

        SetPathEffect(
            [in] IPathEffect * effect);

        GetMaskFilter(
            [out] IMaskFilter ** maskfilter);

        SetMaskFilter(
            [in] IMaskFilter * maskfilter);

        GetTypeface(
            [out] ITypeface ** typeface);

        SetTypeface(
            [in] ITypeface * typeface);

        GetRasterizer(
            [out] IRasterizer ** rasterizer);

        SetRasterizer(
            [in] IRasterizer * rasterizer);

        SetShadowLayer(
            [in] Float radius, 
            [in] Float rdx, 
            [in] Float rdy, 
            [in] Int32 color);

        ClearShadowLayer();

        GetTextAlign(
            [out] PaintAlign * align);

        SetTextAlign(
            [in] PaintAlign align);

        GetTextSize(
            [out] Float * size);

        SetTextSize(
            [in] Float textSize);

        GetTextScaleX(
            [out] Float * scaleX);

        SetTextScaleX(
            [in] Float scaleX);

        GetTextSkewX(
            [out] Float * skewX);

        SetTextSkewX(
            [in] Float skewX);

        Ascent(
            [out] Float * distance);

        Descent(
            [out] Float * distance);

        GetFontMetrics(
            [in] IPaintFontMetrics * metrics, 
            [out] Float * spacing);

        GetFontMetricsEx(
            [out] IPaintFontMetrics ** metrics);

        GetFontMetricsInt(
            [in] IPaintFontMetricsInt * fmi, 
            [out] Int32 * spacing);

        GetFontMetricsIntEx(
            [out] IPaintFontMetricsInt ** fmi);

        GetFontSpacing(
            [out] Float * spacing);

        MeasureText(
            [in] ArrayOf<Char8> text, 
            [in] Int32 index, 
            [in] Int32 count, 
            [out] Float * width);

        MeasureTextEx(
            [in] const String& text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [out] Float * width);

        MeasureTextEx2(
            [in] const String& text, 
            [out] Float * width);

        MeasureTextEx3(
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [out] Float * width);

        BreakText(
            [in] ArrayOf<Char8> text, 
            [in] Int32 index, 
            [in] Int32 count, 
            [in] Float maxWidth, 
            [out] ArrayOf<Float> measuredWidth, 
            [out] Int32 * number);

        BreakTextEx(
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Boolean measureForwards, 
            [in] Float maxWidth, 
            [out] ArrayOf<Float> measuredWidth, 
            [out] Int32 * number);

        BreakTextEx2(
            [in] const String& text, 
            [in] Boolean measureForwards, 
            [in] Float maxWidth, 
            [out] ArrayOf<Float> measuredWidth, 
            [out] Int32 * number);

        GetTextWidths(
            [in] ArrayOf<Char8> text, 
            [in] Int32 index, 
            [in] Int32 count, 
            [out] ArrayOf<Float> widths, 
            [out] Int32 * number);

        GetTextWidthsEx(
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [out] ArrayOf<Float> widths, 
            [out] Int32 * count);

        GetTextWidthsEx2(
            [in] const String& text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [out] ArrayOf<Float> widths, 
            [out] Int32 * count);

        GetTextWidthsEx3(
            [in] const String& text, 
            [out] ArrayOf<Float> widths, 
            [out] Int32 * width);

        GetTextPath(
            [in] ArrayOf<Char8> text, 
            [in] Int32 index, 
            [in] Int32 count, 
            [in] Float x, 
            [in] Float y, 
            [in] IPath * path);

        GetTextPathEx(
            [in] const String& text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Float x, 
            [in] Float y, 
            [in] IPath * path);

        GetTextBounds(
            [in] const String& text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] IRect * bounds);

        GetTextBoundsEx(
            [in] ArrayOf<Char8> text, 
            [in] Int32 index, 
            [in] Int32 count, 
            [in] IRect * bounds);
    }

    interface IBitmap {
        GetDensity(
            [out] Int32 * density);

        SetDensity(
            [in] Int32 density);

        SetNinePatchChunk(
            [in] ArrayOf<Byte> chunk);

        Recycle();

        IsRecycled(
            [out] Boolean * isRecycled);

        CopyPixelsToBuffer(
            [in] IBuffer * dst);

        CopyPixelsFromBuffer(
            [in] IBuffer * src);

        Copy(
            [in] BitmapConfig config, 
            [in] Boolean isMutable, 
            [out] IBitmap ** bitmap);

        GetNinePatchChunk(
            [out, callee] ArrayOf<Byte> * data);

        Compress(
            [in] BitmapCompressFormat format, 
            [in] Int32 quality, 
            [in] IOutputStream * stream, 
            [out] Boolean * isSucceeded);

        IsMutable(
            [out] Boolean * isMutable);

        GetWidth(
            [out] Int32 * width);

        GetHeight(
            [out] Int32 * height);

        GetScaledWidth(
            [in] ICanvas * canvas, 
            [out] Int32 * width);

        GetScaledHeight(
            [in] ICanvas * canvas, 
            [out] Int32 * height);

        GetScaledWidthEx(
            [in] IDisplayMetrics * metrics, 
            [out] Int32 * width);

        GetScaledHeightEx(
            [in] IDisplayMetrics * metrics, 
            [out] Int32 * height);

        GetScaledWidthEx2(
            [in] Int32 targetDensity, 
            [out] Int32 * width);

        GetScaledHeightEx2(
            [in] Int32 targetDensity, 
            [out] Int32 * height);

        GetRowBytes(
            [out] Int32 * bytes);

        GetConfig(
            [out] BitmapConfig * config);

        HasAlpha(
            [out] Boolean * isAlpha);

        SetHasAlpha(
            [in] Boolean hasAlpha);

        EraseColor(
            [in] Int32 c);

        GetPixel(
            [in] Int32 x, 
            [in] Int32 y, 
            [out] Int32 * pixel);

        GetPixels(
            [in] ArrayOf<Int32> pixels, 
            [in] Int32 offset, 
            [in] Int32 stride, 
            [in] Int32 x, 
            [in] Int32 y, 
            [in] Int32 width, 
            [in] Int32 height);

        SetPixel(
            [in] Int32 x, 
            [in] Int32 y, 
            [in] Int32 color);

        SetPixels(
            [in] ArrayOf<Int32> pixels, 
            [in] Int32 offset, 
            [in] Int32 stride, 
            [in] Int32 x, 
            [in] Int32 y, 
            [in] Int32 width, 
            [in] Int32 height);

        DescribeContents(
            [out] Int32 * contents);

        ExtractAlpha(
            [out] IBitmap ** bitmap);

        ExtractAlphaEx(
            [in] IPaint * paint, 
            [in] ArrayOf<Int32> offsetXY, 
            [out] IBitmap ** bitmap);

        SameAs(
            [in] IBitmap * other, 
            [out] Boolean * isSame);

        PrepareToDraw();
    }

    interface IMatrix {
        IsIdentity(
            [out] Boolean * isIdentity);

        RectStaysRect(
            [out] Boolean * result);

        Set(
            [in] IMatrix * src);

        Equals(
            [in] IMatrix * obj, 
            [out] Boolean * isEqual);

        Reset();

        SetTranslate(
            [in] Float dx, 
            [in] Float dy);

        SetScale(
            [in] Float sx, 
            [in] Float sy, 
            [in] Float px, 
            [in] Float py);

        SetScaleEx(
            [in] Float sx, 
            [in] Float sy);

        SetRotate(
            [in] Float degrees, 
            [in] Float px, 
            [in] Float py);

        SetRotateEx(
            [in] Float degrees);

        SetSinCos(
            [in] Float sinValue, 
            [in] Float cosValue, 
            [in] Float px, 
            [in] Float py);

        SetSinCosEx(
            [in] Float sinValue, 
            [in] Float cosValue);

        SetSkew(
            [in] Float kx, 
            [in] Float ky, 
            [in] Float px, 
            [in] Float py);

        SetSkewEx(
            [in] Float kx, 
            [in] Float ky);

        SetConcat(
            [in] IMatrix * a, 
            [in] IMatrix * b, 
            [out] Boolean * result);

        PreTranslate(
            [in] Float dx, 
            [in] Float dy, 
            [out] Boolean * result);

        PreScale(
            [in] Float sx, 
            [in] Float sy, 
            [in] Float px, 
            [in] Float py, 
            [out] Boolean * result);

        PreScaleEx(
            [in] Float sx, 
            [in] Float sy, 
            [out] Boolean * result);

        PreRotate(
            [in] Float degrees, 
            [in] Float px, 
            [in] Float py, 
            [out] Boolean * result);

        PreRotateEx(
            [in] Float degrees, 
            [out] Boolean * result);

        PreSkew(
            [in] Float kx, 
            [in] Float ky, 
            [in] Float px, 
            [in] Float py, 
            [out] Boolean * result);

        PreSkewEx(
            [in] Float kx, 
            [in] Float ky, 
            [out] Boolean * result);

        PreConcat(
            [in] IMatrix * other, 
            [out] Boolean * result);

        PostTranslate(
            [in] Float dx, 
            [in] Float dy, 
            [out] Boolean * result);

        PostScale(
            [in] Float sx, 
            [in] Float sy, 
            [in] Float px, 
            [in] Float py, 
            [out] Boolean * result);

        PostScaleEx(
            [in] Float sx, 
            [in] Float sy, 
            [out] Boolean * result);

        PostRotate(
            [in] Float degrees, 
            [in] Float px, 
            [in] Float py, 
            [out] Boolean * result);

        PostRotateEx(
            [in] Float degrees, 
            [out] Boolean * result);

        PostSkew(
            [in] Float kx, 
            [in] Float ky, 
            [in] Float px, 
            [in] Float py, 
            [out] Boolean * result);

        PostSkewEx(
            [in] Float kx, 
            [in] Float ky, 
            [out] Boolean * result);

        PostConcat(
            [in] IMatrix * other, 
            [out] Boolean * result);

        SetRectToRect(
            [in] IRectF * src, 
            [in] IRectF * dst, 
            [in] MatrixScaleToFit stf, 
            [out] Boolean * result);

        SetPolyToPoly(
            [in] ArrayOf<Float> src, 
            [in] Int32 srcIndex, 
            [in] ArrayOf<Float> dst, 
            [in] Int32 dstIndex, 
            [in] Int32 pointCount, 
            [out] Boolean * result);

        Invert(
            [in] IMatrix * inverse, 
            [out] Boolean * result);

        MapPoints(
            [in] ArrayOf<Float> dst, 
            [in] Int32 dstIndex, 
            [in] ArrayOf<Float> src, 
            [in] Int32 srcIndex, 
            [in] Int32 pointCount);

        MapVectors(
            [in] ArrayOf<Float> dst, 
            [in] Int32 dstIndex, 
            [in] ArrayOf<Float> src, 
            [in] Int32 srcIndex, 
            [in] Int32 vectorCount);

        MapPointsEx(
            [in] ArrayOf<Float> dst, 
            [in] ArrayOf<Float> src);

        MapVectorsEx(
            [in] ArrayOf<Float> dst, 
            [in] ArrayOf<Float> src);

        MapPointsEx2(
            [in] ArrayOf<Float> pts);

        MapVectorsEx2(
            [in] ArrayOf<Float> vecs);

        MapRect(
            [in] IRectF * dst, 
            [in] IRectF * src, 
            [out] Boolean * result);

        MapRectEx(
            [in] IRectF * rect, 
            [out] Boolean * result);

        MapRadius(
            [in] Float radius, 
            [out] Float * result);

        GetValues(
            [in] ArrayOf<Float> values);

        SetValues(
            [in] ArrayOf<Float> values);
    }

    interface IBitmapFactoryOptions {
    }

    interface IBitmapFactory {
        CreateBitmap(
            [in] IBitmap * source, 
            [out] IBitmap ** bitmap);

        CreateBitmapEx(
            [in] IBitmap * source, 
            [in] Int32 x, 
            [in] Int32 y, 
            [in] Int32 width, 
            [in] Int32 height, 
            [out] IBitmap ** bitmap);

        CreateBitmapEx2(
            [in] IBitmap * source, 
            [in] Int32 x, 
            [in] Int32 y, 
            [in] Int32 width, 
            [in] Int32 height, 
            [in] IMatrix * m, 
            [in] Boolean filter, 
            [out] IBitmap ** bitmap);

        CreateBitmapEx3(
            [in] Int32 width, 
            [in] Int32 height, 
            [in] BitmapConfig config, 
            [out] IBitmap ** bitmap);

        CreateBitmapEx4(
            [in] ArrayOf<Int32> colors, 
            [in] Int32 offset, 
            [in] Int32 stride, 
            [in] Int32 width, 
            [in] Int32 height, 
            [in] BitmapConfig config, 
            [out] IBitmap ** bitmap);

        CreateBitmapEx5(
            [in] ArrayOf<Int32> colors, 
            [in] Int32 width, 
            [in] Int32 height, 
            [in] BitmapConfig config, 
            [out] IBitmap ** bitmap);

        DecodeFile(
            [in] const String& pathName, 
            [in] IBitmapFactoryOptions * opts, 
            [out] IBitmap ** bitmap);

        DecodeFileEx(
            [in] const String& pathName, 
            [out] IBitmap ** bitmap);

        DecodeResourceStream(
            [in] IResources * res, 
            [in] ITypedValue * value, 
            [in] IInputStream * is, 
            [in] IRect * pad, 
            [in] IBitmapFactoryOptions * opts, 
            [out] IBitmap ** bitmap);

        DecodeResource(
            [in] IResources * res, 
            [in] Int32 id, 
            [in] IBitmapFactoryOptions * opts, 
            [out] IBitmap ** bitmap);

        DecodeResourceEx(
            [in] IResources * res, 
            [in] Int32 id, 
            [out] IBitmap ** bitmap);

        DecodeByteArray(
            [in] ArrayOf<Byte> data, 
            [in] Int32 offset, 
            [in] Int32 length, 
            [in] IBitmapFactoryOptions * opts, 
            [out] IBitmap ** bitmap);

        DecodeByteArrayEx(
            [in] ArrayOf<Byte> data, 
            [in] Int32 offset, 
            [in] Int32 length, 
            [out] IBitmap ** bitmap);

        DecodeStream(
            [in] IInputStream * is, 
            [in] IRect * outPadding, 
            [in] IBitmapFactoryOptions * opts, 
            [out] IBitmap ** bitmap);

        DecodeStreamEx(
            [in] IInputStream * is, 
            [out] IBitmap ** bitmap);

        DecodeFileDescriptor(
            [in] IFileDescriptor * fd, 
            [in] IRect * outPadding, 
            [in] IBitmapFactoryOptions * opts, 
            [out] IBitmap ** bitmap);

        DecodeFileDescriptorEx(
            [in] IFileDescriptor * fd, 
            [out] IBitmap ** bitmap);

        SetDefaultConfig(
            [in] BitmapConfig config);
    }

    interface IShader {
        GetLocalMatrix(
            [in] IMatrix * localM, 
            [out] Boolean * result);

        SetLocalMatrix(
            [in] IMatrix * localM);
    }

    interface IXfermode {
    }

    interface IPathEffect {
    }

    interface IDashPathEffect : IPathEffect {
    }

    interface IMaskFilter {
    }

    interface ITypeface {
        GetStyle(
            [out] Int32 * style);

        IsBold(
            [out] Boolean * isBold);

        IsItalic(
            [out] Boolean * isItalic);
    }

    interface ITypefaceFactory {
        Create(
            [in] const String& familyName, 
            [in] Int32 style, 
            [out] ITypeface ** typeface);

        CreateFromTypeface(
            [in] ITypeface * family, 
            [in] Int32 style, 
            [out] ITypeface ** typeface);

        DefaultFromStyle(
            [in] Int32 style, 
            [out] ITypeface ** typeface);

        CreateFromAsset(
            [in] IAssetManager * mgr, 
            [in] const String& path, 
            [out] ITypeface ** typeface);

        CreateFromFile(
            [in] IFile * path, 
            [out] ITypeface ** typeface);

        CreateFromFileEx(
            [in] const String& path, 
            [out] ITypeface ** typeface);

        SetGammaForText(
            [in] Float blackGamma, 
            [in] Float whiteGamma);
    }

    interface IRasterizer {
    }

    interface IColorFilter {
    }

    interface IPaintFontMetrics {
        GetTop(
            [out] Float * top);

        SetTop(
            [in] Float top);

        GetAscent(
            [out] Float * ascent);

        SetAscent(
            [in] Float ascent);

        GetDescent(
            [out] Float * descent);

        SetDescent(
            [in] Float descent);

        GetBottom(
            [out] Float * bottom);

        SetBottom(
            [in] Float bottom);

        GetLeading(
            [out] Float * leading);

        SetLeading(
            [in] Float leading);
    }

    interface IPaintFontMetricsInt {
        GetTop(
            [out] Int32 * top);

        SetTop(
            [in] Int32 top);

        GetAscent(
            [out] Int32 * ascent);

        SetAscent(
            [in] Int32 ascent);

        GetDescent(
            [out] Int32 * descent);

        SetDescent(
            [in] Int32 descent);

        GetBottom(
            [out] Int32 * bottom);

        SetBottom(
            [in] Int32 bottom);

        GetLeading(
            [out] Int32 * leading);

        SetLeading(
            [in] Int32 leading);
    }

    interface IDrawFilter {
    }

    interface IPicture {
        BeginRecording(
            [in] Int32 width, 
            [in] Int32 height, 
            [out] ICanvas ** canvas);

        EndRecording();

        GetWidth(
            [out] Int32 * width);

        GetHeight(
            [out] Int32 * height);

        Draw(
            [in] ICanvas * canvas);

        WriteToStream(
            [in] IOutputStream * stream);
    }

    interface IGL {
    }

    interface INinePatch {
        SetPaint(
            [in] IPaint * p);

        Draw(
            [in] ICanvas * canvas, 
            [in] IRectF * location);

        DrawEx(
            [in] ICanvas * canvas, 
            [in] IRect * location);

        DrawEx2(
            [in] ICanvas * canvas, 
            [in] IRect * location, 
            [in] IPaint * paint);

        GetDensity(
            [out] Int32 * density);

        GetWidth(
            [out] Int32 * width);

        GetHeight(
            [out] Int32 * height);

        HasAlpha(
            [out] Boolean * hasAlpha);

        GetTransparentRegion(
            [in] IRect * location, 
            [out] IRegion ** region);
    }

    interface IDrawableCallback {
        InvalidateDrawable(
            [in] IDrawable * who);

        ScheduleDrawable(
            [in] IDrawable * who, 
            [in] IRunnable * what, 
            [in] Int64 when);

        UnscheduleDrawable(
            [in] IDrawable * who, 
            [in] IRunnable * what);
    }

    interface IDrawableConstantState {
        NewDrawable(
            [out] IDrawable ** drawable);

        NewDrawableEx(
            [in] IResources * res, 
            [out] IDrawable ** drawable);

        GetChangingConfigurations(
            [out] Int32 * configs);
    }

    interface IBitmapState : IDrawableConstantState {
    }

    interface IBitmapDrawable : IDrawable {
        GetPaint(
            [out] IPaint ** paint);

        GetBitmap(
            [out] IBitmap ** bitmap);

        SetTargetDensity(
            [in] ICanvas * canvas);

        SetTargetDensityEx(
            [in] IDisplayMetrics * metrics);

        SetTargetDensityEx2(
            [in] Int32 density);

        GetGravity(
            [out] Int32 * gravity);

        SetGravity(
            [in] Int32 gravity);

        SetAntiAlias(
            [in] Boolean aa);

        GetTileModeX(
            [out] ShaderTileMode * tileModeX);

        GetTileModeY(
            [out] ShaderTileMode * tileModeY);

        SetTileModeX(
            [in] ShaderTileMode mode);

        SetTileModeY(
            [in] ShaderTileMode mode);

        SetTileModeXY(
            [in] ShaderTileMode xmode, 
            [in] ShaderTileMode ymode);
    }

    interface INinePatchDrawable : IDrawable {
        SetTargetDensity(
            [in] ICanvas * canvas);

        SetTargetDensityEx(
            [in] IDisplayMetrics * metrics);

        SetTargetDensityEx2(
            [in] Int32 density);

        GetPaint(
            [out] IPaint ** paint);
    }

    interface IColorState : IDrawableConstantState {
    }

    interface IColorDrawable : IDrawable {
        GetAlpha(
            [out] Int32 * alpha);
    }

    interface IDrawableContainer : IDrawable {
        SelectDrawable(
            [in] Int32 idx, 
            [out] Boolean * res);
    }

    interface IStateListDrawable : IDrawableContainer {
        AddState(
            [in] ArrayOf<Int32> stateSet, 
            [in] IDrawable * drawable);

        GetStateCount(
            [out] Int32 * count);

        GetStateSet(
            [in] Int32 index, 
            [out, callee] ArrayOf<Int32> * stateSet);

        GetStateDrawable(
            [in] Int32 index, 
            [out] IDrawable ** drawable);

        GetStateDrawableIndex(
            [in] ArrayOf<Int32> stateSet, 
            [out] Int32 * index);
    }

    interface IAnimatable {
        Start();

        Stop();

        IsRunning(
            [out] Boolean * isRunning);
    }

    interface IAnimatedRotateDrawable : IDrawable {
        GetDrawable(
            [out] IDrawable ** drawable);
    }

    interface ILayerDrawable : IDrawable {
        FindDrawableByLayerId(
            [in] Int32 id, 
            [out] IDrawable ** drawable);

        SetId(
            [in] Int32 index, 
            [in] Int32 id);

        GetNumberOfLayers(
            [out] Int32 * number);

        GetDrawable(
            [in] Int32 index, 
            [out] IDrawable ** drawable);

        GetId(
            [in] Int32 index, 
            [out] Int32 * id);

        SetDrawableByLayerId(
            [in] Int32 id, 
            [in] IDrawable * drawable, 
            [out] Boolean * res);

        SetLayerInset(
            [in] Int32 index, 
            [in] Int32 l, 
            [in] Int32 t, 
            [in] Int32 r, 
            [in] Int32 b);
    }

    interface IGradientState : IDrawableConstantState {
        SetShape(
            [in] Int32 shape);

        SetGradientType(
            [in] Int32 gradient);

        SetGradientCenter(
            [in] Float x, 
            [in] Float y);

        SetSolidColor(
            [in] Int32 argb);

        SetStroke(
            [in] Int32 width, 
            [in] Int32 color);

        SetStrokeEx(
            [in] Int32 width, 
            [in] Int32 color, 
            [in] Float dashWidth, 
            [in] Float dashGap);

        SetCornerRadius(
            [in] Float radius);

        SetCornerRadii(
            [in] ArrayOf<Float> * radii);

        SetSize(
            [in] Int32 width, 
            [in] Int32 height);

        SetGradientRadius(
            [in] Float gradientRadius);
    }

    interface IGradientDrawable : IDrawable {
        SetCornerRadii(
            [in] ArrayOf<Float> * radii);

        SetCornerRadius(
            [in] Float radius);

        SetStroke(
            [in] Int32 width, 
            [in] Int32 color);

        SetStrokeEx(
            [in] Int32 width, 
            [in] Int32 color, 
            [in] Float dashWidth, 
            [in] Float dashGap);

        SetSize(
            [in] Int32 width, 
            [in] Int32 height);

        SetShape(
            [in] Int32 shape);

        SetGradientType(
            [in] Int32 gradient);

        SetGradientCenter(
            [in] Float x, 
            [in] Float y);

        SetGradientRadius(
            [in] Float gradientRadius);

        SetUseLevel(
            [in] Boolean useLevel);

        SetColor(
            [in] Int32 argb);
    }

    interface IClipState : IDrawableConstantState {
    }

    interface IClipDrawable : IDrawable {
    }

    interface IAnimationDrawable : IDrawableContainer {
        GetNumberOfFrames(
            [out] Int32 * number);

        GetFrame(
            [in] Int32 index, 
            [out] IDrawable ** drawable);

        GetDuration(
            [in] Int32 i, 
            [out] Int32 * duration);

        IsOneShot(
            [out] Boolean * result);

        SetOneShot(
            [in] Boolean oneShot);

        AddFrame(
            [in] IDrawable * frame, 
            [in] Int32 duration);
    }

    interface IShape {
        GetWidth(
            [out] Float * width);

        GetHeight(
            [out] Float * height);

        Draw(
            [in] ICanvas * canvas, 
            [in] IPaint * paint);

        Resize(
            [in] Float width, 
            [in] Float height);

        HasAlpha(
            [out] Boolean * hasAlpha);

        Clone(
            [out] IShape ** shape);
    }

    interface IShaderFactory {
        Resize(
            [in] Int32 width, 
            [in] Int32 height, 
            [out] IShader ** shader);
    }

    interface IShapeDrawable : IDrawable {
        GetShape(
            [out] IShape ** shape);

        SetShape(
            [in] IShape * s);

        SetShaderFactory(
            [in] IShaderFactory * fact);

        GetShaderFactory(
            [out] IShaderFactory ** fact);

        GetPaint(
            [out] IPaint ** paint);

        SetPadding(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        SetPaddingEx(
            [in] IRect * padding);

        SetIntrinsicWidth(
            [in] Int32 width);

        SetIntrinsicHeight(
            [in] Int32 height);
    }

    interface IRotateDrawable : IDrawable {
        GetDrawable(
            [out] IDrawable ** drawable);
    }

    interface IInsetDrawable : IDrawable {
    }

    interface IScaleDrawable : IDrawable {
        GetDrawable(
            [out] IDrawable ** drawable);
    }

    interface ITransitionDrawable : ILayerDrawable {
        StartTransition(
            [in] Int32 durationMillis);

        ResetTransition();

        ReverseTransition(
            [in] Int32 duration);

        SetCrossFadeEnabled(
            [in] Boolean enabled);

        IsCrossFadeEnabled(
            [out] Boolean * enabled);
    }

    interface ILevelListDrawable : IDrawableContainer {
        AddLevel(
            [in] Int32 low, 
            [in] Int32 high, 
            [in] IDrawable * drawable);
    }

    interface IPaintDrawable : IShapeDrawable {
        SetCornerRadius(
            [in] Float radius);

        SetCornerRadii(
            [in] ArrayOf<Float> * radii);
    }

    interface IPictureDrawable : IDrawable {
        GetPicture(
            [out] IPicture ** picture);

        SetPicture(
            [in] IPicture * picture);
    }

    interface IAbsSavedState {
        GetSuperState(
            [out] IParcelable ** superState);
    }

    interface IMenuItem {
        GetItemId(
            [out] Int32 * id);

        GetGroupId(
            [out] Int32 * id);

        GetOrder(
            [out] Int32 * order);

        SetTitle(
            [in] ICharSequence * title);

        SetTitleEx(
            [in] Int32 title);

        GetTitle(
            [out] ICharSequence ** title);

        SetTitleCondensed(
            [in] ICharSequence * title);

        GetTitleCondensed(
            [out] ICharSequence ** title);

        SetIcon(
            [in] IDrawable * icon);

        SetIconEx(
            [in] Int32 iconRes);

        GetIcon(
            [out] IDrawable ** icon);

        SetIntent(
            [in] IIntent * intent);

        GetIntent(
            [out] IIntent ** intent);

        SetShortcut(
            [in] Char32 numericChar, 
            [in] Char32 alphaChar);

        SetNumericShortcut(
            [in] Char32 numericChar);

        GetNumericShortcut(
            [out] Char32 * numericChar);

        SetAlphabeticShortcut(
            [in] Char32 alphaChar);

        GetAlphabeticShortcut(
            [out] Char32 * alphaChar);

        SetCheckable(
            [in] Boolean checkable);

        IsCheckable(
            [out] Boolean * checkable);

        SetChecked(
            [in] Boolean checked);

        IsChecked(
            [out] Boolean * checked);

        SetVisible(
            [in] Boolean visible);

        IsVisible(
            [out] Boolean * visible);

        SetEnabled(
            [in] Boolean enabled);

        IsEnabled(
            [out] Boolean * enabled);

        HasSubMenu(
            [out] Boolean * hasSubMenu);

        GetSubMenu(
            [out] ISubMenu ** subMenu);

        SetOnMenuItemClickListener(
            [in] IOnMenuItemClickListener * menuItemClickListener);

        GetMenuInfo(
            [out] IContextMenuInfo ** menuInfo);
    }

    interface ISubMenu : IMenu {
        SetHeaderTitle(
            [in] Int32 titleRes);

        SetHeaderTitleEx(
            [in] ICharSequence * title);

        SetHeaderIcon(
            [in] Int32 iconRes);

        SetHeaderIconEx(
            [in] IDrawable * icon);

        SetHeaderView(
            [in] IView * view);

        SetIcon(
            [in] Int32 iconRes);

        SetIconEx(
            [in] IDrawable * icon);

        GetItemEx(
            [out] IMenuItem ** item);
    }

    interface IMenuBuilderCallback {
        OnMenuItemSelected(
            [in] IMenuBuilder * menu, 
            [in] IMenuItem * item, 
            [out] Boolean * state);

        OnCloseMenu(
            [in] IMenuBuilder * menu, 
            [in] Boolean allMenusAreClosing);

        OnSubMenuSelected(
            [in] ISubMenuBuilder * subMenu, 
            [out] Boolean * state);

        OnCloseSubMenu(
            [in] ISubMenuBuilder * menu);

        OnMenuModeChange(
            [in] IMenuBuilder * menu);
    }

    interface IMenuAdapter : IBaseAdapter {
        GetOffset(
            [out] Int32 * offset);
    }

    interface IContextMenuInfo {
    }

    interface ILayoutInflater {
        CloneInContext(
            [in] IContext * newContext, 
            [out] ILayoutInflater ** newInflater);

        GetContext(
            [out] IContext ** ctx);

        GetFactory(
            [out] ILayoutInflaterFactory ** factory);

        SetFactory(
            [in] ILayoutInflaterFactory * factory);

        GetFilter(
            [out] ILayoutInflaterFilter ** filter);

        SetFilter(
            [in] ILayoutInflaterFilter * filter);

        Inflate(
            [in] Int32 resource, 
            [in] IViewGroup * root, 
            [out] IView ** view);

        InflateEx(
            [in] IXmlPullParser * parser, 
            [in] IViewGroup * root, 
            [out] IView ** view);

        InflateEx2(
            [in] Int32 resource, 
            [in] IViewGroup * root, 
            [in] Boolean attachToRoot, 
            [out] IView ** view);

        InflateEx3(
            [in] IXmlPullParser * parser, 
            [in] IViewGroup * root, 
            [in] Boolean attachToRoot, 
            [out] IView ** view);
    }

    interface IView {
        GetVerticalFadingEdgeLength(
            [out] Int32 * length);

        SetFadingEdgeLength(
            [in] Int32 length);

        GetHorizontalFadingEdgeLength(
            [out] Int32 * length);

        GetVerticalScrollbarWidth(
            [out] Int32 * width);

        GetHorizontalScrollbarHeight(
            [out] Int32 * height);

        SetOnFocusChangeListener(
            [in] IViewOnFocusChangeListener * l);

        GetOnFocusChangeListener(
            [out] IViewOnFocusChangeListener ** l);

        SetOnClickListener(
            [in] IViewOnClickListener * l);

        SetOnLongClickListener(
            [in] IViewOnLongClickListener * l);

        SetOnCreateContextMenuListener(
            [in] IViewOnCreateContextMenuListener * l);

        PerformClick(
            [out] Boolean * result);

        PerformLongClick(
            [out] Boolean * result);

        ShowContextMenu(
            [out] Boolean * result);

        SetOnKeyListener(
            [in] IViewOnKeyListener * l);

        SetOnTouchListener(
            [in] IViewOnTouchListener * l);

        RequestRectangleOnScreen(
            [in] IRect * rectangle, 
            [out] Boolean * result);

        RequestRectangleOnScreenEx(
            [in] IRect * rectangle, 
            [in] Boolean immediate, 
            [out] Boolean * result);

        ClearFocus();

        HasFocus(
            [out] Boolean * hasFocus);

        HasFocusable(
            [out] Boolean * hasFocusable);

        DispatchPopulateAccessibilityEvent(
            [in] IAccessibilityEvent * event, 
            [out] Boolean * result);

        GetContentDescription(
            [out, callee] ArrayOf<Char8> * description);

        SetContentDescription(
            [in] ArrayOf<Char8> contentDescription);

        IsFocused(
            [out] Boolean * focused);

        FindFocus(
            [out] IView ** view);

        SetScrollContainer(
            [in] Boolean isScrollContainer);

        GetDrawingCacheQuality(
            [out] Int32 * quality);

        SetDrawingCacheQuality(
            [in] Int32 quality);

        GetKeepScreenOn(
            [out] Boolean * result);

        SetKeepScreenOn(
            [in] Boolean keepScreenOn);

        GetNextFocusLeftId(
            [out] Int32 * nextFocusLeftId);

        SetNextFocusLeftId(
            [in] Int32 nextFocusLeftId);

        GetNextFocusRightId(
            [out] Int32 * nextFocusRightId);

        SetNextFocusRightId(
            [in] Int32 nextFocusRightId);

        GetNextFocusUpId(
            [out] Int32 * nextFocusUpId);

        SetNextFocusUpId(
            [in] Int32 nextFocusUpId);

        GetNextFocusDownId(
            [out] Int32 * nextFocusDownId);

        SetNextFocusDownId(
            [in] Int32 nextFocusDownId);

        IsShown(
            [out] Boolean * shown);

        IsFitsSystemWindowsFlagSet(
            [out] Boolean * flag);

        GetVisibility(
            [out] Int32 * visibility);

        SetVisibility(
            [in] Int32 visibility);

        IsEnabled(
            [out] Boolean * enabled);

        SetEnabled(
            [in] Boolean enabled);

        SetFocusable(
            [in] Boolean focusable);

        SetFocusableInTouchMode(
            [in] Boolean focusableInTouchMode);

        SetSoundEffectsEnabled(
            [in] Boolean soundEffectsEnabled);

        IsSoundEffectsEnabled(
            [out] Boolean * soundEffectsEnabled);

        SetHapticFeedbackEnabled(
            [in] Boolean hapticFeedbackEnabled);

        IsHapticFeedbackEnabled(
            [out] Boolean * hapticFeedbackEnabled);

        SetWillNotDraw(
            [in] Boolean willNotDraw);

        WillNotDraw(
            [out] Boolean * willNotDraw);

        SetWillNotCacheDrawing(
            [in] Boolean willNotCacheDrawing);

        WillNotCacheDrawing(
            [out] Boolean * cache);

        IsClickable(
            [out] Boolean * clickable);

        SetClickable(
            [in] Boolean clickable);

        IsLongClickable(
            [out] Boolean * longClickable);

        SetLongClickable(
            [in] Boolean longClickable);

        SetPressed(
            [in] Boolean pressed);

        IsPressed(
            [out] Boolean * pressed);

        IsSaveEnabled(
            [out] Boolean * enabled);

        SetSaveEnabled(
            [in] Boolean enabled);

        GetFilterTouchesWhenObscured(
            [out] Boolean * enabled);

        SetFilterTouchesWhenObscured(
            [in] Boolean enabled);

        IsFocusable(
            [out] Boolean * focusable);

        IsFocusableInTouchMode(
            [out] Boolean * focusable);

        FocusSearch(
            [in] Int32 direction, 
            [out] IView ** view);

        DispatchUnhandledMove(
            [in] IView * focused, 
            [in] Int32 direction, 
            [out] Boolean * result);

        GetFocusables(
            [in] Int32 direction, 
            [out] IObjectContainer ** views);

        AddFocusables(
            [in] IObjectContainer * views, 
            [in] Int32 direction);

        AddFocusablesEx(
            [in] IObjectContainer * views, 
            [in] Int32 direction, 
            [in] Int32 focusableMode);

        GetTouchables(
            [out] IObjectContainer ** views);

        AddTouchables(
            [in] IObjectContainer * views);

        RequestFocus(
            [out] Boolean * result);

        RequestFocusEx(
            [in] Int32 direction, 
            [out] Boolean * result);

        RequestFocusEx2(
            [in] Int32 direction, 
            [in] IRect * previouslyFocusedRect, 
            [out] Boolean * result);

        RequestFocusFromTouch(
            [out] Boolean * result);

        DispatchStartTemporaryDetach();

        OnStartTemporaryDetach();

        DispatchFinishTemporaryDetach();

        OnFinishTemporaryDetach();

        GetKeyDispatcherState(
            [out] IDispatcherState ** state);

        DispatchKeyEventPreIme(
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        DispatchKeyEvent(
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        DispatchKeyShortcutEvent(
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        DispatchTouchEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * result);

        OnFilterTouchEventForSecurity(
            [in] IMotionEvent * event, 
            [out] Boolean * result);

        DispatchTrackballEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * result);

        DispatchWindowFocusChanged(
            [in] Boolean hasFocus);

        OnWindowFocusChanged(
            [in] Boolean hasWindowFocus);

        HasWindowFocus(
            [out] Boolean * focus);

        DispatchDisplayHint(
            [in] Int32 hint);

        DispatchWindowVisibilityChanged(
            [in] Int32 visibility);

        GetWindowVisibility(
            [out] Int32 * visibility);

        GetWindowVisibleDisplayFrame(
            [in] IRect * outRect);

        DispatchConfigurationChanged(
            [in] IConfiguration * newConfig);

        IsInTouchMode(
            [out] Boolean * result);

        GetContext(
            [out] IContext ** ctx);

        OnKeyPreIme(
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        OnKeyShortcut(
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        OnCheckIsTextEditor(
            [out] Boolean * result);

        OnCreateInputConnection(
            [in] IEditorInfo * outAttrs, 
            [out] IInputConnection ** inputConnection);

        CheckInputConnectionProxy(
            [in] IView * view, 
            [out] Boolean * result);

        CreateContextMenu(
            [in] IContextMenu * menu);

        OnTrackballEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * result);

        OnTouchEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * result);

        SetTouchDelegate(
            [in] ITouchDelegate * touchDelegate);

        GetTouchDelegate(
            [out] ITouchDelegate ** touchDelegate);

        CancelLongPress();

        BringToFront();

        GetParent(
            [out] IViewParent ** parent);

        GetScrollX(
            [out] Int32 * x);

        GetScrollY(
            [out] Int32 * y);

        GetWidth(
            [out] Int32 * width);

        GetHeight(
            [out] Int32 * height);

        GetDrawingRect(
            [in] IRect * outRect);

        GetMeasuredWidth(
            [out] Int32 * width);

        GetMeasuredHeight(
            [out] Int32 * height);

        GetTop(
            [out] Int32 * top);

        GetBottom(
            [out] Int32 * bottom);

        GetLeft(
            [out] Int32 * left);

        GetRight(
            [out] Int32 * right);

        GetHitRect(
            [in] IRect * outRect);

        GetFocusedRect(
            [in] IRect * outRect);

        GetGlobalVisibleRect(
            [in] IRect * outRect, 
            [in] IPoint * outGlobalOffset, 
            [out] Boolean * result);

        GetGlobalVisibleRectEx(
            [in] IRect * outRect, 
            [out] Boolean * result);

        GetLocalVisibleRect(
            [in] IRect * outRect, 
            [out] Boolean * result);

        OffsetTopAndBottom(
            [in] Int32 offset);

        OffsetLeftAndRight(
            [in] Int32 offset);

        GetLayoutParams(
            [out] IViewGroupLayoutParams ** params);

        SetLayoutParams(
            [in] IViewGroupLayoutParams * params);

        ScrollTo(
            [in] Int32 x, 
            [in] Int32 y);

        ScrollBy(
            [in] Int32 x, 
            [in] Int32 y);

        Invalidate(
            [in] IRect * dirty);

        InvalidateEx(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        InvalidateEx2();

        IsOpaque(
            [out] Boolean * opaque);

        GetHandler(
            [out] IApartment ** apartment);

        PostInvalidate();

        PostInvalidateEx(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        PostInvalidateDelayed(
            [in] Int64 delayMilliseconds);

        PostInvalidateDelayedEx(
            [in] Int64 delayMilliseconds, 
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        ComputeScroll();

        IsHorizontalFadingEdgeEnabled(
            [out] Boolean * horizontalFadingEdgeEnabled);

        SetHorizontalFadingEdgeEnabled(
            [in] Boolean horizontalFadingEdgeEnabled);

        IsVerticalFadingEdgeEnabled(
            [out] Boolean * verticalFadingEdgeEnabled);

        SetVerticalFadingEdgeEnabled(
            [in] Boolean verticalFadingEdgeEnabled);

        IsHorizontalScrollBarEnabled(
            [out] Boolean * horizontalScrollBarEnabled);

        SetHorizontalScrollBarEnabled(
            [in] Boolean horizontalScrollBarEnabled);

        IsVerticalScrollBarEnabled(
            [out] Boolean * verticalScrollBarEnabled);

        SetVerticalScrollBarEnabled(
            [in] Boolean verticalScrollBarEnabled);

        SetScrollbarFadingEnabled(
            [in] Boolean fadeScrollbars);

        IsScrollbarFadingEnabled(
            [out] Boolean * fadeScrollbars);

        SetScrollBarStyle(
            [in] Int32 style);

        GetScrollBarStyle(
            [out] Int32 * style);

        AssignParent(
            [in] IViewParent * parent);

        GetWindowToken(
            [out] IBinder ** token);

        GetApplicationWindowToken(
            [out] IBinder ** token);

        SaveHierarchyState(
            [in] IObjectIntegerMap * container);

        RestoreHierarchyState(
            [in] IObjectIntegerMap * container);

        GetDrawingTime(
            [out] Int64 * time);

        SetDuplicateParentStateEnabled(
            [in] Boolean enabled);

        IsDuplicateParentStateEnabled(
            [out] Boolean * result);

        SetDrawingCacheEnabled(
            [in] Boolean enabled);

        IsDrawingCacheEnabled(
            [out] Boolean * enabled);

        GetDrawingCache(
            [out] IBitmap ** bitmap);

        GetDrawingCacheEx(
            [in] Boolean autoScale, 
            [out] IBitmap ** bitmap);

        DestroyDrawingCache();

        SetDrawingCacheBackgroundColor(
            [in] Int32 color);

        GetDrawingCacheBackgroundColor(
            [out] Int32 * color);

        BuildDrawingCache();

        BuildDrawingCacheEx(
            [in] Boolean autoScale);

        CreateSnapshot(
            [in] BitmapConfig quality, 
            [in] Int32 backgroundColor, 
            [in] Boolean skipChildren, 
            [out] IBitmap ** bitmap);

        IsInEditMode(
            [out] Boolean * result);

        Draw(
            [in] ICanvas * canvas);

        GetSolidColor(
            [out] Int32 * color);

        OnFinishInflate();

        IsLayoutRequested(
            [out] Boolean * result);

        Layout(
            [in] Int32 l, 
            [in] Int32 t, 
            [in] Int32 r, 
            [in] Int32 b);

        GetResources(
            [out] IResources ** resources);

        UnscheduleDrawableEx(
            [in] IDrawable * who);

        RefreshDrawableState();

        GetDrawableState(
            [out, callee] ArrayOf<Int32> * state);

        SetBackgroundColor(
            [in] Int32 color);

        SetBackgroundResource(
            [in] Int32 resid);

        SetBackgroundDrawable(
            [in] IDrawable * d);

        GetBackground(
            [out] IDrawable ** drawable);

        SetPadding(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        GetPaddingTop(
            [out] Int32 * top);

        GetPaddingBottom(
            [out] Int32 * bottom);

        GetPaddingLeft(
            [out] Int32 * left);

        GetPaddingRight(
            [out] Int32 * right);

        SetSelected(
            [in] Boolean selected);

        IsSelected(
            [out] Boolean * selected);

        GetViewTreeObserver(
            [out] IViewTreeObserver ** observer);

        GetRootView(
            [out] IView ** view);

        GetLocationOnScreen(
            [out] Int32 * x, 
            [out] Int32 * y);

        GetLocationInWindow(
            [out] Int32 * x, 
            [out] Int32 * y);

        FindViewById(
            [in] Int32 id, 
            [out] IView ** view);

        SetId(
            [in] Int32 id);

        GetId(
            [out] Int32 * id);

        IsRootNamespace(
            [out] Boolean * result);

        GetBaseline(
            [out] Int32 * result);

        RequestLayout();

        ForceLayout();

        Measure(
            [in] Int32 widthMeasureSpec, 
            [in] Int32 heightMeasureSpec);

        SetMinimumHeight(
            [in] Int32 minHeight);

        SetMinimumWidth(
            [in] Int32 minWidth);

        GetAnimation(
            [out] IAnimation ** animation);

        StartAnimation(
            [in] IAnimation * animation);

        ClearAnimation();

        SetAnimation(
            [in] IAnimation * animation);

        GatherTransparentRegion(
            [in] IRegion * region, 
            [out] Boolean * result);

        PlaySoundEffect(
            [in] Int32 soundConstant);

        PerformHapticFeedback(
            [in] Int32 feedbackConstant, 
            [out] Boolean * result);

        PerformHapticFeedbackEx(
            [in] Int32 feedbackConstant, 
            [in] Int32 flags, 
            [out] Boolean * result);

        OnCloseSystemDialogs(
            [in] const String& reason);

        ApplyDrawableToTransparentRegion(
            [in] IDrawable * dr, 
            [in] IRegion * region);

        GetOverScrollMode(
            [out] Int32 * mode);

        SetOverScrollMode(
            [in] Int32 overScrollMode);
    }

    interface IViewGroup : IView {
        GetDescendantFocusability(
            [out] Int32 * focusability);

        SetDescendantFocusability(
            [in] Int32 focusability);

        GetFocusedChild(
            [out] IView ** focusedChild);

        OnInterceptTouchEvent(
            [in] IMotionEvent * ev, 
            [out] Boolean * value);

        SetClipChildren(
            [in] Boolean clipChildren);

        SetClipToPadding(
            [in] Boolean clipToPadding);

        AddView(
            [in] IView * child);

        AddViewEx(
            [in] IView * child, 
            [in] Int32 index);

        AddViewEx2(
            [in] IView * child, 
            [in] Int32 width, 
            [in] Int32 height);

        AddViewEx3(
            [in] IView * child, 
            [in] IViewGroupLayoutParams * params);

        AddViewEx4(
            [in] IView * child, 
            [in] Int32 index, 
            [in] IViewGroupLayoutParams * params);

        SetOnHierarchyChangeListener(
            [in] IViewGroupOnHierarchyChangeListener * listener);

        RemoveViewInLayout(
            [in] IView * view);

        RemoveViewsInLayout(
            [in] Int32 start, 
            [in] Int32 count);

        RemoveViewAt(
            [in] Int32 index);

        RemoveViews(
            [in] Int32 start, 
            [in] Int32 count);

        RemoveAllViews();

        RemoveAllViewsInLayout();

        OffsetDescendantRectToMyCoords(
            [in] IView * descendant, 
            [in] IRect * rect);

        OffsetRectIntoDescendantCoords(
            [in] IView * descendant, 
            [in] IRect * rect);

        OffsetChildrenTopAndBottom(
            [in] Int32 offset);

        StartLayoutAnimation();

        ScheduleLayoutAnimation();

        SetLayoutAnimation(
            [in] ILayoutAnimationController * controller);

        GetLayoutAnimation(
            [out] ILayoutAnimationController ** controller);

        IsAnimationCacheEnabled(
            [out] Boolean * enabled);

        SetAnimationCacheEnabled(
            [in] Boolean enabled);

        IsAlwaysDrawnWithCacheEnabled(
            [out] Boolean * always);

        SetAlwaysDrawnWithCacheEnabled(
            [in] Boolean always);

        GetPersistentDrawingCache(
            [out] Int32 * drawingCacheToKeep);

        SetPersistentDrawingCache(
            [in] Int32 drawingCacheToKeep);

        GenerateLayoutParams(
            [in] IAttributeSet * attrs, 
            [out] IViewGroupLayoutParams ** layoutParams);

        IndexOfChild(
            [in] IView * child, 
            [out] Int32 * index);

        GetChildCount(
            [out] Int32 * count);

        GetChildAt(
            [in] Int32 index, 
            [out] IView ** child);

        ClearDisappearingChildren();

        GetLayoutAnimationListener(
            [out] IAnimationListener ** listener);

        SetAddStatesFromChildren(
            [in] Boolean addsStates);

        AddStatesFromChildren(
            [out] Boolean * drawable);

        SetLayoutAnimationListener(
            [in] IAnimationListener * animationListener);
    }

    interface IMenuView {
        Initialize(
            [in] IMenuBuilder * menu, 
            [in] Int32 menuType);

        UpdateChildren(
            [in] Boolean cleared);

        GetWindowAnimations(
            [out] Int32 * animations);
    }

    interface IMenu {
        Add(
            [in] ICharSequence * title, 
            [out] IMenuItem ** item);

        AddEx(
            [in] Int32 titleRes, 
            [out] IMenuItem ** item);

        AddEx2(
            [in] Int32 groupId, 
            [in] Int32 itemId, 
            [in] Int32 order, 
            [in] ICharSequence * title, 
            [out] IMenuItem ** item);

        AddEx3(
            [in] Int32 groupId, 
            [in] Int32 itemId, 
            [in] Int32 order, 
            [in] Int32 titleRes, 
            [out] IMenuItem ** item);

        AddSubMenu(
            [in] ICharSequence * title, 
            [out] ISubMenu ** subMenu);

        AddSubMenuEx(
            [in] Int32 titleRes, 
            [out] ISubMenu ** subMenu);

        AddSubMenuEx2(
            [in] Int32 groupId, 
            [in] Int32 itemId, 
            [in] Int32 order, 
            [in] ICharSequence * title, 
            [out] ISubMenu ** subMenu);

        AddSubMenuEx3(
            [in] Int32 groupId, 
            [in] Int32 itemId, 
            [in] Int32 order, 
            [in] Int32 titleRes, 
            [out] ISubMenu ** subMenu);

        AddIntentOptions(
            [in] Int32 groupId, 
            [in] Int32 itemId, 
            [in] Int32 order, 
            [in] IComponentName * caller, 
            [in] ArrayOf<IIntent *> specifics, 
            [in] IIntent * intent, 
            [in] Int32 flags, 
            [in] ArrayOf<IMenuItem *> outSpecificItems, 
            [out] Int32 * count);

        RemoveItem(
            [in] Int32 id);

        RemoveGroup(
            [in] Int32 groupId);

        Clear();

        SetGroupCheckable(
            [in] Int32 group, 
            [in] Boolean checkable, 
            [in] Boolean exclusive);

        SetGroupVisible(
            [in] Int32 group, 
            [in] Boolean visible);

        SetGroupEnabled(
            [in] Int32 group, 
            [in] Boolean enabled);

        HasVisibleItems(
            [out] Boolean * result);

        FindItem(
            [in] Int32 id, 
            [out] IMenuItem ** item);

        GetSize(
            [out] Int32 * size);

        GetItem(
            [in] Int32 index, 
            [out] IMenuItem ** item);

        Close();

        PerformShortcut(
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [in] Int32 flags, 
            [out] Boolean * isShown);

        IsShortcutKey(
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * isShortcutKey);

        PerformIdentifierAction(
            [in] Int32 id, 
            [in] Int32 flags, 
            [out] Boolean * isShown);

        SetQwertyMode(
            [in] Boolean isQwerty);
    }

    interface IMenuInflater {
        Inflate(
            [in] Int32 menuRes, 
            [in] IMenu * menu);
    }

    interface IMenuItemView {
        Initialize(
            [in] IMenuItemImpl * itemData, 
            [in] Int32 menuType);

        GetItemData(
            [out] IMenuItemImpl ** itemData);

        SetTitle(
            [in] ICharSequence * title);

        SetEnabledEx(
            [in] Boolean enabled);

        SetCheckable(
            [in] Boolean checkable);

        SetChecked(
            [in] Boolean checked);

        SetShortcut(
            [in] Boolean showShortcut, 
            [in] Char32 shortcutKey);

        SetIcon(
            [in] IDrawable * icon);

        PrefersCondensedTitle(
            [out] Boolean * supported);

        ShowsIcon(
            [out] Boolean * show);
    }

    interface IOnMenuItemClickListener {
        OnMenuItemClick(
            [in] IMenuItem * item, 
            [out] Boolean * isConsumed);
    }

    interface IContextMenu : IMenu {
        SetHeaderTitle(
            [in] Int32 titleRes);

        SetHeaderTitleEx(
            [in] ICharSequence * title);

        SetHeaderIcon(
            [in] Int32 iconRes);

        SetHeaderIconEx(
            [in] IDrawable * icon);

        SetHeaderView(
            [in] IView * view);

        ClearHeader();
    }

    interface ISurface {
        SetCompatibleDisplayMetrics(
            [in] IDisplayMetrics * metrics, 
            [in] ITranslator * translator);

        CopyFrom(
            [in] ISurface * o);

        IsValid(
            [out] Boolean * isValid);

        Destroy();

        ReleaseSurface();

        LockCanvas(
            [in] IRect * dirty, 
            [out] ICanvas ** canvas);

        LockCanvasNative(
            [in] IRect * dirty, 
            [out] ICanvas ** canvas);

        UnlockCanvasAndPost(
            [in] ICanvas * canvas);

        UnlockCanvas(
            [in] ICanvas * canvas);

        FreezeDisplay(
            [in] Int32 display);

        UnfreezeDisplay(
            [in] Int32 display);

        SetOrientationEx(
            [in] Int32 display, 
            [in] Int32 orientation, 
            [in] Int32 flags);

        SetOrientation(
            [in] Int32 display, 
            [in] Int32 orientation);

        SetLayer(
            [in] Int32 zorder);

        SetPosition(
            [in] Int32 x, 
            [in] Int32 y);

        SetSize(
            [in] Int32 w, 
            [in] Int32 h);

        Hide();

        Show();

        SetTransparentRegionHint(
            [in] IRegion * region);

        SetAlpha(
            [in] Float alpha);

        SetMatrix(
            [in] Float dsdx, 
            [in] Float dtdx, 
            [in] Float dsdy, 
            [in] Float dtdy);

        Freeze();

        Unfreeze();

        SetFreezeTint(
            [in] Int32 tint);

        SetFlags(
            [in] Int32 flags, 
            [in] Int32 mask);
    }

    interface ISurfaceHelper {
        OpenTransaction();

        CloseTransaction();
    }

    interface ISurfaceSession {
        Kill();
    }

    interface IViewParent {
        RequestLayoutEx();

        IsLayoutRequestedEx(
            [out] Boolean * result);

        RequestTransparentRegion(
            [in] IView * child);

        InvalidateChild(
            [in] IView * child, 
            [in] IRect * r);

        InvalidateChildInParent(
            [in] ArrayOf<Int32> * location, 
            [in] IRect * r, 
            [out] IViewParent ** parent);

        GetParentEx(
            [out] IViewParent ** parent);

        RequestChildFocus(
            [in] IView * child, 
            [in] IView * focused);

        RecomputeViewAttributes(
            [in] IView * child);

        ClearChildFocus(
            [in] IView * child);

        GetChildVisibleRect(
            [in] IView * child, 
            [in] IRect * r, 
            [in] IPoint * offset, 
            [out] Boolean * result);

        FocusSearchEx(
            [in] IView * focused, 
            [in] Int32 direction, 
            [out] IView ** focus);

        BringChildToFront(
            [in] IView * child);

        FocusableViewAvailable(
            [in] IView * v);

        ShowContextMenuForChild(
            [in] IView * originalView, 
            [out] Boolean * result);

        CreateContextMenuEx(
            [in] IContextMenu * menu);

        ChildDrawableStateChanged(
            [in] IView * child);

        RequestDisallowInterceptTouchEvent(
            [in] Boolean disallowIntercept);

        RequestChildRectangleOnScreen(
            [in] IView * child, 
            [in] IRect * rectangle, 
            [in] Boolean immediate, 
            [out] Boolean * result);
    }

    interface IViewGroupLayoutParams : IDescribable {
        SetWidth(
            [in] Int32 width);

        SetHeight(
            [in] Int32 height);

        GetWidth(
            [out] Int32 * width);

        GetHeight(
            [out] Int32 * height);
    }

    interface ITouchDelegate {
        OnTouchEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * result);
    }

    interface IDispatcherState {
        Reset();

        ResetEx(
            [in] IInterface * target);

        StartTracking(
            [in] IKeyEvent * event, 
            [in] IInterface * target);

        IsTracking(
            [in] IKeyEvent * event, 
            [out] Boolean * isTracking);

        PerformedLongPress(
            [in] IKeyEvent * event);

        HandleUpEvent(
            [in] IKeyEvent * event);
    }

    interface IAccessibilityEvent {
    }

    interface IAnimation {
        Reset();

        Cancel();

        IsInitialized(
            [out] Boolean * isInitialized);

        Initialize(
            [in] Int32 width, 
            [in] Int32 height, 
            [in] Int32 parentWidth, 
            [in] Int32 parentHeight);

        SetInterpolator(
            [in] IContext * context, 
            [in] Int32 resID);

        SetInterpolatorEx(
            [in] IInterpolator * i);

        SetStartOffset(
            [in] Int64 startOffset);

        SetDuration(
            [in] Int64 durationMillis);

        RestrictDuration(
            [in] Int64 durationMillis);

        ScaleCurrentDuration(
            [in] Float scale);

        SetStartTime(
            [in] Int64 startTimeMillis);

        Start();

        StartNow();

        SetRepeatMode(
            [in] Int32 repeatMode);

        SetRepeatCount(
            [in] Int32 repeatCount);

        IsFillEnabled(
            [out] Boolean * isFillEnabled);

        SetFillEnabled(
            [in] Boolean fillEnabled);

        SetFillBefore(
            [in] Boolean fillBefore);

        SetFillAfter(
            [in] Boolean fillAfter);

        SetZAdjustment(
            [in] Int32 zAdjustment);

        SetDetachWallpaper(
            [in] Boolean detachWallpaper);

        GetInterpolator(
            [out] IInterpolator ** interpolator);

        GetStartTime(
            [out] Int64 * time);

        GetDuration(
            [out] Int64 * time);

        GetStartOffset(
            [out] Int64 * startOffset);

        GetRepeatMode(
            [out] Int32 * mode);

        GetRepeatCount(
            [out] Int32 * count);

        GetFillBefore(
            [out] Boolean * result);

        GetFillAfter(
            [out] Boolean * result);

        GetZAdjustment(
            [out] Int32 * zAdjustment);

        GetDetachWallpaper(
            [out] Boolean * result);

        WillChangeTransformationMatrix(
            [out] Boolean * result);

        WillChangeBounds(
            [out] Boolean * result);

        SetAnimationListener(
            [in] IAnimationListener * listener);

        ComputeDurationHint(
            [out] Int64 * hint);

        GetTransformation(
            [in] Int64 currentTime, 
            [in] ITransformation * outTransformation, 
            [out] Boolean * result);

        HasStarted(
            [out] Boolean * result);

        HasEnded(
            [out] Boolean * result);
    }

    interface IViewTreeObserver {
        AddOnScrollChangedListener(
            [in] IOnScrollChangedListener * listener);

        RemoveOnScrollChangedListener(
            [in] IOnScrollChangedListener * victim);

        AddOnTouchModeChangeListener(
            [in] IOnTouchModeChangeListener * listener);

        RemoveOnTouchModeChangeListener(
            [in] IOnTouchModeChangeListener * victim);

        AddOnPreDrawListener(
            [in] IOnPreDrawListener * listener);

        RemoveOnPreDrawListener(
            [in] IOnPreDrawListener * victim);

        Merge(
            [in] IViewTreeObserver * observer);

        AddOnGlobalFocusChangeListener(
            [in] IOnGlobalFocusChangeListener * listener);

        RemoveOnGlobalFocusChangeListener(
            [in] IOnGlobalFocusChangeListener * victim);

        AddOnGlobalLayoutListener(
            [in] IOnGlobalLayoutListener * listener);

        RemoveGlobalOnLayoutListener(
            [in] IOnGlobalLayoutListener * victim);

        AddOnComputeInternalInsetsListener(
            [in] IOnComputeInternalInsetsListener * listener);

        RemoveOnComputeInternalInsetsListener(
            [in] IOnComputeInternalInsetsListener * victim);

        IsAlive(
            [out] Boolean * alive);

        DispatchOnGlobalFocusChange(
            [in] IView * oldFocus, 
            [in] IView * newFocus);

        DispatchOnGlobalLayout();

        DispatchOnPreDraw(
            [out] Boolean * cancelDraw);

        DispatchOnTouchModeChanged(
            [in] Boolean inTouchMode);

        DispatchOnScrollChanged();

        HasComputeInternalInsetsListeners(
            [out] Boolean * has);

        DispatchOnComputeInternalInsets(
            [in] IInternalInsetsInfo * inoutInfo);
    }

    interface IEditorInfo {
    }

    interface IInputConnection {
        GetTextBeforeCursor(
            [in] Int32 n, 
            [in] Int32 flags, 
            [out] ICharSequence ** text);

        GetTextAfterCursor(
            [in] Int32 n, 
            [in] Int32 flags, 
            [out] ICharSequence ** text);

        GetSelectedText(
            [in] Int32 flags, 
            [out] ICharSequence ** text);

        GetCursorCapsMode(
            [in] Int32 reqModes, 
            [out] Int32 * capsMode);

        GetExtractedText(
            [in] IExtractedTextRequest * request, 
            [in] Int32 flags, 
            [out] IExtractedText ** extractedText);

        DeleteSurroundingText(
            [in] Int32 leftLength, 
            [in] Int32 rightLength, 
            [out] Boolean * flag);

        SetComposingText(
            [in] ICharSequence * text, 
            [in] Int32 newCursorPosition, 
            [out] Boolean * flag);

        SetComposingRegion(
            [in] Int32 start, 
            [in] Int32 end, 
            [out] Boolean * flag);

        FinishComposingText(
            [out] Boolean * flag);

        CommitText(
            [in] ICharSequence * text, 
            [in] Int32 newCursorPosition, 
            [out] Boolean * flag);

        CommitCompletion(
            [in] ICompletionInfo * text, 
            [out] Boolean * flag);

        SetSelection(
            [in] Int32 start, 
            [in] Int32 end, 
            [out] Boolean * flag);

        PerformEditorAction(
            [in] Int32 editorAction, 
            [out] Boolean * flag);

        PerformContextMenuAction(
            [in] Int32 id, 
            [out] Boolean * flag);

        BeginBatchEdit(
            [out] Boolean * flag);

        EndBatchEdit(
            [out] Boolean * flag);

        SendKeyEvent(
            [in] IKeyEvent * event, 
            [out] Boolean * flag);

        ClearMetaKeyStates(
            [in] Int32 states, 
            [out] Boolean * flag);

        ReportFullscreenMode(
            [in] Boolean enabled, 
            [out] Boolean * flag);

        PerformPrivateCommand(
            [in] const String& action, 
            [in] IBundle * data, 
            [out] Boolean * flag);
    }

    interface IViewOnKeyListener {
        OnKey(
            [in] IView * v, 
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);
    }

    interface IViewOnTouchListener {
        OnTouch(
            [in] IView * v, 
            [in] IMotionEvent * event, 
            [out] Boolean * result);
    }

    interface IViewOnLongClickListener {
        OnLongClick(
            [in] IView * v, 
            [out] Boolean * result);
    }

    interface IViewOnFocusChangeListener {
        OnFocusChange(
            [in] IView * v, 
            [in] Boolean hasFocus);
    }

    interface IViewOnClickListener {
        OnClick(
            [in] IView * v);
    }

    interface IViewOnCreateContextMenuListener {
        OnCreateContextMenu(
            [in] IContextMenu * menu, 
            [in] IView * v, 
            [in] IContextMenuInfo * menuInfo);
    }

    interface IViewBaseSavedState : IAbsSavedState {
    }

    interface ILayoutAnimationController {
        GetOrder(
            [out] Int32 * order);

        SetOrder(
            [in] Int32 order);

        SetAnimation(
            [in] IContext * context, 
            [in] Int32 resourceID);

        SetAnimationEx(
            [in] IAnimation * animation);

        GetAnimation(
            [out] IAnimation ** animation);

        SetInterpolator(
            [in] IContext * context, 
            [in] Int32 resourceID);

        SetInterpolatorEx(
            [in] IInterpolator * interpolator);

        GetInterpolator(
            [out] IInterpolator ** interpolator);

        GetDelay(
            [out] Float * delay);

        SetDelay(
            [in] Float delay);

        WillOverlap(
            [out] Boolean * willOverlap);

        Start();

        GetAnimationForView(
            [in] IView * view, 
            [out] IAnimation ** animation);

        IsDone(
            [out] Boolean * isDone);
    }

    interface IAnimationListener {
        OnAnimationStart(
            [in] IAnimation * animation);

        OnAnimationEnd(
            [in] IAnimation * animation);

        OnAnimationRepeat(
            [in] IAnimation * animation);
    }

    interface IViewGroupOnHierarchyChangeListener {
        OnChildViewAdded(
            [in] IView * parent, 
            [in] IView * child);

        OnChildViewRemoved(
            [in] IView * parent, 
            [in] IView * child);
    }

    interface IViewGroupMarginLayoutParams : IViewGroupLayoutParams {
        SetMargins(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        GetMargins(
            [out] Int32 * left, 
            [out] Int32 * top, 
            [out] Int32 * right, 
            [out] Int32 * bottom);
    }

    interface IViewManager {
        AddViewEx5(
            [in] IView * view, 
            [in] IViewGroupLayoutParams * params);

        UpdateViewLayout(
            [in] IView * view, 
            [in] IViewGroupLayoutParams * params);

        RemoveView(
            [in] IView * view);
    }

    interface IWindowManagerLayoutParamsHelper {
        MayUseInputMethodHelper(
            [in] Int32 flags, 
            [out] Boolean * mayUse);
    }

    interface IWindowManager : IViewManager {
        GetDefaultDisplay(
            [out] IDisplay ** display);

        RemoveViewImmediate(
            [in] IView * view);
    }

    interface IWindowManagerStub {
        StartViewServer(
            [in] Int32 port, 
            [out] Boolean * result);

        StopViewServer(
            [out] Boolean * result);

        IsViewServerRunning(
            [out] Boolean * result);

        OpenSession(
            [in] IInputMethodClientStub * client, 
            [in] IInputContextStub * inputContext, 
            [out] IWindowSession ** session);

        InputMethodClientHasFocus(
            [in] IInputMethodClientStub * client, 
            [out] Boolean * result);

        InjectKeyEvent(
            [in] IKeyEvent * ev, 
            [in] Boolean sync, 
            [out] Boolean * result);

        InjectPointerEvent(
            [in] IMotionEvent * ev, 
            [in] Boolean sync, 
            [out] Boolean * result);

        InjectTrackballEvent(
            [in] IMotionEvent * ev, 
            [in] Boolean sync, 
            [out] Boolean * result);

        InjectInputEventNoWait(
            [in] IInputEvent * ev, 
            [out] Boolean * result);

        PauseKeyDispatching(
            [in] IBinder * token);

        ResumeKeyDispatching(
            [in] IBinder * token);

        SetEventDispatching(
            [in] Boolean enabled);

        AddWindowToken(
            [in] IBinder * token, 
            [in] Int32 type);

        RemoveWindowToken(
            [in] IBinder * token);

        AddAppToken(
            [in] Int32 addPos, 
            [in] IApplicationToken * token, 
            [in] Int32 groupId, 
            [in] Int32 requestedOrientation, 
            [in] Boolean fullscreen);

        SetAppGroupId(
            [in] IBinder * token, 
            [in] Int32 groupId);

        SetAppOrientation(
            [in] IApplicationToken * token, 
            [in] Int32 requestedOrientation);

        GetAppOrientation(
            [in] IApplicationToken * token, 
            [out] Int32 * orientation);

        SetFocusedApp(
            [in] IBinder * token, 
            [in] Boolean moveFocusNow);

        PrepareAppTransition(
            [in] Int32 transit);

        GetPendingAppTransition(
            [out] Int32 * transit);

        OverridePendingAppTransition(
            [in] const String& capsuleName, 
            [in] Int32 enterAnim, 
            [in] Int32 exitAnim);

        ExecuteAppTransition();

        SetAppStartingWindow(
            [in] IBinder * token, 
            [in] const String& cap, 
            [in] Int32 theme, 
            [in] ArrayOf<Char8> nonLocalizedLabel, 
            [in] Int32 labelRes, 
            [in] Int32 icon, 
            [in] IBinder * transferFrom, 
            [in] Boolean createIfNeeded);

        SetAppWillBeHidden(
            [in] IBinder * token);

        SetAppVisibility(
            [in] IBinder * token, 
            [in] Boolean visible);

        StartAppFreezingScreen(
            [in] IBinder * token, 
            [in] Int32 configChanges);

        StopAppFreezingScreen(
            [in] IBinder * token, 
            [in] Boolean force);

        RemoveAppToken(
            [in] IBinder * token);

        MoveAppToken(
            [in] Int32 index, 
            [in] IBinder * token);

        MoveAppTokensToTop(
            [in] IObjectContainer * tokens);

        MoveAppTokensToBottom(
            [in] IObjectContainer * tokens);

        UpdateOrientationFromAppTokens(
            [in] IConfiguration * currentConfig, 
            [in] IBinder * freezeThisOneIfNeeded, 
            [out] IConfiguration ** config);

        SetNewConfiguration(
            [in] IConfiguration * config);

        DisableKeyguard(
            [in] IBinder * token, 
            [in] const String& tag);

        ReenableKeyguard(
            [in] IBinder * token);

        ExitKeyguardSecurely(
            [in] IOnKeyguardExitResult * keyguardCallback);

        InKeyguardRestrictedInputMode(
            [out] Boolean * result);

        CloseSystemDialogs(
            [in] const String& reason);

        GetAnimationScale(
            [in] Int32 which, 
            [out] Float * scale);

        SetAnimationScale(
            [in] Int32 which, 
            [in] Float scale);

        GetSwitchState(
            [in] Int32 sw, 
            [out] Int32 * state);

        GetSwitchStateForDevice(
            [in] Int32 devid, 
            [in] Int32 sw, 
            [out] Int32 * state);

        GetScancodeState(
            [in] Int32 sw, 
            [out] Int32 * state);

        GetScancodeStateForDevice(
            [in] Int32 devid, 
            [in] Int32 sw, 
            [out] Int32 * state);

        GetTrackballScancodeState(
            [in] Int32 sw, 
            [out] Int32 * state);

        GetDPadScancodeState(
            [in] Int32 sw, 
            [out] Int32 * state);

        GetKeycodeState(
            [in] Int32 sw, 
            [out] Int32 * state);

        GetKeycodeStateForDevice(
            [in] Int32 devid, 
            [in] Int32 sw, 
            [out] Int32 * state);

        GetTrackballKeycodeState(
            [in] Int32 sw, 
            [out] Int32 * state);

        GetDPadKeycodeState(
            [in] Int32 sw, 
            [out] Int32 * state);

        MonitorInput(
            [in] const String& inputChannelName, 
            [out] IInputChannel ** channel);

        GetInputDevice(
            [in] Int32 deviceId, 
            [out] IInputDevice ** device);

        SetInTouchMode(
            [in] Boolean showFocus);

        SetRotation(
            [in] Int32 rotation, 
            [in] Boolean alwaysSendConfiguration, 
            [in] Int32 animFlags);

        GetRotation(
            [out] Int32 * rotation);

        WatchRotation(
            [in] IRotationWatcher * watcher, 
            [out] Int32 * rotation);
    }

    interface IWindowState {
        ComputeFrameLw(
            [in] IRect * parentFrame, 
            [in] IRect * displayFrame, 
            [in] IRect * contentFrame, 
            [in] IRect * visibleFrame);

        GetFrameLw(
            [out] IRect ** result);

        GetShownFrameLw(
            [out] IRect ** result);

        GetDisplayFrameLw(
            [out] IRect ** result);

        GetContentFrameLw(
            [out] IRect ** result);

        GetVisibleFrameLw(
            [out] IRect ** result);

        GetGivenInsetsPendingLw(
            [out] Boolean * result);

        GetGivenContentInsetsLw(
            [out] IRect ** result);

        GetGivenVisibleInsetsLw(
            [out] IRect ** result);

        GetAttrs(
            [out] IWindowManagerLayoutParams ** params);

        GetSurfaceLayer(
            [out] Int32 * result);

        GetAppToken(
            [out] IApplicationToken ** result);

        HasAppShownWindows(
            [out] Boolean * result);

        IsVisibleLw(
            [out] Boolean * result);

        IsVisibleOrBehindKeyguardLw(
            [out] Boolean * result);

        IsDisplayedLw(
            [out] Boolean * result);

        HasDrawnLw(
            [out] Boolean * result);

        HideLw(
            [in] Boolean doAnimation, 
            [out] Boolean * result);

        ShowLw(
            [in] Boolean doAnimation, 
            [out] Boolean * result);
    }

    interface IApplicationToken : IBinder {
        WindowsVisible();

        WindowsGone();

        KeyDispatchingTimedOut(
            [out] Boolean * result);

        GetKeyDispatchingTimeout(
            [out] Millisecond64 * timeout);
    }

    interface IWindowManagerPolicy {
        Init(
            [in] IContext * ctx, 
            [in] IWindowManagerStub * windowManager);

        CheckAddPermission(
            [in] IWindowManagerLayoutParams * attrs, 
            [out] Int32 * addPermission);

        AdjustWindowParamsLw(
            [in] IWindowManagerLayoutParams * attrs);

        AdjustConfigurationLw(
            [in] IConfiguration * config);

        WindowTypeToLayerLw(
            [in] Int32 type, 
            [out] Int32 * layer);

        SubWindowTypeToLayerLw(
            [in] Int32 type, 
            [out] Int32 * layer);

        GetMaxWallpaperLayer(
            [out] Int32 * layer);

        DoesForceHide(
            [in] IWindowState * win, 
            [in] IWindowManagerLayoutParams * attrs, 
            [out] Boolean * hiden);

        CanBeForceHidden(
            [in] IWindowState * win, 
            [in] IWindowManagerLayoutParams * attrs, 
            [out] Boolean * canHiden);

        AddStartingWindow(
            [in] IBinder * appToken, 
            [in] const String& capsuleName, 
            [in] Int32 theme, 
            [in] ArrayOf<Char8> nonLocalizedLabel, 
            [in] Int32 labelRes, 
            [in] Int32 icon, 
            [out] IView ** window);

        RemoveStartingWindow(
            [in] IBinder * appToken, 
            [in] IView * window);

        PrepareAddWindowLw(
            [in] IWindowState * win, 
            [in] IWindowManagerLayoutParams * attrs, 
            [out] Int32 * added);

        RemoveWindowLw(
            [in] IWindowState * win);

        SelectAnimationLw(
            [in] IWindowState * win, 
            [in] Int32 transit, 
            [out] Int32 * id);

        InterceptKeyBeforeQueueing(
            [in] Int64 whenNanos, 
            [in] Int32 action, 
            [in] Int32 flags, 
            [in] Int32 keyCode, 
            [in] Int32 scanCode, 
            [in] Int32 policyFlags, 
            [in] Boolean isScreenOn, 
            [out] Int32 * bitwise);

        InterceptKeyBeforeDispatching(
            [in] IWindowState * win, 
            [in] Int32 action, 
            [in] Int32 flags, 
            [in] Int32 keyCode, 
            [in] Int32 scanCode, 
            [in] Int32 metaState, 
            [in] Int32 repeatCount, 
            [in] Int32 policyFlags, 
            [out] Boolean * consumed);

        BeginLayoutLw(
            [in] Int32 displayWidth, 
            [in] Int32 displayHeight);

        LayoutWindowLw(
            [in] IWindowState * win, 
            [in] IWindowManagerLayoutParams * attrs, 
            [in] IWindowState * attached);

        GetContentInsetHintLw(
            [in] IWindowManagerLayoutParams * attrs, 
            [in] IRect * contentInset);

        FinishLayoutLw(
            [out] Int32 * bitSet);

        BeginAnimationLw(
            [in] Int32 displayWidth, 
            [in] Int32 displayHeight);

        AnimatingWindowLw(
            [in] IWindowState * win, 
            [in] IWindowManagerLayoutParams * attrs);

        FinishAnimationLw(
            [out] Int32 * bitSet);

        AllowAppAnimationsLw(
            [out] Boolean * allowed);

        ScreenTurnedOff(
            [in] Int32 why);

        ScreenTurnedOn();

        IsScreenOn(
            [out] Boolean * isScreenOn);

        NotifyLidSwitchChanged(
            [in] Int64 whenNanos, 
            [in] Boolean lidOpen);

        EnableKeyguard(
            [in] Boolean enabled);

        InKeyguardRestrictedKeyInputMode(
            [out] Boolean * restricted);

        RotationForOrientationLw(
            [in] Int32 orientation, 
            [in] Int32 lastRotation, 
            [in] Boolean displayEnabled, 
            [out] Int32 * surfaceRotation);

        DetectSafeMode(
            [out] Boolean * isSafe);

        SystemReady();

        UserActivity();

        EnableScreenAfterBoot();

        SetCurrentOrientationLw(
            [in] Int32 newOrientation);

        PerformHapticFeedbackLw(
            [in] IWindowState * win, 
            [in] Int32 effectId, 
            [in] Boolean always, 
            [out] Boolean * isSucceed);

        ScreenOnStoppedLw();

        AllowKeyRepeat(
            [out] Boolean * allowed);
    }

    interface IGravity {
        Apply(
            [in] Int32 gravity, 
            [in] Int32 w, 
            [in] Int32 h, 
            [in] IRect * container, 
            [in] IRect * outRect);

        ApplyEx(
            [in] Int32 gravity, 
            [in] Int32 w, 
            [in] Int32 h, 
            [in] IRect * container, 
            [in] Int32 xAdj, 
            [in] Int32 yAdj, 
            [in] IRect * outRect);

        ApplyDisplay(
            [in] Int32 gravity, 
            [in] IRect * display, 
            [in] IRect * inoutObj);

        IsVertical(
            [in] Int32 gravity, 
            [out] Boolean * isVertical);

        IsHorizontal(
            [in] Int32 gravity, 
            [out] Boolean * isHorizontal);
    }

    interface ISurfaceHolder {
        AddCallback(
            [in] ISurfaceHolderCallback * cback);

        RemoveCallback(
            [in] ISurfaceHolderCallback * cback);

        IsCreating(
            [out] Boolean * result);

        SetType(
            [in] Int32 type);

        SetFixedSize(
            [in] Int32 width, 
            [in] Int32 height);

        SetSizeFromLayout();

        SetFormat(
            [in] Int32 format);

        SetKeepScreenOn(
            [in] Boolean screenOn);

        LockCanvas(
            [out] ICanvas ** canvas);

        LockCanvasEx(
            [in] IRect * dirty, 
            [out] ICanvas ** canvas);

        UnlockCanvasAndPost(
            [in] ICanvas * canvas);

        GetSurfaceFrame(
            [out] IRect ** rect);

        GetSurface(
            [out] ISurface ** surface);
    }

    interface ISurfaceHolderCallback {
        SurfaceCreated(
            [in] ISurfaceHolder * holder);

        SurfaceChanged(
            [in] ISurfaceHolder * holder, 
            [in] Int32 format, 
            [in] Int32 width, 
            [in] Int32 height);

        SurfaceDestroyed(
            [in] ISurfaceHolder * holder);
    }

    interface ISurfaceHolderCallback2 : ISurfaceHolderCallback {
        SurfaceRedrawNeeded(
            [in] ISurfaceHolder * holder);
    }

    interface IWindowCallback {
        DispatchKeyEvent(
            [in] IKeyEvent * event, 
            [out] Boolean * isConsumed);

        DispatchTouchEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * isConsumed);

        DispatchTrackballEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * isConsumed);

        DispatchPopulateAccessibilityEvent(
            [in] IAccessibilityEvent * event, 
            [out] Boolean * isCompleted);

        OnCreatePanelView(
            [in] Int32 featureId, 
            [out] IView ** view);

        OnCreatePanelMenu(
            [in] Int32 featureId, 
            [in] IMenu * menu, 
            [out] Boolean * allowToShow);

        OnPreparePanel(
            [in] Int32 featureId, 
            [in] IView * view, 
            [in] IMenu * menu, 
            [out] Boolean * allowToShow);

        OnMenuOpened(
            [in] Int32 featureId, 
            [in] IMenu * menu, 
            [out] Boolean * allowToOpen);

        OnMenuItemSelected(
            [in] Int32 featureId, 
            [in] IMenuItem * item, 
            [out] Boolean * toFinish);

        OnWindowAttributesChanged(
            [in] IWindowManagerLayoutParams * attrs);

        OnContentChanged();

        OnWindowFocusChanged(
            [in] Boolean hasFocus);

        OnAttachedToWindow();

        OnDetachedFromWindow();

        OnPanelClosed(
            [in] Int32 featureId, 
            [in] IMenu * menu);

        OnSearchRequested(
            [out] Boolean * isLaunched);
    }

    interface IWindow {
        GetContext(
            [out] IContext ** ctx);

        GetWindowStyle(
            [out] ITypedArray ** attrs);

        SetContainer(
            [in] IWindow * container);

        GetContainer(
            [out] IWindow ** container);

        HasChildren(
            [out] Boolean * hasChildren);

        SetWindowManager(
            [in] IWindowManager * wm, 
            [in] IBinder * appToken, 
            [in] const String& appName);

        GetWindowManager(
            [out] IWindowManager ** wm);

        SetCallback(
            [in] IWindowCallback * cb);

        GetCallback(
            [out] IWindowCallback ** cb);

        TakeSurface(
            [in] ISurfaceHolderCallback2 * cb);

        IsFloating(
            [out] Boolean * isFloating);

        SetLayout(
            [in] Int32 width, 
            [in] Int32 height);

        SetGravity(
            [in] Int32 gravity);

        SetType(
            [in] Int32 type);

        SetFormat(
            [in] Int32 format);

        SetWindowAnimations(
            [in] Int32 resId);

        SetSoftInputMode(
            [in] Int32 mode);

        AddFlags(
            [in] Int32 flags);

        ClearFlags(
            [in] Int32 flags);

        SetFlags(
            [in] Int32 flags, 
            [in] Int32 mask);

        SetAttributes(
            [in] IWindowManagerLayoutParams * a);

        GetAttributes(
            [out] IWindowManagerLayoutParams ** params);

        RequestFeature(
            [in] Int32 featureId, 
            [out] Boolean * result);

        MakeActive();

        IsActive(
            [out] Boolean * isActive);

        FindViewById(
            [in] Int32 id, 
            [out] IView ** view);

        SetContentView(
            [in] Int32 layoutResID);

        SetContentViewEx(
            [in] IView * view);

        SetContentViewEx2(
            [in] IView * view, 
            [in] IViewGroupLayoutParams * params);

        AddContentView(
            [in] IView * view, 
            [in] IViewGroupLayoutParams * params);

        GetCurrentFocus(
            [out] IView ** view);

        GetLayoutInflater(
            [out] ILayoutInflater ** inflater);

        SetTitle(
            [in] ICharSequence * title);

        SetTitleColor(
            [in] Int32 textColor);

        OpenPanel(
            [in] Int32 featureId, 
            [in] IKeyEvent * event);

        ClosePanel(
            [in] Int32 featureId);

        TogglePanel(
            [in] Int32 featureId, 
            [in] IKeyEvent * event);

        PerformPanelShortcut(
            [in] Int32 featureId, 
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [in] Int32 flags, 
            [out] Boolean * succeeded);

        PerformPanelIdentifierAction(
            [in] Int32 featureId, 
            [in] Int32 id, 
            [in] Int32 flags, 
            [out] Boolean * succeeded);

        CloseAllPanels();

        PerformContextMenuIdentifierAction(
            [in] Int32 id, 
            [in] Int32 flags, 
            [out] Boolean * succeeded);

        OnConfigurationChanged(
            [in] IConfiguration * newConfig);

        SetBackgroundDrawableResource(
            [in] Int32 resid);

        SetBackgroundDrawable(
            [in] IDrawable * drawable);

        SetFeatureDrawableResource(
            [in] Int32 featureId, 
            [in] Int32 resId);

        SetFeatureDrawableUri(
            [in] Int32 featureId, 
            [in] IUri * uri);

        SetFeatureDrawable(
            [in] Int32 featureId, 
            [in] IDrawable * drawable);

        SetFeatureDrawableAlpha(
            [in] Int32 featureId, 
            [in] Int32 alpha);

        SetFeatureInt(
            [in] Int32 featureId, 
            [in] Int32 value);

        TakeKeyEvents(
            [in] Boolean get);

        SuperDispatchKeyEvent(
            [in] IKeyEvent * event, 
            [out] Boolean * succeeded);

        SuperDispatchTouchEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * succeeded);

        SuperDispatchTrackballEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * succeeded);

        GetDecorView(
            [out] IView ** view);

        PeekDecorView(
            [out] IView ** view);

        SaveHierarchyState(
            [out] IBundle ** instanceState);

        RestoreHierarchyState(
            [in] IBundle * savedInstanceState);

        SetChildDrawable(
            [in] Int32 featureId, 
            [in] IDrawable * drawable);

        SetChildInt(
            [in] Int32 featureId, 
            [in] Int32 value);

        IsShortcutKey(
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * isShortcutKey);

        SetVolumeControlStream(
            [in] Int32 streamType);

        GetVolumeControlStream(
            [out] Int32 * streamType);
    }

    interface ILayoutInflaterFilter {
        OnLoadClass(
            [in] Handle32 clazz, 
            [out] Boolean * allowed);
    }

    interface ILayoutInflaterFactory {
        OnCreateView(
            [in] const String& name, 
            [in] IContext * ctx, 
            [in] IAttributeSet * attrs, 
            [out] IView ** view);
    }

    interface IOnGlobalLayoutListener {
        OnGlobalLayout();
    }

    interface IOnPreDrawListener {
        OnPreDraw(
            [out] Boolean * result);
    }

    interface IOnTouchModeChangeListener {
        OnTouchModeChanged(
            [in] Boolean isInTouchMode);
    }

    interface IOnScrollChangedListener {
        OnScrollChanged();
    }

    interface IOnGlobalFocusChangeListener {
        OnGlobalFocusChanged(
            [in] IView * oldFocus, 
            [in] IView * newFocus);
    }

    interface IInternalInsetsInfo {
        SetTouchableInsets(
            [in] Int32 val);

        GetTouchableInsets(
            [out] Int32 * set);

        Equals(
            [in] IInternalInsetsInfo * o, 
            [out] Boolean * res);
    }

    interface IOnComputeInternalInsetsListener {
        OnComputeInternalInsets(
            [in] IInternalInsetsInfo * inoutInfo);
    }

    interface IInterpolator {
        GetInterpolation(
            [in] Float input, 
            [out] Float * output);
    }

    interface ITransformation {
        Clear();

        GetTransformationType(
            [out] Int32 * type);

        SetTransformationType(
            [in] Int32 transformationType);

        Set(
            [in] ITransformation * t);

        Compose(
            [in] ITransformation * t);

        GetMatrix(
            [out] IMatrix ** matrix);

        SetAlpha(
            [in] Float alpha);

        GetAlpha(
            [out] Float * alpha);
    }

    interface IAnimationSet : IAnimation {
        AddAnimation(
            [in] IAnimation * a);

        GetAnimations(
            [out] IObjectContainer ** animations);
    }

    interface IGridLayoutAnimationController : ILayoutAnimationController {
        GetColumnDelay(
            [out] Float * columnDelay);

        SetColumnDelay(
            [in] Float columnDelay);

        GetRowDelay(
            [out] Float * rowDelay);

        SetRowDelay(
            [in] Float rowDelay);

        GetDirection(
            [out] Int32 * direction);

        SetDirection(
            [in] Int32 direction);

        GetDirectionPriority(
            [out] Int32 * directionPriority);

        SetDirectionPriority(
            [in] Int32 directionPriority);
    }

    interface IAnimationUtils {
        CurrentAnimationTimeMillis(
            [out] Int64 * time);

        LoadAnimation(
            [in] IContext * context, 
            [in] Int32 id, 
            [out] IAnimation ** animation);

        LoadLayoutAnimation(
            [in] IContext * context, 
            [in] Int32 id, 
            [out] ILayoutAnimationController ** controller);

        MakeInAnimation(
            [in] IContext * context, 
            [in] Boolean fromLeft, 
            [out] IAnimation ** animation);

        MakeOutAnimation(
            [in] IContext * context, 
            [in] Boolean toRight, 
            [out] IAnimation ** animation);

        MakeInChildBottomAnimation(
            [in] IContext * context, 
            [out] IAnimation ** animation);

        LoadInterpolator(
            [in] IContext * context, 
            [in] Int32 id, 
            [out] IInterpolator ** interpolator);
    }

    interface IInputDevice {
        GetId(
            [out] Int32 * id);

        GetName(
            [out] String * name);

        GetSources(
            [out] Int32 * sources);

        GetKeyboardType(
            [out] Int32 * type);

        GetMotionRange(
            [in] Int32 rangeType, 
            [out] IMotionRange ** motionRange);

        DescribeContents(
            [out] Int32 * describe);
    }

    interface IInputEvent {
        GetDeviceId(
            [out] Int32 * deviceId);

        GetDevice(
            [out] IInputDevice ** device);

        GetSource(
            [out] Int32 * source);

        SetSource(
            [in] Int32 source);
    }

    interface IKeyEventCallback {
        OnKeyDown(
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        OnKeyLongPress(
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        OnKeyUp(
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        OnKeyMultiple(
            [in] Int32 keyCode, 
            [in] Int32 count, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);
    }

    interface IMotionEventHelper {
        Obtain(
            [in] IMotionEvent * o, 
            [out] IMotionEvent ** event);
    }

    interface IAccessibilityEventSource {
        SendAccessibilityEvent(
            [in] Int32 eventType);

        SendAccessibilityEventUnchecked(
            [in] IAccessibilityEvent * event);
    }

    interface IExtractedText {
    }

    interface IExtractedTextRequest {
    }

    interface ICompletionInfo {
    }

    interface IInputBinding {
        GetConnection(
            [out] IInputConnection ** connection);

        GetConnectionToken(
            [out] IBinder ** token);

        GetUid(
            [out] Int32 * uid);

        GetPid(
            [out] Int32 * pid);

        ToString(
            [out] String * str);

        DescribeContents(
            [out] Int32 * content);
    }

    interface ILocalInputMethodSession {
        FinishInput();

        UpdateSelection(
            [in] Int32 oldSelStart, 
            [in] Int32 oldSelEnd, 
            [in] Int32 newSelStart, 
            [in] Int32 newSelEnd, 
            [in] Int32 candidatesStart, 
            [in] Int32 candidatesEnd);

        UpdateCursor(
            [in] IRect * newCursor);

        DisplayCompletions(
            [in] ArrayOf<ICompletionInfo *> * completions);

        UpdateExtractedText(
            [in] Int32 token, 
            [in] IExtractedText * text);

        DispatchKeyEvent(
            [in] Int32 seq, 
            [in] IKeyEvent * event, 
            [in] ILocalInputMethodSessionEventCallback * eventCallback);

        DispatchTrackballEvent(
            [in] Int32 seq, 
            [in] IMotionEvent * event, 
            [in] ILocalInputMethodSessionEventCallback * eventCallback);

        AppPrivateCommand(
            [in] const String& action, 
            [in] IBundle * data);

        ToggleSoftInput(
            [in] Int32 showFlags, 
            [in] Int32 hideFlags);
    }

    interface ILocalInputMethodSessionCallback {
        SessionCreated(
            [in] ILocalInputMethodSession * session);
    }

    interface ILocalInputMethod {
        AttachToken(
            [in] IBinder * token);

        BindInput(
            [in] IInputBinding * binding);

        UnbindInput();

        StartInput(
            [in] IInputConnection * inputConnection, 
            [in] IEditorInfo * attribute);

        RestartInput(
            [in] IInputConnection * inputConnection, 
            [in] IEditorInfo * attribute);

        CreateSession(
            [in] ILocalInputMethodSessionCallback * sessionCalllback);

        SetSessionEnabled(
            [in] ILocalInputMethodSession * session, 
            [in] Boolean enabled);

        RevokeSession(
            [in] ILocalInputMethodSession * session);

        ShowSoftInput(
            [in] Int32 flags, 
            [in] IResultReceiver * resultReceiver);

        HideSoftInput(
            [in] Int32 flags, 
            [in] IResultReceiver * resultReceiver);
    }

    interface IInputMethodInfo {
        GetId(
            [out] String * id);

        GetCapsuleName(
            [out] String * name);

        GetServiceName(
            [out] String * name);

        GetServiceInfo(
            [out] IServiceInfo ** info);

        GetComponent(
            [out] IComponentName ** name);

        LoadLabel(
            [in] ICapsuleManager * pm, 
            [out] ICharSequence ** str);

        LoadIcon(
            [in] ICapsuleManager * pm, 
            [out] IDrawable ** drawable);

        GetSettingsActivity(
            [out] String * settings);

        GetIsDefaultResourceId(
            [out] Int32 * id);
    }

    interface ILocalInputMethodSessionEventCallback {
        FinishedEvent(
            [in] Int32 seq, 
            [in] Boolean handled);
    }

    interface IInputMethodClientStub : IBinder {
        SetUsingInputMethod(
            [in] Boolean state);

        OnBindMethod(
            [in] IInputBindResult * res);

        OnUnbindMethod(
            [in] Int32 sequence);

        SetActive(
            [in] Boolean active);
    }

    interface IInputMethodCallbackStub : IBinder {
        FinishedEvent(
            [in] Int32 seq, 
            [in] Boolean handled);

        SessionCreated(
            [in] IInputMethodSessionStub * session);
    }

    interface IInputContextStub : IBinder {
        GetTextBeforeCursor(
            [in] Int32 length, 
            [in] Int32 flags, 
            [in] Int32 seq, 
            [in] IInputContextCallbackStub * icCallback);

        GetTextAfterCursor(
            [in] Int32 length, 
            [in] Int32 flags, 
            [in] Int32 seq, 
            [in] IInputContextCallbackStub * icCallback);

        GetCursorCapsMode(
            [in] Int32 reqModes, 
            [in] Int32 seq, 
            [in] IInputContextCallbackStub * icCallback);

        GetExtractedText(
            [in] IExtractedTextRequest * request, 
            [in] Int32 flags, 
            [in] Int32 seq, 
            [in] IInputContextCallbackStub * icCallback);

        DeleteSurroundingText(
            [in] Int32 leftLength, 
            [in] Int32 rightLength);

        SetComposingText(
            [in] ICharSequence * text, 
            [in] Int32 newCursorPosition);

        FinishComposingText();

        CommitText(
            [in] ICharSequence * text, 
            [in] Int32 newCursorPosition);

        CommitCompletion(
            [in] ICompletionInfo * completion);

        SetSelection(
            [in] Int32 start, 
            [in] Int32 end);

        PerformEditorAction(
            [in] Int32 actionCode);

        PerformContextMenuAction(
            [in] Int32 id);

        BeginBatchEdit();

        EndBatchEdit();

        ReportFullscreenMode(
            [in] Boolean enabled);

        SendKeyEvent(
            [in] IKeyEvent * event);

        ClearMetaKeyStates(
            [in] Int32 states);

        PerformPrivateCommand(
            [in] const String& action, 
            [in] IBundle * data);

        SetComposingRegion(
            [in] Int32 start, 
            [in] Int32 end);

        GetSelectedText(
            [in] Int32 flags, 
            [in] Int32 seq, 
            [in] IInputContextCallbackStub * icCallback);
    }

    interface ILocalInputMethodManager {
        GetClient(
            [out] IInputMethodClientStub ** client);

        GetInputContext(
            [out] IInputContextStub ** context);

        GetInputMethodList(
            [out] IObjectContainer ** infos);

        GetEnabledInputMethodList(
            [out] IObjectContainer ** infos);

        ShowStatusIcon(
            [in] IBinder * imeToken, 
            [in] const String& capsuleName, 
            [in] Int32 iconId);

        HideStatusIcon(
            [in] IBinder * imeToken);

        SetFullscreenMode(
            [in] Boolean fullScreen);

        IsFullscreenMode(
            [out] Boolean * mode);

        IsActive(
            [in] IView * view, 
            [out] Boolean * active);

        IsActiveEx(
            [out] Boolean * active);

        IsAcceptingText(
            [out] Boolean * accept);

        ReportFinishInputConnection(
            [in] IInputConnection * ic);

        DisplayCompletions(
            [in] IView * view, 
            [in] ArrayOf<ICompletionInfo *> * completions);

        UpdateExtractedText(
            [in] IView * view, 
            [in] Int32 token, 
            [in] IExtractedText * text);

        ShowSoftInput(
            [in] IView * view, 
            [in] Int32 flags, 
            [out] Boolean * ret);

        ShowSoftInputEx(
            [in] IView * view, 
            [in] Int32 flags, 
            [in] IResultReceiver * resultReceiver, 
            [out] Boolean * ret);

        ShowSoftInputUnchecked(
            [in] Int32 flags, 
            [in] IResultReceiver * resultReceiver);

        HideSoftInputFromWindow(
            [in] IBinder * windowToken, 
            [in] Int32 flags, 
            [out] Boolean * ret);

        HideSoftInputFromWindowEx(
            [in] IBinder * windowToken, 
            [in] Int32 flags, 
            [in] IResultReceiver * resultReceiver, 
            [out] Boolean * ret);

        ToggleSoftInputFromWindow(
            [in] IBinder * windowToken, 
            [in] Int32 showFlags, 
            [in] Int32 hideFlags);

        ToggleSoftInput(
            [in] Int32 showFlags, 
            [in] Int32 hideFlags);

        RestartInput(
            [in] IView * view);

        WindowDismissed(
            [in] IBinder * appWindowToken);

        FocusIn(
            [in] IView * view);

        FocusOut(
            [in] IView * view);

        CheckFocus();

        OnWindowFocus(
            [in] IView * rootView, 
            [in] IView * focusedView, 
            [in] Int32 softInputMode, 
            [in] Boolean first, 
            [in] Int32 windowFlags);

        StartGettingWindowFocus(
            [in] IView * rootView);

        UpdateSelection(
            [in] IView * view, 
            [in] Int32 selStart, 
            [in] Int32 selEnd, 
            [in] Int32 candidatesStart, 
            [in] Int32 candidatesEnd);

        IsWatchingCursor(
            [in] IView * view, 
            [out] Boolean * ret);

        UpdateCursor(
            [in] IView * view, 
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        SendAppPrivateCommand(
            [in] IView * view, 
            [in] const String& action, 
            [in] IBundle * data);

        SetInputMethod(
            [in] IBinder * token, 
            [in] const String& id);

        HideSoftInputFromInputMethod(
            [in] IBinder * token, 
            [in] Int32 flags);

        ShowSoftInputFromInputMethod(
            [in] IBinder * token, 
            [in] Int32 flags);

        DispatchKeyEvent(
            [in] IContext * context, 
            [in] Int32 seq, 
            [in] IKeyEvent * key, 
            [in] IInputMethodCallbackStub * cback);

        ShowInputMethodPicker();
    }

    interface IInputMethodSessionStub : IBinder {
        FinishInput();

        UpdateExtractedText(
            [in] Int32 token, 
            [in] IExtractedText * text);

        UpdateSelection(
            [in] Int32 oldSelStart, 
            [in] Int32 oldSelEnd, 
            [in] Int32 newSelStart, 
            [in] Int32 newSelEnd, 
            [in] Int32 candidatesStart, 
            [in] Int32 candidatesEnd);

        UpdateCursor(
            [in] IRect * newCursor);

        DisplayCompletions(
            [in] ArrayOf<ICompletionInfo *> * completions);

        DispatchKeyEvent(
            [in] Int32 seq, 
            [in] IKeyEvent * event, 
            [in] IInputMethodCallbackStub * eventCallback);

        DispatchTrackballEvent(
            [in] Int32 seq, 
            [in] IMotionEvent * event, 
            [in] IInputMethodCallbackStub * eventCallback);

        AppPrivateCommand(
            [in] const String& action, 
            [in] IBundle * data);

        ToggleSoftInput(
            [in] Int32 showFlags, 
            [in] Int32 hideFlags);

        FinishSession();
    }

    interface IInputBindResult {
        GetIIMSessionStub(
            [out] IInputMethodSessionStub ** stub);
    }

    interface IInputContextCallbackStub : IBinder {
        SetTextBeforeCursor(
            [in] ICharSequence * textBeforeCursor, 
            [in] Int32 seq);

        SetTextAfterCursor(
            [in] ICharSequence * textAfterCursor, 
            [in] Int32 seq);

        SetCursorCapsMode(
            [in] Int32 capsMode, 
            [in] Int32 seq);

        SetExtractedText(
            [in] IExtractedText * extractedText, 
            [in] Int32 seq);

        SetSelectedText(
            [in] ICharSequence * selectedText, 
            [in] Int32 seq);
    }

    interface IInputChannel {
        Dispose();

        TransferToBinderOutParameter(
            [in] IInputChannel * outParameter);

        GetNativeInputChannel(
            [out] Handle32 * nativeInputChannel);
    }

    interface IInputChannelHelper {
        OpenInputChannelPair(
            [in] const String& name, 
            [out] IInputChannel ** inputChannel0, 
            [out] IInputChannel ** inputChannel1);
    }

    interface IMotionRange {
        GetMin(
            [out] Float * minimum);

        GetMax(
            [out] Float * maximum);

        GetRange(
            [out] Float * range);

        GetFlat(
            [out] Float * flat);

        GetFuzz(
            [out] Float * fuzz);
    }

    interface IInputMethodStub : IBinder {
        AttachToken(
            [in] IBinder * token);

        BindInput(
            [in] IInputBinding * binding);

        UnbindInput();

        StartInput(
            [in] IInputContextStub * inputContext, 
            [in] IEditorInfo * attribute);

        RestartInput(
            [in] IInputContextStub * inputContext, 
            [in] IEditorInfo * attribute);

        CreateSession(
            [in] IInputMethodCallbackStub * inputMethodCalllback);

        SetSessionEnabled(
            [in] IInputMethodSessionStub * session, 
            [in] Boolean enabled);

        RevokeSession(
            [in] IInputMethodSessionStub * session);

        ShowSoftInput(
            [in] Int32 flags, 
            [in] IResultReceiver * resultReceiver);

        HideSoftInput(
            [in] Int32 flags, 
            [in] IResultReceiver * resultReceiver);
    }

    interface IInputMethodManagerStub : IBinder {
        GetInputMethodList(
            [out] IObjectContainer ** infos);

        GetEnabledInputMethodList(
            [out] IObjectContainer ** infos);

        AddClient(
            [in] IInputMethodClientStub * client, 
            [in] IInputContextStub * inputContext, 
            [in] Int32 uid, 
            [in] Int32 pid);

        RemoveClient(
            [in] IInputMethodClientStub * client);

        StartInput(
            [in] IInputMethodClientStub * client, 
            [in] IInputContextStub * inputContext, 
            [in] IEditorInfo * attribute, 
            [in] Boolean initial, 
            [in] Boolean needResult, 
            [out] IInputBindResult ** result);

        FinishInput(
            [in] IInputMethodClientStub * client);

        ShowSoftInput(
            [in] IInputMethodClientStub * client, 
            [in] Int32 flags, 
            [in] IResultReceiver * resultReceiver, 
            [out] Boolean * res);

        HideSoftInput(
            [in] IInputMethodClientStub * client, 
            [in] Int32 flags, 
            [in] IResultReceiver * resultReceiver, 
            [out] Boolean * res);

        WindowGainedFocus(
            [in] IInputMethodClientStub * client, 
            [in] IBinder * windowToken, 
            [in] Boolean viewHasFocus, 
            [in] Boolean isTextEditor, 
            [in] Int32 softInputMode, 
            [in] Boolean first, 
            [in] Int32 windowFlags);

        ShowInputMethodPickerFromClient(
            [in] IInputMethodClientStub * client);

        SetInputMethod(
            [in] IBinder * token, 
            [in] const String& id);

        HideMySoftInput(
            [in] IBinder * token, 
            [in] Int32 flags);

        ShowMySoftInput(
            [in] IBinder * token, 
            [in] Int32 flags);

        UpdateStatusIcon(
            [in] IBinder * token, 
            [in] const String& capsuleName, 
            [in] Int32 iconId);

        SetInputMethodEnabled(
            [in] const String& id, 
            [in] Boolean enabled, 
            [out] Boolean * res);
    }

    interface IOnKeyguardExitResult {
        OnKeyguardExitResult(
            [in] Boolean success);
    }

    interface IRotationWatcher {
        OnRotationChanged(
            [in] Int32 rotation);
    }

    interface IInnerWindow : IBinder {
        ExecuteCommand(
            [in] const String& command, 
            [in] const String& parameters, 
            [in] IParcelFileDescriptor * descriptor);

        Resized(
            [in] Int32 w, 
            [in] Int32 h, 
            [in] IRect * coveredInsets, 
            [in] IRect * visibleInsets, 
            [in] Boolean reportDraw, 
            [in] IConfiguration * newConfig);

        DispatchAppVisibility(
            [in] Boolean visible);

        DispatchGetNewSurface();

        WindowFocusChanged(
            [in] Boolean hasFocus, 
            [in] Boolean inTouchMode);

        CloseSystemDialogs(
            [in] const String& reason);

        DispatchWallpaperOffsets(
            [in] Float x, 
            [in] Float y, 
            [in] Float xStep, 
            [in] Float yStep, 
            [in] Boolean sync);

        DispatchWallpaperCommand(
            [in] const String& action, 
            [in] Int32 x, 
            [in] Int32 y, 
            [in] Int32 z, 
            [in] IBundle * extras, 
            [in] Boolean sync);
    }

    interface IWindowSession {
        Add(
            [in] IInnerWindow * window, 
            [in] IWindowManagerLayoutParams * attrs, 
            [in] Int32 viewVisibility, 
            [in] IRect * inContentInsets, 
            [out] IRect ** outContentInsets, 
            [in] IInputChannel * inInputChannel, 
            [out] IInputChannel ** outInputChannel, 
            [out] Int32 * result);

        AddWithoutInputChannel(
            [in] IInnerWindow * window, 
            [in] IWindowManagerLayoutParams * attrs, 
            [in] Int32 viewVisibility, 
            [in] IRect * inOutContentInsets, 
            [out] Int32 * result);

        Remove(
            [in] IInnerWindow * window);

        Relayout(
            [in] IInnerWindow * window, 
            [in] IWindowManagerLayoutParams * attrs, 
            [in] Int32 requestedWidth, 
            [in] Int32 requestedHeight, 
            [in] Int32 viewVisibility, 
            [in] Boolean insetsPending, 
            [in] IRect * inFrame, 
            [in] IRect * inContentInsets, 
            [in] IRect * inVisibleInsets, 
            [in] IConfiguration * inConfig, 
            [in] ISurface * inSurface, 
            [out] IRect ** outFrame, 
            [out] IRect ** outContentInsets, 
            [out] IRect ** outVisibleInsets, 
            [out] IConfiguration ** outConfig, 
            [out] Int32 * result, 
            [out] ISurface ** outSurface);

        SetTransparentRegion(
            [in] IInnerWindow * window, 
            [in] IRegion * region);

        SetInsets(
            [in] IInnerWindow * window, 
            [in] Int32 touchableInsets, 
            [in] IRect * contentInsets, 
            [in] IRect * visibleInsets);

        GetDisplayFrame(
            [in] IInnerWindow * window, 
            [out] IRect ** outDisplayFrame);

        FinishDrawing(
            [in] IInnerWindow * window);

        SetInTouchMode(
            [in] Boolean showFocus);

        GetInTouchMode(
            [out] Boolean * result);

        PerformHapticFeedback(
            [in] IInnerWindow * window, 
            [in] Int32 effectId, 
            [in] Boolean always, 
            [out] Boolean * result);

        SetWallpaperPosition(
            [in] IBinder * windowToken, 
            [in] Float x, 
            [in] Float y, 
            [in] Float xstep, 
            [in] Float ystep);

        WallpaperOffsetsComplete(
            [in] IBinder * window);

        SendWallpaperCommand(
            [in] IBinder * window, 
            [in] const String& action, 
            [in] Int32 x, 
            [in] Int32 y, 
            [in] Int32 z, 
            [in] IBundle * extras, 
            [in] Boolean sync, 
            [out] IBundle ** result);

        WallpaperCommandComplete(
            [in] IBinder * window, 
            [in] IBundle * result);
    }

    interface ISurfaceView : IView {
        GetHolder(
            [out] ISurfaceHolder ** holder);

        SetZOrderMediaOverlay(
            [in] Boolean isMediaOverlay);

        SetZOrderOnTop(
            [in] Boolean onTop);

        SetWindowType(
            [in] Int32 type);

        IsFixedSize(
            [out] Boolean * size);
    }

    interface IInstrumentation {
        NewApplication(
            [in] const String& moduleName, 
            [in] const String& className, 
            [in] IContext * ctx, 
            [out] IApplication ** app);

        CallApplicationOnCreate(
            [in] IApplication * app);

        CallActivityOnCreate(
            [in] IActivity * activity, 
            [in] IBundle * icicle);

        CallActivityOnPostCreate(
            [in] IActivity * activity, 
            [in] IBundle * icicle);

        CallActivityOnNewIntent(
            [in] IActivity * activity, 
            [in] IIntent * intent);

        CallActivityOnStart(
            [in] IActivity * activity);

        CallActivityOnRestart(
            [in] IActivity * activity);

        CallActivityOnResume(
            [in] IActivity * activity);

        CallActivityOnStop(
            [in] IActivity * activity);

        CallActivityOnSaveInstanceState(
            [in] IActivity * activity, 
            [in] IBundle * outState);

        CallActivityOnPause(
            [in] IActivity * activity);

        CallActivityOnUserLeaving(
            [in] IActivity * activity);

        ExecStartActivity(
            [in] IContext * who, 
            [in] IApplicationApartment * apartment, 
            [in] IBinder * token, 
            [in] IActivity * target, 
            [in] IIntent * intent, 
            [in] Int32 requestCode, 
            [out] IActivityResult ** result);
    }

    interface IApplication : IContextWrapper {
        Create();

        OnTerminate();

        OnConfigurationChanged(
            [in] IConfiguration * newConfig);

        OnLowMemory();
    }

    interface IActivity : IContextThemeWrapper {
        GetID(
            [out] String * id);

        Create(
            [in] IBundle * savedInstanceState);

        PostCreate(
            [in] IBundle * savedInstanceState);

        Start();

        Restart();

        Resume();

        Pause();

        Stop();

        Destroy();

        DispatchActivityResult(
            [in] const String& who, 
            [in] Int32 requestCode, 
            [in] Int32 resultCode, 
            [in] IIntent * data);

        Attach(
            [in] IContext * ctx, 
            [in] IApplicationApartment * apartment, 
            [in] IInstrumentation * instr, 
            [in] IBinder * token, 
            [in] IApplication * application, 
            [in] IIntent * intent, 
            [in] IActivityInfo * info, 
            [in] ICharSequence * title, 
            [in] IActivity * parent, 
            [in] const String& id, 
            [in] IInterface * lastNonConfigurationInstance, 
            [in] IConfiguration * config);

        AttachEx(
            [in] IContext * context, 
            [in] IApplicationApartment * apartment, 
            [in] IInstrumentation * instr, 
            [in] IBinder * token, 
            [in] Int32 ident, 
            [in] IApplication * application, 
            [in] IIntent * intent, 
            [in] IActivityInfo * info, 
            [in] ICharSequence * title, 
            [in] IActivity * parent, 
            [in] const String& id, 
            [in] IInterface * lastNonConfigurationInstance, 
            [in] IObjectStringMap * lastNonConfigurationChildInstances, 
            [in] IConfiguration * config);

        DispatchNewIntent(
            [in] IIntent * intent);

        SetCalled(
            [in] Boolean called);

        IsCalled(
            [out] Boolean * called);

        SetFinished(
            [in] Boolean finished);

        IsFinished(
            [out] Boolean * finished);

        MakeVisible();

        GetActivityToken(
            [out] IBinder ** binder);

        PerformStart();

        PerformRestart();

        PerformResume();

        PerformPause();

        PerformUserLeaving();

        PerformStop();

        PerformSaveInstanceState(
            [in] IBundle * outState);

        StartActivityFromChild(
            [in] IActivity * child, 
            [in] IIntent * intent, 
            [in] Int32 requestCode);

        IsStartedActivity(
            [out] Boolean * isStartedActivity);

        GetWindowEx(
            [out] IWindow ** window);

        SetDecorView(
            [in] IView * decor);

        GetDecorView(
            [out] IView ** decor);

        IsVisibleFromClient(
            [out] Boolean * visible);

        SetWindowAdded(
            [in] Boolean added);

        GetWindowManagerEx(
            [out] IWindowManager ** mgr);

        GetComponentName(
            [out] IComponentName ** name);

        SetTitle(
            [in] ICharSequence * title);

        SetTitleEx(
            [in] Int32 titleId);

        SetTitleColor(
            [in] Int32 textColor);

        GetTitle(
            [out] ICharSequence ** title);

        GetTitleColor(
            [out] Int32 * textColor);

        ShowDialog(
            [in] Int32 id);

        ShowDialogEx(
            [in] Int32 id, 
            [in] IBundle * args, 
            [out] Boolean * res);

        DismissDialog(
            [in] Int32 id);

        RemoveDialog(
            [in] Int32 id);

        OnCreateOptionsMenu(
            [in] IMenu * menu, 
            [out] Boolean * res);

        OnPrepareOptionsMenu(
            [in] IMenu * menu, 
            [out] Boolean * res);

        OnOptionsItemSelected(
            [in] IMenuItem * item, 
            [out] Boolean * res);

        OnOptionsMenuClosed(
            [in] IMenu * menu);

        OpenOptionsMenu();

        CloseOptionsMenu();

        OnCreateContextMenu(
            [in] IContextMenu * menu, 
            [in] IView * v, 
            [in] IContextMenuInfo * menuInfo);

        RegisterForContextMenu(
            [in] IView * view);

        UnregisterForContextMenu(
            [in] IView * view);

        OpenContextMenu(
            [in] IView * view);

        OnContextItemSelected(
            [in] IMenuItem * item, 
            [out] Boolean * res);

        OnContextMenuClosed(
            [in] IMenu * menu);
    }

    interface IActivityManager {
        AttachApplication(
            [in] IApplicationApartment * appApartment, 
            [in] Int32 pid);

        StartActivity(
            [in] IApplicationApartment * caller, 
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] IObjectContainer * grantedUriPermissions, 
            [in] Int32 grantedMode, 
            [in] IBinder * resultTo, 
            [in] const String& resultWho, 
            [in] Int32 requestCode, 
            [in] Boolean onlyIfNeeded, 
            [in] Boolean debug, 
            [out] Int32 * status);

        StartActivityAndWait(
            [in] IApplicationApartment * caller, 
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] IObjectContainer * grantedUriPermissions, 
            [in] Int32 grantedMode, 
            [in] IBinder * resultTo, 
            [in] const String& resultWho, 
            [in] Int32 requestCode, 
            [in] Boolean onlyIfNeeded, 
            [in] Boolean debug, 
            [out] IWaitResult ** result);

        StartActivityWithConfig(
            [in] IApplicationApartment * caller, 
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] IObjectContainer * grantedUriPermissions, 
            [in] Int32 grantedMode, 
            [in] IBinder * resultTo, 
            [in] const String& resultWho, 
            [in] Int32 requestCode, 
            [in] Boolean onlyIfNeeded, 
            [in] Boolean debug, 
            [in] IConfiguration * config, 
            [out] Int32 * status);

        StartActivityIntentSender(
            [in] IApplicationApartment * caller, 
            [in] IIntentSender * sender, 
            [in] IIntent * fillInIntent, 
            [in] const String& resolvedType, 
            [in] IBinder * resultTo, 
            [in] const String& resultWho, 
            [in] Int32 requestCode, 
            [in] Int32 flagsMask, 
            [in] Int32 flagsValues, 
            [out] Int32 * status);

        FinishActivity(
            [in] IBinder * token, 
            [in] Int32 resultCode, 
            [in] IIntent * resultData, 
            [out] Boolean * finished);

        WillActivityBeVisible(
            [in] IBinder * token, 
            [out] Boolean * visible);

        StartService(
            [in] IApplicationApartment * caller, 
            [in] IIntent * service, 
            [in] const String& resolvedType, 
            [out] IComponentName ** name);

        StopService(
            [in] IApplicationApartment * caller, 
            [in] IIntent * service, 
            [in] const String& resolvedType, 
            [out] Int32 * result);

        PeekService(
            [in] IIntent * service, 
            [in] const String& resolvedType, 
            [out] IBinder ** token);

        StopServiceToken(
            [in] IComponentName * className, 
            [in] IBinder * token, 
            [in] Int32 startId, 
            [out] Boolean * succeeded);

        SetServiceForeground(
            [in] IComponentName * className, 
            [in] IBinder * token, 
            [in] Int32 id, 
            [in] INotification * notification, 
            [in] Boolean removeNotification);

        BindService(
            [in] IApplicationApartment * caller, 
            [in] IBinder * token, 
            [in] IIntent * service, 
            [in] const String& resolvedType, 
            [in] IServiceConnectionInner * connection, 
            [in] Int32 flags, 
            [in] Int32 callingPid, 
            [in] Int32 callingUid, 
            [out] Int32 * result);

        UnbindService(
            [in] IServiceConnectionInner * connection, 
            [out] Boolean * succeeded);

        PublishService(
            [in] IBinder * token, 
            [in] IIntent * intent, 
            [in] IBinder * service);

        UnbindFinished(
            [in] IBinder * token, 
            [in] IIntent * service, 
            [in] Boolean doRebind);

        ServiceDoneExecuting(
            [in] IBinder * token, 
            [in] Int32 type, 
            [in] Int32 startId, 
            [in] Int32 res);

        BroadcastIntent(
            [in] IApplicationApartment * caller, 
            [in] IIntent * intent, 
            [in] const String& resolvedType, 
            [in] IIntentReceiver * resultTo, 
            [in] Int32 resultCode, 
            [in] const String& resultData, 
            [in] IBundle * map, 
            [in] const String& requiredPermission, 
            [in] Boolean serialized, 
            [in] Boolean sticky, 
            [in] Int32 callingPid, 
            [in] Int32 callingUid, 
            [out] Int32 * result);

        FinishReceiver(
            [in] IBinder * who, 
            [in] Int32 resultCode, 
            [in] const String& resultData, 
            [in] IBundle * resultExtras, 
            [in] Boolean resultAbort);

        GetContentProvider(
            [in] IApplicationApartment * caller, 
            [in] const String& name, 
            [out] IContentProviderHolder ** providerHolder);

        PublishContentProviders(
            [in] IApplicationApartment * caller, 
            [in] IObjectContainer * providers);

        GetProviderMimeType(
            [in] IUri * uri, 
            [out] String * type);

        ActivityPaused(
            [in] IBinder * token, 
            [in] IBundle * icicle);

        ActivityStopped(
            [in] IBinder * token, 
            [in] IBitmap * thumbnail, 
            [in] const String& description);

        ActivityDestroyed(
            [in] IBinder * token);

        KillApplicationWithUid(
            [in] const String& capName, 
            [in] Int32 uid);

        CrashApplication(
            [in] Int32 uid, 
            [in] Int32 initialPid, 
            [in] CString capsuleName, 
            [in] CString message);

        SetProcessForeground(
            [in] IBinder * token, 
            [in] Int32 pid, 
            [in] Boolean isForeground);
    }

    interface IService : IContextThemeWrapper {
        Attach(
            [in] IContext * ctx, 
            [in] IApplicationApartment * apartment, 
            [in] const String& className, 
            [in] IBinder * token, 
            [in] IApplication * application, 
            [in] IActivityManager * activityManager);

        Create();

        Start(
            [in] IIntent * intent, 
            [in] Int32 startId);

        StartCommand(
            [in] IIntent * intent, 
            [in] Int32 flags, 
            [in] Int32 startId, 
            [out] Int32 * result);

        Destroy();

        Bind(
            [in] IIntent * intent, 
            [out] IBinder ** binder);

        Unbind(
            [in] IIntent * intent, 
            [out] Boolean * succeeded);

        Rebind(
            [in] IIntent * intent);

        GetClassName(
            [out] String * className);
    }

    interface IActivityResult {
        GetResultCode(
            [out] Int32 * resultCode);

        GetResultData(
            [out] IIntent ** resultData);
    }

    interface IInstrumentationWatcher {
        InstrumentationStatus(
            [in] IComponentName * name, 
            [in] Int32 resultCode, 
            [in] IBundle * results);

        InstrumentationFinished(
            [in] IComponentName * name, 
            [in] Int32 resultCode, 
            [in] IBundle * results);
    }

    interface IServiceConnectionInner : IDescribable {
        Connected(
            [in] IComponentName * name, 
            [in] IBinder * service);
    }

    interface IPendingIntent {
    }

    interface IRemoteViews {
    }

    interface INotification {
        GetWhen(
            [out] Int64 * when);

        SetWhen(
            [in] Int64 when);

        GetIcon(
            [out] Int32 * icon);

        SetIcon(
            [in] Int32 icon);

        GetContentIntent(
            [out] IPendingIntent ** intent);

        SetContentIntent(
            [in] IPendingIntent * intent);

        GetDeleteIntent(
            [out] IPendingIntent ** intent);

        SetDeleteIntent(
            [in] IPendingIntent * intent);

        GetTickerText(
            [out] ICharSequence ** text);

        SetTickerText(
            [in] ICharSequence * text);

        GetContentView(
            [out] IRemoteViews ** view);

        SetContentView(
            [in] IRemoteViews * view);

        GetSound(
            [out] IUri ** sound);

        SetSound(
            [in] IUri * sound);

        GetAudioStreamType(
            [out] Int32 * type);

        SetAudioStreamType(
            [in] Int32 type);

        GetVibrate(
            [out, callee] ArrayOf<Int64> * vibrate);

        SetVibrate(
            [in] ArrayOf<Int64> * vibrate);

        GetLedARGB(
            [out] Int32 * argb);

        SetLedARGB(
            [in] Int32 argb);

        GetLedOnMS(
            [out] Int32 * onMS);

        SetLedOnMS(
            [in] Int32 onMS);

        GetLedOffMS(
            [out] Int32 * offMS);

        SetLedOffMS(
            [in] Int32 offMS);

        GetDefaults(
            [out] Int32 * defaults);

        SetDefaults(
            [in] Int32 defaults);

        GetFlags(
            [out] Int32 * flags);

        SetFlags(
            [in] Int32 flags);
    }

    interface IThumbnailReceiver {
        NewThumbnail(
            [in] Int32 id, 
            [in] IBitmap * thumbnail, 
            [in] ArrayOf<Char8> description);

        Finished();
    }

    interface IActivityWatcher {
        ActivityResuming(
            [in] Int32 activityId);

        ClosingSystemDialogs(
            [in] const String& reason);
    }

    interface IActivityController {
        ActivityStarting(
            [in] IIntent * intent, 
            [in] const String& cap, 
            [out] Boolean * result);

        ActivityResuming(
            [in] const String& cap, 
            [out] Boolean * result);

        AppCrashed(
            [in] const String& processName, 
            [in] Int32 pid, 
            [in] const String& shortMsg, 
            [in] const String& longMsg, 
            [in] Millisecond64 timeMillis, 
            [in] const String& stackTrace, 
            [out] Boolean * result);

        AppEarlyNotResponding(
            [in] const String& processName, 
            [in] Int32 pid, 
            [in] const String& annotation, 
            [out] Int32 * result);

        AppNotResponding(
            [in] const String& processName, 
            [in] Int32 pid, 
            [in] const String& processStats, 
            [out] Int32 * result);
    }

    interface IContentProviderHolder {
        GetContentProvider(
            [out] IContentProvider ** provider);

        SetContentProvider(
            [in] IContentProvider * provider);

        GetContentProviderInfo(
            [out] IContentProviderInfo ** info);

        SetContentProviderInfo(
            [in] IContentProviderInfo * info);
    }

    interface IWaitResult {
        GetResult(
            [out] Int32 * result);

        SetResult(
            [in] Int32 result);

        IsTimeout(
            [out] Boolean * timeout);

        SetTimeout(
            [in] Boolean timeout);

        GetWho(
            [out] IComponentName ** who);

        SetWho(
            [in] IComponentName * who);

        GetThisTime(
            [out] Int64 * time);

        SetThisTime(
            [in] Int64 time);

        GetTotalTime(
            [out] Int64 * time);

        SetTotalTime(
            [in] Int64 time);

        DescribeContents(
            [out] Int32 * result);
    }

    interface IMemoryInfo {
    }

    interface IObbInfo {
    }

    interface IMediaContainerService : IBinder {
        CopyResourceToContainer(
            [in] IUri * capsuleURI, 
            [in] const String& containerId, 
            [in] const String& key, 
            [in] const String& resFileName, 
            [out] String * value);

        CopyResource(
            [in] IUri * capsuleURI, 
            [in] IParcelFileDescriptor * outStream, 
            [out] Boolean * isSucceeded);

        GetMinimalCapsuleInfo(
            [in] IUri * fileUri, 
            [in] Int32 flags, 
            [out] ICapsuleInfoLite ** info);

        CheckFreeStorage(
            [in] Boolean external, 
            [in] IUri * fileUri, 
            [out] Boolean * isSucceeded);

        GetObbInfo(
            [in] const String& filename, 
            [out] IObbInfo ** info);
    }

    interface IRestoreSession {
        GetAvailableRestoreSets(
            [in] IRestoreObserver * observer);

        RestoreAll(
            [in] Int64 token, 
            [in] IRestoreObserver * observer);

        RestoreCapsule(
            [in] const String& capsuleName, 
            [in] IRestoreObserver * observer);

        EndRestoreSession();
    }

    interface IBackupManager {
        DataChanged(
            [in] const String& capsuleName);

        ClearBackupData(
            [in] const String& capsuleName);

        AgentConnected(
            [in] const String& capsuleName, 
            [in] IBinder * agent);

        AgentDisconnected(
            [in] const String& capsuleName);

        RestoreAtInstall(
            [in] const String& capsuleName, 
            [in] Int32 token);

        SetBackupEnabled(
            [in] Boolean isEnabled);

        SetAutoRestore(
            [in] Boolean doAutoRestore);

        SetBackupProvisioned(
            [in] Boolean isProvisioned);

        IsBackupEnabled(
            [out] Boolean * result);

        BackupNow();

        GetCurrentTransport(
            [out] String * transport);

        ListAllTransports(
            [out, callee] BufferOf<String> * transports);

        SelectBackupTransport(
            [in] const String& transport, 
            [out] String * selectedTransport);

        BeginRestoreSession(
            [in] const String& capsuleName, 
            [in] const String& transportID, 
            [out] IRestoreSession ** session);

        OpComplete(
            [in] Int32 token);
    }

    interface IRestoreObserver {
        RestoreStarting(
            [in] Int32 numCapsules);

        OnUpdate(
            [in] Int32 nowBeingRestored, 
            [in] const String& curentPackage);

        RestoreFinished(
            [in] Int32 error);
    }

    interface IDialog : IDialogInterface {
        GetContext(
            [out] IContext ** context);

        SetOwnerActivity(
            [in] IActivity * activity);

        GetOwnerActivity(
            [out] IActivity ** activity);

        IsShowing(
            [out] Boolean * isShowing);

        Show();

        Hide();

        DispatchOnCreate(
            [in] IBundle * savedInstanceState);

        OnSaveInstanceState(
            [out] IBundle ** bundle);

        OnRestoreInstanceState(
            [in] IBundle * savedInstanceState);

        GetWindow(
            [out] IWindow ** window);

        GetCurrentFocus(
            [out] IView ** view);

        FindViewById(
            [in] Int32 id, 
            [out] IView ** view);

        SetContentView(
            [in] Int32 layoutResID);

        SetContentViewEx(
            [in] IView * view);

        SetContentViewEx2(
            [in] IView * view, 
            [in] IViewGroupLayoutParams * params);

        AddContentView(
            [in] IView * view, 
            [in] IViewGroupLayoutParams * params);

        SetTitle(
            [in] ICharSequence * title);

        SetTitleEx(
            [in] Int32 titleId);

        OnBackPressed();

        OnTouchEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * res);

        OnTrackballEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * res);

        OnCreateOptionsMenu(
            [in] IMenu * menu, 
            [out] Boolean * res);

        OnPrepareOptionsMenu(
            [in] IMenu * menu, 
            [out] Boolean * res);

        OnOptionsItemSelected(
            [in] IMenuItem * item, 
            [out] Boolean * res);

        OnOptionsMenuClosed(
            [in] IMenu * menu);

        OpenOptionsMenu();

        CloseOptionsMenu();

        RegisterForContextMenu(
            [in] IView * view);

        UnregisterForContextMenu(
            [in] IView * view);

        OpenContextMenu(
            [in] IView * view);

        OnContextItemSelected(
            [in] IMenuItem * item, 
            [out] Boolean * res);

        OnContextMenuClosed(
            [in] IMenu * menu);

        TakeKeyEvents(
            [in] Boolean get);

        RequestWindowFeature(
            [in] Int32 featureId, 
            [out] Boolean * res);

        SetFeatureDrawableResource(
            [in] Int32 featureId, 
            [in] Int32 resId);

        SetFeatureDrawableUri(
            [in] Int32 featureId, 
            [in] IUri * uri);

        SetFeatureDrawable(
            [in] Int32 featureId, 
            [in] IDrawable * drawable);

        SetFeatureDrawableAlpha(
            [in] Int32 featureId, 
            [in] Int32 alpha);

        GetLayoutInflater(
            [out] ILayoutInflater ** layout);

        SetCancelable(
            [in] Boolean flag);

        SetCanceledOnTouchOutside(
            [in] Boolean cancel);

        SetOnCancelListener(
            [in] IDialogInterfaceOnCancelListener * listener);

        SetOnDismissListener(
            [in] IDialogInterfaceOnDismissListener * listener);

        SetOnShowListener(
            [in] IDialogInterfaceOnShowListener * listener);

        SetVolumeControlStream(
            [in] Int32 streamType);

        GetVolumeControlStream(
            [out] Int32 * stream);

        SetOnKeyListener(
            [in] IDialogInterfaceOnKeyListener * onKeyListener);
    }

    interface IButton : ITextView {
    }

    interface IListView : IAbsListView {
        GetMaxScrollAmount(
            [out] Int32 * amount);

        AddHeaderView(
            [in] IView * v, 
            [in] IInterface * data, 
            [in] Boolean isSelectable);

        AddHeaderViewEx(
            [in] IView * v);

        RemoveHeaderView(
            [in] IView * v, 
            [out] Boolean * result);

        AddFooterView(
            [in] IView * v, 
            [in] IInterface * data, 
            [in] Boolean isSelectable);

        AddFooterViewEx(
            [in] IView * v);

        RemoveFooterView(
            [in] IView * v, 
            [out] Boolean * result);

        SetSelectionFromTop(
            [in] Int32 position, 
            [in] Int32 y);

        SetSelectionAfterHeaderView();

        SetItemsCanFocus(
            [in] Boolean itemsCanFocus);

        GetItemsCanFocus(
            [out] Boolean * canFocus);

        GetDivider(
            [out] IDrawable ** divider);

        SetDivider(
            [in] IDrawable * divider);

        GetDividerHeight(
            [out] Int32 * height);

        SetDividerHeight(
            [in] Int32 height);

        SetHeaderDividersEnabled(
            [in] Boolean headerDividersEnabled);

        SetFooterDividersEnabled(
            [in] Boolean footerDividersEnabled);

        SetOverscrollHeader(
            [in] IDrawable * header);

        GetOverscrollHeader(
            [out] IDrawable ** overScrollHeader);

        SetOverscrollFooter(
            [in] IDrawable * footer);

        GetOverscrollFooter(
            [out] IDrawable ** overScrollFooter);

        GetChoiceMode(
            [out] Int32 * choiceMode);

        SetChoiceMode(
            [in] Int32 choiceMode);

        SetItemChecked(
            [in] Int32 position, 
            [in] Boolean value);

        IsItemChecked(
            [in] Int32 position, 
            [out] Boolean * checked);

        GetCheckedItemPosition(
            [out] Int32 * position);

        GetCheckedItemIds(
            [out, callee] ArrayOf<Int64> * ids);

        ClearChoices();
    }

    interface IListAdapter : IAdapter {
        AreAllItemsEnabled(
            [out] Boolean * enabled);

        IsEnabled(
            [in] Int32 position, 
            [out] Boolean * enabled);
    }

    interface IOnItemSelectedListener {
        OnItemSelected(
            [in] IAdapterView * parent, 
            [in] IView * view, 
            [in] Int32 position, 
            [in] Int64 id);

        OnNothingSelected(
            [in] IAdapterView * parent);
    }

    interface IAlertDialog : IDialog {
        GetButton(
            [in] Int32 whichButton, 
            [out] IButton ** button);

        GetListView(
            [out] IListView ** listView);

        SetCustomTitle(
            [in] IView * customTitleView);

        SetMessage(
            [in] ICharSequence * message);

        SetView(
            [in] IView * view);

        SetViewEx(
            [in] IView * view, 
            [in] Int32 viewSpacingLeft, 
            [in] Int32 viewSpacingTop, 
            [in] Int32 viewSpacingRight, 
            [in] Int32 viewSpacingBottom);

        SetButton(
            [in] Int32 whichButton, 
            [in] ICharSequence * text);

        SetButtonEx(
            [in] Int32 whichButton, 
            [in] ICharSequence * text, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetIcon(
            [in] Int32 resId);

        SetIconEx(
            [in] IDrawable * icon);

        SetInverseBackgroundForced(
            [in] Boolean forceInverseBackground);
    }

    interface IAlertDialogBuilder {
        SetTitle(
            [in] Int32 titleId);

        SetTitleEx(
            [in] ICharSequence * title);

        SetCustomTitle(
            [in] IView * customTitleView);

        SetMessage(
            [in] Int32 messageId);

        SetMessageEx(
            [in] ICharSequence * message);

        SetIcon(
            [in] Int32 iconId);

        SetIconEx(
            [in] IDrawable * icon);

        SetPositiveButton(
            [in] Int32 textId, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetPositiveButtonEx(
            [in] ICharSequence * text, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetNegativeButton(
            [in] Int32 textId, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetNegativeButtonEx(
            [in] ICharSequence * text, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetNeutralButton(
            [in] Int32 textId, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetNeutralButtonEx(
            [in] ICharSequence * text, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetCancelable(
            [in] Boolean cancelable);

        SetOnCancelListener(
            [in] IDialogInterfaceOnCancelListener * onCancelListener);

        SetOnKeyListener(
            [in] IDialogInterfaceOnKeyListener * onKeyListener);

        SetItems(
            [in] Int32 itemsId, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetItemsEx(
            [in] ArrayOf<ICharSequence *> items, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetAdapter(
            [in] IListAdapter * adapter, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetCursor(
            [in] ICursor * cursor, 
            [in] IDialogInterfaceOnClickListener * listener, 
            [in] const String& labelColumn);

        SetMultiChoiceItems(
            [in] Int32 itemsId, 
            [in] ArrayOf<Boolean> checkedItems, 
            [in] IDialogInterfaceOnMultiChoiceClickListener * listener);

        SetMultiChoiceItemsEx(
            [in] ArrayOf<ICharSequence *> items, 
            [in] ArrayOf<Boolean> checkedItems, 
            [in] IDialogInterfaceOnMultiChoiceClickListener * listener);

        SetMultiChoiceItemsEx2(
            [in] ICursor * cursor, 
            [in] const String& isCheckedColumn, 
            [in] const String& labelColumn, 
            [in] IDialogInterfaceOnMultiChoiceClickListener * listener);

        SetSingleChoiceItems(
            [in] Int32 itemsId, 
            [in] Int32 checkedItem, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetSingleChoiceItemsEx(
            [in] ICursor * cursor, 
            [in] Int32 checkedItem, 
            [in] const String& labelColumn, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetSingleChoiceItemsEx2(
            [in] ArrayOf<ICharSequence *> items, 
            [in] Int32 checkedItem, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetSingleChoiceItemsEx3(
            [in] IListAdapter * adapter, 
            [in] Int32 checkedItem, 
            [in] IDialogInterfaceOnClickListener * listener);

        SetOnItemSelectedListener(
            [in] IOnItemSelectedListener * listener);

        SetView(
            [in] IView * view);

        SetViewEx(
            [in] IView * view, 
            [in] Int32 viewSpacingLeft, 
            [in] Int32 viewSpacingTop, 
            [in] Int32 viewSpacingRight, 
            [in] Int32 viewSpacingBottom);

        SetInverseBackgroundForced(
            [in] Boolean useInverseBackground);

        SetRecycleOnMeasureEnabled(
            [in] Boolean enabled);

        Create(
            [out] IAlertDialog ** dialog);

        Show(
            [out] IAlertDialog ** dialog);
    }

    interface ITransientNotification {
        Show();

        Hide();
    }

    interface INotificationManager {
        EnqueueNotification(
            [in] const String& cap, 
            [in] Int32 id, 
            [in] INotification * notification, 
            [in] ArrayOf<Int32> * idReceived);

        CancelNotification(
            [in] const String& cap, 
            [in] Int32 id);

        CancelAllNotifications(
            [in] const String& cap);

        EnqueueToast(
            [in] const String& cap, 
            [in] ITransientNotification * cb, 
            [in] Int32 duration);

        CancelToast(
            [in] const String& cap, 
            [in] ITransientNotification * cb);

        EnqueueNotificationWithTag(
            [in] const String& cap, 
            [in] const String& tag, 
            [in] Int32 id, 
            [in] INotification * notification, 
            [in] ArrayOf<Int32> * idReceived);

        CancelNotificationWithTag(
            [in] const String& cap, 
            [in] const String& tag, 
            [in] Int32 id);
    }

    interface INotificationManagerProxy {
        Notify(
            [in] Int32 id, 
            [in] INotification * notification);

        NotifyEx(
            [in] const String& tag, 
            [in] Int32 id, 
            [in] INotification * notification);

        Cancel(
            [in] Int32 id);

        CancelEx(
            [in] const String& tag, 
            [in] Int32 id);

        CancelAll();
    }

    interface IResultInfo {
        GetResultWho(
            [out] String * who);

        SetResultWho(
            [in] const String& who);

        GetRequestCode(
            [out] Int32 * code);

        SetRequestCode(
            [in] Int32 code);

        GetResultCode(
            [out] Int32 * code);

        SetResultCode(
            [in] Int32 code);

        GetData(
            [out] IIntent ** data);

        SetData(
            [in] IIntent * data);
    }

    interface IRunningAppProcessInfo {
    }

    interface IEllipsizeCallback {
        Ellipsized(
            [in] Int32 start, 
            [in] Int32 end);
    }

    interface ITextPaint : IPaint {
        SetEx(
            [in] ITextPaint * tp);
    }

    interface IDirections {
        GetDirections(
            [out, callee] ArrayOf<Int16> * directions);
    }

    interface ILayout {
        Draw(
            [in] ICanvas * c);

        DrawEx(
            [in] ICanvas * c, 
            [in] IPath * highlight, 
            [in] IPaint * highlightPaint, 
            [in] Int32 cursorOffsetVertical);

        GetText(
            [out] ICharSequence ** text);

        GetPaint(
            [out] ITextPaint ** paint);

        GetWidth(
            [out] Int32 * width);

        GetEllipsizedWidth(
            [out] Int32 * width);

        IncreaseWidthTo(
            [in] Int32 wid);

        GetHeight(
            [out] Int32 * height);

        GetAlignment(
            [out] LayoutAlignment * alignment);

        GetSpacingMultiplier(
            [out] Float * spacingMultiplier);

        GetSpacingAdd(
            [out] Float * spacingAdd);

        GetLineCount(
            [out] Int32 * number);

        GetLineBounds(
            [in] Int32 line, 
            [in] IRect * bounds, 
            [out] Int32 * baseline);

        GetLineTop(
            [in] Int32 line, 
            [out] Int32 * pos);

        GetLineDescent(
            [in] Int32 line, 
            [out] Int32 * descent);

        GetLineStart(
            [in] Int32 line, 
            [out] Int32 * offset);

        GetParagraphDirection(
            [in] Int32 line, 
            [out] Int32 * direction);

        GetLineContainsTab(
            [in] Int32 line, 
            [out] Boolean * result);

        GetLineDirections(
            [in] Int32 line, 
            [out] IDirections ** directions);

        GetTopPadding(
            [out] Int32 * number);

        GetBottomPadding(
            [out] Int32 * number);

        GetPrimaryHorizontal(
            [in] Int32 offset, 
            [out] Float * pos);

        GetSecondaryHorizontal(
            [in] Int32 offset, 
            [out] Float * pos);

        GetLineLeft(
            [in] Int32 line, 
            [out] Float * pos);

        GetLineRight(
            [in] Int32 line, 
            [out] Float * pos);

        GetLineMax(
            [in] Int32 line, 
            [out] Float * extent);

        GetLineWidth(
            [in] Int32 line, 
            [out] Float * extent);

        GetLineForVertical(
            [in] Int32 vertical, 
            [out] Int32 * number);

        GetLineForOffset(
            [in] Int32 offset, 
            [out] Int32 * number);

        GetOffsetForHorizontal(
            [in] Int32 line, 
            [in] Float horiz, 
            [out] Int32 * offset);

        GetLineEnd(
            [in] Int32 line, 
            [out] Int32 * offset);

        GetLineVisibleEnd(
            [in] Int32 line, 
            [out] Int32 * offset);

        GetLineBottom(
            [in] Int32 line, 
            [out] Int32 * pos);

        GetLineBaseline(
            [in] Int32 line, 
            [out] Int32 * pos);

        GetLineAscent(
            [in] Int32 line, 
            [out] Int32 * ascent);

        GetOffsetToLeftOf(
            [in] Int32 offset, 
            [out] Int32 * retOffset);

        GetOffsetToRightOf(
            [in] Int32 offset, 
            [out] Int32 * retOffset);

        GetCursorPath(
            [in] Int32 point, 
            [in] IPath * dest, 
            [in] ICharSequence * editingBuffer);

        GetSelectionPath(
            [in] Int32 start, 
            [in] Int32 end, 
            [in] IPath * dest);

        GetParagraphAlignment(
            [in] Int32 line, 
            [out] LayoutAlignment * alignment);

        GetParagraphLeft(
            [in] Int32 line, 
            [out] Int32 * leftEdge);

        GetParagraphRight(
            [in] Int32 line, 
            [out] Int32 * rightEdge);

        GetEllipsisStart(
            [in] Int32 line, 
            [out] Int32 * ellipsisStart);

        GetEllipsisCount(
            [in] Int32 line, 
            [out] Int32 * ellipsisCount);
    }

    interface IBoringLayoutMetrics : IPaintFontMetricsInt {
        GetWidth(
            [out] Int32 * width);

        SetWidth(
            [in] Int32 width);
    }

    interface IBoringLayout : ILayout {
        ReplaceOrMake(
            [in] ICharSequence * source, 
            [in] ITextPaint * paint, 
            [in] Int32 outerwidth, 
            [in] LayoutAlignment align, 
            [in] Float spacingmult, 
            [in] Float spacingadd, 
            [in] IBoringLayoutMetrics * metrics, 
            [in] Boolean includepad, 
            [out] IBoringLayout ** layout);

        ReplaceOrMakeEx(
            [in] ICharSequence * source, 
            [in] ITextPaint * paint, 
            [in] Int32 outerwidth, 
            [in] LayoutAlignment align, 
            [in] Float spacingmult, 
            [in] Float spacingadd, 
            [in] IBoringLayoutMetrics * metrics, 
            [in] Boolean includepad, 
            [in] TextUtilsTruncateAt ellipsize, 
            [in] Int32 ellipsizedWidth, 
            [out] IBoringLayout ** layout);
    }

    interface IStaticLayout : ILayout {
    }

    interface IDynamicLayout : ILayout {
    }

    interface IGetChars : ICharSequence {
        GetChars(
            [in] Int32 start, 
            [in] Int32 end, 
            [out] ArrayOf<Char8> dest, 
            [in] Int32 destoff);
    }

    interface ISpanned : ICharSequence {
        GetSpans(
            [in] Int32 start, 
            [in] Int32 end, 
            [in] InterfaceID type, 
            [out, callee] ArrayOf<IInterface *> * objs);

        GetSpanStart(
            [in] IInterface * tag, 
            [out] Int32 * start);

        GetSpanEnd(
            [in] IInterface * tag, 
            [out] Int32 * end);

        GetSpanFlags(
            [in] IInterface * tag, 
            [out] Int32 * flags);

        NextSpanTransition(
            [in] Int32 start, 
            [in] Int32 limit, 
            [in] InterfaceID type, 
            [out] Int32 * offset);
    }

    interface ISpannable : ISpanned {
        SetSpan(
            [in] IInterface * what, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Int32 flags);

        RemoveSpan(
            [in] IInterface * what);
    }

    interface ISpannableFactory {
        NewSpannable(
            [in] ICharSequence * source, 
            [out] ISpannable ** spannable);
    }

    interface IGraphicsOperations : ICharSequence {
        DrawText(
            [in] ICanvas * c, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Float x, 
            [in] Float y, 
            [in] IPaint * p);

        MeasureText(
            [in] Int32 start, 
            [in] Int32 end, 
            [in] IPaint * p, 
            [out] Float * width);

        GetTextWidths(
            [in] Int32 start, 
            [in] Int32 end, 
            [out] ArrayOf<Float> widths, 
            [in] IPaint * p, 
            [out] Int32 * count);
    }

    interface INoCopySpan {
    }

    interface ISpanWatcher : INoCopySpan {
        OnSpanAdded(
            [in] ISpannable * text, 
            [in] IInterface * what, 
            [in] Int32 start, 
            [in] Int32 end);

        OnSpanRemoved(
            [in] ISpannable * text, 
            [in] IInterface * what, 
            [in] Int32 start, 
            [in] Int32 end);

        OnSpanChanged(
            [in] ISpannable * text, 
            [in] IInterface * what, 
            [in] Int32 ostart, 
            [in] Int32 oend, 
            [in] Int32 nstart, 
            [in] Int32 nend);
    }

    interface IEditable : ISpannable {
        Replace(
            [in] Int32 st, 
            [in] Int32 en, 
            [in] ICharSequence * source, 
            [in] Int32 start, 
            [in] Int32 end, 
            [out] IEditable ** editable);

        ReplaceEx(
            [in] Int32 st, 
            [in] Int32 en, 
            [in] ICharSequence * text, 
            [out] IEditable ** editable);

        Insert(
            [in] Int32 where, 
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [out] IEditable ** editable);

        InsertEx(
            [in] Int32 where, 
            [in] ICharSequence * text, 
            [out] IEditable ** editable);

        Delete(
            [in] Int32 st, 
            [in] Int32 en, 
            [out] IEditable ** editable);

        Append(
            [in] ICharSequence * text, 
            [out] IEditable ** editable);

        AppendEx(
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [out] IEditable ** editable);

        AppendEx2(
            [in] Char32 text, 
            [out] IEditable ** editable);

        Clear();

        ClearSpans();

        SetFilters(
            [in] IObjectContainer * filters);

        GetFilters(
            [out] IObjectContainer ** filters);
    }

    interface IEditableFactory {
        NewEditable(
            [in] ICharSequence * source, 
            [out] IEditable ** editable);
    }

    interface ISpannableStringBuilder : IEditable {
    }

    interface IParagraphStyle {
    }

    interface ILineBackgroundSpan : IParagraphStyle {
        DrawBackground(
            [in] ICanvas * c, 
            [in] IPaint * p, 
            [in] Int32 left, 
            [in] Int32 right, 
            [in] Int32 top, 
            [in] Int32 baseline, 
            [in] Int32 bottom, 
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Int32 lnum);
    }

    interface IAlignmentSpan : IParagraphStyle {
        GetAlignment(
            [out] LayoutAlignment * alignment);
    }

    interface ILeadingMarginSpan : IParagraphStyle {
        GetLeadingMargin(
            [in] Boolean first, 
            [out] Int32 * offset);

        DrawLeadingMargin(
            [in] ICanvas * c, 
            [in] IPaint * p, 
            [in] Int32 x, 
            [in] Int32 dir, 
            [in] Int32 top, 
            [in] Int32 baseline, 
            [in] Int32 bottom, 
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Boolean first, 
            [in] ILayout * layout);
    }

    interface ILeadingMarginSpan2 : ILeadingMarginSpan {
        GetLeadingMarginLineCount(
            [out] Int32 * count);
    }

    interface ITabStopSpan : IParagraphStyle {
        GetTabStop(
            [out] Int32 * offset);
    }

    interface ICharacterStyle {
        UpdateDrawState(
            [in] ITextPaint * tp);

        GetUnderlying(
            [out] ICharacterStyle ** result);
    }

    interface ICharacterStyleHelper {
        Wrap(
            [in] ICharacterStyle * cs, 
            [out] ICharacterStyle ** result);
    }

    interface IMetricAffectingSpan : ICharacterStyle {
        UpdateMeasureState(
            [in] ITextPaint * p);
    }

    interface IReplacementSpan : IMetricAffectingSpan {
        GetSize(
            [in] IPaint * paint, 
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] IPaintFontMetricsInt * fm, 
            [out] Int32 * size);

        Draw(
            [in] ICanvas * canvas, 
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Float x, 
            [in] Int32 top, 
            [in] Int32 y, 
            [in] Int32 bottom, 
            [in] IPaint * paint);
    }

    interface IWrapTogetherSpan : IParagraphStyle {
    }

    interface ILineHeightSpan : IWrapTogetherSpan {
        ChooseHeight(
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Int32 spanstartv, 
            [in] Int32 v, 
            [in] IPaintFontMetricsInt * fm);
    }

    interface ILineHeightSpanWithDensity : ILineHeightSpan {
        ChooseHeightEx(
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end, 
            [in] Int32 spanstartv, 
            [in] Int32 v, 
            [in] IPaintFontMetricsInt * fm, 
            [in] ITextPaint * paint);
    }

    interface IUpdateAppearance {
    }

    interface IUpdateLayout : IUpdateAppearance {
    }

    interface IParcelableSpan : IParcelable {
        GetSpanTypeId(
            [out] Int32 * id);
    }

    interface IClickableSpan : ICharacterStyle {
        OnClick(
            [in] IView * widget);
    }

    interface IURLSpan : IClickableSpan {
        GetURL(
            [out] String * url);
    }

    interface IBackgroundColorSpan : ICharacterStyle {
        GetSpanTypeId(
            [out] Int32 * result);

        GetBackgroundColor(
            [out] Int32 * result);
    }

    interface IForegroundColorSpan : ICharacterStyle {
        GetSpanTypeId(
            [out] Int32 * result);

        GetForegroundColor(
            [out] Int32 * result);
    }

    interface IUnderlineSpan : ICharacterStyle {
        GetSpanTypeId(
            [out] Int32 * result);
    }

    interface IKeyListener {
        GetInputType(
            [out] Int32 * type);

        OnKeyDown(
            [in] IView * view, 
            [in] IEditable * text, 
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        OnKeyUp(
            [in] IView * view, 
            [in] IEditable * text, 
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        OnKeyOther(
            [in] IView * view, 
            [in] IEditable * text, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        ClearMetaKeyState(
            [in] IView * view, 
            [in] IEditable * content, 
            [in] Int32 states);
    }

    interface ITransformationMethod {
        GetTransformation(
            [in] ICharSequence * source, 
            [in] IView * view, 
            [out] ICharSequence ** csq);

        OnFocusChanged(
            [in] IView * view, 
            [in] ICharSequence * sourceText, 
            [in] Boolean focused, 
            [in] Int32 direction, 
            [in] IRect * previouslyFocusedRect);
    }

    interface ITextView : IView {
        SetTypeface(
            [in] ITypeface * tf, 
            [in] Int32 style);

        GetText(
            [out] ICharSequence ** text);

        GetLength(
            [out] Int32 * length);

        GetEditableText(
            [out] IEditable ** editable);

        GetLineHeight(
            [out] Int32 * height);

        GetLayout(
            [out] ILayout ** layout);

        GetKeyListener(
            [out] IKeyListener ** listener);

        SetKeyListener(
            [in] IKeyListener * input);

        GetMovementMethod(
            [out] IMovementMethod ** movement);

        SetMovementMethod(
            [in] IMovementMethod * movement);

        GetCompoundPaddingTop(
            [out] Int32 * top);

        GetCompoundPaddingBottom(
            [out] Int32 * bottom);

        GetCompoundPaddingLeft(
            [out] Int32 * left);

        GetCompoundPaddingRight(
            [out] Int32 * right);

        GetExtendedPaddingTop(
            [out] Int32 * top);

        GetExtendedPaddingBottom(
            [out] Int32 * bottom);

        GetTotalPaddingLeft(
            [out] Int32 * left);

        GetTotalPaddingRight(
            [out] Int32 * right);

        GetTotalPaddingTop(
            [out] Int32 * top);

        GetTotalPaddingBottom(
            [out] Int32 * bottom);

        SetCompoundDrawables(
            [in] IDrawable * left, 
            [in] IDrawable * top, 
            [in] IDrawable * right, 
            [in] IDrawable * bottom);

        SetCompoundDrawablesWithIntrinsicBounds(
            [in] Int32 left, 
            [in] Int32 top, 
            [in] Int32 right, 
            [in] Int32 bottom);

        SetCompoundDrawablesWithIntrinsicBoundsEx(
            [in] IDrawable * left, 
            [in] IDrawable * top, 
            [in] IDrawable * right, 
            [in] IDrawable * bottom);

        GetCompoundDrawables(
            [out, callee] ArrayOf<IDrawable *> * drawables);

        SetCompoundDrawablePadding(
            [in] Int32 pad);

        GetCompoundDrawablePadding(
            [out] Int32 * pad);

        GetAutoLinkMask(
            [out] Int32 * mask);

        SetTextAppearance(
            [in] IContext * contxt, 
            [in] Int32 resid);

        GetTextSize(
            [out] Float * size);

        SetTextSize(
            [in] Float size);

        SetTextSizeEx(
            [in] Int32 unit, 
            [in] Float size);

        GetTextScaleX(
            [out] Float * size);

        SetTextScaleX(
            [in] Float size);

        SetTypefaceEx(
            [in] ITypeface * tf);

        GetTypeface(
            [out] ITypeface ** face);

        SetTextColor(
            [in] Int32 color);

        SetTextColorEx(
            [in] IColorStateList * colors);

        GetTextColors(
            [out] IColorStateList ** colors);

        GetCurrentTextColor(
            [out] Int32 * color);

        SetHighlightColor(
            [in] Int32 color);

        SetShadowLayer(
            [in] Float radius, 
            [in] Float dx, 
            [in] Float dy, 
            [in] Int32 color);

        GetPaint(
            [out] ITextPaint ** paint);

        SetAutoLinkMask(
            [in] Int32 mask);

        SetLinksClickable(
            [in] Boolean whether);

        GetLinksClickable(
            [out] Boolean * whether);

        SetHintTextColor(
            [in] Int32 color);

        SetHintTextColorEx(
            [in] IColorStateList * colors);

        GetHintTextColors(
            [out] IColorStateList ** colors);

        GetCurrentHintTextColor(
            [out] Int32 * color);

        SetLinkTextColor(
            [in] Int32 color);

        SetLinkTextColorEx(
            [in] IColorStateList * colors);

        GetLinkTextColors(
            [out] IColorStateList ** colors);

        SetGravity(
            [in] Int32 gravity);

        GetGravity(
            [out] Int32 * gravity);

        GetPaintFlags(
            [out] Int32 * flags);

        SetPaintFlags(
            [in] Int32 flags);

        SetHorizontallyScrolling(
            [in] Boolean whether);

        SetMinLines(
            [in] Int32 minlines);

        SetMinHeight(
            [in] Int32 minHeight);

        SetMaxLines(
            [in] Int32 maxlines);

        SetMaxHeight(
            [in] Int32 maxHeight);

        SetLines(
            [in] Int32 lines);

        SetHeight(
            [in] Int32 pixels);

        SetMinEms(
            [in] Int32 minems);

        SetMinWidth(
            [in] Int32 minpixels);

        SetMaxEms(
            [in] Int32 maxems);

        SetMaxWidth(
            [in] Int32 maxpixels);

        SetEms(
            [in] Int32 ems);

        SetWidth(
            [in] Int32 pixels);

        SetLineSpacing(
            [in] Float add, 
            [in] Float mult);

        Append(
            [in] ICharSequence * text);

        AppendEx(
            [in] ICharSequence * text, 
            [in] Int32 start, 
            [in] Int32 end);

        SetFreezesText(
            [in] Boolean freezesText);

        GetFreezesText(
            [out] Boolean * text);

        SetEditableFactory(
            [in] IEditableFactory * factory);

        SetSpannableFactory(
            [in] ISpannableFactory * factory);

        SetText(
            [in] ICharSequence * text);

        SetTextKeepState(
            [in] ICharSequence * text);

        SetTextEx(
            [in] ICharSequence * text, 
            [in] BufferType type);

        SetTextEx2(
            [in] ArrayOf<Char8> text, 
            [in] Int32 start, 
            [in] Int32 len);

        SetTextKeepStateEx(
            [in] ICharSequence * text, 
            [in] BufferType type);

        SetTextEx3(
            [in] Int32 resid);

        SetTextEx4(
            [in] Int32 resid, 
            [in] BufferType type);

        SetHint(
            [in] ICharSequence * hint);

        SetHintEx(
            [in] Int32 resid);

        GetHint(
            [out] ICharSequence ** hint);

        SetInputType(
            [in] Int32 type);

        SetRawInputType(
            [in] Int32 type);

        GetInputType(
            [out] Int32 * type);

        SetImeOptions(
            [in] Int32 imeOptions);

        GetImeOptions(
            [out] Int32 * options);

        SetImeActionLabel(
            [in] ICharSequence * label, 
            [in] Int32 actionId);

        GetImeActionLabel(
            [out] ICharSequence ** label);

        GetImeActionId(
            [out] Int32 * id);

        OnEditorAction(
            [in] Int32 actionCode);

        SetPrivateImeOptions(
            [in] const String& type);

        GetPrivateImeOptions(
            [out] String * options);

        SetInputExtras(
            [in] Int32 xmlResId);

        GetInputExtras(
            [in] Boolean create, 
            [out] IBundle ** bundle);

        GetError(
            [out] ICharSequence ** error);

        SetError(
            [in] ICharSequence * error);

        SetErrorEx(
            [in] ICharSequence * error, 
            [in] IDrawable * icon);

        GetLineCount(
            [out] Int32 * count);

        GetLineBounds(
            [in] Int32 line, 
            [in] IRect * bounds, 
            [out] Int32 * y);

        ExtractText(
            [in] IExtractedTextRequest * request, 
            [in] IExtractedText * outText, 
            [out] Boolean * result);

        SetExtractedText(
            [in] IExtractedText * text);

        SetExtracting(
            [in] IExtractedTextRequest * req);

        OnCommitCompletion(
            [in] ICompletionInfo * text);

        BeginBatchEdit();

        EndBatchEdit();

        OnBeginBatchEdit();

        OnEndBatchEdit();

        OnPrivateIMECommand(
            [in] const String& action, 
            [in] IBundle * data, 
            [out] Boolean * result);

        SetIncludeFontPadding(
            [in] Boolean includepad);

        BringPointIntoView(
            [in] Int32 offset, 
            [out] Boolean * result);

        MoveCursorToVisibleOffset(
            [out] Boolean * result);

        GetSelectionStart(
            [out] Int32 * start);

        GetSelectionEnd(
            [out] Int32 * end);

        HasSelection(
            [out] Boolean * result);

        SetSingleLine();

        SetSingleLineEx(
            [in] Boolean singleLine);

        SetEllipsize(
            [in] TextUtilsTruncateAt where);

        SetMarqueeRepeatLimit(
            [in] Int32 marqueeLimit);

        GetEllipsize(
            [out] TextUtilsTruncateAt * size);

        SetSelectAllOnFocus(
            [in] Boolean selectAllOnFocus);

        SetCursorVisible(
            [in] Boolean visible);

        ClearComposingText();

        DidTouchFocusSelect(
            [out] Boolean * result);

        IsInputMethodTarget(
            [out] Boolean * result);

        OnTextContextMenuItem(
            [in] Int32 id, 
            [out] Boolean * result);

        GetOffset(
            [in] Int32 x, 
            [in] Int32 y, 
            [out] Int32 * offset);
    }

    interface IMovementMethod {
        Initialize(
            [in] ITextView * widget, 
            [in] ISpannable * text);

        OnKeyDown(
            [in] ITextView * widget, 
            [in] ISpannable * text, 
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        OnKeyUp(
            [in] ITextView * widget, 
            [in] ISpannable * text, 
            [in] Int32 keyCode, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        OnKeyOther(
            [in] ITextView * view, 
            [in] ISpannable * text, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);

        OnTakeFocus(
            [in] ITextView * widget, 
            [in] ISpannable * text, 
            [in] Int32 direction);

        OnTrackballEvent(
            [in] ITextView * widget, 
            [in] ISpannable * text, 
            [in] IMotionEvent * event, 
            [out] Boolean * result);

        OnTouchEvent(
            [in] ITextView * widget, 
            [in] ISpannable * text, 
            [in] IMotionEvent * event, 
            [out] Boolean * result);

        CanSelectArbitrarily(
            [out] Boolean * result);
    }

    interface ITextKeyListener : IKeyListener {
        ReleaseListener();

        GetPrefs(
            [in] IContext * context, 
            [out] Int32 * prefs);
    }

    interface IQwertyKeyListener : IKeyListener {
    }

    interface IClipboardManager {
        GetText(
            [out] ICharSequence ** text);

        SetText(
            [in] ICharSequence * text);

        HasText(
            [out] Boolean * result);
    }

    interface IScrollBarDrawable : IDrawable {
        SetAlwaysDrawHorizontalTrack(
            [in] Boolean alwaysDrawTrack);

        SetAlwaysDrawVerticalTrack(
            [in] Boolean alwaysDrawTrack);

        GetAlwaysDrawHorizontalTrack(
            [out] Boolean * alwaysDrawTrack);

        GetAlwaysDrawVerticalTrack(
            [out] Boolean * alwaysDrawTrack);

        SetParameters(
            [in] Int32 range, 
            [in] Int32 offset, 
            [in] Int32 extent, 
            [in] Boolean vertical);

        SetVerticalThumbDrawable(
            [in] IDrawable * thumb);

        SetVerticalTrackDrawable(
            [in] IDrawable * track);

        SetHorizontalThumbDrawable(
            [in] IDrawable * thumb);

        SetHorizontalTrackDrawable(
            [in] IDrawable * track);

        GetSize(
            [in] Boolean vertical, 
            [out] Int32 * size);
    }

    interface IFrameLayoutLayoutParams : IViewGroupMarginLayoutParams {
        GetGravity(
            [out] Int32 * gravity);
    }

    interface IFrameLayout : IViewGroup {
        SetForegroundGravity(
            [in] Int32 foregroundGravity);

        SetForeground(
            [in] IDrawable * drawable);

        GetForeground(
            [out] IDrawable ** foreground);

        SetMeasureAllChildren(
            [in] Boolean measureAll);

        GetConsiderGoneChildrenWhenMeasuring(
            [out] Boolean * measureAll);
    }

    interface IImageView : IView {
        SetAdjustViewBounds(
            [in] Boolean adjustViewBounds);

        SetMaxWidth(
            [in] Int32 maxWidth);

        SetMaxHeight(
            [in] Int32 maxHeight);

        GetDrawable(
            [out] IDrawable ** drawable);

        SetImageResource(
            [in] Int32 resId);

        SetImageURI(
            [in] IUri * uri);

        SetImageDrawable(
            [in] IDrawable * drawable);

        SetImageBitmap(
            [in] IBitmap * bm);

        SetImageState(
            [in] ArrayOf<Int32> state, 
            [in] Boolean mg);

        SetImageLevel(
            [in] Int32 level);

        SetScaleType(
            [in] ImageViewScaleType scaleType);

        GetScaleType(
            [out] ImageViewScaleType * scaleType);

        GetImageMatrix(
            [out] IMatrix ** martix);

        SetImageMatrix(
            [in] IMatrix * matrix);
    }

    interface ILinearLayoutLayoutParams : IViewGroupMarginLayoutParams {
        GetWeight(
            [out] Float * weight);

        GetGravity(
            [out] Int32 * gravity);
    }

    interface ILinearLayout : IViewGroup {
        IsBaselineAligned(
            [out] Boolean * baselineAligned);

        SetBaselineAligned(
            [in] Boolean baselineAligned);

        GetBaselineAlignedChildIndex(
            [out] Int32 * baselineAlignedChildIndex);

        SetBaselineAlignedChildIndex(
            [in] Int32 baselineAlignedChildIndex);

        GetWeightSum(
            [out] Float * weightSum);

        SetWeightSum(
            [in] Float weightSum);

        SetOrientation(
            [in] Int32 orientation);

        GetOrientation(
            [out] Int32 * orientation);

        SetGravity(
            [in] Int32 gravity);

        SetHorizontalGravity(
            [in] Int32 horizontalGravity);

        SetVerticalGravity(
            [in] Int32 verticalGravity);
    }

    interface IRelativeLayoutLayoutParams : IViewGroupMarginLayoutParams {
        AddRule(
            [in] Int32 verb);

        AddRuleEx(
            [in] Int32 verb, 
            [in] Int32 anchor);

        GetRules(
            [out, callee] ArrayOf<Int32> * rules);
    }

    interface IRelativeLayout : IViewGroup {
        SetIgnoreGravity(
            [in] Int32 viewId);

        SetGravity(
            [in] Int32 gravity);

        SetHorizontalGravity(
            [in] Int32 horizontalGravity);

        SetVerticalGravity(
            [in] Int32 verticalGravity);
    }

    interface IAbsoluteLayoutLayoutParams : IViewGroupLayoutParams {
    }

    interface IAbsoluteLayout : IViewGroup {
    }

    interface ITableRowLayoutParams : ILinearLayoutLayoutParams {
    }

    interface ITableRow : ILinearLayout {
    }

    interface ITableLayoutLayoutParams : ILinearLayoutLayoutParams {
    }

    interface ITableLayout : ILinearLayout {
        IsShrinkAllColumns(
            [out] Boolean * shrinkAllColumns);

        SetShrinkAllColumns(
            [in] Boolean shrinkAllColumns);

        IsStretchAllColumns(
            [out] Boolean * stretchAllColumns);

        SetStretchAllColumns(
            [in] Boolean stretchAllColumns);

        SetColumnCollapsed(
            [in] Int32 columnIndex, 
            [in] Boolean isCollapsed);

        IsColumnCollapsed(
            [in] Int32 columnIndex, 
            [out] Boolean * isCollapsed);

        SetColumnStretchable(
            [in] Int32 columnIndex, 
            [in] Boolean isStretchable);

        IsColumnStretchable(
            [in] Int32 columnIndex, 
            [out] Boolean * isStretchable);

        SetColumnShrinkable(
            [in] Int32 columnIndex, 
            [in] Boolean isShrinkable);

        IsColumnShrinkable(
            [in] Int32 columnIndex, 
            [out] Boolean * isShrinkable);
    }

    interface IOnEditorActionListener {
        OnEditorAction(
            [in] ITextView * v, 
            [in] Int32 actionId, 
            [in] IKeyEvent * event, 
            [out] Boolean * result);
    }

    interface ITextViewSavedState : IViewBaseSavedState {
    }

    interface IEditText : ITextView {
        SetSelection(
            [in] Int32 start, 
            [in] Int32 stop);

        SetSelectionEx(
            [in] Int32 index);

        SelectAll();

        ExtendSelection(
            [in] Int32 index);
    }

    interface IOnItemClickListener {
        OnItemClick(
            [in] IAdapterView * parent, 
            [in] IView * view, 
            [in] Int32 position, 
            [in] Int64 id);
    }

    interface IValidator {
        IsValid(
            [in] ICharSequence * text, 
            [out] Boolean * valid);

        FixText(
            [in] ICharSequence * invalidText, 
            [out] ICharSequence ** text);
    }

    interface IAutoCompleteTextView : IEditText {
        SetCompletionHint(
            [in] ICharSequence * hint);

        GetDropDownWidth(
            [out] Int32 * width);

        SetDropDownWidth(
            [in] Int32 width);

        GetDropDownHeight(
            [out] Int32 * height);

        SetDropDownHeight(
            [in] Int32 height);

        GetDropDownAnchor(
            [out] Int32 * id);

        SetDropDownAnchor(
            [in] Int32 id);

        GetDropDownBackground(
            [out] IDrawable ** drawable);

        SetDropDownBackgroundDrawable(
            [in] IDrawable * d);

        SetDropDownBackgroundResource(
            [in] Int32 id);

        SetDropDownVerticalOffset(
            [in] Int32 offset);

        GetDropDownVerticalOffset(
            [out] Int32 * offset);

        SetDropDownHorizontalOffset(
            [in] Int32 offset);

        GetDropDownHorizontalOffset(
            [out] Int32 * offset);

        SetDropDownAnimationStyle(
            [in] Int32 animationStyle);

        GetDropDownAnimationStyle(
            [out] Int32 * style);

        IsDropDownAlwaysVisible(
            [out] Boolean * visible);

        SetDropDownAlwaysVisible(
            [in] Boolean dropDownAlwaysVisible);

        IsDropDownDismissedOnCompletion(
            [out] Boolean * dropDownDismissedOnCompletion);

        SetDropDownDismissedOnCompletion(
            [in] Boolean dropDownDismissedOnCompletion);

        GetThreshold(
            [out] Int32 * threshold);

        SetThreshold(
            [in] Int32 threshold);

        SetOnItemClickListener(
            [in] IOnItemClickListener * listener);

        SetOnItemSelectedListener(
            [in] IOnItemSelectedListener * listener);

        GetOnItemClickListener(
            [out] IOnItemClickListener ** l);

        GetOnItemSelectedListener(
            [out] IOnItemSelectedListener ** l);

        GetAdapter(
            [out] IListAdapter ** adapter);

        SetAdapter(
            [in] IListAdapter * adapter);

        EnoughToFilter(
            [out] Boolean * result);

        IsPopupShowing(
            [out] Boolean * result);

        ClearListSelection();

        SetListSelection(
            [in] Int32 position);

        GetListSelection(
            [out] Int32 * selection);

        PerformCompletion();

        IsPerformingCompletion(
            [out] Boolean * result);

        DismissDropDown();

        ShowDropDownAfterLayout();

        EnsureImeVisible(
            [in] Boolean visible);

        IsInputMethodNotNeeded(
            [out] Boolean * needed);

        ShowDropDown();

        SetForceIgnoreOutsideTouch(
            [in] Boolean forceIgnoreOutsideTouch);

        SetValidator(
            [in] IValidator * validator);

        GetValidator(
            [out] IValidator ** validator);

        PerformValidation();
    }

    interface IAdapter {
        RegisterDataSetObserver(
            [in] IDataSetObserver * observer);

        UnregisterDataSetObserver(
            [in] IDataSetObserver * observer);

        GetCount(
            [out] Int32 * count);

        GetItem(
            [in] Int32 position, 
            [out] IInterface ** item);

        GetItemId(
            [in] Int32 position, 
            [out] Int64 * itemId);

        HasStableIds(
            [out] Boolean * hasStableIds);

        GetView(
            [in] Int32 position, 
            [in] IView * convertView, 
            [in] IViewGroup * parent, 
            [out] IView ** view);

        GetItemViewType(
            [in] Int32 position, 
            [out] Int32 * viewType);

        GetViewTypeCount(
            [out] Int32 * count);

        IsEmpty(
            [out] Boolean * isEmpty);
    }

    interface IAdapterView : IViewGroup {
        SetOnItemClickListener(
            [in] IOnItemClickListener * listener);

        GetOnItemClickListener(
            [out] IOnItemClickListener ** listener);

        PerformItemClick(
            [in] IView * view, 
            [in] Int32 position, 
            [in] Int64 id, 
            [out] Boolean * result);

        SetOnItemLongClickListener(
            [in] IOnItemLongClickListener * listener);

        GetOnItemLongClickListener(
            [out] IOnItemLongClickListener ** listener);

        SetOnItemSelectedListener(
            [in] IOnItemSelectedListener * listener);

        GetOnItemSelectedListener(
            [out] IOnItemSelectedListener ** listener);

        GetAdapter(
            [out] IAdapter ** adapter);

        SetAdapter(
            [in] IAdapter * adapter);

        GetSelectedItemPosition(
            [out] Int32 * position);

        GetSelectedItemId(
            [out] Int64 * itemId);

        GetSelectedView(
            [out] IView ** view);

        GetSelectedItem(
            [out] IInterface ** view);

        GetCount(
            [out] Int32 * count);

        GetPositionForView(
            [in] IView * view, 
            [out] Int32 * position);

        GetFirstVisiblePosition(
            [out] Int32 * position);

        GetLastVisiblePosition(
            [out] Int32 * position);

        SetSelection(
            [in] Int32 position);

        SetEmptyView(
            [in] IView * emptyView);

        GetEmptyView(
            [out] IView ** view);

        IsInFilterMode(
            [out] Boolean * isInFilterMode);

        CheckFocus();

        GetItemAtPosition(
            [in] Int32 position, 
            [out] IInterface ** item);

        GetItemIdAtPosition(
            [in] Int32 position, 
            [out] Int64 * itemId);
    }

    interface IOnItemLongClickListener {
        OnItemLongClick(
            [in] IAdapterView * parent, 
            [in] IView * view, 
            [in] Int32 position, 
            [in] Int64 id, 
            [out] Boolean * result);
    }

    interface IAbsListView : IAdapterView {
        SetFastScrollEnabled(
            [in] Boolean enabled);

        IsFastScrollEnabled(
            [out] Boolean * isEnabled);

        SetSmoothScrollbarEnabled(
            [in] Boolean enabled);

        IsSmoothScrollbarEnabled(
            [out] Boolean * isEnabled);

        SetOnScrollListener(
            [in] IOnScrollListener * l);

        IsScrollingCacheEnabled(
            [out] Boolean * isEnabled);

        SetScrollingCacheEnabled(
            [in] Boolean enabled);

        SetTextFilterEnabled(
            [in] Boolean textFilterEnabled);

        IsTextFilterEnabled(
            [out] Boolean * isEnabled);

        IsStackFromBottom(
            [out] Boolean * isStackFromBottom);

        SetStackFromBottom(
            [in] Boolean stackFromBottom);

        SetFilterText(
            [in] const String& filterText);

        GetTextFilter(
            [out] ICharSequence ** textFilter);

        GetListPaddingTop(
            [out] Int32 * top);

        GetListPaddingBottom(
            [out] Int32 * bottom);

        GetListPaddingLeft(
            [out] Int32 * left);

        GetListPaddingRight(
            [out] Int32 * right);

        SetDrawSelectorOnTop(
            [in] Boolean onTop);

        SetSelector(
            [in] Int32 resID);

        SetSelectorEx(
            [in] IDrawable * sel);

        GetSelector(
            [out] IDrawable ** selector);

        SetScrollIndicators(
            [in] IView * up, 
            [in] IView * down);

        PointToPosition(
            [in] Int32 x, 
            [in] Int32 y, 
            [out] Int32 * position);

        PointToRowId(
            [in] Int32 x, 
            [in] Int32 y, 
            [out] Int64 * rowId);

        SmoothScrollToPosition(
            [in] Int32 position);

        SmoothScrollToPositionEx(
            [in] Int32 position, 
            [in] Int32 boundPosition);

        SmoothScrollBy(
            [in] Int32 distance, 
            [in] Int32 duration);

        InvalidateViews();

        ClearTextFilter();

        HasTextFilter(
            [out] Boolean * hasTextFilter);

        SetTranscriptMode(
            [in] Int32 mode);

        GetTranscriptMode(
            [out] Int32 * mode);

        SetCacheColorHint(
            [in] Int32 color);

        GetCacheColorHint(
            [out] Int32 * colorHint);

        ReclaimViews(
            [in] IObjectContainer * views);

        SetRecyclerListener(
            [in] IRecyclerListener * listener);
    }

    interface IOnScrollListener {
        OnScrollStateChanged(
            [in] IAbsListView * view, 
            [in] Int32 scrollState);

        OnScroll(
            [in] IAbsListView * view, 
            [in] Int32 firstVisibleItem, 
            [in] Int32 visibleItemCount, 
            [in] Int32 totalItemCount);
    }

    interface IAbsListViewSavedState : IViewBaseSavedState {
    }

    interface IAbsListViewLayoutParams : IViewGroupLayoutParams {
        GetViewType(
            [out] Int32 * viewType);
    }

    interface IRecyclerListener {
        OnMovedToScrapHeap(
            [in] IView * view);
    }

    interface ISectionIndexer {
        GetSections(
            [out] IObjectContainer ** sections);

        GetPositionForSection(
            [in] Int32 section, 
            [out] Int32 * position);

        GetSectionForPosition(
            [in] Int32 position, 
            [out] Int32 * section);
    }

    interface IFilterListener {
        OnFilterComplete(
            [in] Int32 count);
    }

    interface IFilterResults {
    }

    interface IFilterDelayer {
        GetPostingDelay(
            [in] ICharSequence * constraint, 
            [out] Int64 * delay);
    }

    interface IFilter {
        SetDelayer(
            [in] IFilterDelayer * delayer);

        DoFilter(
            [in] ICharSequence * constraint);

        DoFilterEx(
            [in] ICharSequence * constraint, 
            [in] IFilterListener * listener);

        ConvertResultToString(
            [in] IInterface * resultValue, 
            [out] ICharSequence ** cs);
    }

    interface ITextWatcher : INoCopySpan {
        BeforeTextChanged(
            [in] ICharSequence * s, 
            [in] Int32 start, 
            [in] Int32 count, 
            [in] Int32 after);

        OnTextChanged(
            [in] ICharSequence * s, 
            [in] Int32 start, 
            [in] Int32 before, 
            [in] Int32 count);

        AfterTextChanged(
            [in] IEditable * s);
    }

    interface IImageButton : IImageView {
    }

    interface ICompoundButton : IButton {
        SetOnCheckedChangeListener(
            [in] ICompoundButtonOnCheckedChangeListener * listener);

        SetButtonDrawable(
            [in] Int32 resid);

        SetButtonDrawableEx(
            [in] IDrawable * d);
    }

    interface ICompoundButtonOnCheckedChangeListener {
        OnCheckedChanged(
            [in] ICompoundButton * buttonView, 
            [in] Boolean isChecked);
    }

    interface ICheckBox : ICompoundButton {
    }

    interface IRadioButton : ICompoundButton {
    }

    interface IToggleButton : ICompoundButton {
        GetTextOn(
            [out] ICharSequence ** on);

        SetTextOn(
            [in] ICharSequence * textOn);

        GetTextOff(
            [out] ICharSequence ** on);

        SetTextOff(
            [in] ICharSequence * textOff);
    }

    interface IFixedViewInfo {
    }

    interface IListViewSavedState : IViewBaseSavedState {
    }

    interface IFilterable {
        GetFilter(
            [out] IFilter ** filter);
    }

    interface IWrapperListAdapter : IListAdapter {
        GetWrappedAdapter(
            [out] IListAdapter ** adapter);
    }

    interface IHeaderViewListAdapter : IWrapperListAdapter {
        GetHeadersCount(
            [out] Int32 * count);

        GetFootersCount(
            [out] Int32 * count);

        RemoveHeader(
            [in] IView * v, 
            [out] Boolean * result);

        RemoveFooter(
            [in] IView * v, 
            [out] Boolean * result);
    }

    interface ISpinnerAdapter : IAdapter {
        GetDropDownView(
            [in] Int32 position, 
            [in] IView * convertView, 
            [in] IViewGroup * parent, 
            [out] IView ** view);
    }

    interface IBaseAdapter : IListAdapter {
        NotifyDataSetChanged();

        NotifyDataSetInvalidated();
    }

    interface IArrayAdapter : IBaseAdapter {
        Add(
            [in] IInterface * object);

        Insert(
            [in] IInterface * object, 
            [in] Int32 index);

        Remove(
            [in] IInterface * object);

        Clear();

        Sort(
            [in] IComparator * comparator);

        SetNotifyOnChange(
            [in] Boolean notifyOnChange);

        GetContext(
            [out] IContext ** context);

        GetPosition(
            [in] IInterface * item, 
            [out] Int32 * position);

        SetDropDownViewResource(
            [in] Int32 resource);
    }

    interface IViewBinder {
        SetViewValue(
            [in] IView * view, 
            [in] IInterface * data, 
            [in] const String& textRepresentation, 
            [out] Boolean * result);
    }

    interface ISimpleAdapter : IBaseAdapter {
        SetDropDownViewResource(
            [in] Int32 resource);

        GetViewBinder(
            [out] IViewBinder ** viewBinder);

        SetViewBinder(
            [in] IViewBinder * viewBinder);

        SetViewImage(
            [in] IImageView * v, 
            [in] Int32 value);

        SetViewImageEx(
            [in] IImageView * v, 
            [in] const String& value);

        SetViewText(
            [in] ITextView * v, 
            [in] const String& text);
    }

    interface ICheckable {
        SetChecked(
            [in] Boolean checked);

        IsChecked(
            [out] Boolean * isChecked);

        Toggle();
    }

    interface IScrollView : IFrameLayout {
        ArrowScroll(
            [in] Int32 direction, 
            [out] Boolean * consumed);

        ExecuteKeyEvent(
            [in] IKeyEvent * event, 
            [out] Boolean * handled);

        Fling(
            [in] Int32 velocityY);

        FullScroll(
            [in] Int32 direction, 
            [out] Boolean * consumed);

        GetMaxScrollAmount(
            [out] Int32 * maxAmount);

        IsFillViewport(
            [out] Boolean * isFilled);

        IsSmoothScrollingEnabled(
            [out] Boolean * enabled);

        PageScroll(
            [in] Int32 direction, 
            [out] Boolean * consumed);

        SetFillViewport(
            [in] Boolean fillViewport);

        SetSmoothScrollingEnabled(
            [in] Boolean smoothScrollingEnabled);

        SmoothScrollBy(
            [in] Int32 dx, 
            [in] Int32 dy);

        SmoothScrollTo(
            [in] Int32 x, 
            [in] Int32 y);
    }

    interface IHorizontalScrollView : IFrameLayout {
        ArrowScroll(
            [in] Int32 direction, 
            [out] Boolean * consumed);

        ExecuteKeyEvent(
            [in] IKeyEvent * event, 
            [out] Boolean * handled);

        Fling(
            [in] Int32 velocityY);

        FullScroll(
            [in] Int32 direction, 
            [out] Boolean * consumed);

        GetMaxScrollAmount(
            [out] Int32 * maxScrollAmount);

        IsFillViewport(
            [out] Boolean * isFilled);

        IsSmoothScrollingEnabled(
            [out] Boolean * enabled);

        PageScroll(
            [in] Int32 direction, 
            [out] Boolean * consumed);

        SetFillViewport(
            [in] Boolean fillViewport);

        SetSmoothScrollingEnabled(
            [in] Boolean smoothScrollingEnabled);

        SmoothScrollBy(
            [in] Int32 dx, 
            [in] Int32 dy);

        SmoothScrollTo(
            [in] Int32 x, 
            [in] Int32 y);
    }

    interface IAbsSpinnerSavedState : IViewBaseSavedState {
    }

    interface IAbsSpinner : IAdapterView {
        SetSelectionEx(
            [in] Int32 position, 
            [in] Boolean animate);

        PointToPosition(
            [in] Int32 x, 
            [in] Int32 y, 
            [out] Int32 * pos);
    }

    interface IGalleryLayoutParams : IViewGroupLayoutParams {
    }

    interface IGallery : IAbsSpinner {
        SetCallbackDuringFling(
            [in] Boolean shouldCallback);

        SetCallbackOnUnselectedItemClick(
            [in] Boolean shouldCallback);

        SetAnimationDuration(
            [in] Int32 animationDurationMillis);

        SetSpacing(
            [in] Int32 spacing);

        SetUnselectedAlpha(
            [in] Float unselectedAlpha);

        SetGravity(
            [in] Int32 gravity);
    }

    interface IPopupWindowOnDismissListener {
        OnDismiss();
    }

    interface IPopupWindow {
        GetBackground(
            [out] IDrawable ** background);

        SetBackgroundDrawable(
            [in] IDrawable * background);

        GetAnimationStyle(
            [out] Int32 * style);

        SetIgnoreCheekPress();

        SetAnimationStyle(
            [in] Int32 animationStyle);

        GetContentView(
            [out] IView ** contentView);

        SetContentView(
            [in] IView * contentView);

        SetTouchInterceptor(
            [in] IViewOnTouchListener * l);

        IsFocusable(
            [out] Boolean * isFocusable);

        SetFocusable(
            [in] Boolean focusable);

        GetInputMethodMode(
            [out] Int32 * inputMethodMode);

        SetInputMethodMode(
            [in] Int32 mode);

        SetSoftInputMode(
            [in] Int32 mode);

        GetSoftInputMode(
            [out] Int32 * softInputMode);

        IsTouchable(
            [out] Boolean * touchable);

        SetTouchable(
            [in] Boolean touchable);

        IsOutsideTouchable(
            [out] Boolean * touchable);

        SetOutsideTouchable(
            [in] Boolean touchable);

        IsClippingEnabled(
            [out] Boolean * enabled);

        SetClippingEnabled(
            [in] Boolean enabled);

        IsSplitTouchEnabled(
            [out] Boolean * enabled);

        SetSplitTouchEnabled(
            [in] Boolean enabled);

        IsLayoutInScreenEnabled(
            [out] Boolean * enabled);

        SetLayoutInScreenEnabled(
            [in] Boolean enabled);

        SetWindowLayoutType(
            [in] Int32 layoutType);

        GetWindowLayoutType(
            [out] Int32 * layoutType);

        SetWindowLayoutMode(
            [in] Int32 widthSpec, 
            [in] Int32 heightSpec);

        GetHeight(
            [out] Int32 * height);

        SetHeight(
            [in] Int32 height);

        GetWidth(
            [out] Int32 * width);

        SetWidth(
            [in] Int32 width);

        IsShowing(
            [out] Boolean * isShowing);

        ShowAtLocation(
            [in] IView * parent, 
            [in] Int32 gravity, 
            [in] Int32 x, 
            [in] Int32 y);

        ShowAsDropDown(
            [in] IView * anchor);

        ShowAsDropDownEx(
            [in] IView * anchor, 
            [in] Int32 xoff, 
            [in] Int32 yoff);

        IsAboveAnchor(
            [out] Boolean * isAboveAnchor);

        GetMaxAvailableHeight(
            [in] IView * anchor, 
            [out] Int32 * maxAvailableHeight);

        GetMaxAvailableHeightEx(
            [in] IView * anchor, 
            [in] Int32 yOffset, 
            [out] Int32 * maxAvailableHeight);

        GetMaxAvailableHeightEx2(
            [in] IView * anchor, 
            [in] Int32 yOffset, 
            [in] Boolean ignoreBottomDecorations, 
            [out] Int32 * maxAvailableHeight);

        Dismiss();

        SetOnDismissListener(
            [in] IPopupWindowOnDismissListener * l);

        Update();

        UpdateEx(
            [in] Int32 width, 
            [in] Int32 height);

        UpdateEx2(
            [in] Int32 x, 
            [in] Int32 y, 
            [in] Int32 width, 
            [in] Int32 height);

        UpdateEx3(
            [in] Int32 x, 
            [in] Int32 y, 
            [in] Int32 width, 
            [in] Int32 height, 
            [in] Boolean force);

        UpdateEx4(
            [in] IView * anchor, 
            [in] Int32 width, 
            [in] Int32 height);

        UpdateEx5(
            [in] IView * anchor, 
            [in] Int32 xoff, 
            [in] Int32 yoff, 
            [in] Int32 width, 
            [in] Int32 height);
    }

    interface IProgressBarSavedState : IViewBaseSavedState {
    }

    interface IProgressBar : IView {
        IsIndeterminate(
            [out] Boolean * indeterminate);

        SetIndeterminate(
            [in] Boolean indeterminate);

        GetIndeterminateDrawable(
            [out] IDrawable ** d);

        SetIndeterminateDrawable(
            [in] IDrawable * d);

        GetProgressDrawable(
            [out] IDrawable ** d);

        SetProgressDrawable(
            [in] IDrawable * d);

        SetProgress(
            [in] Int32 progress);

        SetSecondaryProgress(
            [in] Int32 secondaryProgress);

        GetProgress(
            [out] Int32 * progress);

        GetSecondaryProgress(
            [out] Int32 * secondaryProgress);

        GetMax(
            [out] Int32 * max);

        SetMax(
            [in] Int32 max);

        IncrementProgressBy(
            [in] Int32 diff);

        IncrementSecondaryProgressBy(
            [in] Int32 diff);

        SetInterpolator(
            [in] IContext * ctx, 
            [in] Int32 resID);

        SetInterpolatorEx(
            [in] IInterpolator * interpolator);

        GetInterpolator(
            [out] IInterpolator ** interpolator);
    }

    interface ITabWidgetOnTabSelectionChanged {
        OnTabSelectionChanged(
            [in] Int32 tabIndex, 
            [in] Boolean clicked);
    }

    interface ITabWidget : ILinearLayout {
        GetChildTabViewAt(
            [in] Int32 index, 
            [out] IView ** view);

        GetTabCount(
            [out] Int32 * count);

        SetDividerDrawable(
            [in] IDrawable * drawable);

        SetDividerDrawableEx(
            [in] Int32 resId);

        SetLeftStripDrawable(
            [in] IDrawable * drawable);

        SetLeftStripDrawableEx(
            [in] Int32 resId);

        SetRightStripDrawable(
            [in] IDrawable * drawable);

        SetRightStripDrawableEx(
            [in] Int32 resId);

        SetStripEnabled(
            [in] Boolean stripEnabled);

        IsStripEnabled(
            [out] Boolean * stripEnabled);

        SetCurrentTab(
            [in] Int32 index);

        FocusCurrentTab(
            [in] Int32 index);
    }

    interface ITabHostOnTabChangeListener {
        OnTabChanged(
            [in] const String& tabId);
    }

    interface ITabHostTabContentFactory {
        CreateTabContent(
            [in] const String& tag, 
            [out] IView ** view);
    }

    interface ITabSpec {
        SetIndicator(
            [in] ICharSequence * label);

        SetIndicatorEx(
            [in] ICharSequence * label, 
            [in] IDrawable * icon);

        SetIndicatorEx2(
            [in] IView * view);

        SetContent(
            [in] Int32 viewId);

        SetContentEx(
            [in] ITabHostTabContentFactory * contentFactory);

        SetContentEx2(
            [in] IIntent * intent);

        GetTag(
            [out] String * str);
    }

    interface ITabHost : IFrameLayout {
        NewTabSpec(
            [in] const String& tag, 
            [out] ITabSpec ** tabspec);

        Setup();

        AddTab(
            [in] ITabSpec * tabSpec);

        ClearAllTabs();

        GetTabWidget(
            [out] ITabWidget ** tabWidget);

        GetCurrentTab(
            [out] Int32 * tab);

        GetCurrentTabTag(
            [out] String * tag);

        GetCurrentTabView(
            [out] IView ** view);

        GetCurrentView(
            [out] IView ** view);

        SetCurrentTabByTag(
            [in] const String& tag);

        GetTabContentView(
            [out] IFrameLayout ** view);

        SetCurrentTab(
            [in] Int32 index);

        SetOnTabChangedListener(
            [in] ITabHostOnTabChangeListener * l);
    }

    interface IRadioGroup : ILinearLayout {
        Check(
            [in] Int32 id);

        GetCheckedRadioButtonId(
            [out] Int32 * id);

        ClearCheck();

        SetOnCheckedChangeListener(
            [in] IRadioGroupOnCheckedChangeListener * listener);
    }

    interface IRadioGroupOnCheckedChangeListener {
        OnCheckedChanged(
            [in] IRadioGroup * group, 
            [in] Int32 checkedId);
    }

    interface IRadioGroupLayoutParams : ILinearLayoutLayoutParams {
    }

    interface IHeterogeneousExpandableList {
        GetGroupType(
            [in] Int32 groupPosition, 
            [out] Int32 * type);

        GetChildType(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [out] Int32 * type);

        GetGroupTypeCount(
            [out] Int32 * count);

        GetChildTypeCount(
            [out] Int32 * count);
    }

    interface IExpandableListAdapter {
        RegisterDataSetObserver(
            [in] IDataSetObserver * observer);

        UnregisterDataSetObserver(
            [in] IDataSetObserver * observer);

        GetGroupCount(
            [out] Int32 * count);

        GetChildrenCount(
            [in] Int32 groupPosition, 
            [out] Int32 * count);

        GetGroup(
            [in] Int32 groupPosition, 
            [out] IInterface ** child);

        GetChild(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [out] IInterface ** child);

        GetGroupId(
            [in] Int32 groupPosition, 
            [out] Int64 * id);

        GetChildId(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [out] Int64 * id);

        HasStableIds(
            [out] Boolean * id);

        GetGroupView(
            [in] Int32 groupPosition, 
            [in] Boolean isExpanded, 
            [in] IView * convertView, 
            [in] IViewGroup * parent, 
            [out] IView ** view);

        GetChildView(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [in] Boolean isLastChild, 
            [in] IView * convertView, 
            [in] IViewGroup * parent, 
            [out] IView ** view);

        IsChildSelectable(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [out] Boolean * selectable);

        AreAllItemsEnabled(
            [out] Boolean * enabled);

        IsEmpty(
            [out] Boolean * empty);

        OnGroupExpanded(
            [in] Int32 groupPosition);

        OnGroupCollapsed(
            [in] Int32 groupPosition);

        GetCombinedChildId(
            [in] Int64 groupId, 
            [in] Int64 childId, 
            [out] Int64 * id);

        GetCombinedGroupId(
            [in] Int64 groupId, 
            [out] Int64 * id);
    }

    interface IGroupMetadata {
        Obtain(
            [in] Int32 flPos, 
            [in] Int32 lastChildFlPos, 
            [in] Int32 gPos, 
            [in] Int64 gId, 
            [out] IGroupMetadata ** groupMetadata);

        CompareTo(
            [in] IGroupMetadata * another, 
            [out] Int32 * pos);

        DescribeContents(
            [out] Int32 * contents);
    }

    interface IPositionMetadata {
        Obtain(
            [in] Int32 flatListPos, 
            [in] Int32 type, 
            [in] Int32 groupPos, 
            [in] Int32 childPos, 
            [in] IGroupMetadata * groupMetadata, 
            [in] Int32 groupInsertIndex, 
            [out] IPositionMetadata ** positionMetadata);

        Recycle();

        IsExpanded(
            [out] Boolean * expanded);
    }

    interface IExpandableListConnector : IBaseAdapter {
        SetExpandableListAdapter(
            [in] IExpandableListAdapter * expandableListAdapter);

        GetUnflattenedPos(
            [in] Int32 flPos, 
            [out] IPositionMetadata ** positionMetadata);

        IsGroupExpanded(
            [in] Int32 groupPosition, 
            [out] Boolean * expanded);

        SetMaxExpGroupCount(
            [in] Int32 maxExpGroupCount);
    }

    interface IExpandableListPosition {
        GetPackedPosition(
            [out] Int64 * pos);

        ObtainGroupPosition(
            [in] Int32 groupPosition, 
            [out] IExpandableListPosition ** position);

        ObtainChildPosition(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [out] IExpandableListPosition ** position);

        ObtainPosition(
            [in] Int64 packedPosition, 
            [out] IExpandableListPosition ** position);

        Obtain(
            [in] Int32 type, 
            [in] Int32 groupPos, 
            [in] Int32 childPos, 
            [in] Int32 flatListPos, 
            [out] IExpandableListPosition ** position);

        Recycle();
    }

    interface IExpandableListView : IListView {
        SetChildDivider(
            [in] IDrawable * childDivider);

        SetAdapterEx(
            [in] IExpandableListAdapter * adapter);

        GetExpandableListAdapter(
            [out] IExpandableListAdapter ** adapter);

        HandleItemClick(
            [in] IView * v, 
            [in] Int32 position, 
            [in] Int64 id, 
            [out] Boolean * handle);

        ExpandGroup(
            [in] Int32 groupPos, 
            [out] Boolean * expanded);

        CollapseGroup(
            [in] Int32 groupPos, 
            [out] Boolean * collapse);

        SetOnGroupCollapseListener(
            [in] IOnGroupCollapseListener * onGroupCollapseListener);

        SetOnGroupExpandListener(
            [in] IOnGroupExpandListener * onGroupExpandListener);

        SetOnGroupClickListener(
            [in] IOnGroupClickListener * onGroupClickListener);

        SetOnChildClickListener(
            [in] IOnChildClickListener * onChildClickListener);

        GetExpandableListPosition(
            [in] Int32 flatListPosition, 
            [out] Int64 * position);

        GetFlatListPosition(
            [in] Int64 packedPosition, 
            [out] Int32 * position);

        GetSelectedPosition(
            [out] Int64 * position);

        GetSelectedId(
            [out] Int64 * id);

        SetSelectedGroup(
            [in] Int32 groupPosition);

        SetSelectedChild(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [in] Boolean shouldExpandGroup, 
            [out] Boolean * res);

        IsGroupExpanded(
            [in] Int32 groupPosition, 
            [out] Boolean * expanded);

        GetPackedPositionType(
            [in] Int64 packedPosition, 
            [out] Int32 * type);

        GetPackedPositionGroup(
            [in] Int64 packedPosition, 
            [out] Int32 * position);

        GetPackedPositionChild(
            [in] Int64 packedPosition, 
            [out] Int32 * position);

        GetPackedPositionForChild(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [out] Int64 * position);

        GetPackedPositionForGroup(
            [in] Int32 groupPosition, 
            [out] Int64 * position);

        SetChildIndicator(
            [in] IDrawable * childIndicator);

        SetChildIndicatorBounds(
            [in] Int32 left, 
            [in] Int32 right);

        SetGroupIndicator(
            [in] IDrawable * groupIndicator);

        SetIndicatorBounds(
            [in] Int32 left, 
            [in] Int32 right);
    }

    interface IOnGroupCollapseListener {
        OnGroupCollapse(
            [in] Int32 groupPosition);
    }

    interface IOnGroupExpandListener {
        OnGroupExpand(
            [in] Int32 groupPosition);
    }

    interface IOnGroupClickListener {
        OnGroupClick(
            [in] IExpandableListView * parent, 
            [in] IView * v, 
            [in] Int32 groupPosition, 
            [in] Int64 id, 
            [out] Boolean * handle);
    }

    interface IOnChildClickListener {
        OnChildClick(
            [in] IExpandableListView * parent, 
            [in] IView * v, 
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [in] Int64 id, 
            [out] Boolean * handle);
    }

    interface IExpandableListContextMenuInfo {
    }

    interface IExpandableListViewSavedState : IViewBaseSavedState {
    }

    interface IGridView : IAbsListView {
        SetGravity(
            [in] Int32 gravity);

        SetHorizontalSpacing(
            [in] Int32 horizontalSpacing);

        SetVerticalSpacing(
            [in] Int32 verticalSpacing);

        SetStretchMode(
            [in] Int32 stretchMode);

        GetStretchMode(
            [out] Int32 * mode);

        SetColumnWidth(
            [in] Int32 columnWidth);

        SetNumColumns(
            [in] Int32 numColumns);
    }

    interface IAbsSeekBar : IProgressBar {
        SetThumb(
            [in] IDrawable * thumb);

        GetThumbOffset(
            [out] Int32 * offset);

        SetThumbOffset(
            [in] Int32 thumbOffset);

        SetKeyProgressIncrement(
            [in] Int32 increment);

        GetKeyProgressIncrement(
            [out] Int32 * increment);
    }

    interface IAlphabetIndexer : IDataSetObserver {
        SetCursor(
            [in] ICursor * cursor);
    }

    interface IAnalogClock : IView {
    }

    interface IBaseExpandableListAdapter {
        NotifyDataSetInvalidated();

        NotifyDataSetChanged();
    }

    interface ICheckedTextView : ITextView {
        Toggle();

        IsChecked(
            [out] Boolean * checked);

        SetChecked(
            [in] Boolean checked);

        SetCheckMarkDrawable(
            [in] Int32 resid);

        SetCheckMarkDrawableEx(
            [in] IDrawable * d);
    }

    interface IChronometer : ITextView {
        SetBase(
            [in] Int64 base);

        GetBase(
            [out] Int64 * base);

        SetFormat(
            [in] const String& format);

        GetFormat(
            [out] String * format);

        SetOnChronometerTickListener(
            [in] IOnChronometerTickListener * listener);

        GetOnChronometerTickListener(
            [out] IOnChronometerTickListener ** listener);

        Start();

        Stop();

        SetStarted(
            [in] Boolean started);
    }

    interface IOnChronometerTickListener {
        OnChronometerTick(
            [in] IChronometer * chronometer);
    }

    interface IFilterQueryProvider {
        RunQuery(
            [in] ICharSequence * constraint, 
            [out] ICursor ** cursor);
    }

    interface ICursorAdapter : IBaseAdapter {
        GetCursor(
            [out] ICursor ** cursor);

        NewView(
            [in] IContext * context, 
            [in] ICursor * cursor, 
            [in] IViewGroup * parent, 
            [out] IView ** view);

        NewDropDownView(
            [in] IContext * context, 
            [in] ICursor * cursor, 
            [in] IViewGroup * parent, 
            [out] IView ** view);

        BindView(
            [in] IView * view, 
            [in] IContext * context, 
            [in] ICursor * cursor);

        ChangeCursor(
            [in] ICursor * cursor);

        ConvertToString(
            [in] ICursor * cursor, 
            [out] ICharSequence ** cs);

        RunQueryOnBackgroundThread(
            [in] ICharSequence * constraint, 
            [out] ICursor ** cursor);

        GetFilter(
            [out] IFilter ** filter);

        GetFilterQueryProvider(
            [out] IFilterQueryProvider ** filterQueryProvider);

        SetFilterQueryProvider(
            [in] IFilterQueryProvider * filterQueryProvider);
    }

    interface IAlertControllerRecycleListView : IListView {
    }

    interface ICursorFilterClient {
        ConvertToString(
            [in] ICursor * cursor, 
            [out] ICharSequence ** charSequence);

        RunQueryOnBackgroundThread(
            [in] ICharSequence * constraint, 
            [out] ICursor ** cursor);

        GetCursor(
            [out] ICursor ** cursor);

        ChangeCursor(
            [in] ICursor * cursor);
    }

    interface ICursorFilter : IFilter {
    }

    interface ICursorTreeAdapter : IBaseExpandableListAdapter {
        SetGroupCursor(
            [in] ICursor * cursor);

        SetChildrenCursor(
            [in] Int32 groupPosition, 
            [in] ICursor * childrenCursor);

        GetChild(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [out] ICursor ** cursor);

        GetChildId(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [out] Int64 * id);

        GetChildrenCount(
            [in] Int32 groupPosition, 
            [out] Int32 * count);

        GetGroup(
            [in] Int32 groupPosition, 
            [out] ICursor ** group);

        GetGroupCount(
            [out] Int32 * count);

        GetGroupId(
            [in] Int32 groupPosition, 
            [out] Int64 * id);

        GetGroupView(
            [in] Int32 groupPosition, 
            [in] Boolean isExpanded, 
            [in] IView * convertView, 
            [in] IViewGroup * parent, 
            [out] IView ** view);

        GetChildView(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [in] Boolean isLastChild, 
            [in] IView * convertView, 
            [in] IViewGroup * parent, 
            [out] IView ** view);

        IsChildSelectable(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [out] Boolean * selectable);

        HasStableIds(
            [out] Boolean * ids);

        ConvertToString(
            [in] ICursor * cursor, 
            [out] String * str);

        RunQueryOnBackgroundThread(
            [in] ICharSequence * constraint, 
            [out] ICursor ** cursor);

        GetFilter(
            [out] IFilter ** filter);

        GetFilterQueryProvider(
            [out] IFilterQueryProvider ** provider);

        SetFilterQueryProvider(
            [in] IFilterQueryProvider * filterQueryProvider);

        ChangeCursor(
            [in] ICursor * cursor, 
            [out] IFilterQueryProvider ** provider);

        GetCursor(
            [out] ICursor ** cursor);
    }

    interface INumberPicker : ILinearLayout {
        SetOnChangeListener(
            [in] IOnChangedListener * listener);

        SetFormatter(
            [in] IFormatter * formatter);

        SetRange(
            [in] Int32 start, 
            [in] Int32 end);

        SetRangeEx(
            [in] Int32 start, 
            [in] Int32 end, 
            [in] ArrayOf<String> displayedValues);

        SetCurrent(
            [in] Int32 current);

        SetSpeed(
            [in] Int64 speed);

        CancelIncrement();

        CancelDecrement();

        GetCurrent(
            [out] Int32 * current);
    }

    interface IOnChangedListener {
        OnChanged(
            [in] INumberPicker * picker, 
            [in] Int32 oldVal, 
            [in] Int32 newVal);
    }

    interface IFormatter {
        ToString(
            [in] Int32 value, 
            [out] String * str);
    }

    interface INumberPickerButton : IImageButton {
        SetNumberPicker(
            [in] INumberPicker * picker);
    }

    interface IDatePicker : IFrameLayout {
        UpdateDate(
            [in] Int32 year, 
            [in] Int32 monthOfYear, 
            [in] Int32 dayOfMonth);

        Init(
            [in] Int32 year, 
            [in] Int32 monthOfYear, 
            [in] Int32 dayOfMonth, 
            [in] IOnDateChangedListener * onDateChangedListener);

        GetYear(
            [out] Int32 * year);

        GetMonth(
            [out] Int32 * month);

        GetDayOfMonth(
            [out] Int32 * day);
    }

    interface IOnDateChangedListener {
        OnDateChanged(
            [in] IDatePicker * view, 
            [in] Int32 year, 
            [in] Int32 monthOfYear, 
            [in] Int32 dayOfMonth);
    }

    interface IInputMethodService : IAbstractInputMethodService {
        OnInitializeInterface();

        GetLayoutInflater(
            [out] ILayoutInflater ** inflater);

        GetWindow(
            [out] IDialog ** dialog);

        GetMaxWidth(
            [out] Int32 * maxWidth);

        GetCurrentInputBinding(
            [out] IInputBinding ** binding);

        GetCurrentInputConnection(
            [out] IInputConnection ** inputConnection);

        GetCurrentInputStarted(
            [out] Boolean * state);

        GetCurrentInputEditorInfo(
            [out] IEditorInfo ** editorInfo);

        UpdateFullscreenMode();

        OnConfigureWindow(
            [in] IWindow * win, 
            [in] Boolean isFullscreen, 
            [in] Boolean isCandidatesOnly);

        IsFullscreenMode(
            [out] Boolean * fullScreenMode);

        OnEvaluateFullscreenMode(
            [out] Boolean * screenMode);

        SetExtractViewShown(
            [in] Boolean shown);

        IsExtractViewShown(
            [out] Boolean * shown);

        UpdateInputViewShown();

        IsShowInputRequested(
            [out] Boolean * requested);

        IsInputViewShown(
            [out] Boolean * shown);

        OnEvaluateInputViewShown(
            [out] Boolean * shown);

        SetCandidatesViewShown(
            [in] Boolean shown);

        GetCandidatesHiddenVisibility(
            [out] Int32 * visibility);

        ShowStatusIcon(
            [in] Int32 iconResId);

        HideStatusIcon();

        SwitchInputMethod(
            [in] const String& id);

        SetExtractView(
            [in] IView * view);

        SetCandidatesView(
            [in] IView * view);

        SetInputView(
            [in] IView * view);

        OnCreateExtractTextView(
            [out] IView ** view);

        OnCreateCandidatesView(
            [out] IView ** view);

        OnCreateInputView(
            [out] IView ** view);

        OnStartInputView(
            [in] IEditorInfo * info, 
            [in] Boolean restarting);

        OnFinishInputView(
            [in] Boolean finishingInput);

        OnStartCandidatesView(
            [in] IEditorInfo * info, 
            [in] Boolean restarting);

        OnFinishCandidatesView(
            [in] Boolean finishingInput);

        OnShowInputRequested(
            [in] Int32 flags, 
            [in] Boolean configChange, 
            [out] Boolean * requested);

        ShowWindow(
            [in] Boolean showInput);

        HideWindow();

        OnWindowShown();

        OnWindowHidden();

        OnBindInput();

        OnUnbindInput();

        OnStartInput(
            [in] IEditorInfo * attribute, 
            [in] Boolean restarting);

        OnFinishInput();

        OnDisplayCompletions(
            [in] ArrayOf<ICompletionInfo *> * completions);

        OnUpdateExtractedText(
            [in] Int32 token, 
            [in] IExtractedText * text);

        OnUpdateSelection(
            [in] Int32 oldSelStart, 
            [in] Int32 oldSelEnd, 
            [in] Int32 newSelStart, 
            [in] Int32 newSelEnd, 
            [in] Int32 candidatesStart, 
            [in] Int32 candidatesEnd);

        OnUpdateCursor(
            [in] IRect * newCursor);

        RequestHideSelf(
            [in] Int32 flags);

        OnAppPrivateCommand(
            [in] const String& action, 
            [in] IBundle * data);

        SendDownUpKeyEvents(
            [in] Int32 keyEventCode);

        SendDefaultEditorAction(
            [in] Boolean fromEnterKey, 
            [out] Boolean * state);

        SendKeyChar(
            [in] Char16 charCode);

        OnExtractedSelectionChanged(
            [in] Int32 start, 
            [in] Int32 end);

        OnExtractedTextClicked();

        OnExtractedCursorMovement(
            [in] Int32 dx, 
            [in] Int32 dy);

        OnExtractTextContextMenuItem(
            [in] Int32 id, 
            [out] Boolean * state);

        GetTextForImeAction(
            [in] Int32 imeOptions, 
            [out] ICharSequence ** text);

        OnUpdateExtractingVisibility(
            [in] IEditorInfo * ei);

        OnUpdateExtractingViews(
            [in] IEditorInfo * ei);

        OnExtractingInputChanged(
            [in] IEditorInfo * ei);
    }

    interface IExtractEditText : IEditText {
        SetIME(
            [in] IInputMethodService * ime);

        StartInternalChanges();

        FinishInternalChanges();

        HasVerticalScrollBar(
            [out] Boolean * has);
    }

    interface IAbstractInputMethodImpl {
    }

    interface IAbstractInputMethodSessionImpl {
        IsEnabled(
            [out] Boolean * enabled);

        IsRevoked(
            [out] Boolean * revoked);

        SetEnabled(
            [in] Boolean enabled);

        RevokeSelf();
    }

    interface IAbstractInputMethodService : IService {
        GetKeyDispatcherState(
            [out] IDispatcherState ** dispatcherState);

        OnCreateInputMethodInterface(
            [out] IAbstractInputMethodImpl ** inputMethodImpl);

        OnCreateInputMethodSessionInterface(
            [out] IAbstractInputMethodSessionImpl ** abstractInputMethodSessionImpl);

        OnTrackballEvent(
            [in] IMotionEvent * event, 
            [out] Boolean * state);
    }

    interface IOnKeyboardActionListener {
        OnPress(
            [in] Int32 primaryCode);

        OnRelease(
            [in] Int32 primaryCode);

        OnKey(
            [in] Int32 primaryCode, 
            [in] ArrayOf<Int32> * keyCodes);

        OnText(
            [in] ICharSequence * text);

        SwipeLeft();

        SwipeRight();

        SwipeDown();

        SwipeUp();
    }

    interface IKeyboardView : IView {
        SetOnKeyboardActionListener(
            [in] IOnKeyboardActionListener * listener);
    }

    interface ISubMenuBuilder : IMenuBuilder {
        GetParentMenu(
            [out] IMenu ** menu);
    }

    interface IMenuItemImpl : IMenuItem {
        Invoke(
            [out] Boolean * handled);

        GetOrdering(
            [out] Int32 * ordering);

        SetCallback(
            [in] IRunnable * cb);

        SetExclusiveCheckable(
            [in] Boolean exclusive);

        IsExclusiveCheckable(
            [out] Boolean * checkable);

        GetLayoutInflater(
            [in] Int32 menuType, 
            [out] ILayoutInflater ** inflater);

        ShouldShowIcon(
            [in] Int32 menuType, 
            [out] Boolean * show);
    }

    interface IMenuBuilder : IMenu {
        SetCallback(
            [in] IMenuBuilderCallback * menuCallback);

        GetMenuView(
            [in] Int32 menuType, 
            [in] IViewGroup * parent, 
            [out] IView ** menuView);

        ClearMenuViews();

        ClearAll();

        FindItemIndex(
            [in] Int32 id, 
            [out] Int32 * index);

        FindGroupIndex(
            [in] Int32 group, 
            [out] Int32 * index);

        FindGroupIndexEx(
            [in] Int32 group, 
            [in] Int32 start, 
            [out] Int32 * index);

        SetShortcutsVisible(
            [in] Boolean shortcutsVisible);

        IsShortcutsVisible(
            [out] Boolean * qwertyMode);

        GetCallback(
            [out] IMenuBuilderCallback ** MenuCallback);

        GetContext(
            [out] IContext ** context);

        PerformItemAction(
            [in] IMenuItem * item, 
            [in] Int32 flags, 
            [out] Boolean * state);

        CloseEx(
            [in] Boolean flag);

        GetHeaderTitle(
            [out] ICharSequence ** title);

        GetHeaderIcon(
            [out] IDrawable ** drawable);

        GetHeaderView(
            [out] IView ** headerView);

        GetRootMenu(
            [out] IMenuBuilder ** menu);

        SetCurrentMenuInfo(
            [in] IContextMenuInfo * menuInfo);

        GetMenuAdapter(
            [in] Int32 menuType, 
            [out] IMenuAdapter ** menuAdapter);

        SaveHierarchyState(
            [in] IBundle * outState);

        RestoreHierarchyState(
            [in] IBundle * inState);
    }

    interface IMenuBuilderItemInvoker {
        InvokeItem(
            [in] IMenuItemImpl * item, 
            [out] Boolean * state);
    }

    interface IIconMenuItemView : ITextView {
        SetItemInvoker(
            [in] IMenuBuilderItemInvoker * itemInvoker);
    }

    interface IIconMenuView : IViewGroup {
        GetLayout(
            [out, callee] ArrayOf<Int32> * items);

        GetLayoutNumRows(
            [out] Int32 * nunmber);
    }

    interface IIconMenuViewLayoutParams : IViewGroupMarginLayoutParams {
    }

    interface IExpandedMenuView : IListView {
    }

    interface IPolicy {
        MakeNewWindow(
            [in] IContext * ctx, 
            [out] IWindow ** window);

        MakeNewLayoutInflater(
            [in] IContext * ctx, 
            [out] ILayoutInflater ** inflater);

        MakeNewWindowManager(
            [out] IWindowManagerPolicy ** wm);
    }

    interface IPolicyManager {
        MakeNewWindow(
            [in] IContext * ctx, 
            [out] IWindow ** window);

        MakeNewLayoutInflater(
            [in] IContext * ctx, 
            [out] ILayoutInflater ** inflater);

        MakeNewWindowManager(
            [out] IWindowManagerPolicy ** wm);
    }

    interface IStatusBarIcon {
        Clone(
            [out] IStatusBarIcon ** icon);

        IsVisible(
            [out] Boolean * isVisible);

        SetVisible(
            [in] Boolean visible);
    }

    interface IStatusBarNotification {
    }

    interface IStatusBar {
        SetIcon(
            [in] Int32 index, 
            [in] IStatusBarIcon * icon);

        RemoveIcon(
            [in] Int32 index);

        AddNotification(
            [in] IBinder * key, 
            [in] IStatusBarNotification * notification);

        UpdateNotification(
            [in] IBinder * key, 
            [in] IStatusBarNotification * notification);

        RemoveNotification(
            [in] IBinder * key);

        Disable(
            [in] Int32 state);

        AnimateExpand();

        AnimateCollapse();
    }

    interface IStatusBarIconList {
        DefineSlots(
            [in] ArrayOf<String> slots);

        GetSlotIndex(
            [in] const String& slot, 
            [out] Int32 * index);

        GetSize(
            [out] Int32 * size);

        SetIcon(
            [in] Int32 index, 
            [in] IStatusBarIcon * icon);

        RemoveIcon(
            [in] Int32 index);

        GetSlot(
            [in] Int32 index, 
            [out] String * slot);

        GetIcon(
            [in] Int32 index, 
            [out] IStatusBarIcon ** icon);

        GetViewIndex(
            [in] Int32 index, 
            [out] Int32 * viewIndex);

        CopyFrom(
            [in] IStatusBarIconList * list);
    }

    interface IStatusBarService {
        Expand();

        Collapse();

        Disable(
            [in] Int32 what, 
            [in] IBinder * token, 
            [in] const String& cap);

        SetIcon(
            [in] const String& slot, 
            [in] const String& iconCapsule, 
            [in] Int32 iconId, 
            [in] Int32 iconLevel);

        SetIconVisibility(
            [in] const String& slot, 
            [in] Boolean visible);

        RemoveIcon(
            [in] const String& slot);

        RegisterStatusBar(
            [in] IStatusBar * cbs, 
            [out] IStatusBarIconList ** iconList, 
            [out] IObjectContainer ** notificationKeys, 
            [out] IObjectContainer ** notifications);

        OnPanelRevealed();

        OnNotificationClick(
            [in] const String& cap, 
            [in] const String& tag, 
            [in] Int32 id);

        OnNotificationError(
            [in] const String& cap, 
            [in] const String& tag, 
            [in] Int32 id, 
            [in] Int32 uid, 
            [in] Int32 initialPid, 
            [in] CString message);

        OnClearAllNotifications();

        AddNotification(
            [in] IStatusBarNotification * notification, 
            [out] IBinder ** key);

        UpdateNotification(
            [in] IBinder * key, 
            [in] IStatusBarNotification * notification);

        RemoveNotification(
            [in] IBinder * key);
    }

    interface IAddress {
        GetLocale(
            [out] ILocale ** locale);

        GetMaxAddressLineIndex(
            [out] Int32 * index);

        GetAddressLine(
            [in] Int32 index, 
            [out] String * line);

        SetAddressLine(
            [in] Int32 index, 
            [in] const String& line);

        GetFeatureName(
            [out] String * featureName);

        SetFeatureName(
            [in] const String& featureName);

        GetAdminArea(
            [out] String * adminArea);

        SetAdminArea(
            [in] const String& adminArea);

        GetSubAdminArea(
            [out] String * subAdminArea);

        SetSubAdminArea(
            [in] const String& subAdminArea);

        GetLocality(
            [out] String * locality);

        SetLocality(
            [in] const String& locality);

        GetSubLocality(
            [out] String * sublocality);

        SetSubLocality(
            [in] const String& sublocality);

        GetThoroughfare(
            [out] String * thoroughfare);

        SetThoroughfare(
            [in] const String& thoroughfare);

        GetSubThoroughfare(
            [out] String * subthoroughfare);

        SetSubThoroughfare(
            [in] const String& subthoroughfare);

        GetPremises(
            [out] String * premises);

        SetPremises(
            [in] const String& premises);

        GetPostalCode(
            [out] String * postalCode);

        SetPostalCode(
            [in] const String& postalCode);

        GetCountryCode(
            [out] String * countryCode);

        SetCountryCode(
            [in] const String& countryCode);

        GetCountryName(
            [out] String * countryName);

        SetCountryName(
            [in] const String& countryName);

        HasLatitude(
            [out] Boolean * hasLatitude);

        GetLatitude(
            [out] Double * latitude);

        SetLatitude(
            [in] Double latitude);

        ClearLatitude();

        HasLongitude(
            [out] Boolean * hasLongitude);

        GetLongitude(
            [out] Double * longitude);

        SetLongitude(
            [in] Double longitude);

        ClearLongitude();

        GetPhone(
            [out] String * phone);

        SetPhone(
            [in] const String& phone);

        GetUrl(
            [out] String * url);

        SetUrl(
            [in] const String& Url);

        GetExtras(
            [out] IBundle ** extras);

        SetExtras(
            [in] IBundle * extras);
    }

    interface ICriteria {
        SetHorizontalAccuracy(
            [in] Int32 accuracy);

        GetHorizontalAccuracy(
            [out] Int32 * accuracy);

        SetVerticalAccuracy(
            [in] Int32 accuracy);

        GetVerticalAccuracy(
            [out] Int32 * accuracy);

        SetSpeedAccuracy(
            [in] Int32 accuracy);

        GetSpeedAccuracy(
            [out] Int32 * accuracy);

        SetBearingAccuracy(
            [in] Int32 accuracy);

        GetBearingAccuracy(
            [out] Int32 * accuracy);

        SetAccuracy(
            [in] Int32 accuracy);

        GetAccuracy(
            [out] Int32 * accuracy);

        SetPowerRequirement(
            [in] Int32 level);

        GetPowerRequirement(
            [out] Int32 * requirement);

        SetCostAllowed(
            [in] Boolean costAllowed);

        IsCostAllowed(
            [out] Boolean * costAllowed);

        SetAltitudeRequired(
            [in] Boolean altitudeRequired);

        IsAltitudeRequired(
            [out] Boolean * altitudeRequired);

        SetSpeedRequired(
            [in] Boolean speedRequired);

        IsSpeedRequired(
            [out] Boolean * speedRequired);

        SetBearingRequired(
            [in] Boolean bearingRequired);

        IsBearingRequired(
            [out] Boolean * bearingRequired);
    }

    interface IGeocoderParams {
        GetLocale(
            [out] ILocale ** locale);

        GetClientCapsule(
            [out] String * name);
    }

    interface ILocalGpsStatusListener {
        OnGpsStatusChanged(
            [in] Int32 event);
    }

    interface ILocalGpsStatusNmeaListener {
        OnNmeaReceived(
            [in] Int64 timestamp, 
            [in] const String& nmea);
    }

    interface IGpsStatus {
        SetStatus(
            [in] Int32 svCount, 
            [in] ArrayOf<Int32> prns, 
            [in] ArrayOf<Float> snrs, 
            [in] ArrayOf<Float> elevations, 
            [in] ArrayOf<Float> azimuths, 
            [in] Int32 ephemerisMask, 
            [in] Int32 almanacMask, 
            [in] Int32 usedInFixMask);

        SetStatusEx(
            [in] IGpsStatus * status);

        SetTimeToFirstFix(
            [in] Int32 ttff);

        GetTimeToFirstFix(
            [out] Int32 * time);

        GetSatellites(
            [out] IObjectEnumerator ** satellites);

        GetMaxSatellites(
            [out] Int32 * maxNumber);
    }

    interface IGpsStatusListener {
        OnGpsStarted();

        OnGpsStopped();

        OnFirstFix(
            [in] Int32 ttff);

        OnSvStatusChanged(
            [in] Int32 svCount, 
            [in] ArrayOf<Int32> prns, 
            [in] ArrayOf<Float> snrs, 
            [in] ArrayOf<Float> elevations, 
            [in] ArrayOf<Float> azimuths, 
            [in] Int32 ephemerisMask, 
            [in] Int32 almanacMask, 
            [in] Int32 usedInFixMask);

        OnNmeaReceived(
            [in] Int64 timestamp, 
            [in] const String& nmea);
    }

    interface IGpsStatusProvider {
        AddGpsStatusListener(
            [in] IGpsStatusListener * listener);

        RemoveGpsStatusListener(
            [in] IGpsStatusListener * listener);
    }

    interface ILocation {
        Set(
            [in] ILocation * l);

        Reset();

        DistanceTo(
            [in] ILocation * dest, 
            [out] Float * distance);

        BearingTo(
            [in] ILocation * dest, 
            [out] Float * bearing);

        GetProvider(
            [out] String * provider);

        SetProvider(
            [in] const String& provider);

        GetTime(
            [out] Int64 * time);

        SetTime(
            [in] Int64 time);

        GetLatitude(
            [out] Double * latitude);

        SetLatitude(
            [in] Double latitude);

        GetLongitude(
            [out] Double * longitude);

        SetLongitude(
            [in] Double longitude);

        HasAltitude(
            [out] Boolean * hasAltitude);

        GetAltitude(
            [out] Double * altitude);

        SetAltitude(
            [in] Double altitude);

        RemoveAltitude();

        HasSpeed(
            [out] Boolean * hasSpeed);

        GetSpeed(
            [out] Float * speed);

        SetSpeed(
            [in] Float speed);

        RemoveSpeed();

        HasBearing(
            [out] Boolean * hasBearing);

        GetBearing(
            [out] Float * bearing);

        SetBearing(
            [in] Float bearing);

        RemoveBearing();

        HasAccuracy(
            [out] Boolean * hasAccuracy);

        GetAccuracy(
            [out] Float * accuracy);

        SetAccuracy(
            [in] Float accuracy);

        RemoveAccuracy();

        GetExtras(
            [out] IBundle ** extras);

        SetExtras(
            [in] IBundle * extras);
    }

    interface ILocationListener {
        OnLocationChanged(
            [in] ILocation * location);

        OnStatusChanged(
            [in] const String& provider, 
            [in] Int32 status, 
            [in] IBundle * extras);

        OnProviderEnabled(
            [in] const String& provider);

        OnProviderDisabled(
            [in] const String& provider);
    }

    interface ILocationManager {
        GetAllProviders(
            [out, callee] ArrayOf<String> * allProviders);

        GetProviders(
            [in] ICriteria * criteria, 
            [in] Boolean enabledOnly, 
            [out, callee] ArrayOf<String> * providers);

        GetBestProvider(
            [in] ICriteria * criteria, 
            [in] Boolean enabledOnly, 
            [out] String * provider);

        ProviderMeetsCriteria(
            [in] const String& provider, 
            [in] ICriteria * criteria, 
            [out] Boolean * result);

        RequestLocationUpdates(
            [in] const String& provider, 
            [in] ICriteria * criteria, 
            [in] Int64 minTime, 
            [in] Float minDistance, 
            [in] Boolean singleShot, 
            [in] ILocationListener * listener);

        RequestLocationUpdatesPI(
            [in] const String& provider, 
            [in] ICriteria * criteria, 
            [in] Int64 minTime, 
            [in] Float minDistance, 
            [in] Boolean singleShot, 
            [in] IPendingIntent * intent);

        RemoveUpdates(
            [in] ILocationListener * listener);

        RemoveUpdatesPI(
            [in] IPendingIntent * intent);

        AddGpsStatusListener(
            [in] IGpsStatusListener * listener, 
            [out] Boolean * result);

        RemoveGpsStatusListener(
            [in] IGpsStatusListener * listener);

        LocationCallbackFinished(
            [in] ILocationListener * listener);

        SendExtraCommand(
            [in] const String& provider, 
            [in] const String& command, 
            [in] IBundle * inExtras, 
            [out] IBundle ** outExtras, 
            [out] Boolean * result);

        AddProximityAlert(
            [in] Double latitude, 
            [in] Double longitude, 
            [in] Float distance, 
            [in] Int64 expiration, 
            [in] IPendingIntent * intent);

        RemoveProximityAlert(
            [in] IPendingIntent * intent);

        GetProviderInfo(
            [in] const String& provider, 
            [out] IBundle ** info);

        IsProviderEnabled(
            [in] const String& provider, 
            [out] Boolean * isEnabled);

        GetLastKnownLocation(
            [in] const String& provider, 
            [out] ILocation ** location);

        ReportLocation(
            [in] ILocation * location, 
            [in] Boolean passive);

        GeocoderIsPresent(
            [out] Boolean * result);

        GetFromLocation(
            [in] Double latitude, 
            [in] Double longitude, 
            [in] Int32 maxResults, 
            [in] IGeocoderParams * params, 
            [out] IObjectContainer ** addrs, 
            [out] String * result);

        GetFromLocationName(
            [in] const String& locationName, 
            [in] Double lowerLeftLatitude, 
            [in] Double lowerLeftLongitude, 
            [in] Double upperRightLatitude, 
            [in] Double upperRightLongitude, 
            [in] Int32 maxResults, 
            [in] IGeocoderParams * params, 
            [out] IObjectContainer ** addrs, 
            [out] String * result);

        AddTestProvider(
            [in] const String& name, 
            [in] Boolean requiresNetwork, 
            [in] Boolean requiresSatellite, 
            [in] Boolean requiresCell, 
            [in] Boolean hasMonetaryCost, 
            [in] Boolean supportsAltitude, 
            [in] Boolean supportsSpeed, 
            [in] Boolean supportsBearing, 
            [in] Int32 powerRequirement, 
            [in] Int32 accuracy);

        RemoveTestProvider(
            [in] const String& provider);

        SetTestProviderLocation(
            [in] const String& provider, 
            [in] ILocation * loc);

        ClearTestProviderLocation(
            [in] const String& provider);

        SetTestProviderEnabled(
            [in] const String& provider, 
            [in] Boolean enabled);

        ClearTestProviderEnabled(
            [in] const String& provider);

        SetTestProviderStatus(
            [in] const String& provider, 
            [in] Int32 status, 
            [in] IBundle * extras, 
            [in] Int64 updateTime);

        ClearTestProviderStatus(
            [in] const String& provider);

        SendNiResponse(
            [in] Int32 notifId, 
            [in] Int32 userResponse, 
            [out] Boolean * result);
    }

    interface ILocationProvider {
        RequiresNetwork(
            [out] Boolean * result);

        RequiresSatellite(
            [out] Boolean * result);

        RequiresCell(
            [out] Boolean * result);

        HasMonetaryCost(
            [out] Boolean * result);

        SupportsAltitude(
            [out] Boolean * result);

        SupportsSpeed(
            [out] Boolean * result);

        SupportsBearing(
            [out] Boolean * result);

        GetPowerRequirement(
            [out] Int32 * requirement);

        MeetsCriteria(
            [in] ICriteria * criteria, 
            [out] Boolean * result);

        GetAccuracy(
            [out] Int32 * accuracy);

        Enable();

        Disable();

        GetStatus(
            [out] IBundle ** extras, 
            [out] Int32 * status);

        GetStatusUpdateTime(
            [out] Int64 * time);

        GetInternalState(
            [out] String * state);

        EnableLocationTracking(
            [in] Boolean ifEnable);

        SetMinTime(
            [in] Int64 minTime, 
            [in] IWorkSource * ws);

        UpdateNetworkState(
            [in] Int32 state, 
            [in] INetworkInfo * info);

        UpdateLocation(
            [in] ILocation * location);

        SendExtraCommand(
            [in] const String& command, 
            [in] IBundle * extras, 
            [out] IBundle ** outExtrs, 
            [out] Boolean * result);

        AddListener(
            [in] Int32 uid);

        RemoveListener(
            [in] Int32 uid);
    }

    interface INetInitiatedListener {
        SendNiResponse(
            [in] Int32 notifId, 
            [in] Int32 userResponse, 
            [out] Boolean * result);
    }

    interface ILocalLocationListener {
        OnLocationChanged(
            [in] ILocation * location);

        OnStatusChanged(
            [in] const String& provider, 
            [in] Int32 status, 
            [in] IBundle * extras);

        OnProviderEnabled(
            [in] const String& provider);

        OnProviderDisabled(
            [in] const String& provider);
    }

    interface ILocalLocationProvider {
        GetName(
            [out] String * name);

        MeetsCriteria(
            [in] ICriteria * criteria, 
            [out] Boolean * result);

        RequiresNetwork(
            [out] Boolean * result);

        RequiresSatellite(
            [out] Boolean * result);

        RequiresCell(
            [out] Boolean * result);

        HasMonetaryCost(
            [out] Boolean * result);

        SupportsAltitude(
            [out] Boolean * result);

        SupportsSpeed(
            [out] Boolean * result);

        SupportsBearing(
            [out] Boolean * result);

        GetPowerRequirement(
            [out] Int32 * requirement);

        GetAccuracy(
            [out] Int32 * accuracy);
    }

    interface ILocalLocationManager {
        GetAllProviders(
            [out, callee] ArrayOf<String> * allProviders);

        GetProviders(
            [in] Boolean enabledOnly, 
            [out, callee] ArrayOf<String> * providers);

        GetProvider(
            [in] const String& name, 
            [out] ILocalLocationProvider ** provider);

        GetProvidersEx(
            [in] ICriteria * criteria, 
            [in] Boolean enabledOnly, 
            [out, callee] ArrayOf<String> * providers);

        GetBestProvider(
            [in] ICriteria * criteria, 
            [in] Boolean enabledOnly, 
            [out] String * provider);

        RequestLocationUpdates(
            [in] const String& provider, 
            [in] Int64 minTime, 
            [in] Float minDistance, 
            [in] ILocalLocationListener * listener);

        RequestLocationUpdatesEx(
            [in] const String& provider, 
            [in] Int64 minTime, 
            [in] Float minDistance, 
            [in] ILocalLocationListener * listener, 
            [in] IApartment * looper);

        RequestLocationUpdatesEx2(
            [in] Int64 minTime, 
            [in] Float minDistance, 
            [in] ICriteria * criteria, 
            [in] ILocalLocationListener * listener, 
            [in] IApartment * looper);

        RequestLocationUpdatesPI(
            [in] const String& provider, 
            [in] Int64 minTime, 
            [in] Float minDistance, 
            [in] IPendingIntent * intent);

        RequestLocationUpdatesPIEx(
            [in] Int64 minTime, 
            [in] Float minDistance, 
            [in] ICriteria * criteria, 
            [in] IPendingIntent * intent);

        RequestSingleUpdate(
            [in] const String& provider, 
            [in] ILocalLocationListener * listener, 
            [in] IApartment * looper);

        RequestSingleUpdateEx(
            [in] ICriteria * criteria, 
            [in] ILocalLocationListener * listener, 
            [in] IApartment * looper);

        RequestSingleUpdatePI(
            [in] const String& provider, 
            [in] IPendingIntent * intent);

        RequestSingleUpdatePIEx(
            [in] ICriteria * criteria, 
            [in] IPendingIntent * intent);

        RemoveUpdates(
            [in] ILocalLocationListener * listener);

        RemoveUpdatesPI(
            [in] IPendingIntent * intent);

        AddProximityAlert(
            [in] Double latitude, 
            [in] Double longitude, 
            [in] Float distance, 
            [in] Int64 expiration, 
            [in] IPendingIntent * intent);

        RemoveProximityAlert(
            [in] IPendingIntent * intent);

        IsProviderEnabled(
            [in] const String& provider, 
            [out] Boolean * isEnabled);

        GetLastKnownLocation(
            [in] const String& provider, 
            [out] ILocation ** location);

        AddTestProvider(
            [in] const String& name, 
            [in] Boolean requiresNetwork, 
            [in] Boolean requiresSatellite, 
            [in] Boolean requiresCell, 
            [in] Boolean hasMonetaryCost, 
            [in] Boolean supportsAltitude, 
            [in] Boolean supportsSpeed, 
            [in] Boolean supportsBearing, 
            [in] Int32 powerRequirement, 
            [in] Int32 accuracy);

        RemoveTestProvider(
            [in] const String& provider);

        SetTestProviderLocation(
            [in] const String& provider, 
            [in] ILocation * loc);

        ClearTestProviderLocation(
            [in] const String& provider);

        SetTestProviderEnabled(
            [in] const String& provider, 
            [in] Boolean enabled);

        ClearTestProviderEnabled(
            [in] const String& provider);

        SetTestProviderStatus(
            [in] const String& provider, 
            [in] Int32 status, 
            [in] IBundle * extras, 
            [in] Int64 updateTime);

        ClearTestProviderStatus(
            [in] const String& provider);

        AddGpsStatusListener(
            [in] ILocalGpsStatusListener * listener, 
            [out] Boolean * result);

        RemoveGpsStatusListener(
            [in] ILocalGpsStatusListener * listener);

        AddNmeaListener(
            [in] ILocalGpsStatusNmeaListener * listener, 
            [out] Boolean * result);

        RemoveNmeaListener(
            [in] ILocalGpsStatusNmeaListener * listener);

        GetGpsStatus(
            [in] IGpsStatus * inStatus, 
            [out] IGpsStatus ** outStatus);

        SendExtraCommand(
            [in] const String& provider, 
            [in] const String& command, 
            [in] IBundle * inExtras, 
            [out] IBundle ** outExtras, 
            [out] Boolean * result);

        SendNiResponse(
            [in] Int32 notifId, 
            [in] Int32 userResponse, 
            [out] Boolean * result);
    }

    interface IGeocoder {
        GetFromLocation(
            [in] Double latitude, 
            [in] Double longitude, 
            [in] Int32 maxResults, 
            [out] IObjectContainer ** addressContainer);

        GetFromLocationName(
            [in] const String& locationName, 
            [in] Int32 maxResults, 
            [out] IObjectContainer ** addressContainer);

        GetFromLocationNameEx(
            [in] const String& locationName, 
            [in] Int32 maxResults, 
            [in] Double lowerLeftLatitude, 
            [in] Double lowerLeftLongitude, 
            [in] Double upperRightLatitude, 
            [in] Double upperRightLongitude, 
            [out] IObjectContainer ** addressContainer);
    }

    interface IGpsSatellite {
        SetStatus(
            [in] IGpsSatellite * satellite);

        GetPrn(
            [out] Int32 * prn);

        GetSnr(
            [out] Int32 * snr);

        GetElevation(
            [out] Float * elevation);

        GetAzimuth(
            [out] Float * azimuth);

        HasEphemeris(
            [out] Boolean * hasEphemeris);

        HasAlmanac(
            [out] Boolean * hasAlmanac);

        UsedInFix(
            [out] Boolean * usedInFix);
    }

    interface IStatusBarView : IFrameLayout {
    }

    interface IFixedSizeDrawable : IDrawable {
        SetFixedBounds(
            [in] Int32 l, 
            [in] Int32 t, 
            [in] Int32 r, 
            [in] Int32 b);
    }

    interface IBrowserFrame : IHandler {
        LoadUrl(
            [in] CString url, 
            [in] IObjectStringMap * extraHeaders);

        PostUrl(
            [in] const String& url, 
            [in] ArrayOf<Byte> data);

        LoadData(
            [in] CString baseUrl, 
            [in] CString data, 
            [in] CString mimeType, 
            [in] CString encoding, 
            [in] CString historyUrl);

        GoBackOrForward(
            [in] Int32 steps);

        Destroy();

        HandleMessage(
            [in] IMessage * msg);

        ExternalRepresentation(
            [in] IMessage * callBack);

        DocumentAsText(
            [in] IMessage * callBack);

        HandleUrl(
            [out] Boolean * flag, 
            [in] CString url);

        AddJavascriptInterface(
            [in] IInterface * obj, 
            [in] CString interfaceName);

        NativeDestroyFrame();

        Reload(
            [in] Boolean allowStale);

        StringByEvaluatingJavaScriptFromString(
            [out] String * scriptString, 
            [in] CString script);

        CacheDisabled(
            [out] Boolean * flag);

        ClearCache();

        StopLoading();

        DocumentHasImages(
            [out] Boolean * flag);
    }

    interface IByteArrayBuilderChunk {
        ChunkRelease();
    }

    interface IByteArrayBuilder {
        Append(
            [in] ArrayOf<Byte> array, 
            [in] Int32 offset, 
            [in] Int32 length);

        GetFirstChunk(
            [out] IByteArrayBuilderChunk ** chunk);

        IsEmpty(
            [out] Boolean * flag);

        GetByteSize(
            [out] Int32 * size);

        Clear();
    }

    interface ICacheManagerCacheResult {
        GetHttpStatusCode(
            [out] Int32 * statusCode);

        GetContentLength(
            [out] Int64 * contentLength);

        GetLocalPath(
            [out] String * localPath);

        GetExpires(
            [out] Int64 * expires);

        GetExpiresString(
            [out] String * expires);

        GetLastModified(
            [out] String * lastModified);

        GetETag(
            [out] String * etag);

        GetMimeType(
            [out] String * mimeType);

        GetLocation(
            [out] String * location);

        GetEncoding(
            [out] String * encoding);

        GetContentDisposition(
            [out] String * contentDisposition);

        GetInputStream(
            [out] IInputStream ** inputStream);

        GetOutputStream(
            [out] IOutputStream ** outputStream);

        SetInputStream(
            [in] IInputStream * stream);

        SetEncoding(
            [in] CString encoding);
    }

    interface ICacheManager {
        Init(
            [in] IContext * context);

        GetCacheFileBaseDir(
            [out] IFile ** dir);

        CacheDisabled(
            [out] Boolean * disabled);

        StartCacheTransaction(
            [out] Boolean * flag);

        EndCacheTransaction(
            [out] Boolean * flag);

        GetCacheFile(
            [out] ICacheManagerCacheResult ** result, 
            [in] CString url, 
            [in] IObjectStringMap * headers);

        GetCacheFileEx(
            [out] ICacheManagerCacheResult ** result, 
            [in] CString url, 
            [in] Int64 postIdentifier, 
            [in] IObjectStringMap * headers);

        CreateCacheFile(
            [out] ICacheManagerCacheResult ** result, 
            [in] CString url, 
            [in] Int32 statusCode, 
            [in] IHeaders * headers, 
            [in] CString mimeType, 
            [in] Boolean forceCache);

        SaveCacheFile(
            [in] CString url, 
            [in] ICacheManagerCacheResult * cacheRet);
    }

    interface IWebSettings {
        SetNavDump(
            [in] Boolean enabled);

        GetNavDump(
            [out] Boolean * navDump);

        SetSupportZoom(
            [in] Boolean support);

        SupportZoom(
            [out] Boolean * supportZoom);

        SetBuiltInZoomControls(
            [in] Boolean enabled);

        GetBuiltInZoomControls(
            [out] Boolean * builtInZoomControls);

        SetAllowFileAccess(
            [in] Boolean allow);

        GetAllowFileAccess(
            [out] Boolean * allowFileAccess);

        SetAllowContentAccess(
            [in] Boolean allow);

        GetAllowContentAccess(
            [out] Boolean * allowContentAccess);

        SetLoadWithOverviewMode(
            [in] Boolean overview);

        GetLoadWithOverviewMode(
            [out] Boolean * loadWithOverviewMode);

        SetUseWebViewBackgroundForOverscrollBackground(
            [in] Boolean view);

        GetUseWebViewBackgroundForOverscrollBackground(
            [out] Boolean * useWebViewBackgroundOverscrollBackground);

        SetSaveFormData(
            [in] Boolean save);

        GetSaveFormData(
            [out] Boolean * saveFormData);

        SetSavePassword(
            [in] Boolean save);

        GetSavePassword(
            [out] Boolean * savePassword);

        SetTextSize(
            [in] Int32 t);

        GetTextSize(
            [out] Int32 * textSize);

        SetDefaultZoom(
            [in] Int32 zoom);

        GetDefaultZoom(
            [out] Int32 * defaultZoom);

        SetLightTouchEnabled(
            [in] Boolean enabled);

        GetLightTouchEnabled(
            [out] Boolean * ligthTouchEnabled);

        SetUseDoubleTree(
            [in] Boolean use);

        GetUseDoubleTree(
            [out] Boolean * useDoubleTree);

        SetUserAgent(
            [in] Int32 ua);

        GetUserAgent(
            [out] Int32 * userAgent);

        SetUseWideViewPort(
            [in] Boolean use);

        GetUseWideViewPort(
            [out] Boolean * useWideViewport);

        SetSupportMultipleWindows(
            [in] Boolean support);

        SupportMultipleWindows(
            [out] Boolean * supportMultipleWindows);

        SetLayoutAlgorithm(
            [in] Int32 l);

        GetLayoutAlgorithm(
            [out] Int32 * layoutAlgorithm);

        SetStandardFontFamily(
            [in] CString font);

        GetStandardFontFamily(
            [out] String * standardFontFamily);

        SetFixedFontFamily(
            [in] CString font);

        GetFixedFontFamily(
            [out] String * fixedFontFamily);

        SetSansSerifFontFamily(
            [in] CString font);

        GetSansSerifFontFamily(
            [out] String * sacsSerifFontFamily);

        SetSerifFontFamily(
            [in] CString font);

        GetSerifFontFamily(
            [out] String * serifFontFamily);

        SetCursiveFontFamily(
            [in] CString font);

        GetCursiveFontFamily(
            [out] String * cursiveFontFamily);

        SetFantasyFontFamily(
            [in] CString font);

        GetFantasyFontFamily(
            [out] String * fantasyFontFamily);

        SetMinimumFontSize(
            [in] Int32 size);

        GetMinimumFontSize(
            [out] Int32 * minimumFontSize);

        SetMinimumLogicalFontSize(
            [in] Int32 size);

        GetMinimumLogicalFontSize(
            [out] Int32 * size);

        SetDefaultFontSize(
            [in] Int32 size);

        GetDefaultFontSize(
            [out] Int32 * size);

        SetDefaultFixedFontSize(
            [in] Int32 size);

        GetDefaultFixedFontSize(
            [out] Int32 * size);

        SetPageCacheCapacity(
            [in] Int32 size);

        SetLoadsImagesAutomatically(
            [in] Boolean flag);

        GetLoadsImagesAutomatically(
            [out] Boolean * b);

        SetBlockNetworkImage(
            [in] Boolean flag);

        GetBlockNetworkImage(
            [out] Boolean * flag);

        SetBlockNetworkLoads(
            [in] Boolean flag);

        GetBlockNetworkLoads(
            [out] Boolean * flag);

        SetJavaScriptEnabled(
            [in] Boolean flag);

        SetPluginsEnabled(
            [in] Boolean flag);

        SetPluginState(
            [in] Int32 state);

        SetPluginsPath(
            [in] CString pluginsPath);

        SetDatabasePath(
            [in] CString databasePath);

        SetGeolocationDatabasePath(
            [in] CString databasePath);

        SetAppCacheEnabled(
            [in] Boolean flag);

        SetAppCachePath(
            [in] CString appCachePath);

        SetAppCacheMaxSize(
            [in] Int64 appCacheMaxSize);

        SetDatabaseEnabled(
            [in] Boolean flag);

        SetDomStorageEnabled(
            [in] Boolean flag);

        GetDomStorageEnabled();

        GetDatabasePath(
            [out] String * databasePath);

        GetDatabaseEnabled(
            [out] Boolean * flag);

        SetWorkersEnabled(
            [in] Boolean flag);

        SetGeolocationEnabled(
            [in] Boolean flag);

        GetJavaScriptEnabled(
            [out] Boolean * flag);

        GetPluginsEnabled(
            [out] Boolean * flag);

        GetPluginState(
            [out] Int32 * pluginState);

        GetPluginsPath(
            [out] String * pluginsPath);

        SetJavaScriptCanOpenWindowsAutomatically(
            [in] Boolean flag);

        GetJavaScriptCanOpenWindowsAutomatically(
            [out] Boolean * flag);

        SetDefaultTextEncodingName(
            [in] CString encoding);

        GetDefaultTextEncodingName(
            [out] String * TextEncodingName);

        SetUserAgentString(
            [in] CString ua);

        GetUserAgentString(
            [out] String * userAgent);

        SetNeedInitialFocus(
            [in] Boolean flag);

        SetRenderPriority(
            [in] Int32 priority);

        SetCacheMode(
            [in] Int32 mode);

        GetCacheMode(
            [out] Int32 * cacheMode);

        SetShrinksStandaloneImagesToFit(
            [in] Boolean shrink);

        GetDoubleTapToastCount(
            [out] Int32 * count);

        SetDoubleTapToastCount(
            [in] Int32 count);
    }

    interface IWebViewCore {
        PauseTimers();

        ResumeTimers();

        GetSettings(
            [out] IWebSettings ** webSettings);
    }

    interface IValueCallback {
        OnReceiveValue(
            [in] IInterface * value);
    }

    interface IWebView : IAbsoluteLayout {
        UpdateMultiTouchSupport(
            [in] IContext * context);

        SetHorizontalScrollbarOverlay(
            [in] Boolean overlay);

        SetVerticalScrollbarOverlay(
            [in] Boolean overlay);

        OverlayHorizontalScrollbar();

        OverlayVerticalScrollbar();

        GetCertificate();

        SetCertificate(
            [in] ISslCertificate * certificate);

        SavePassword(
            [in] CString host, 
            [in] CString username, 
            [in] CString password);

        SetHttpAuthUsernamePassword(
            [in] CString host, 
            [in] CString realm, 
            [in] CString username, 
            [in] CString password);

        GetHttpAuthUsernamePassword(
            [in] CString host, 
            [in] CString realm);

        Destroy();

        EnablePlatformNotifications();

        DisablePlatformNotifications();

        SetJsFlags(
            [in] CString flags);

        SetNetworkAvailable(
            [in] Boolean networkUp);

        SetNetworkType(
            [in] CString type, 
            [in] CString subtype);

        SaveState(
            [in] IBundle * outState);

        SavePicture(
            [in] IBundle * b, 
            [in] IFile * dest);

        RestorePicture(
            [in] IBundle * b, 
            [in] IFile * src);

        RestoreState(
            [in] IBundle * inState);

        LoadUrlEx(
            [in] CString url, 
            [in] IObjectStringMap * extraHeaders);

        LoadUrl(
            [in] CString url);

        PostUrl(
            [in] CString url, 
            [in] ArrayOf<Byte> postData);

        LoadData(
            [in] CString data, 
            [in] CString mimeType, 
            [in] CString encoding);

        LoadDataWithBaseURL(
            [in] CString baseUrl, 
            [in] CString data, 
            [in] CString mimeType, 
            [in] CString encoding, 
            [in] CString historyUrl);

        StopLoading();

        Reload();

        CanGoBack();

        GoBack();

        CanGoForward();

        GoForward();

        CanGoBackOrForward(
            [in] Int32 steps);

        GoBackOrForward(
            [in] Int32 steps);

        PageUp(
            [in] Boolean top);

        PageDown(
            [in] Boolean bottom);

        ClearView();

        CapturePicture();

        GetScale();

        SetInitialScale(
            [in] Int32 scaleInPercent);

        InvokeZoomPicker();

        GetHitTestResult();

        RequestFocusNodeHref(
            [in] IMessage * hrefMsg);

        RequestImageRef(
            [in] IMessage * msg);

        SetEmbeddedTitleBar(
            [in] IView * v);

        GetUrl();

        GetOriginalUrl();

        GetTitle();

        GetFavicon();

        GetTouchIconUrl();

        GetProgress();

        GetContentHeight();

        GetContentWidth();

        PauseTimers();

        ResumeTimers();

        OnPause();

        OnResume();

        IsPaused();

        FreeMemory();

        ClearCache(
            [in] Boolean includeDiskFiles);

        ClearFormData();

        ClearHistory();

        ClearSslPreferences();

        CopyBackForwardList();

        FindNext(
            [in] Boolean forward);

        FindAll(
            [in] CString find);

        SetFindIsUp(
            [in] Boolean isUp);

        FindIndex();

        FindAddress(
            [in] CString addr);

        FindAddressEx(
            [in] CString addr, 
            [in] Boolean caseInsensitive);

        ClearMatches();

        NotifyFindDialogDismissed();

        SetFindDialogHeight(
            [in] Int32 height);

        DocumentHasImages(
            [in] IMessage * response);

        SetWebViewClient(
            [in] IWebViewClient * client);

        GetWebViewClient();

        SetDownloadListener(
            [in] IDownloadListener * listener);

        SetWebChromeClient(
            [in] IWebChromeClient * client);

        GetWebChromeClient();

        SetWebBackForwardListClient(
            [in] IWebBackForwardListClient * client);

        GetWebBackForwardListClient();

        SetPictureListener(
            [in] IWebViewPictureListener * listener);

        ExternalRepresentation(
            [in] IMessage * callBack);

        DocumentAsText(
            [in] IMessage * callBack);

        AddJavascriptInterface(
            [in] IInterface * obj, 
            [in] CString interfaceName);

        GetSettings();

        AddPackageNames(
            [in] IObjectContainer * packageNames);

        AddPackageName(
            [in] CString packageName);

        RemovePackageName(
            [in] CString packageName);

        GetPluginList();

        RefreshPlugins(
            [in] Boolean reloadOpenPages);

        DumpDisplayTree();

        DumpDomTree(
            [in] Boolean toFile);

        DumpRenderTree(
            [in] Boolean toFile);

        DumpV8Counters();

        OnKeyMultiple(
            [in] Int32 keyCode, 
            [in] Int32 repeatCount, 
            [in] IKeyEvent * event);

        OnKeyDown(
            [in] Int32 keyCode, 
            [in] IKeyEvent * event);

        OnKeyUp(
            [in] Int32 keyCode, 
            [in] IKeyEvent * event);

        SetUpSelect();

        EmulateShiftHeld();

        SelectAll();

        SelectDialogIsUp();

        NotifySelectDialogDismissed();

        SelectionDone();

        CopySelection();

        GetSelection();

        OnChildViewAdded(
            [in] IView * parent, 
            [in] IView * child);

        OnChildViewRemoved(
            [in] IView * p, 
            [in] IView * child);

        OnGlobalFocusChanged(
            [in] IView * oldFocus, 
            [in] IView * newFocus);

        GetDragTracker();

        SetDragTracker(
            [in] IWebViewDragTracker * tracker);

        SetMapTrackballToArrowKeys(
            [in] Boolean setMap);

        FlingScroll(
            [in] Int32 vx, 
            [in] Int32 vy);

        GetZoomControls();

        GetZoomButtonsController();

        ZoomIn();

        ZoomOut();

        RequestChildRectangleOnScreen(
            [in] IView * child, 
            [in] IRect * rect, 
            [in] Boolean immediate);

        DebugDump();

        DrawPage(
            [in] ICanvas * canvas);

        SetTouchInterval(
            [in] Int32 interval);
    }

    interface IWebViewClient {
        ShouldOverrideUrlLoading(
            [out] Boolean * flag, 
            [in] IWebView * view, 
            [in] CString url);

        OnPageStarted(
            [in] IWebView * view, 
            [in] const String& url, 
            [in] IBitmap * favicon);

        OnPageFinished(
            [in] IWebView * view, 
            [in] CString url);

        OnLoadResource(
            [in] IWebView * view, 
            [in] CString url);

        OnTooManyRedirects(
            [in] IWebView * view, 
            [in] IMessage * cancelMsg, 
            [in] IMessage * continueMsg);

        OnReceivedError(
            [in] IWebView * view, 
            [in] Int32 errorCode, 
            [in] CString description, 
            [in] CString failingUrl);

        OnFormResubmission(
            [in] IWebView * view, 
            [in] IMessage * dontResend, 
            [in] IMessage * resend);

        DoUpdateVisitedHistory(
            [in] IWebView * view, 
            [in] CString url, 
            [in] Boolean isReload);

        OnReceivedSslError(
            [in] IWebView * view, 
            [in] ISslErrorHandler * handler, 
            [in] ISslError * error);

        OnReceivedHttpAuthRequest(
            [in] IWebView * view, 
            [in] IHttpAuthHandler * handler, 
            [in] CString host, 
            [in] CString realm);

        ShouldOverrideKeyEvent(
            [out] Boolean * flag, 
            [in] IWebView * view, 
            [in] IKeyEvent * event);

        OnUnhandledKeyEvent(
            [in] IWebView * view, 
            [in] IKeyEvent * event);

        OnScaleChanged(
            [in] IWebView * view, 
            [in] Float oldScale, 
            [in] Float newScale);
    }

    interface IDownloadListener {
        OnDownloadStart(
            [in] CString url, 
            [in] CString userAgent, 
            [in] CString contentDisposition, 
            [in] CString mimetype, 
            [in] Int64 contentLength);
    }

    interface IWebChromeClient {
        OnProgressChanged(
            [in] IWebView * view, 
            [in] Int32 newProgress);

        OnReceivedTitle(
            [in] IWebView * view, 
            [in] CString title);

        OnReceivedIcon(
            [in] IWebView * view, 
            [in] IBitmap * icon);

        OnReceivedTouchIconUrl(
            [in] IWebView * view, 
            [in] CString url, 
            [in] Boolean precomposed);

        OnShowCustomView(
            [in] IView * view, 
            [in] IWebChromeClientCustomViewCallback * callBack);

        OnHideCustomView();

        OnCreateWindow(
            [out] Boolean * flag, 
            [in] IWebView * view, 
            [in] Boolean dialog, 
            [in] Boolean userGesture, 
            [in] IMessage * resultMsg);

        OnRequestFocus(
            [in] IWebView * view);

        OnCloseWindow(
            [in] IWebView * window);

        OnJsAlert(
            [out] Boolean * flag, 
            [in] IWebView * view, 
            [in] CString url, 
            [in] CString message, 
            [in] IJsResult * result);

        OnJsConfirm(
            [out] Boolean * flag, 
            [in] IWebView * view, 
            [in] CString url, 
            [in] const String& message, 
            [in] IJsResult * result);

        OnJsPrompt(
            [out] Boolean * flag, 
            [in] IWebView * view, 
            [in] CString url, 
            [in] CString message, 
            [in] CString defaultValue, 
            [in] IJsPromptResult * result);

        OnJsBeforeUnload(
            [out] Boolean * flag, 
            [in] IWebView * view, 
            [in] CString url, 
            [in] CString message, 
            [in] IJsResult * result);

        OnExceededDatabaseQuota(
            [in] CString url, 
            [in] CString databaseIdentifier, 
            [in] Int64 currentQuota, 
            [in] Int64 estimatedSize, 
            [in] Int64 totalUsedQuota, 
            [in] IWebStorageQuotaUpdater * quotaUpdater);

        OnReachedMaxAppCacheSize(
            [in] Int64 spaceNeeded, 
            [in] Int64 totalUsedQuota, 
            [in] IWebStorageQuotaUpdater * quotaUpdater);

        OnGeolocationPermissionsShowPrompt(
            [in] CString origin, 
            [in] IGeolocationPermissionsCallback * callBack);

        OnGeolocationPermissionsHidePrompt();

        OnJsTimeout(
            [out] Boolean * flag);

        OnConsoleMessage(
            [in] CString message, 
            [in] Int32 lineNumber, 
            [in] CString sourceID);

        OnConsoleMessageEx(
            [out] Boolean * flag, 
            [in] IConsoleMessage * consoleMessage);

        GetDefaultVideoPoster(
            [out] IBitmap ** bitmap);

        GetVideoLoadingProgressView();

        GetVisitedHistory(
            [in] IValueCallback * callBack);

        OpenFileChooser(
            [in] IValueCallback * uploadFile);

        OnSelectionStart(
            [in] IWebView * view);

        OnSelectionDone(
            [in] IWebView * view);
    }

    interface IWebBackForwardListClient {
        OnNewHistoryItem(
            [in] IWebHistoryItem * item);

        OnIndexChanged(
            [in] IWebHistoryItem * item, 
            [in] Int32 index);
    }

    interface IWebViewTransport {
        SetWebView(
            [in] IWebView * webview);

        GetWebView();
    }

    interface IWebViewPictureListener {
        OnNewPicture(
            [in] IWebView * view, 
            [in] IPicture * picture);
    }

    interface IWebViewHitTestResult {
        GetType();

        GetExtra();
    }

    interface IWebViewDragTracker {
        OnStartDrag(
            [in] Float x, 
            [in] Float y);

        OnStretchChange(
            [in] Float sx, 
            [in] Float sy);

        OnStopDrag();

        OnBitmapChange(
            [in] IBitmap * bm);

        OnDraw(
            [in] ICanvas * canvas);
    }

    interface IWebStorageQuotaUpdater {
        UpdateQuota(
            [in] Int64 newQuota);
    }

    interface IGeolocationPermissionsCallback {
        Invoke(
            [in] CString origin, 
            [in] Boolean allow, 
            [in] Boolean remember);
    }

    interface IConsoleMessage {
        MessageLevel(
            [out] Int32 * messageLevel);

        Message(
            [out] String * message);

        SourceId(
            [out] String * sourceId);

        LineNumber(
            [out] Int32 * lineNumber);
    }

    interface IJsResult {
        Cancel();

        Confirm();
    }

    interface IJsPromptResult : IJsResult {
        ConfirmPrompt(
            [in] CString result);
    }

    interface IWebChromeClientCustomViewCallback {
        OnCustomViewHidden();
    }

    interface IWebStorage {
        CreateUIHandler();

        CreateHandler();

        GetOrigins(
            [in] IValueCallback * callBack);

        GetOriginsSync();

        GetUsageForOrigin(
            [in] CString origin, 
            [in] IValueCallback * callBack);

        GetQuotaForOrigin(
            [in] CString origin, 
            [in] IValueCallback * callBack);

        SetQuotaForOrigin(
            [in] CString origin, 
            [in] Int64 quota);

        DeleteOrigin(
            [in] CString origin);

        DeleteAllData();

        SetAppCacheMaximumSize(
            [in] Int64 size);

        GetInstance(
            [out] IWebStorage ** instance);

        Update();
    }

    interface IGeolocationPermissions {
        GetInstance(
            [out] IGeolocationPermissions ** instance);

        CreateUIHandler();

        CreateHandler();

        GetOrigins(
            [in] IValueCallback * callBack);

        GetAllowed(
            [in] CString origin, 
            [in] IValueCallback * callBack);

        Clear(
            [in] CString origin);

        Allow(
            [in] CString origin);

        ClearAll();
    }

    interface ISslErrorHandler : IHandler {
        HandleMessage(
            [in] IMessage * msg);

        Proceed();

        Cancel();
    }

    interface IWebHistoryItem {
        GetId(
            [out] Int32 * id);

        GetUrl(
            [out] CString * url);

        GetOriginalUrl(
            [out] String * originalUrl);

        GetTitle(
            [out] String * title);

        GetFavicon(
            [out] IBitmap ** favicon);

        GetTouchIconUrl(
            [out] String * touchIconUrl);

        GetCustomData(
            [out] IInterface ** customData);

        SetCustomData(
            [in] IInterface * data);
    }

    interface IWebBackForwardList {
        GetCurrentItem(
            [out] IWebHistoryItem ** item);

        GetCurrentIndex(
            [out] Int32 * index);

        GetItemAtIndex(
            [out] IWebHistoryItem ** item, 
            [in] Int32 index);

        GetSize(
            [out] Int32 * size);
    }

    interface ICallbackProxy : IHandler {
        SetWebViewClient(
            [in] IWebViewClient * client);

        GetWebViewClient(
            [out] IWebViewClient ** client);

        SetWebChromeClient(
            [in] IWebChromeClient * client);

        GetWebChromeClient(
            [out] IWebChromeClient ** client);

        SetDownloadListener(
            [in] IDownloadListener * client);

        GetBackForwardList(
            [out] IWebBackForwardList ** list);

        UiOverrideUrlLoading(
            [out] Boolean * flag, 
            [in] CString overrideUrl);

        UiOverrideKeyEvent(
            [out] Boolean * flag, 
            [in] IKeyEvent * event);

        HandleMessage(
            [in] IMessage * msg);

        GetProgress(
            [out] Int32 * progress);

        OnPageStarted(
            [in] CString url, 
            [in] IBitmap * favicon);

        OnPageFinished(
            [in] CString url);

        OnTooManyRedirects(
            [in] IMessage * cancelMsg, 
            [in] IMessage * continueMsg);

        OnReceivedError(
            [in] Int32 errorCode, 
            [in] CString description, 
            [in] CString failingUrl);

        OnFormResubmission(
            [in] IMessage * dontResend, 
            [in] IMessage * resend);

        ShouldOverrideUrlLoading(
            [out] Boolean * flag, 
            [in] CString url);

        OnReceivedHttpAuthRequest(
            [in] IHttpAuthHandler * handler, 
            [in] CString hostName, 
            [in] CString realmName);

        OnReceivedSslError(
            [in] ISslErrorHandler * handler, 
            [in] ISslError * error);

        OnReceivedCertificate(
            [in] ISslCertificate * certificate);

        DoUpdateVisitedHistory(
            [in] CString url, 
            [in] Boolean isReload);

        OnLoadResource(
            [in] CString url);

        OnUnhandledKeyEvent(
            [in] IKeyEvent * event);

        OnScaleChanged(
            [in] Float oldScale, 
            [in] Float newScale);

        OnDownloadStart(
            [out] Boolean * flag, 
            [in] CString url, 
            [in] CString userAgent, 
            [in] CString contentDisposition, 
            [in] CString mimetype, 
            [in] Int64 contentLength);

        OnSavePassword(
            [out] Boolean * flag, 
            [in] CString schemePlusHost, 
            [in] CString username, 
            [in] const String& password, 
            [in] IMessage * resumeMsg);

        OnReceivedHttpAuthCredentials(
            [in] CString host, 
            [in] CString realm, 
            [in] CString username, 
            [in] CString password);

        OnProgressChanged(
            [in] Int32 newProgress);

        CreateWindow(
            [out] IBrowserFrame ** browseFrame, 
            [in] Boolean dialog, 
            [in] Boolean userGesture);

        OnRequestFocus();

        OnCloseWindow(
            [in] IWebView * window);

        OnReceivedIcon(
            [in] IBitmap * icon);

        OnReceivedTitle(
            [in] CString title);

        OnJsAlert(
            [in] CString url, 
            [in] CString message);

        OnJsConfirm(
            [out] Boolean * flag, 
            [in] CString url, 
            [in] CString message);

        OnJsPrompt(
            [out] String * result, 
            [in] CString url, 
            [in] CString message, 
            [in] CString defaultValue);

        OnJsBeforeUnload(
            [out] Boolean * result, 
            [in] CString url, 
            [in] CString message);

        OnExceededDatabaseQuota(
            [in] CString url, 
            [in] CString databaseIdentifier, 
            [in] Int64 currentQuota, 
            [in] Int64 estimatedSize, 
            [in] Int64 totalUsedQuota, 
            [in] IWebStorageQuotaUpdater * quotaUpdater);

        OnReachedMaxAppCacheSize(
            [in] Int64 spaceNeeded, 
            [in] Int64 totalUsedQuota, 
            [in] IWebStorageQuotaUpdater * quotaUpdater);

        OnGeolocationPermissionsShowPrompt(
            [in] CString origin, 
            [in] IGeolocationPermissionsCallback * callBack);

        OnGeolocationPermissionsHidePrompt();

        AddMessageToConsole(
            [in] CString message, 
            [in] Int32 lineNumber, 
            [in] CString sourceID, 
            [in] Int32 msgLevel);

        OnJsTimeout(
            [out] Boolean * flag);

        GetVisitedHistory(
            [in] IValueCallback * callBack);

        OpenFileChooser();

        OnNewHistoryItem(
            [in] IWebHistoryItem * item);

        OnIndexChanged(
            [in] IWebHistoryItem * item, 
            [in] Int32 index);
    }

    interface ICookieManager {
        GetInstance(
            [out] ICookieManager ** instance);

        SetAcceptCookie(
            [in] Boolean accept);

        AcceptCookie(
            [out] Boolean * acceptCookie);

        SetCookie(
            [in] CString url, 
            [in] CString value);

        SetCookieEx(
            [in] IWebAddress * uri, 
            [in] CString value);

        GetCookie(
            [out] String * cookie, 
            [in] CString url);

        GetCookieEx(
            [out] String * cookie, 
            [in] IWebAddress * uri);

        RemoveSessionCookie();

        RemoveAllCookie();

        HasCookies(
            [out] Boolean * flag);

        RemoveExpiredCookie();
    }

    interface ICookieSyncManager {
        GetInstance(
            [out] ICookieSyncManager ** cookieSyncManager);

        CreateInstance(
            [out] ICookieSyncManager ** cookieSyncManager, 
            [in] IContext * context);
    }

    interface IDateSorter {
        GetIndex(
            [out] Int32 * lastDay, 
            [in] Int64 time);

        GetLabel(
            [out] String * label, 
            [in] Int32 index);

        GetBoundary(
            [out] Int64 * boundary, 
            [in] Int32 index);
    }

    interface IDebugFlags {
    }

    interface IPluginPreferencesClickHandler {
        HandleClickEvent(
            [in] IContext * context);
    }

    interface IPlugin {
        ToString(
            [out] String * name);

        GetName(
            [out] String * name);

        GetPath(
            [out] String * path);

        getFileName(
            [out] String * fileName);

        GetDescription(
            [out] String * description);

        SetName(
            [in] CString name);

        SetPath(
            [in] CString path);

        SetFileName(
            [in] CString fileName);

        SetDescription(
            [in] CString description);

        SetClickHandler(
            [in] IPluginPreferencesClickHandler * handler);

        DispatchClickEvent(
            [in] IContext * context);
    }

    interface IPluginData {
        GetInputStream(
            [out] IInputStream ** stream);

        GetContentLength(
            [out] Int64 * length);

        GetHeaders(
            [out] IObjectStringMap ** headers);

        GetStatusCode(
            [out] Int32 * statusCode);
    }

    interface IPluginList {
        GetList(
            [out] IObjectContainer ** list);

        AddPlugin(
            [in] IPlugin * plugin);

        RemovePlugin(
            [in] IPlugin * plugin);

        Clear();

        PluginClicked(
            [in] IContext * context, 
            [in] Int32 position);
    }

    interface IPluginStub {
        GetEmbeddedView(
            [out] IView ** veiw, 
            [in] Int32 NPP, 
            [in] IContext * context);

        GetFullScreenView(
            [out] IView ** veiw, 
            [in] Int32 NPP, 
            [in] IContext * context);
    }

    interface IURLUtil {
        GuessUrl(
            [out] String * outUrl, 
            [in] CString inUrl);

        ComposeSearchUrl(
            [out] String * url, 
            [in] CString inQuery, 
            [in] CString strTemplate, 
            [in] CString queryPlaceHolder);

        Decode(
            [out] ArrayOf<Byte> outUrl, 
            [in] ArrayOf<Byte> url);

        IsAssetUrl(
            [out] Boolean * flag, 
            [in] CString url);

        IsResourceUrl(
            [out] Boolean * flag, 
            [in] CString url);

        IsCookielessProxyUrl(
            [out] Boolean * flag, 
            [in] CString url);

        IsFileUrl(
            [out] Boolean * flag, 
            [in] CString url);

        IsAboutUrl(
            [out] Boolean * flag, 
            [in] CString url);

        IsDataUrl(
            [out] Boolean * flag, 
            [in] CString url);

        IsJavaScriptUrl(
            [out] Boolean * flag, 
            [in] CString url);

        IsHttpUrl(
            [out] Boolean * flag, 
            [in] CString url);

        IsHttpsUrl(
            [out] Boolean * flag, 
            [in] CString url);

        IsNetworkUrl(
            [out] Boolean * flag, 
            [in] const String& url);

        IsContentUrl(
            [out] Boolean * flag, 
            [in] CString url);

        IsValidUrl(
            [out] Boolean * flag, 
            [in] CString url);

        StripAnchor(
            [out] String * outUrl, 
            [in] const String& url);

        GuessFileName(
            [out] String * name, 
            [in] CString url, 
            [in] CString contentDisposition, 
            [in] CString mimeType);
    }

    interface IUrlInterceptHandler {
        Service(
            [out] ICacheManagerCacheResult ** result, 
            [in] CString url, 
            [in] IObjectStringMap * headers);

        GetPluginData(
            [out] IPluginData ** data, 
            [in] CString url, 
            [in] IObjectStringMap * headers);
    }

    interface IUrlInterceptRegistry {
        SetUrlInterceptDisabled(
            [in] Boolean disabled);

        UrlInterceptDisabled(
            [out] Boolean * flag);

        RegisterHandler(
            [out] Boolean * flag, 
            [in] IUrlInterceptHandler * handler);

        UnregisterHandler(
            [out] Boolean * flag, 
            [in] IUrlInterceptHandler * handler);

        GetSurrogate(
            [out] ICacheManagerCacheResult ** result, 
            [in] CString url, 
            [in] IObjectStringMap * headers);

        GetPluginData(
            [out] IPluginData ** data, 
            [in] CString url, 
            [in] IObjectStringMap * headers);
    }

    interface IWebViewDatabase {
        GetInstance(
            [out] IWebViewDatabase ** instance, 
            [in] IContext * context);

        HasUsernamePassword(
            [out] Boolean * flag);

        ClearUsernamePassword();

        HasHttpAuthUsernamePassword(
            [out] Boolean * flag);

        ClearHttpAuthUsernamePassword();

        HasFormData(
            [out] Boolean * flag);

        ClearFormData();
    }

    interface IWebIconDatabaseIconListener {
        OnReceivedIcon(
            [in] CString url, 
            [in] IBitmap * icon);
    }

    interface IWebIconDatabase {
        Open(
            [in] CString path);

        Close();

        RemoveAllIcons();

        RequestIconForPageUrl(
            [in] CString url, 
            [in] IWebIconDatabaseIconListener * listener);

        BulkRequestIconForPageUrl(
            [in] IContentResolver * cr, 
            [in] CString where, 
            [in] IWebIconDatabaseIconListener * listener);

        RetainIconForPageUrl(
            [in] CString url);

        ReleaseIconForPageUrl(
            [in] CString url);

        GetInstance(
            [out] IWebIconDatabase ** instance);
    }

    interface IPluginManager {
        GetInstance(
            [out] IPluginManager ** instance, 
            [in] IContext * context);

        RefreshPlugins(
            [in] Boolean reloadOpenPages);

        GetPluginDirectories(
            [out] ArrayOf<String> pluginDirectories);
    }

    interface IMockGeolocation {
        SetPosition(
            [in] Double latitude, 
            [in] Double longitude, 
            [in] Double accuracy);

        SetError(
            [in] Int32 code, 
            [in] CString message);

        GetInstance(
            [out] IMockGeolocation ** instance);
    }

    interface IMimeTypeMap {
        GetFileExtensionFromUrl(
            [out] String * outUrl, 
            [in] CString inUrl);

        HasMimeType(
            [out] Boolean * flag, 
            [in] CString mimeType);

        GetMimeTypeFromExtension(
            [out] String * mimeType, 
            [in] CString extension);

        HasExtension(
            [out] Boolean * flag, 
            [in] CString extension);

        GetExtensionFromMimeType(
            [out] String * extensionFrom, 
            [in] CString mimeType);

        GetSingleton(
            [out] IMimeTypeMap ** instance);
    }

    [

    ]
    class CParcelableObjectContainer {
        interface IObjectContainer;
        interface IParcelable;
    }

    [

    ]
    class CParcelableObjectStringMap {
        interface IObjectStringMap;
        interface IParcelable;
    }

    [

    ]
    class CDisplayMetrics {
        interface IDisplayMetrics;
    }

    [
        singleton
    ]
    class CDisplayMetricsHelper {
        interface IDisplayMetricsHelper;
    }

    [

    ]
    class CTypedValue {
        interface ITypedValue;
    }

    [
        singleton
    ]
    class CTypedValueHelper {
        interface ITypedValueHelper;
    }

    [

    ]
    class CObjectIntegerMap {
        interface IObjectIntegerMap;
    }

    [

    ]
    class CApartment {
        interface IApartment;
    }

    [
        singleton
    ]
    class CApartmentHelper {
        interface IApartmentHelper;
    }

    [

    ]
    class CClassLoader {
        interface IClassLoader;
    }

    [

    ]
    class CParcelFileDescriptor {
        interface IParcelFileDescriptor;
        interface IParcelable;
    }

    [
        singleton
    ]
    class CParcelFileDescriptorHelper {
        interface IParcelFileDescriptorHelper;
    }

    [

    ]
    class CPatternMatcher {
        interface IParcelable;
        interface IPatternMatcher;
    }

    [

    ]
    class CBundle {
        interface IBundle;
        interface IParcelable;
    }

    [
        singleton
    ]
    class CServiceManager {
        interface IServiceManager;
    }

    [

    ]
    class CVibrator {
        interface IVibrator;
    }

    [

    ]
    class CWorkSource {
        interface IWorkSource;
        interface IParcelable;
    }

    [

    ]
    class CResultReceiver {
        interface IResultReceiver;
        interface IParcelable;
    }

    [

    ]
    class CStringUri {
        interface IUri;
    }

    [

    ]
    class CCredentials {
        interface ICredentials;
    }

    [

    ]
    class CLocalSocketAddress {
        interface ILocalSocketAddress;
    }

    [

    ]
    class CLocalSocket {
        interface ILocalSocket;
    }

    [

    ]
    class CNetworkInfo {
        interface INetworkInfo;
        interface IParcelable;
    }

    [
        singleton
    ]
    class CConnectivityManagerHelper {
        interface ILocalConnectivityManagerHelper;
    }

    [

    ]
    class CConnectivityManager {
        interface ILocalConnectivityManager;
    }

    [

    ]
    class CSQLiteQueryBuilder {
        interface ISQLiteQueryBuilder;
    }

    [

    ]
    class CCharArrayBuffer {
        interface ICharArrayBuffer;
    }

    [

    ]
    class CDataSetObservable {
        interface IDataSetObservable;
    }

    [

    ]
    class CContentObservable {
        interface IContentObservable;
    }

    [

    ]
    class CCursorWrapper {
        interface ICursorWrapper;
    }

    [

    ]
    class CCursorWindow {
        interface ICursorWindow;
        interface IParcelable;
    }

    [

    ]
    class CCursorJoiner {
        interface ICursorJoiner;
    }

    [

    ]
    class CMergeCursor {
        interface IMergeCursor;
    }

    [

    ]
    class CMatrixCursor {
        interface IMatrixCursor;
    }

    [

    ]
    class CBulkCursorToCursorAdaptor {
        interface IBulkCursorToCursorAdaptor;
    }

    [

    ]
    class CCursorToBulkCursorAdaptor {
        interface ICursorToBulkCursorAdaptor;
    }

    [

    ]
    class CSQLiteCursor {
        interface ISQLiteCursor;
    }

    [

    ]
    class CCursorWrapperInner {
        interface ICursor;
    }

    [

    ]
    class CContentValues {
        interface IContentValues;
    }

    [

    ]
    class CApplicationContentResolver {
        interface IContentResolver;
    }

    [

    ]
    class CPathPermission {
        interface IPathPermission;
        interface IParcelable;
    }

    [

    ]
    class CPermissionInfo {
        interface IPermissionInfo;
        interface IParcelable;
    }

    [

    ]
    class CPermissionGroupInfo {
        interface IPermissionGroupInfo;
        interface IParcelable;
    }

    [

    ]
    class CIntentSender {
        interface IParcelable;
    }

    [

    ]
    class CColorStateList {
        interface IColorStateList;
    }

    [

    ]
    class CTheme {
        interface ITheme;
    }

    [

    ]
    class CResources {
        interface IResources;
    }

    [
        singleton
    ]
    class CResourcesFactory {
        interface IResourcesFactory;
    }

    [

    ]
    class CCompatibilityInfo {
        interface ICompatibilityInfo;
    }

    [
        singleton
    ]
    class CCompatibilityInfoHelper {
        interface ICompatibilityInfoHelper;
    }

    [

    ]
    class CAssetFileDescriptor {
        interface IAssetFileDescriptor;
        interface IParcelable;
    }

    [

    ]
    class CAssetManager {
        interface IAssetManager;
    }

    [

    ]
    class CTypedArray {
        interface ITypedArray;
    }

    [

    ]
    class CComponentName {
        interface IComponentName;
        interface IParcelable;
    }

    [
        singleton
    ]
    class CComponentNameHelper {
        interface IComponentNameHelper;
    }

    [

    ]
    class CIntentFilterComparison {
        interface IIntentFilterComparison;
    }

    [

    ]
    class CIntent {
        interface IIntent;
        interface IParcelable;
    }

    [

    ]
    class CAuthorityEntry {
        interface IAuthorityEntry;
        interface IParcelable;
    }

    [

    ]
    class CIntentFilter {
        interface IIntentFilter;
        interface IParcelable;
    }

    [

    ]
    class CActivityInfo {
        interface IActivityInfo;
        interface IParcelable;
    }

    [

    ]
    class CServiceInfo {
        interface IServiceInfo;
        interface IParcelable;
    }

    [

    ]
    class CContentProviderInfo {
        interface IContentProviderInfo;
        interface IParcelable;
    }

    [

    ]
    class CAuthorInfo {
        interface IAuthorInfo;
    }

    [

    ]
    class CResolveInfo {
        interface IResolveInfo;
        interface IParcelable;
    }

    [

    ]
    class CInstrumentationInfo {
        interface IInstrumentationInfo;
        interface IParcelable;
    }

    [

    ]
    class CApplicationInfo {
        interface IApplicationInfo;
        interface IParcelable;
    }

    [

    ]
    class CCapsuleInfo {
        interface ICapsuleInfo;
        interface IParcelable;
    }

    [

    ]
    class CConfiguration {
        interface IConfiguration;
        interface IParcelable;
    }

    [

    ]
    class CConfigurationInfo {
        interface IConfigurationInfo;
        interface IParcelable;
    }

    [

    ]
    class CFeatureInfo {
        interface IFeatureInfo;
        interface IParcelable;
    }

    [

    ]
    class CParceledListSlice {
        interface IParceledListSlice;
        interface IParcelable;
    }

    [

    ]
    class CCapsuleStats {
        interface ICapsuleStats;
        interface IParcelable;
    }

    [

    ]
    class CCapsuleInfoLite {
        interface ICapsuleInfoLite;
        interface IParcelable;
    }

    [

    ]
    class CContextWrapper {
        interface IContextWrapper;
    }

    [

    ]
    class CContextThemeWrapper {
        interface IContextThemeWrapper;
    }

    [

    ]
    class CSignature {
        interface ISignature;
        interface IParcelable;
    }

    [

    ]
    class CPoint {
        interface IPoint;
    }

    [

    ]
    class CRect {
        interface IRect;
        interface IParcelable;
    }

    [

    ]
    class CRegion {
        interface IRegion;
        interface IParcelable;
    }

    [

    ]
    class CRectF {
        interface IRectF;
        interface IParcelable;
    }

    [

    ]
    class CPaintFontMetrics {
        interface IPaintFontMetrics;
    }

    [

    ]
    class CPaintFontMetricsInt {
        interface IPaintFontMetricsInt;
    }

    [

    ]
    class CPaint {
        interface IPaint;
    }

    [

    ]
    class CMatrix {
        interface IMatrix;
    }

    [

    ]
    class CBitmap {
        interface IBitmap;
        interface IParcelable;
    }

    [

    ]
    class CBitmapFactoryOptions {
        interface IBitmapFactoryOptions;
    }

    [
        singleton
    ]
    class CBitmapFactory {
        interface IBitmapFactory;
    }

    [

    ]
    class CLinearGradient {
        interface IShader;
    }

    [

    ]
    class CRadialGradient {
        interface IShader;
    }

    [

    ]
    class CSweepGradient {
        interface IShader;
    }

    [

    ]
    class CCanvas {
        interface ICanvas;
    }

    [

    ]
    class CPorterDuffColorFilter {
        interface IColorFilter;
    }

    [

    ]
    class CMovie {
        interface IMovie;
    }

    [

    ]
    class CBitmapDrawable {
        interface IBitmapDrawable;
    }

    [

    ]
    class CNinePatchDrawable {
        interface INinePatchDrawable;
    }

    [

    ]
    class CColorDrawable {
        interface IColorDrawable;
    }

    [

    ]
    class CStateListDrawable {
        interface IStateListDrawable;
        interface IDrawableCallback;
    }

    [

    ]
    class CAnimatedRotateDrawable {
        interface IAnimatedRotateDrawable;
        interface IDrawableCallback;
        interface IRunnable;
        interface IAnimatable;
    }

    [

    ]
    class CLayerDrawable {
        interface ILayerDrawable;
        interface IDrawableCallback;
    }

    [

    ]
    class CGradientDrawable {
        interface IGradientDrawable;
    }

    [

    ]
    class CClipDrawable {
        interface IClipDrawable;
        interface IDrawableCallback;
    }

    [

    ]
    class CAnimationDrawable {
        interface IAnimationDrawable;
        interface IDrawableCallback;
        interface IRunnable;
        interface IAnimatable;
    }

    [

    ]
    class CShapeDrawable {
        interface IShapeDrawable;
    }

    [

    ]
    class CRotateDrawable {
        interface IRotateDrawable;
        interface IDrawableCallback;
    }

    [

    ]
    class CInsetDrawable {
        interface IInsetDrawable;
        interface IDrawableCallback;
    }

    [

    ]
    class CScaleDrawable {
        interface IScaleDrawable;
        interface IDrawableCallback;
    }

    [

    ]
    class CTransitionDrawable {
        interface ITransitionDrawable;
        interface IDrawableCallback;
    }

    [

    ]
    class CLevelListDrawable {
        interface ILevelListDrawable;
        interface IDrawableCallback;
    }

    [

    ]
    class CPaintDrawable {
        interface IPaintDrawable;
    }

    [

    ]
    class CPictureDrawable {
        interface IPictureDrawable;
    }

    [

    ]
    class CNinePatch {
        interface INinePatch;
    }

    [

    ]
    class CPorterDuffXfermode {
        interface IXfermode;
    }

    [

    ]
    class CPath {
        interface IPath;
    }

    [

    ]
    class CBitmapShader {
        interface IShader;
    }

    [

    ]
    class CTypeface {
        interface ITypeface;
    }

    [
        singleton
    ]
    class CTypefaceFactory {
        interface ITypefaceFactory;
    }

    [

    ]
    class CDashPathEffect {
        interface IDashPathEffect;
    }

    [

    ]
    class CArcShape {
        interface IShape;
    }

    [

    ]
    class COvalShape {
        interface IShape;
    }

    [

    ]
    class CPathShape {
        interface IShape;
    }

    [

    ]
    class CRectShape {
        interface IShape;
    }

    [

    ]
    class CRoundRectShape {
        interface IShape;
    }

    [

    ]
    class CPicture {
        interface IPicture;
    }

    [

    ]
    class CSurface {
        interface ISurface;
        interface IParcelable;
    }

    [
        singleton
    ]
    class CSurfaceHelper {
        interface ISurfaceHelper;
    }

    [

    ]
    class CSurfaceSession {
        interface ISurfaceSession;
    }

    [

    ]
    class CViewGroupLayoutParams {
        interface IViewGroupLayoutParams;
    }

    [

    ]
    class CViewGroupMarginLayoutParams {
        interface IViewGroupMarginLayoutParams;
    }

    [

    ]
    class CWindowManagerLayoutParams {
        interface IWindowManagerLayoutParams;
        interface IParcelable;
    }

    [
        singleton
    ]
    class CWindowManagerLayoutParamsHelper {
        interface IWindowManagerLayoutParamsHelper;
    }

    [

    ]
    class CDisplay {
        interface IDisplay;
    }

    [
        singleton
    ]
    class CWindowManagerImpl {
        interface IWindowManager;
    }

    [
        singleton
    ]
    class CGravity {
        interface IGravity;
    }

    [

    ]
    class CViewRootW {
        interface IInnerWindow;
    }

    [

    ]
    class CDispatcherState {
        interface IDispatcherState;
    }

    [

    ]
    class CKeyEvent {
        interface IKeyEvent;
        interface IParcelable;
    }

    [

    ]
    class CMotionEvent {
        interface IMotionEvent;
        interface IParcelable;
    }

    [
        singleton
    ]
    class CMotionEventHelper {
        interface IMotionEventHelper;
    }

    [

    ]
    class CExtractedText {
        interface IExtractedText;
        interface IParcelable;
    }

    [

    ]
    class CExtractedTextRequest {
        interface IExtractedTextRequest;
        interface IParcelable;
    }

    [

    ]
    class CCompletionInfo {
        interface IEditorInfo;
        interface IParcelable;
    }

    [

    ]
    class CEditorInfo {
        interface IEditorInfo;
        interface IParcelable;
    }

    [

    ]
    class CLocalInputMethodManager {
        interface ILocalInputMethodManager;
    }

    [

    ]
    class CBaseInputConnection {
        interface IInputConnection;
    }

    [

    ]
    class CInputBindResult {
        interface IInputBindResult;
        interface IParcelable;
    }

    [

    ]
    class CInputBinding {
        interface IInputBinding;
        interface IParcelable;
    }

    [

    ]
    class CInputConnectionWrapper {
        interface IInputConnection;
    }

    [

    ]
    class CInputMethodInfo {
        interface IInputMethodInfo;
        interface IParcelable;
    }

    [

    ]
    class CInputChannel {
        interface IInputChannel;
        interface IParcelable;
    }

    [
        singleton
    ]
    class CInputChannelHelper {
        interface IInputChannelHelper;
    }

    [

    ]
    class CInputDevice {
        interface IInputDevice;
        interface IParcelable;
    }

    [

    ]
    class CInputMethodCallback {
        interface IInputMethodCallbackStub;
    }

    [

    ]
    class CTouchDelegate {
        interface ITouchDelegate;
    }

    [

    ]
    class CViewBaseSavedState {
        interface IViewBaseSavedState;
        interface IParcelable;
    }

    [

    ]
    class CAccelerateDecelerateInterpolator {
        interface IInterpolator;
    }

    [

    ]
    class CAccelerateInterpolator {
        interface IInterpolator;
    }

    [

    ]
    class CAnticipateInterpolator {
        interface IInterpolator;
    }

    [

    ]
    class CAnticipateOvershootInterpolator {
        interface IInterpolator;
    }

    [

    ]
    class CBounceInterpolator {
        interface IInterpolator;
    }

    [

    ]
    class CCycleInterpolator {
        interface IInterpolator;
    }

    [

    ]
    class CDecelerateInterpolator {
        interface IInterpolator;
    }

    [

    ]
    class CLinearInterpolator {
        interface IInterpolator;
    }

    [

    ]
    class COvershootInterpolator {
        interface IInterpolator;
    }

    [

    ]
    class CTransformation {
        interface ITransformation;
    }

    [

    ]
    class CAnimationSet {
        interface IAnimationSet;
    }

    [

    ]
    class CAlphaAnimation {
        interface IAnimation;
    }

    [

    ]
    class CRotateAnimation {
        interface IAnimation;
    }

    [

    ]
    class CScaleAnimation {
        interface IAnimation;
    }

    [

    ]
    class CTranslateAnimation {
        interface IAnimation;
    }

    [

    ]
    class CLayoutAnimationController {
        interface ILayoutAnimationController;
    }

    [

    ]
    class CGridLayoutAnimationController {
        interface IGridLayoutAnimationController;
    }

    [
        singleton
    ]
    class CAnimationUtils {
        interface IAnimationUtils;
    }

    [

    ]
    class CMenuInflater {
        interface IMenuInflater;
    }

    [

    ]
    class CSurfaceView {
        interface ISurfaceView;
    }

    [

    ]
    class CSurfaceViewWindow {
        interface IInnerWindow;
    }

    [

    ]
    class CContentProviderHolder {
        interface IContentProviderHolder;
        interface IParcelable;
    }

    [

    ]
    class CActivityResult {
        interface IActivityResult;
    }

    [

    ]
    class CDefaultInstrumentation {
        interface IInstrumentation;
    }

    [

    ]
    class CInnerConnection {
        interface IServiceConnectionInner;
    }

    [

    ]
    class CApplicationApartment {
        interface IApplicationApartment;
    }

    [

    ]
    class CContextImpl {
        interface IContext;
    }

    [

    ]
    class CApplication {
        interface IApplication;
    }

    [

    ]
    class CResultInfo {
        interface IResultInfo;
        interface IParcelable;
    }

    [

    ]
    class CNotification {
        interface INotification;
        interface IParcelable;
    }

    [

    ]
    class CPendingIntent {
        interface IPendingIntent;
        interface IParcelable;
    }

    [

    ]
    class CCrashInfo {
        interface IParcelable;
    }

    [

    ]
    class CApplicationErrorReport {
        interface IParcelable;
    }

    [

    ]
    class CWaitResult {
        interface IWaitResult;
        interface IParcelable;
    }

    [

    ]
    class CRunningAppProcessInfo {
        interface IRunningAppProcessInfo;
        interface IParcelable;
    }

    [

    ]
    class CProcessErrorStateInfo {
        interface IParcelable;
    }

    [

    ]
    class CRunningServiceInfo {
        interface IParcelable;
    }

    [

    ]
    class CDialog {
        interface IDialog;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
    }

    [

    ]
    class CAlertDialog {
        interface IAlertDialog;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
    }

    [

    ]
    class CAlertDialogBuilder {
        interface IAlertDialogBuilder;
    }

    [

    ]
    class CTextPaint {
        interface ITextPaint;
    }

    [

    ]
    class CBoringLayoutMetrics {
        interface IBoringLayoutMetrics;
    }

    [

    ]
    class CBoringLayout {
        interface IBoringLayout;
        interface IEllipsizeCallback;
    }

    [

    ]
    class CStaticLayout {
        interface IStaticLayout;
    }

    [

    ]
    class CDirections {
        interface IDirections;
    }

    [

    ]
    class CSpannableString {
        interface ISpannable;
    }

    [
        singleton
    ]
    class CSpannableFactory {
        interface ISpannableFactory;
    }

    [

    ]
    class CDynamicLayout {
        interface IDynamicLayout;
    }

    [

    ]
    class CSpannableStringBuilder {
        interface ISpannableStringBuilder;
        interface IGraphicsOperations;
        interface IGetChars;
    }

    [
        singleton
    ]
    class CEditableFactory {
        interface IEditableFactory;
    }

    [

    ]
    class CNoCopySpan {
        interface INoCopySpan;
    }

    [

    ]
    class CURLSpan {
        interface IURLSpan;
        interface IParcelableSpan;
        interface IUpdateAppearance;
    }

    [

    ]
    class CTextKeyListener {
        interface ITextKeyListener;
        interface ISpanWatcher;
    }

    [

    ]
    class CQwertyKeyListener {
        interface IQwertyKeyListener;
    }

    [

    ]
    class CArrowKeyMovementMethod {
        interface IMovementMethod;
    }

    [

    ]
    class CClipboardManager {
        interface IClipboardManager;
    }

    [

    ]
    class CBackgroundColorSpan {
        interface IBackgroundColorSpan;
        interface IParcelable;
    }

    [

    ]
    class CForegroundColorSpan {
        interface IForegroundColorSpan;
        interface IParcelable;
    }

    [

    ]
    class CUnderlineSpan {
        interface IUnderlineSpan;
        interface IParcelable;
    }

    [

    ]
    class CScrollBarDrawable {
        interface IScrollBarDrawable;
    }

    [

    ]
    class CFrameLayoutLayoutParams {
        interface IFrameLayoutLayoutParams;
    }

    [

    ]
    class CFrameLayout {
        interface IFrameLayout;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CImageView {
        interface IImageView;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CLinearLayoutLayoutParams {
        interface ILinearLayoutLayoutParams;
    }

    [

    ]
    class CLinearLayout {
        interface ILinearLayout;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CRelativeLayoutLayoutParams {
        interface IRelativeLayoutLayoutParams;
    }

    [

    ]
    class CRelativeLayout {
        interface IRelativeLayout;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CAbsoluteLayoutLayoutParams {
        interface IAbsoluteLayoutLayoutParams;
    }

    [

    ]
    class CAbsoluteLayout {
        interface IAbsoluteLayout;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CTableLayoutLayoutParams {
        interface ITableLayoutLayoutParams;
    }

    [

    ]
    class CTableLayout {
        interface ITableLayout;
    }

    [

    ]
    class CTableRowLayoutParams {
        interface ITableRowLayoutParams;
    }

    [

    ]
    class CTableRow {
        interface ITableRow;
    }

    [

    ]
    class CTextViewSavedState {
        interface ITextViewSavedState;
        interface IParcelable;
    }

    [

    ]
    class CTextView {
        interface ITextView;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CEditText {
        interface IEditText;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CAutoCompleteTextView {
        interface IAutoCompleteTextView;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
        interface IFilterListener;
    }

    [

    ]
    class CButton {
        interface IButton;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CImageButton {
        interface IImageButton;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CCheckBox {
        interface ICheckBox;
        interface ICheckable;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CRadioButton {
        interface IRadioButton;
        interface ICheckable;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CToggleButton {
        interface IToggleButton;
        interface ICheckable;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CAbsListViewSavedState {
        interface IAbsListViewSavedState;
        interface IParcelable;
    }

    [

    ]
    class CAbsListViewLayoutParams {
        interface IAbsListViewLayoutParams;
    }

    [

    ]
    class CListViewSavedState {
        interface IListViewSavedState;
        interface IParcelable;
    }

    [

    ]
    class CListView {
        interface IListView;
        interface ITextWatcher;
        interface IOnGlobalLayoutListener;
        interface IOnTouchModeChangeListener;
        interface IFilterListener;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CHeaderViewListAdapter {
        interface IHeaderViewListAdapter;
        interface IFilterable;
    }

    [

    ]
    class CArrayAdapter {
        interface IArrayAdapter;
        interface ISpinnerAdapter;
        interface IFilterable;
    }

    [

    ]
    class CSimpleAdapter {
        interface ISimpleAdapter;
        interface ISpinnerAdapter;
        interface IFilterable;
    }

    [

    ]
    class CScrollView {
        interface IScrollView;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CHorizontalScrollView {
        interface IHorizontalScrollView;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CAbsSpinnerSavedState {
        interface IAbsSpinnerSavedState;
        interface IParcelable;
    }

    [

    ]
    class CGallery {
        interface IGallery;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CGalleryLayoutParams {
        interface IGalleryLayoutParams;
    }

    [

    ]
    class CPopupWindow {
        interface IPopupWindow;
    }

    [

    ]
    class CProgressBarSavedState {
        interface IProgressBarSavedState;
        interface IParcelable;
    }

    [

    ]
    class CProgressBar {
        interface IProgressBar;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CTabWidget {
        interface ITabWidget;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
        interface IViewOnFocusChangeListener;
    }

    [

    ]
    class CTabHost {
        interface ITabHost;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
        interface IOnTouchModeChangeListener;
    }

    [

    ]
    class CRadioGroupLayoutParams {
        interface IRadioGroupLayoutParams;
    }

    [

    ]
    class CRadioGroup {
        interface IRadioGroup;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CExpandableListContextMenuInfo {
        interface IExpandableListContextMenuInfo;
        interface IContextMenuInfo;
    }

    [

    ]
    class CExpandableListViewSavedState {
        interface IExpandableListViewSavedState;
        interface IParcelable;
    }

    [

    ]
    class CExpandableListView {
        interface IExpandableListView;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CGroupMetadata {
        interface IGroupMetadata;
        interface IParcelable;
    }

    [

    ]
    class CPositionMetadata {
        interface IPositionMetadata;
    }

    [

    ]
    class CExpandableListConnector {
        interface IExpandableListConnector;
        interface IFilterable;
    }

    [

    ]
    class CExpandableListPosition {
        interface IExpandableListPosition;
    }

    [

    ]
    class CGridView {
        interface IGridView;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CAbsSeekBar {
        interface IAbsSeekBar;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CAlphabetIndexer {
        interface IAlphabetIndexer;
        interface ISectionIndexer;
    }

    [

    ]
    class CAnalogClock {
        interface IAnalogClock;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CBaseExpandableListAdapter {
        interface IBaseExpandableListAdapter;
        interface IExpandableListAdapter;
        interface IHeterogeneousExpandableList;
    }

    [

    ]
    class CCheckedTextView {
        interface ICheckedTextView;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CChronometer {
        interface IChronometer;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CWeightedLinearLayout {
        interface ILinearLayout;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CDialogTitle {
        interface ITextView;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CAlertControllerRecycleListView {
        interface IAlertControllerRecycleListView;
        interface ITextWatcher;
        interface IOnGlobalLayoutListener;
        interface IOnTouchModeChangeListener;
        interface IFilterListener;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CCursorAdapter {
        interface ICursorAdapter;
    }

    [

    ]
    class CCursorFilter {
        interface ICursorFilter;
    }

    [

    ]
    class CNumberPicker {
        interface INumberPicker;
    }

    [

    ]
    class CNumberPickerButton {
        interface INumberPickerButton;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CDatePicker {
        interface IDatePicker;
    }

    [

    ]
    class CExtractButton {
        interface IButton;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CExtractEditText {
        interface IExtractEditText;
        interface IOnPreDrawListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CAbstractInputMethodService {
        interface IAbstractInputMethodService;
    }

    [

    ]
    class CInputMethodService {
        interface IInputMethodService;
        interface IComponentCallbacks;
        interface IKeyEventCallback;
    }

    [

    ]
    class CKeyboardView {
        interface IKeyboardView;
        interface IViewOnClickListener;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CIconMenuView {
        interface IIconMenuView;
        interface IViewParent;
        interface IViewManager;
        interface IMenuBuilderItemInvoker;
        interface IMenuView;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
        interface IRunnable;
    }

    [

    ]
    class CIconMenuItemView {
        interface IIconMenuItemView;
        interface IMenuItemView;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
        interface IOnPreDrawListener;
    }

    [

    ]
    class CListMenuItemView {
        interface ILinearLayout;
        interface IMenuItemView;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CIconMenuViewLayoutParams {
        interface IIconMenuViewLayoutParams;
    }

    [

    ]
    class CExpandedMenuView {
        interface IExpandedMenuView;
        interface ITextWatcher;
        interface IOnGlobalLayoutListener;
        interface IOnTouchModeChangeListener;
        interface IFilterListener;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
        interface IMenuBuilderItemInvoker;
        interface IMenuView;
        interface IOnItemClickListener;
    }

    [

    ]
    class CPhoneWindow {
        interface IWindow;
    }

    [

    ]
    class CPhoneLayoutInflater {
        interface ILayoutInflater;
    }

    [

    ]
    class CPhoneWindowManager {
        interface IWindowManagerPolicy;
    }

    [

    ]
    class CPolicy {
        interface IPolicy;
    }

    [
        singleton
    ]
    class CPolicyManager {
        interface IPolicyManager;
    }

    [

    ]
    class CStatusBarIcon {
        interface IStatusBarIcon;
        interface IParcelable;
    }

    [

    ]
    class CStatusBarIconList {
        interface IStatusBarIconList;
        interface IParcelable;
    }

    [

    ]
    class CStatusBarNotification {
        interface IStatusBarNotification;
        interface IParcelable;
    }

    [

    ]
    class CAddress {
        interface IAddress;
        interface IParcelable;
    }

    [

    ]
    class CCriteria {
        interface ICriteria;
        interface IParcelable;
    }

    [

    ]
    class CGeocoderParams {
        interface IGeocoderParams;
        interface IParcelable;
    }

    [

    ]
    class CLocation {
        interface ILocation;
        interface IParcelable;
    }

    [

    ]
    class CLocationManager {
        interface ILocalLocationManager;
    }

    [

    ]
    class CGpsStatus {
        interface IGpsStatus;
    }

    [

    ]
    class CGeocoder {
        interface IGeocoder;
    }

    [

    ]
    class CGpsSatellite {
        interface IGpsSatellite;
    }

    [

    ]
    class CStatusBarView {
        interface IStatusBarView;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [

    ]
    class CFixedSizeDrawable {
        interface IFixedSizeDrawable;
    }

    [

    ]
    class CBrowserFrame {
        interface IBrowserFrame;
    }

    [

    ]
    class CByteArrayBuilder {
        interface IByteArrayBuilder;
    }

    [

    ]
    class CCacheManager {
        interface ICacheManager;
    }

    [

    ]
    class CCallbackProxy {
        interface ICallbackProxy;
    }

    [

    ]
    class CConsoleMessage {
        interface IConsoleMessage;
    }

    [
        singleton
    ]
    class CCookieManager {
        interface ICookieManager;
    }

    [
        singleton
    ]
    class CCookieSyncManager {
        interface ICookieSyncManager;
    }

    [

    ]
    class CDateSorter {
        interface IDateSorter;
    }

    [
        singleton
    ]
    class CGeolocationPermissions {
        interface IGeolocationPermissions;
    }

    [
        singleton
    ]
    class CMimeTypeMap {
        interface IMimeTypeMap;
    }

    [
        singleton
    ]
    class CMockGeolocation {
        interface IMockGeolocation;
    }

    [

    ]
    class CPlugin {
        interface IPlugin;
    }

    [

    ]
    class CPluginData {
        interface IPluginData;
    }

    [

    ]
    class CPluginList {
        interface IPluginList;
    }

    [
        singleton
    ]
    class CPluginManager {
        interface IPluginManager;
    }

    [

    ]
    class CURLUtil {
        interface IURLUtil;
    }

    [

    ]
    class CUrlInterceptRegistry {
        interface IUrlInterceptRegistry;
    }

    [

    ]
    class CWebChromeClient {
        interface IWebChromeClient;
    }

    [
        singleton
    ]
    class CWebIconDatabase {
        interface IWebIconDatabase;
    }

    [
        singleton
    ]
    class CWebStorage {
        interface IWebStorage;
    }

    [

    ]
    class CWebView {
        interface IWebView;
    }

    [

    ]
    class CWebViewClient {
        interface IWebViewClient;
    }

    [
        singleton
    ]
    class CWebViewDatabase {
        interface IWebViewDatabase;
    }
}
