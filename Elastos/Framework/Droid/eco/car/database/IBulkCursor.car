module
{
    interface ICursorWindow;
    interface IContentObserver;
    interface IBundle;

    /**
     * This interface provides a low-level way to pass bulk cursor data across
     * both process and language boundries. Application code should use the Cursor
     * interface directly.
     *
     * {@hide}
     */
    interface IBulkCursor
    {
        /**
         * Returns a BulkCursorWindow, which either has a reference to a shared
         * memory segment with the rows, or an array of JSON strings.
         */
        GetWindow(
            [in] Int32 startPos,
            [out] ICursorWindow** cw);

        OnMove(
            [in] Int32 position);

        /**
         * Returns the number of rows in the cursor.
         */
        Count(
            [out] Int32* count);

        /**
         * Returns a string array holding the names of all of the columns in the
         * cursor in the order in which they were listed in the result.
         */
        GetColumnNames(
            [out,callee] ArrayOf<String>* names);

//        public boolean updateRows(Map<? extends Long, ? extends Map<String, Object>> values) throws RemoteException;

        DeleteRow(
            [in] Int32 position,
            [out] Boolean* succeeded);

        Deactivate();

        Close();

        Requery(
            [in] IContentObserver* observer,
            [in] ICursorWindow* window,
            [out] Int32* value);

        GetWantsAllOnMoveCalls(
            [out] Boolean* result);

        GetExtras(
            [out] IBundle** extras);

        Respond(
            [in] IBundle* extras,
            [out] IBundle** result);
    }
}