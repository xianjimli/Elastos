
module
{
    /** The value contains no data. */
    const TypedValue_TYPE_NULL = 0x00;

    /** The <var>data</var> field holds a resource identifier. */
    const TypedValue_TYPE_REFERENCE = 0x01;
    /** The <var>data</var> field holds an attribute resource
     *  identifier (referencing an attribute in the current theme
     *  style, not a resource entry). */
    const TypedValue_TYPE_ATTRIBUTE = 0x02;
    /** The <var>string</var> field holds string data.  In addition, if
     *  <var>data</var> is non-zero then it is the string block
     *  index of the string and <var>assetCookie</var> is the set of
     *  assets the string came from. */
    const TypedValue_TYPE_STRING = 0x03;
    /** The <var>data</var> field holds an IEEE 754 floating point number. */
    const TypedValue_TYPE_FLOAT = 0x04;
    /** The <var>data</var> field holds a complex number encoding a
     *  dimension value. */
    const TypedValue_TYPE_DIMENSION = 0x05;
    /** The <var>data</var> field holds a complex number encoding a fraction
     *  of a container. */
    const TypedValue_TYPE_FRACTION = 0x06;

    /** Identifies the start of plain integer values.  Any type value
     *  from this to {@link #TYPE_LAST_INT} means the
     *  <var>data</var> field holds a generic integer value. */
    const TypedValue_TYPE_FIRST_INT = 0x10;

    /** The <var>data</var> field holds a number that was
     *  originally specified in decimal. */
    const TypedValue_TYPE_INT_DEC = 0x10;
    /** The <var>data</var> field holds a number that was
     *  originally specified in hexadecimal (0xn). */
    const TypedValue_TYPE_INT_HEX = 0x11;
    /** The <var>data</var> field holds 0 or 1 that was originally
     *  specified as "false" or "true". */
    const TypedValue_TYPE_INT_BOOLEAN = 0x12;

    /** Identifies the start of integer values that were specified as
     *  color constants (starting with '#'). */
    const TypedValue_TYPE_FIRST_COLOR_INT = 0x1c;

    /** The <var>data</var> field holds a color that was originally
     *  specified as #aarrggbb. */
    const TypedValue_TYPE_INT_COLOR_ARGB8 = 0x1c;
    /** The <var>data</var> field holds a color that was originally
     *  specified as #rrggbb. */
    const TypedValue_TYPE_INT_COLOR_RGB8 = 0x1d;
    /** The <var>data</var> field holds a color that was originally
     *  specified as #argb. */
    const TypedValue_TYPE_INT_COLOR_ARGB4 = 0x1e;
    /** The <var>data</var> field holds a color that was originally
     *  specified as #rgb. */
    const TypedValue_TYPE_INT_COLOR_RGB4 = 0x1f;

    /** Identifies the end of integer values that were specified as color
     *  constants. */
    const TypedValue_TYPE_LAST_COLOR_INT = 0x1f;

    /** Identifies the end of plain integer values. */
    const TypedValue_TYPE_LAST_INT = 0x1f;

    /* ------------------------------------------------------------ */

    /** Complex data: bit location of unit information. */
    const TypedValue_COMPLEX_UNIT_SHIFT = 0;
    /** Complex data: mask to extract unit information (after shifting by
     *  {@link #COMPLEX_UNIT_SHIFT}). This gives us 16 possible types, as
     *  defined below. */
    const TypedValue_COMPLEX_UNIT_MASK = 0xf;

    /** {@link #TYPE_DIMENSION} complex unit: Value is raw pixels. */
    const TypedValue_COMPLEX_UNIT_PX = 0;
    /** {@link #TYPE_DIMENSION} complex unit: Value is Device Independent
     *  Pixels. */
    const TypedValue_COMPLEX_UNIT_DIP = 1;
    /** {@link #TYPE_DIMENSION} complex unit: Value is a scaled pixel. */
    const TypedValue_COMPLEX_UNIT_SP = 2;
    /** {@link #TYPE_DIMENSION} complex unit: Value is in points. */
    const TypedValue_COMPLEX_UNIT_PT = 3;
    /** {@link #TYPE_DIMENSION} complex unit: Value is in inches. */
    const TypedValue_COMPLEX_UNIT_IN = 4;
    /** {@link #TYPE_DIMENSION} complex unit: Value is in millimeters. */
    const TypedValue_COMPLEX_UNIT_MM = 5;

    /** {@link #TYPE_FRACTION} complex unit: A basic fraction of the overall
     *  size. */
    const TypedValue_COMPLEX_UNIT_FRACTION = 0;
    /** {@link #TYPE_FRACTION} complex unit: A fraction of the parent size. */
    const TypedValue_COMPLEX_UNIT_FRACTION_PARENT = 1;

    /** Complex data: where the radix information is, telling where the decimal
     *  place appears in the mantissa. */
    const TypedValue_COMPLEX_RADIX_SHIFT = 4;
    /** Complex data: mask to extract radix information (after shifting by
     * {@link #COMPLEX_RADIX_SHIFT}). This give us 4 possible fixed point
     * representations as defined below. */
    const TypedValue_COMPLEX_RADIX_MASK = 0x3;

    /** Complex data: the mantissa is an integral number -- i.e., 0xnnnnnn.0 */
    const TypedValue_COMPLEX_RADIX_23p0 = 0;
    /** Complex data: the mantissa magnitude is 16 bits -- i.e, 0xnnnn.nn */
    const TypedValue_COMPLEX_RADIX_16p7 = 1;
    /** Complex data: the mantissa magnitude is 8 bits -- i.e, 0xnn.nnnn */
    const TypedValue_COMPLEX_RADIX_8p15 = 2;
    /** Complex data: the mantissa magnitude is 0 bits -- i.e, 0x0.nnnnnn */
    const TypedValue_COMPLEX_RADIX_0p23 = 3;

    /** Complex data: bit location of mantissa information. */
    const TypedValue_COMPLEX_MANTISSA_SHIFT = 8;
    /** Complex data: mask to extract mantissa information (after shifting by
     *  {@link #COMPLEX_MANTISSA_SHIFT}). This gives us 23 bits of precision;
     *  the top bit is the sign. */
    const TypedValue_COMPLEX_MANTISSA_MASK = 0xffffff;

    /* ------------------------------------------------------------ */

    /**
     * If {@link #density} is equal to this value, then the density should be
     * treated as the system's default density value: {@link DisplayMetrics#DENSITY_DEFAULT}.
     */
    const TypedValue_DENSITY_DEFAULT = 0;

    /**
     * If {@link #density} is equal to this value, then there is no density
     * associated with the resource and it should not be scaled.
     */
    const TypedValue_DENSITY_NONE = 0xffff;


    interface IDisplayMetrics;

    interface ITypedValue {
        /** Return the data for this value as a float.  Only use for values
         *  whose type is {@link #TYPE_FLOAT}. */
        GetFloat(
            [out] Float* f);

        /**
         * Return the data for this value as a dimension.  Only use for values
         * whose type is {@link #TYPE_DIMENSION}.
         *
         * @param metrics Current display metrics to use in the conversion --
         *                supplies display density and scaling information.
         *
         * @return The complex floating point value multiplied by the appropriate
         * metrics depending on its unit.
         */
        GetDimension(
            [in] IDisplayMetrics* metrics,
            [out] Float* dimension);

        /**
         * Return the data for this value as a fraction.  Only use for values whose
         * type is {@link #TYPE_FRACTION}.
         *
         * @param base The base value of this fraction.  In other words, a
         *             standard fraction is multiplied by this value.
         * @param pbase The parent base value of this fraction.  In other
         *             words, a parent fraction (nn%p) is multiplied by this
         *             value.
         *
         * @return The complex floating point value multiplied by the appropriate
         * base value depending on its unit.
         */
        GetFraction(
            [in] Float base,
            [in] Float pbase,
            [out] Float* fraction);

        /**
         * Regardless of the actual type of the value, try to convert it to a
         * string value.  For example, a color type will be converted to a
         * string of the form #aarrggbb.
         *
         * @return CharSequence The coerced string value.  If the value is
         *         null or the type is not known, null is returned.
         */
        CoerceToString(
            [out] ICharSequence** csq);

        SetTo(
            [in] ITypedValue* other);

        GetDescription(
            [out] String* str);
    }
}