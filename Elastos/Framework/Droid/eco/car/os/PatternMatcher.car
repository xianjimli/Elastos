
module
{
    /**
     * Pattern type: the given pattern must exactly match the string it is
     * tested against.
     */
    const PatternMatcher_PATTERN_LITERAL = 0;

    /**
     * Pattern type: the given pattern must match the
     * beginning of the string it is tested against.
     */
    const PatternMatcher_PATTERN_PREFIX = 1;

    /**
     * Pattern type: the given pattern is interpreted with a
     * simple glob syntax for matching against the string it is tested against.
     * In this syntax, you can use the '*' character to match against zero or
     * more occurrences of the character immediately before.  If the
     * character before it is '.' it will match any character.  The character
     * '\' can be used as an escape.  This essentially provides only the '*'
     * wildcard part of a normal regexp.
     */
    const PatternMatcher_PATTERN_SIMPLE_GLOB = 2;

    interface IPatternMatcher {
        GetPath(
            [out] String* path);

        GetType(
            [out] Int32* type);

        Match(
            [in] String str,
            [out] Boolean* isMatch);

        GetDescription(
            [out] String* des);

        DescribeContents(
            [out] Int32* count);
    }
}

