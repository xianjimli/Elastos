
module
{
    /**
     * Coarse-grained network state. This is probably what most applications should
     * use, rather than {@link android.net.NetworkInfo.DetailedState DetailedState}.
     * The mapping between the two is as follows:
     * <br/><br/>
     * <table>
     * <tr><td><b>Detailed state</b></td><td><b>Coarse-grained state</b></td></tr>
     * <tr><td><code>IDLE</code></td><td><code>DISCONNECTED</code></td></tr>
     * <tr><td><code>SCANNING</code></td><td><code>CONNECTING</code></td></tr>
     * <tr><td><code>CONNECTING</code></td><td><code>CONNECTING</code></td></tr>
     * <tr><td><code>AUTHENTICATING</code></td><td><code>CONNECTING</code></td></tr>
     * <tr><td><code>CONNECTED</code></td><td<code>CONNECTED</code></td></tr>
     * <tr><td><code>DISCONNECTING</code></td><td><code>DISCONNECTING</code></td></tr>
     * <tr><td><code>DISCONNECTED</code></td><td><code>DISCONNECTED</code></td></tr>
     * <tr><td><code>UNAVAILABLE</code></td><td><code>DISCONNECTED</code></td></tr>
     * <tr><td><code>FAILED</code></td><td><code>DISCONNECTED</code></td></tr>
     * </table>
     */
    enum NetworkInfoState {
        NetworkInfoState_CONNECTING,
        NetworkInfoState_CONNECTED,
        NetworkInfoState_SUSPENDED,
        NetworkInfoState_DISCONNECTING,
        NetworkInfoState_DISCONNECTED,
        NetworkInfoState_UNKNOWN
    }

    /**
     * The fine-grained state of a network connection. This level of detail
     * is probably of interest to few applications. Most should use
     * {@link android.net.NetworkInfo.State State} instead.
     */
    enum NetworkInfoDetailedState {
        /** Ready to start data connection setup. */
        NetworkInfoDetailedState_IDLE,
        /** Searching for an available access point. */
        NetworkInfoDetailedState_SCANNING,
        /** Currently setting up data connection. */
        NetworkInfoDetailedState_CONNECTING,
        /** Network link established, performing authentication. */
        NetworkInfoDetailedState_AUTHENTICATING,
        /** Awaiting response from DHCP server in order to assign IP address information. */
        NetworkInfoDetailedState_OBTAINING_IPADDR,
        /** IP traffic should be available. */
        NetworkInfoDetailedState_CONNECTED,
        /** IP traffic is suspended */
        NetworkInfoDetailedState_SUSPENDED,
        /** Currently tearing down data connection. */
        NetworkInfoDetailedState_DISCONNECTING,
        /** IP traffic not available. */
        NetworkInfoDetailedState_DISCONNECTED,
        /** Attempt to connect failed. */
        NetworkInfoDetailedState_FAILED
    }


    interface INetworkInfo {
        /**
         * Reports the type of network (currently mobile or Wi-Fi) to which the
         * info in this object pertains.
         * @return the network type
         */
        GetType(
            [out] Int32* type);

        /**
         * Return a network-type-specific integer describing the subtype
         * of the network.
         * @return the network subtype
         */
        GetSubtype(
            [out] Int32* subtype);

        /**
         * Return a human-readable name describe the type of the network,
         * for example "WIFI" or "MOBILE".
         * @return the name of the network type
         */
        GetTypeName(
            [out] String* typeName);

        /**
         * Return a human-readable name describing the subtype of the network.
         * @return the name of the network subtype
         */
        GetSubtypeName(
            [out] String* subtypeName);

        /**
         * Indicates whether network connectivity exists or is in the process
         * of being established. This is good for applications that need to
         * do anything related to the network other than read or write data.
         * For the latter, call {@link #isConnected()} instead, which guarantees
         * that the network is fully usable.
         * @return {@code true} if network connectivity exists or is in the process
         * of being established, {@code false} otherwise.
         */
        IsConnectedOrConnecting(
            [out] Boolean* result);

        /**
         * Indicates whether network connectivity exists and it is possible to establish
         * connections and pass data.
         * @return {@code true} if network connectivity exists, {@code false} otherwise.
         */
        IsConnected(
            [out] Boolean* connected);

        /**
         * Indicates whether network connectivity is possible. A network is unavailable
         * when a persistent or semi-persistent condition prevents the possibility
         * of connecting to that network. Examples include
         * <ul>
         * <li>The device is out of the coverage area for any network of this type.</li>
         * <li>The device is on a network other than the home network (i.e., roaming), and
         * data roaming has been disabled.</li>
         * <li>The device's radio is turned off, e.g., because airplane mode is enabled.</li>
         * </ul>
         * @return {@code true} if the network is available, {@code false} otherwise
         */
        IsAvailable(
            [out] Boolean* available);

        /**
         * Sets if the network is available, ie, if the connectivity is possible.
         * @param isAvailable the new availability value.
         *
         * @hide
         */
        SetIsAvailable(
            [in] Boolean isAvailable);

        /**
         * Indicates whether the current attempt to connect to the network
         * resulted from the ConnectivityManager trying to fail over to this
         * network following a disconnect from another network.
         * @return {@code true} if this is a failover attempt, {@code false}
         * otherwise.
         */
        IsFailover(
            [out] Boolean* failover);

        /**
         * Set the failover boolean.
         * @param isFailover {@code true} to mark the current connection attempt
         * as a failover.
         * @hide
         */
        SetFailover(
            [in] Boolean isFailover);

        /**
         * Indicates whether the device is currently roaming on this network.
         * When {@code true}, it suggests that use of data on this network
         * may incur extra costs.
         * @return {@code true} if roaming is in effect, {@code false} otherwise.
         */
        IsRoaming(
            [out] Boolean* roaming);

        /**
         * Reports the current coarse-grained state of the network.
         * @return the coarse-grained state
         */
        GetState(
            [out] NetworkInfoState* state);

        /**
         * Reports the current fine-grained state of the network.
         * @return the fine-grained state
         */
        GetDetailedState(
            [out] NetworkInfoDetailedState* state);

        /**
         * Report the reason an attempt to establish connectivity failed,
         * if one is available.
         * @return the reason for failure, or null if not available
         */
        GetReason(
            [out] String* reason);

        /**
         * Report the extra information about the network state, if any was
         * provided by the lower networking layers.,
         * if one is available.
         * @return the extra information, or null if not available
         */
        GetExtraInfo(
            [out] String* info);
    }
}