
module
{
    interface IPrediction;
    interface ILearner;

    const GestureStore_SEQUENCE_INVARIANT = 1;
    // when SEQUENCE_SENSITIVE is used, only single stroke gestures are currently allowed
	const GestureStore_SEQUENCE_SENSITIVE = 2;
    // ORIENTATION_SENSITIVE and ORIENTATION_INVARIANT are only for SEQUENCE_SENSITIVE gestures
	const GestureStore_ORIENTATION_INVARIANT = 1;
    // at most 2 directions can be recognized
	const GestureStore_ORIENTATION_SENSITIVE = 2;
    // at most 4 directions can be recognized
	const GestureStore_ORIENTATION_SENSITIVE_4 = 4;
    // at most 8 directions can be recognized
	const GestureStore_ORIENTATION_SENSITIVE_8 = 8;

    interface IGestureStore {

        /**
        * Specify how the gesture library will handle orientation. 
        * Use ORIENTATION_INVARIANT or ORIENTATION_SENSITIVE
        * 
        * @param style
        */
        SetOrientationStyle(
             [in] Int32 style);

        GetOrientationStyle(
             [out] Int32* orientationStyle);

        /**
        * @param type SEQUENCE_INVARIANT or SEQUENCE_SENSITIVE
        */
        SetSequenceType(
             [in] Int32 type);

        /**
        * @return SEQUENCE_INVARIANT or SEQUENCE_SENSITIVE
        */
        GetSequenceType(
             [out] Int32* sequenceType);

        /**
        * Get all the gesture entry names in the library
        * 
        * @return a set of strings
        */
        //GetGestureEntries(
        //     [out] ISet<String>** gestureEntries);

        GetGestureEntries(
            [out, callee] ArrayOf<String> * gestureEntries);

        /**
         * Recognize a gesture
         * 
         * @param gesture the query
        * @return a list of predictions of possible entries for a given gesture
        */
        /*
        Recognize(
            [in] IGesture* gesture,
            [out] IList< IPrediction* >** arrayList); 
        */

        Recognize(
            [in] IGesture* gesture,
            [out] IObjectContainer** arrayList); 

        /**
        * Add a gesture for the entry
        * 
        * @param entryName entry name
        * @param gesture
        */
        AddGesture(
            [in] String entryName,
            [in] IGesture* gesture);

        /**
        * Remove a gesture from the library. If there are no more gestures for the
        * given entry, the gesture entry will be removed.
        * 
        * @param entryName entry name
        * @param gesture
        */
        RemoveGesture(
    	    [in] String entryName,
    	    [in] IGesture* gesture);

        /**
        * Remove a entry of gestures
        * 
        * @param entryName the entry name
        */
        RemoveEntry(
            [in] String entryName);

        /**
        * Get all the gestures of an entry
        * 
        * @param entryName
        * @return the list of gestures that is under this name
        */

         /*
        GetGestures(
            [in] String entryName
            [out] IList<IGesture*>** gestures)
         */

        GetGestures(
            [in] String entryName,
            [out] IObjectContainer** gestures);

        HasChanged(
            [out] Boolean* hasChanged);

        /**
        * Save the gesture library
        */
        Save(
            [in] IOutputStream* stream);

        SaveEx(
            [in] IOutputStream* stream,
            [in] Boolean closeStream);

        /**
         * Load the gesture library
         */
         Load(
             [in] IInputStream* stream);

         LoadEx(
             [in] IInputStream* stream, 
             [in] Boolean closeStream);     

         GetLearner(
            [out] ILearner** learner);
    }    
}
