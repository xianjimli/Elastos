
module
{
    /** Standard activity result: operation canceled. */
    const Activity_RESULT_CANCELED     = 0;

    /** Standard activity result: operation succeeded. */
    const Activity_RESULT_OK           = -1;

    /** Start of user-defined activity results. */
    const Activity_RESULT_FIRST_USER    = 1;

    /**
     * Use with {@link #setDefaultKeyMode} to turn off default handling of
     * keys.
     *
     * @see #setDefaultKeyMode
     */
    const Activity_DEFAULT_KEYS_DISABLE = 0;
    /**
     * Use with {@link #setDefaultKeyMode} to launch the dialer during default
     * key handling.
     *
     * @see #setDefaultKeyMode
     */
    const Activity_DEFAULT_KEYS_DIALER = 1;
    /**
     * Use with {@link #setDefaultKeyMode} to execute a menu shortcut in
     * default key handling.
     *
     * <p>That is, the user does not need to hold down the menu key to execute menu shortcuts.
     *
     * @see #setDefaultKeyMode
     */
    const Activity_DEFAULT_KEYS_SHORTCUT = 2;
    /**
     * Use with {@link #setDefaultKeyMode} to specify that unhandled keystrokes
     * will start an application-defined search.  (If the application or activity does not
     * actually define a search, the the keys will be ignored.)
     *
     * <p>See {@link android.app.SearchManager android.app.SearchManager} for more details.
     *
     * @see #setDefaultKeyMode
     */
    const Activity_DEFAULT_KEYS_SEARCH_LOCAL = 3;

    /**
     * Use with {@link #setDefaultKeyMode} to specify that unhandled keystrokes
     * will start a global search (typically web search, but some platforms may define alternate
     * methods for global search)
     *
     * <p>See {@link android.app.SearchManager android.app.SearchManager} for more details.
     *
     * @see #setDefaultKeyMode
     */
    const Activity_DEFAULT_KEYS_SEARCH_GLOBAL = 4;

    /*
     * activity related
     */
    interface IContextThemeWrapper;
    interface IBinder;
    interface IBundle;
    interface IApplicationApartment;
    interface IInstrumentation;
    interface IWindow;
    interface ILocalWindowManager;
    interface IView;
    interface ICharSequence;
    interface IApplication;
    interface IIntent;
    interface IActivityInfo;
    interface IObjectStringMap;
    interface IConfiguration;
    interface IMenu;
    interface IMenuItem;
    interface IRunnable;

    interface IActivity extends IContextThemeWrapper {
        GetIntent(
            [out] IIntent** intent);

        SetIntent(
            [in] IIntent* newIntent);

        GetID(
            [out] String* id);

        Create(
            [in] IBundle* savedInstanceState);

        /**
         * Called when activity start-up is complete (after {@link #onStart}
         * and {@link #onRestoreInstanceState} have been called).  Applications will
         * generally not implement this method; it is intended for system
         * classes to do final initialization after application code has run.
         *
         * <p><em>Derived classes must call through to the super class's
         * implementation of this method.  If they do not, an exception will be
         * thrown.</em></p>
         *
         * @param savedInstanceState If the activity is being re-initialized after
         *     previously being shut down then this Bundle contains the data it most
         *     recently supplied in {@link #onSaveInstanceState}.  <b><i>Note: Otherwise it is null.</i></b>
         * @see #onCreate
         */
        PostCreate(
            [in] IBundle* savedInstanceState);

        Start();

        Restart();

        Resume();

        Pause();

        Stop();

        Destroy();

        DispatchActivityResult(
            [in] String who,
            [in] Int32 requestCode,
            [in] Int32 resultCode,
            [in] IIntent *data);

        Attach(
            [in] IContext* ctx,
            [in] IApplicationApartment* apartment,
            [in] IInstrumentation* instr,
            [in] IBinder* token,
            [in] IApplication* application,
            [in] IIntent* intent,
            [in] IActivityInfo* info,
            [in] ICharSequence* title,
            [in] IActivity* parent,
            [in] String id,
            [in] IInterface* lastNonConfigurationInstance,
            [in] IConfiguration* config);

        AttachEx(
            [in] IContext* context,
            [in] IApplicationApartment* apartment,
            [in] IInstrumentation* instr,
            [in] IBinder* token,
            [in] Int32 ident,
            [in] IApplication* application,
            [in] IIntent* intent,
            [in] IActivityInfo* info,
            [in] ICharSequence* title,
            [in] IActivity* parent,
            [in] String id,
            [in] IInterface* lastNonConfigurationInstance,
            [in] IObjectStringMap* lastNonConfigurationChildInstances,
            [in] IConfiguration* config);

        /**
         * Called by the system when the device configuration changes while your
         * activity is running.  Note that this will <em>only</em> be called if
         * you have selected configurations you would like to handle with the
         * {@link android.R.attr#configChanges} attribute in your manifest.  If
         * any configuration change occurs that is not selected to be reported
         * by that attribute, then instead of reporting it the system will stop
         * and restart the activity (to have it launched with the new
         * configuration).
         *
         * <p>At the time that this function has been called, your Resources
         * object will have been updated to return resource values matching the
         * new configuration.
         *
         * @param newConfig The new device configuration.
         */
        OnConfigurationChanged(
            [in] IConfiguration* newConfig);

        /**
        * Retrieve the non-configuration instance data that was previously
        * returned by {@link #onRetainNonConfigurationChildInstances()}.  This will
        * be available from the initial {@link #onCreate} and
        * {@link #onStart} calls to the new instance, allowing you to extract
        * any useful dynamic state from the previous instance.
        *
        * <p>Note that the data you retrieve here should <em>only</em> be used
        * as an optimization for handling configuration changes.  You should always
        * be able to handle getting a null pointer back, and an activity must
        * still be able to restore itself to its previous state (through the
        * normal {@link #onSaveInstanceState(Bundle)} mechanism) even if this
        * function returns null.
        *
        * @return Returns the object previously returned by
        * {@link #onRetainNonConfigurationChildInstances()}
        */
        GetLastNonConfigurationChildInstances(
            [out] IObjectStringMap** data);

        OnRetainNonConfigurationInstance(
            [out] IInterface** object);

        OnLowMemory();

        DispatchNewIntent(
            [in] IIntent* intent);

        SetCalled(
            [in] Boolean called);

        IsCalled(
            [out] Boolean* called);

        SetFinishing(
            [in] Boolean finished);

        IsFinishing(
            [out] Boolean* finished);

        /**
         * Change the desired orientation of this activity.  If the activity
         * is currently in the foreground or otherwise impacting the screen
         * orientation, the screen will immediately be changed (possibly causing
         * the activity to be restarted). Otherwise, this will be used the next
         * time the activity is visible.
         *
         * @param requestedOrientation An orientation constant as used in
         * {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
         */
        SetRequestedOrientation(
            [in] Int32 requestedOrientation);

        /**
         * Return the current requested orientation of the activity.  This will
         * either be the orientation requested in its component's manifest, or
         * the last requested orientation given to
         * {@link #setRequestedOrientation(int)}.
         *
         * @return Returns an orientation constant as used in
         * {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
         */
        GetRequestedOrientation(
            [out] Int32* orientation);

        /**
         * Move the task containing this activity to the back of the activity
         * stack.  The activity's order within the task is unchanged.
         *
         * @param nonRoot If false then this only works if the activity is the root
         *                of a task; if true it will work for any activity in
         *                a task.
         *
         * @return If the task was moved (or it was already at the
         *         back) true is returned, else false.
         */
        MoveTaskToBack(
            [in] Boolean nonRoot,
            [out] Boolean* succeed);

        MakeVisible();

        GetActivityToken(
            [out] IBinder** binder);

        PerformStart();

        PerformRestart();

        PerformResume();

        PerformPause();

        PerformUserLeaving();

        PerformStop();

        PerformSaveInstanceState(
            [in] IBundle* outState);

        StartActivityFromChild(
            [in] IActivity* child,
            [in] IIntent* intent,
            [in] Int32 requestCode);

        // internal use.
        IsStartedActivity(
            [out] Boolean* isStartedActivity);

        GetWindowEx(
            [out] IWindow** window);

        SetDecorView(
            [in] IView* decor);

        GetDecorView(
            [out] IView** decor);

        IsVisibleFromClient(
            [out] Boolean* visible);

        SetWindowAdded(
            [in] Boolean added);

        IsWindowAdded(
            [out] Boolean* isAdded);

        GetWindowManagerEx(
            [out] ILocalWindowManager** mgr);

        /**
         * Returns complete component name of this activity.
         *
         * @return Returns the complete component name for this activity
         */
        GetComponentName(
            [out] IComponentName** name);

        /**
         * Change the title associated with this activity.  If this is a
         * top-level activity, the title for its window will change.  If it
         * is an embedded activity, the parent can do whatever it wants
         * with it.
         */
        SetTitle(
            [in] ICharSequence* title);

        /**
         * Change the title associated with this activity.  If this is a
         * top-level activity, the title for its window will change.  If it
         * is an embedded activity, the parent can do whatever it wants
         * with it.
         */
        SetTitleEx(
            [in] Int32 titleId);

        SetTitleColor(
            [in] Int32 textColor);

        GetTitle(
            [out] ICharSequence** title);

        GetTitleColor(
            [out] Int32* textColor);

        /**
         * Runs the specified action on the UI thread. If the current thread is the UI
         * thread, then the action is executed immediately. If the current thread is
         * not the UI thread, the action is posted to the event queue of the UI thread.
         *
         * @param action the action to run on the UI thread
         */
        RunOnUiThread(
            [in] IRunnable* action);

        ShowDialog(
            [in] Int32 id);

        ShowDialogEx(
            [in] Int32 id,
            [in] IBundle* args,
            [out] Boolean* res);

        DismissDialog(
            [in] Int32 id);

        RemoveDialog(
            [in] Int32 id);

       /**
        * Enable extended window features.  This is a convenience for calling
        * {@link android.view.Window#requestFeature getWindow().requestFeature()}.
        *
        * @param featureId The desired feature as defined in
        *                  {@link android.view.Window}.
        * @return Returns true if the requested feature is supported and now
        *         enabled.
        *
        * @see android.view.Window#requestFeature
        */
        RequestWindowFeature(
            [in] Int32 featureId,
            [out] Boolean* result);

        /**
         * Initialize the contents of the Activity's standard options menu.  You
         * should place your menu items in to <var>menu</var>.
         *
         * <p>This is only called once, the first time the options menu is
         * displayed.  To update the menu every time it is displayed, see
         * {@link #onPrepareOptionsMenu}.
         *
         * <p>The default implementation populates the menu with standard system
         * menu items.  These are placed in the {@link Menu#CATEGORY_SYSTEM} group so that
         * they will be correctly ordered with application-defined menu items.
         * Deriving classes should always call through to the base implementation.
         *
         * <p>You can safely hold on to <var>menu</var> (and any items created
         * from it), making modifications to it as desired, until the next
         * time onCreateOptionsMenu() is called.
         *
         * <p>When you add items to the menu, you can implement the Activity's
         * {@link #onOptionsItemSelected} method to handle them there.
         *
         * @param menu The options menu in which you place your items.
         *
         * @return You must return true for the menu to be displayed;
         *         if you return false it will not be shown.
         *
         * @see #onPrepareOptionsMenu
         * @see #onOptionsItemSelected
         */
        OnCreateOptionsMenu(
            [in] IMenu* menu,
            [out] Boolean* res);

        /**
         * Prepare the Screen's standard options menu to be displayed.  This is
         * called right before the menu is shown, every time it is shown.  You can
         * use this method to efficiently enable/disable items or otherwise
         * dynamically modify the contents.
         *
         * <p>The default implementation updates the system menu items based on the
         * activity's state.  Deriving classes should always call through to the
         * base class implementation.
         *
         * @param menu The options menu as last shown or first initialized by
         *             onCreateOptionsMenu().
         *
         * @return You must return true for the menu to be displayed;
         *         if you return false it will not be shown.
         *
         * @see #onCreateOptionsMenu
         */
        OnPrepareOptionsMenu(
            [in] IMenu* menu,
            [out] Boolean* res);

        /**
         * This hook is called whenever an item in your options menu is selected.
         * The default implementation simply returns false to have the normal
         * processing happen (calling the item's Runnable or sending a message to
         * its Handler as appropriate).  You can use this method for any items
         * for which you would like to do processing without those other
         * facilities.
         *
         * <p>Derived classes should call through to the base class for it to
         * perform the default menu handling.
         *
         * @param item The menu item that was selected.
         *
         * @return boolean Return false to allow normal menu processing to
         *         proceed, true to consume it here.
         *
         * @see #onCreateOptionsMenu
         */
        OnOptionsItemSelected(
            [in] IMenuItem* item,
            [out] Boolean* res);

        /**
         * This hook is called whenever the options menu is being closed (either by the user canceling
         * the menu with the back/menu button, or when an item is selected).
         *
         * @param menu The options menu as last shown or first initialized by
         *             onCreateOptionsMenu().
         */
        OnOptionsMenuClosed(
            [in] IMenu* menu);

        /**
         * Programmatically opens the options menu. If the options menu is already
         * open, this method does nothing.
         */
        OpenOptionsMenu();

        /**
         * Progammatically closes the options menu. If the options menu is already
         * closed, this method does nothing.
         */
        CloseOptionsMenu();

        /**
         * Called when a context menu for the {@code view} is about to be shown.
         * Unlike {@link #onCreateOptionsMenu(Menu)}, this will be called every
         * time the context menu is about to be shown and should be populated for
         * the view (or item inside the view for {@link AdapterView} subclasses,
         * this can be found in the {@code menuInfo})).
         * <p>
         * Use {@link #onContextItemSelected(android.view.MenuItem)} to know when an
         * item has been selected.
         * <p>
         * It is not safe to hold onto the context menu after this method returns.
         * {@inheritDoc}
         */
        OnCreateContextMenu(
            [in] IContextMenu* menu,
            [in] IView* v,
            [in] IContextMenuInfo* menuInfo);

        /**
         * Registers a context menu to be shown for the given view (multiple views
         * can show the context menu). This method will set the
         * {@link OnCreateContextMenuListener} on the view to this activity, so
         * {@link #onCreateContextMenu(ContextMenu, View, ContextMenuInfo)} will be
         * called when it is time to show the context menu.
         *
         * @see #unregisterForContextMenu(View)
         * @param view The view that should show a context menu.
         */
        RegisterForContextMenu(
            [in] IView* view);

        /**
         * Prevents a context menu to be shown for the given view. This method will remove the
         * {@link OnCreateContextMenuListener} on the view.
         *
         * @see #registerForContextMenu(View)
         * @param view The view that should stop showing a context menu.
         */
        UnregisterForContextMenu(
            [in] IView* view);

        /**
         * Programmatically opens the context menu for a particular {@code view}.
         * The {@code view} should have been added via
         * {@link #registerForContextMenu(View)}.
         *
         * @param view The view to show the context menu for.
         */
        OpenContextMenu(
            [in] IView* view);

        /**
         * This hook is called whenever an item in a context menu is selected. The
         * default implementation simply returns false to have the normal processing
         * happen (calling the item's Runnable or sending a message to its Handler
         * as appropriate). You can use this method for any items for which you
         * would like to do processing without those other facilities.
         * <p>
         * Use {@link MenuItem#getMenuInfo()} to get extra information set by the
         * View that added this menu item.
         * <p>
         * Derived classes should call through to the base class for it to perform
         * the default menu handling.
         *
         * @param item The context menu item that was selected.
         * @return boolean Return false to allow normal context menu processing to
         *         proceed, true to consume it here.
         */
        OnContextItemSelected(
            [in] IMenuItem* item,
            [out] Boolean* res);

        /**
         * This hook is called whenever the context menu is being closed (either by
         * the user canceling the menu with the back/menu button, or when an item is
         * selected).
         *
         * @param menu The context menu that is being closed.
         */
        OnContextMenuClosed(
            [in] IMenu* menu);

        SetStartedActivity(
            [in] Boolean started);
       /**
        * Sets the visibility of the indeterminate progress bar in the title.
        * <p>
        * In order for the progress bar to be shown, the feature must be requested
        * via {@link #requestWindowFeature(int)}.
        *
        * @param visible Whether to show the progress bars in the title.
        */
        SetProgressBarIndeterminateVisibility(
	        [in] Boolean visible);
    }
}

