
module
{
    /**
     * Use all default values (where applicable).
     */
    const Notification_DEFAULT_ALL = 0xFFFFFFFF;

    /**
     * Use the default notification sound. This will ignore any given
     * {@link #sound}.
     *
     * @see #defaults
     */
    const Notification_DEFAULT_SOUND = 1;

    /**
     * Use the default notification vibrate. This will ignore any given
     * {@link #vibrate}. Using phone vibration requires the
     * {@link android.Manifest.permission#VIBRATE VIBRATE} permission.
     *
     * @see #defaults
     */
    const Notification_DEFAULT_VIBRATE = 2;

    /**
     * Use the default notification lights. This will ignore the
     * {@link #FLAG_SHOW_LIGHTS} bit, and {@link #ledARGB}, {@link #ledOffMS}, or
     * {@link #ledOnMS}.
     *
     * @see #defaults
     */
    const Notification_DEFAULT_LIGHTS = 4;

    /**
     * Use this constant as the value for audioStreamType to request that
     * the default stream type for notifications be used.  Currently the
     * default stream type is STREAM_RING.
     */
    const Notification_STREAM_DEFAULT = -1;

    /**
     * Bit to be bitwise-ored into the {@link #flags} field that should be
     * set if you want the LED on for this notification.
     * <ul>
     * <li>To turn the LED off, pass 0 in the alpha channel for colorARGB
     *      or 0 for both ledOnMS and ledOffMS.</li>
     * <li>To turn the LED on, pass 1 for ledOnMS and 0 for ledOffMS.</li>
     * <li>To flash the LED, pass the number of milliseconds that it should
     *      be on and off to ledOnMS and ledOffMS.</li>
     * </ul>
     * <p>
     * Since hardware varies, you are not guaranteed that any of the values
     * you pass are honored exactly.  Use the system defaults (TODO) if possible
     * because they will be set to values that work on any given hardware.
     * <p>
     * The alpha channel must be set for forward compatibility.
     *
     */
    const Notification_FLAG_SHOW_LIGHTS        = 0x00000001;

    /**
     * Bit to be bitwise-ored into the {@link #flags} field that should be
     * set if this notification is in reference to something that is ongoing,
     * like a phone call.  It should not be set if this notification is in
     * reference to something that happened at a particular point in time,
     * like a missed phone call.
     */
    const Notification_FLAG_ONGOING_EVENT      = 0x00000002;

    /**
     * Bit to be bitwise-ored into the {@link #flags} field that if set,
     * the audio will be repeated until the notification is
     * cancelled or the notification window is opened.
     */
    const Notification_FLAG_INSISTENT          = 0x00000004;

    /**
     * Bit to be bitwise-ored into the {@link #flags} field that should be
     * set if you want the sound and/or vibration play each time the
     * notification is sent, even if it has not been canceled before that.
     */
    const Notification_FLAG_ONLY_ALERT_ONCE    = 0x00000008;

    /**
     * Bit to be bitwise-ored into the {@link #flags} field that should be
     * set if the notification should be canceled when it is clicked by the
     * user.
     */
    const Notification_FLAG_AUTO_CANCEL        = 0x00000010;

    /**
     * Bit to be bitwise-ored into the {@link #flags} field that should be
     * set if the notification should not be canceled when the user clicks
     * the Clear all button.
     */
    const Notification_FLAG_NO_CLEAR           = 0x00000020;

    /**
     * Bit to be bitwise-ored into the {@link #flags} field that should be
     * set if this notification represents a currently running service.  This
     * will normally be set for you by {@link Service#startForeground}.
     */
    const Notification_FLAG_FOREGROUND_SERVICE = 0x00000040;


    interface IPendingIntent;
    interface ICharSequence;
    interface IRemoteViews;
    interface IUri;

    [deprecated]
    interface INotification {
        GetWhen(
            [out] Int64* when);

        SetWhen(
            [in] Int64 when);

        GetIcon(
            [out] Int32* icon);

        SetIcon(
            [in] Int32 icon);

        GetContentIntent(
            [out] IPendingIntent** intent);

        SetContentIntent(
            [in] IPendingIntent* intent);

        GetDeleteIntent(
            [out] IPendingIntent** intent);

        SetDeleteIntent(
            [in] IPendingIntent* intent);

        GetTickerText(
            [out] ICharSequence** text);

        SetTickerText(
            [in] ICharSequence* text);

        GetContentView(
            [out] IRemoteViews** view);

        SetContentView(
            [in] IRemoteViews* view);

        GetSound(
            [out] IUri** sound);

        SetSound(
            [in] IUri* sound);

        GetAudioStreamType(
            [out] Int32* type);

        SetAudioStreamType(
            [in] Int32 type);

        GetVibrate(
            [out, callee] ArrayOf<Int64>* vibrate);

        SetVibrate(
            [in] ArrayOf<Int64>* vibrate);

        GetLedARGB(
            [out] Int32* argb);

        SetLedARGB(
            [in] Int32 argb);

        GetLedOnMS(
            [out] Int32* onMS);

        SetLedOnMS(
            [in] Int32 onMS);

        GetLedOffMS(
            [out] Int32* offMS);

        SetLedOffMS(
            [in] Int32 offMS);

        GetDefaults(
            [out] Int32* defaults);

        SetDefaults(
            [in] Int32 defaults);

        GetFlags(
            [out] Int32* flags);

        SetFlags(
            [in] Int32 flags);

        /**
         * Sets the {@link #contentView} field to be a view with the standard "Latest Event"
         * layout.
         *
         * <p>Uses the {@link #icon} and {@link #when} fields to set the icon and time fields
         * in the view.</p>
         * @param context       The context for your application / activity.
         * @param contentTitle The title that goes in the expanded entry.
         * @param contentText  The text that goes in the expanded entry.
         * @param contentIntent The intent to launch when the user clicks the expanded notification.
         * If this is an activity, it must include the
         * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK} flag, which requires
         * that you take care of task management as described in
         * <a href="{@docRoot}guide/topics/fundamentals.html#lcycles">Application Fundamentals: Activities and Tasks</a>.
         */
        SetLatestEventInfo(
            [in] IContext* context,
            [in] ICharSequence* contentTitle,
            [in] ICharSequence* contentText,
            [in] IPendingIntent* contentIntent);
    }
}
