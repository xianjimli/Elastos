
module
{
    interface IBinder;
    interface IRestoreSessionStub;

    /**
     * Direct interface to the Backup Manager Service that applications invoke on.  The only
     * operation currently needed is a simple notification that the app has made changes to
     * data it wishes to back up, so the system should run a backup pass.
     *
     * Apps will use the {@link android.app.backup.BackupManager} class rather than going through
     * this Binder interface directly.
     *
     * {@hide}
     */
    interface IBackupManager {
        /**
         * Tell the system service that the caller has made changes to its
         * data, and therefore needs to undergo an incremental backup pass.
         *
         * Any application can invoke this method for its own package, but
         * only callers who hold the android.permission.BACKUP permission
         * may invoke it for arbitrary packages.
         */
        DataChanged(
            [in] String capsuleName);

        /**
         * Erase all backed-up data for the given package from the storage
         * destination.
         *
         * Any application can invoke this method for its own package, but
         * only callers who hold the android.permission.BACKUP permission
         * may invoke it for arbitrary packages.
         */
        ClearBackupData(
            [in] String capsuleName);

        /**
         * Notifies the Backup Manager Service that an agent has become available.  This
         * method is only invoked by the Activity Manager.
         */
        AgentConnected(
            [in] String capsuleName,
            [in] IBinder* agent);

        /**
         * Notify the Backup Manager Service that an agent has unexpectedly gone away.
         * This method is only invoked by the Activity Manager.
         */
        AgentDisconnected(
            [in] String capsuleName);

        /**
         * Notify the Backup Manager Service that an application being installed will
         * need a data-restore pass.  This method is only invoked by the Package Manager.
         */
        RestoreAtInstall(
            [in] String capsuleName,
            [in] Int32 token);

        /**
         * Enable/disable the backup service entirely.  When disabled, no backup
         * or restore operations will take place.  Data-changed notifications will
         * still be observed and collected, however, so that changes made while the
         * mechanism was disabled will still be backed up properly if it is enabled
         * at some point in the future.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        SetBackupEnabled(
            [in] Boolean isEnabled);

        /**
         * Enable/disable automatic restore of application data at install time.  When
         * enabled, installation of any package will involve the Backup Manager.  If data
         * exists for the newly-installed package, either from the device's current [enabled]
         * backup dataset or from the restore set used in the last wholesale restore operation,
         * that data will be supplied to the new package's restore agent before the package
         * is made generally available for launch.
         *
         * <p>Callers must hold  the android.permission.BACKUP permission to use this method.
         *
         * @param doAutoRestore When true, enables the automatic app-data restore facility.  When
         *   false, this facility will be disabled.
         */
        SetAutoRestore(
            [in] Boolean doAutoRestore);

        /**
         * Indicate that any necessary one-time provisioning has occurred.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        SetBackupProvisioned(
            [in] Boolean isProvisioned);

        /**
         * Report whether the backup mechanism is currently enabled.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        IsBackupEnabled(
            [out] Boolean* result);

        /**
         * Schedule an immediate backup attempt for all pending updates.  This is
         * primarily intended for transports to use when they detect a suitable
         * opportunity for doing a backup pass.  If there are no pending updates to
         * be sent, no action will be taken.  Even if some updates are pending, the
         * transport will still be asked to confirm via the usual requestBackupTime()
         * method.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        BackupNow();

        /**
         * Identify the currently selected transport.  Callers must hold the
         * android.permission.BACKUP permission to use this method.
         */
        GetCurrentTransport(
            [out] String* transport);

        /**
         * Request a list of all available backup transports' names.  Callers must
         * hold the android.permission.BACKUP permission to use this method.
         */
        ListAllTransports(
            [out, callee] BufferOf<String>* transports);

        /**
         * Specify the current backup transport.  Callers must hold the
         * android.permission.BACKUP permission to use this method.
         *
         * @param transport The name of the transport to select.  This should be one
         * of {@link BackupManager.TRANSPORT_GOOGLE} or {@link BackupManager.TRANSPORT_ADB}.
         * @return The name of the previously selected transport.  If the given transport
         *   name is not one of the currently available transports, no change is made to
         *   the current transport setting and the method returns null.
         */
        SelectBackupTransport(
            [in] String transport,
            [out] String* selectedTransport);

        /**
         * Begin a restore session.  Either or both of packageName and transportID
         * may be null.  If packageName is non-null, then only the given package will be
         * considered for restore.  If transportID is null, then the restore will use
         * the current active transport.
         * <p>
         * This method requires the android.permission.BACKUP permission <i>except</i>
         * when transportID is null and packageName is the name of the caller's own
         * package.  In that case, the restore session returned is suitable for supporting
         * the BackupManager.requestRestore() functionality via RestoreSession.restorePackage()
         * without requiring the app to hold any special permission.
         *
         * @param packageName The name of the single package for which a restore will
         *        be requested.  May be null, in which case all packages in the restore
         *        set can be restored.
         * @param transportID The name of the transport to use for the restore operation.
         *        May be null, in which case the current active transport is used.
         * @return An interface to the restore session, or null on error.
         */
        BeginRestoreSession(
            [in] String capsuleName,
            [in] String transportID,
            [out] IRestoreSessionStub** session);

        /**
         * Notify the backup manager that a BackupAgent has completed the operation
         * corresponding to the given token.
         *
         * @param token The transaction token passed to a BackupAgent's doBackup() or
         *        doRestore() method.
         * {@hide}
         */
        OpComplete(
            [in] Int32 token);
    }
}
