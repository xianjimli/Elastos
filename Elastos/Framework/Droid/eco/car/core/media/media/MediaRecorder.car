
module
{
    /* Do not change this value without updating its counterpart
     * in include/media/mediarecorder.h!
     */
    /** Unspecified media recorder error.
     * @see android.media.MediaRecorder.OnErrorListener
     */
    const MediaRecorder_MEDIA_RECORDER_ERROR_UNKNOWN = 1;
    /* Do not change these values without updating their counterparts
     * in include/media/mediarecorder.h!
     */
    /** Unspecified media recorder error.
     * @see android.media.MediaRecorder.OnInfoListener
     */
    const MediaRecorder_MEDIA_RECORDER_INFO_UNKNOWN              = 1;
    /** A maximum duration had been setup and has now been reached.
     * @see android.media.MediaRecorder.OnInfoListener
     */
    const MediaRecorder_MEDIA_RECORDER_INFO_MAX_DURATION_REACHED = 800;
    /** A maximum filesize had been setup and has now been reached.
     * @see android.media.MediaRecorder.OnInfoListener
     */
    const MediaRecorder_MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED = 801;

    interface IMediaRecorder;

    /**
     * Interface definition for a callback to be invoked when an error
     * occurs while recording.
     */
    interface IMediaRecorderOnErrorListener {
        /**
         * Called when an error occurs while recording.
         *
         * @param mr the MediaRecorder that encountered the error
         * @param what    the type of error that has occurred:
         * <ul>
         * <li>{@link #MEDIA_RECORDER_ERROR_UNKNOWN}
         * </ul>
         * @param extra   an extra code, specific to the error type
         */
        OnError(
            [in] IMediaRecorder* mr,
            [in] Int32 what,
            [in] Int32 extra);
    }

    /**
     * Interface definition for a callback to be invoked when an error
     * occurs while recording.
     */
    interface IMediaRecorderOnInfoListener {
        /**
         * Called when an error occurs while recording.
         *
         * @param mr the MediaRecorder that encountered the error
         * @param what    the type of error that has occurred:
         * <ul>
         * <li>{@link #MEDIA_RECORDER_INFO_UNKNOWN}
         * <li>{@link #MEDIA_RECORDER_INFO_MAX_DURATION_REACHED}
         * <li>{@link #MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED}
         * </ul>
         * @param extra   an extra code, specific to the error type
         */
        OnInfo(
            [in] IMediaRecorder* mr,
            [in] Int32 what,
            [in] Int32 extra);
    }

    interface IMediaRecorder {
        /**
         * Sets a Camera to use for recording. Use this function to switch
         * quickly between preview and capture mode without a teardown of
         * the camera object. Must call before prepare().
         *
         * @param c the Camera to use for recording
         */
        SetCamera(
            [in] ICamera* c);

        /**
         * Sets a Surface to show a preview of recorded media (video). Calls this
         * before prepare() to make sure that the desirable preview display is
         * set.
         *
         * @param sv the Surface to use for the preview
         */
        SetPreviewDisplay(
            [in] ISurface* sv);

        /**
         * Sets the audio source to be used for recording. If this method is not
         * called, the output file will not contain an audio track. The source needs
         * to be specified before setting recording-parameters or encoders. Call
         * this only before setOutputFormat().
         *
         * @param audio_source the audio source to use
         * @throws IllegalStateException if it is called after setOutputFormat()
         * @see android.media.MediaRecorder.AudioSource
         */
        SetAudioSource(
            [in] Int32 audioSource);

        /**
         * Sets the video source to be used for recording. If this method is not
         * called, the output file will not contain an video track. The source needs
         * to be specified before setting recording-parameters or encoders. Call
         * this only before setOutputFormat().
         *
         * @param video_source the video source to use
         * @throws IllegalStateException if it is called after setOutputFormat()
         * @see android.media.MediaRecorder.VideoSource
         */
        SetVideoSource(
            [in] Int32 videoSource);

        /**
         * Uses the settings from a CamcorderProfile object for recording. This method should
         * be called after the video AND audio sources are set, and before setOutputFile().
         *
         * @param profile the CamcorderProfile to use
         * @see android.media.CamcorderProfile
         */
        SetProfile(
            [in] ICamcorderProfile* profile);

        /**
         * Sets the orientation hint for output video playback.
         * This method should be called before prepare(). This method will not
         * trigger the source video frame to rotate during video recording, but to
         * add a composition matrix containing the rotation angle in the output
         * video if the output format is OutputFormat.THREE_GPP or
         * OutputFormat.MPEG_4 so that a video player can choose the proper
         * orientation for playback. Note that some video players may choose
         * to ignore the compostion matrix in a video during playback.
         *
         * @param degrees the angle to be rotated clockwise in degrees.
         * The supported angles are 0, 90, 180, and 270 degrees.
         * @throws IllegalArgumentException if the angle is not supported.
         *
         */
        SetOrientationHint(
            [in] Int32 degrees);

        /**
         * Sets the format of the output file produced during recording. Call this
         * after setAudioSource()/setVideoSource() but before prepare().
         *
         * <p>It is recommended to always use 3GP format when using the H.263
         * video encoder and AMR audio encoder. Using an MPEG-4 container format
         * may confuse some desktop players.</p>
         *
         * @param output_format the output format to use. The output format
         * needs to be specified before setting recording-parameters or encoders.
         * @throws IllegalStateException if it is called after prepare() or before
         * setAudioSource()/setVideoSource().
         * @see android.media.MediaRecorder.OutputFormat
         */
        SetOutputFormat(
            [in] Int32 outputFormat);

        /**
         * Sets the width and height of the video to be captured.  Must be called
         * after setVideoSource(). Call this after setOutFormat() but before
         * prepare().
         *
         * @param width the width of the video to be captured
         * @param height the height of the video to be captured
         * @throws IllegalStateException if it is called after
         * prepare() or before setOutputFormat()
         */
        SetVideoSize(
            [in] Int32 width,
            [in] Int32 height);

        /**
         * Sets the frame rate of the video to be captured.  Must be called
         * after setVideoSource(). Call this after setOutFormat() but before
         * prepare().
         *
         * @param rate the number of frames per second of video to capture
         * @throws IllegalStateException if it is called after
         * prepare() or before setOutputFormat().
         *
         * NOTE: On some devices that have auto-frame rate, this sets the
         * maximum frame rate, not a constant frame rate. Actual frame rate
         * will vary according to lighting conditions.
         */
        SetVideoFrameRate(
            [in] Int32 rate);

        /**
         * Sets the maximum duration (in ms) of the recording session.
         * Call this after setOutFormat() but before prepare().
         * After recording reaches the specified duration, a notification
         * will be sent to the {@link android.media.MediaRecorder.OnInfoListener}
         * with a "what" code of {@link #MEDIA_RECORDER_INFO_MAX_DURATION_REACHED}
         * and recording will be stopped. Stopping happens asynchronously, there
         * is no guarantee that the recorder will have stopped by the time the
         * listener is notified.
         *
         * @param max_duration_ms the maximum duration in ms (if zero or negative, disables the duration limit)
         *
         */
        SetMaxDuration(
            [in] Int32 maxDurationMs);

        /**
         * Sets the maximum filesize (in bytes) of the recording session.
         * Call this after setOutFormat() but before prepare().
         * After recording reaches the specified filesize, a notification
         * will be sent to the {@link android.media.MediaRecorder.OnInfoListener}
         * with a "what" code of {@link #MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED}
         * and recording will be stopped. Stopping happens asynchronously, there
         * is no guarantee that the recorder will have stopped by the time the
         * listener is notified.
         *
         * @param max_filesize_bytes the maximum filesize in bytes (if zero or negative, disables the limit)
         *
         */
        SetMaxFileSize(
            [in] Int64 maxFilesizeBytes);

        /**
         * Sets the audio encoder to be used for recording. If this method is not
         * called, the output file will not contain an audio track. Call this after
         * setOutputFormat() but before prepare().
         *
         * @param audio_encoder the audio encoder to use.
         * @throws IllegalStateException if it is called before
         * setOutputFormat() or after prepare().
         * @see android.media.MediaRecorder.AudioEncoder
         */
        SetAudioEncoder(
            [in] Int32 audioEncoder);

        /**
         * Sets the video encoder to be used for recording. If this method is not
         * called, the output file will not contain an video track. Call this after
         * setOutputFormat() and before prepare().
         *
         * @param video_encoder the video encoder to use.
         * @throws IllegalStateException if it is called before
         * setOutputFormat() or after prepare()
         * @see android.media.MediaRecorder.VideoEncoder
         */
        SetVideoEncoder(
            [in] Int32 videoEncoder);

        /**
         * Sets the audio sampling rate for recording. Call this method before prepare().
         * Prepare() may perform additional checks on the parameter to make sure whether
         * the specified audio sampling rate is applicable. The sampling rate really depends
         * on the format for the audio recording, as well as the capabilities of the platform.
         * For instance, the sampling rate supported by AAC audio coding standard ranges
         * from 8 to 96 kHz. Please consult with the related audio coding standard for the
         * supported audio sampling rate.
         *
         * @param samplingRate the sampling rate for audio in samples per second.
         */
        SetAudioSamplingRate(
            [in] Int32 samplingRate);

        /**
         * Sets the number of audio channels for recording. Call this method before prepare().
         * Prepare() may perform additional checks on the parameter to make sure whether the
         * specified number of audio channels are applicable.
         *
         * @param numChannels the number of audio channels. Usually it is either 1 (mono) or 2
         * (stereo).
         */
        SetAudioChannels(
            [in] Int32 numChannels);

        /**
         * Sets the audio encoding bit rate for recording. Call this method before prepare().
         * Prepare() may perform additional checks on the parameter to make sure whether the
         * specified bit rate is applicable, and sometimes the passed bitRate will be clipped
         * internally to ensure the audio recording can proceed smoothly based on the
         * capabilities of the platform.
         *
         * @param bitRate the audio encoding bit rate in bits per second.
         */
        SetAudioEncodingBitRate(
            [in] Int32 bitRate);

        /**
         * Sets the video encoding bit rate for recording. Call this method before prepare().
         * Prepare() may perform additional checks on the parameter to make sure whether the
         * specified bit rate is applicable, and sometimes the passed bitRate will be
         * clipped internally to ensure the video recording can proceed smoothly based on
         * the capabilities of the platform.
         *
         * @param bitRate the video encoding bit rate in bits per second.
         */
        SetVideoEncodingBitRate(
            [in] Int32 bitRate);

        /**
         * Pass in the file descriptor of the file to be written. Call this after
         * setOutputFormat() but before prepare().
         *
         * @param fd an open file descriptor to be written into.
         * @throws IllegalStateException if it is called before
         * setOutputFormat() or after prepare()
         */
        SetOutputFile(
            [in] IFileDescriptor* fd);

        /**
         * Sets the path of the output file to be produced. Call this after
         * setOutputFormat() but before prepare().
         *
         * @param path The pathname to use.
         * @throws IllegalStateException if it is called before
         * setOutputFormat() or after prepare()
         */
        SetOutputFileEx(
            [in] String path);

        /**
         * Prepares the recorder to begin capturing and encoding data. This method
         * must be called after setting up the desired audio and video sources,
         * encoders, file format, etc., but before start().
         *
         * @throws IllegalStateException if it is called after
         * start() or before setOutputFormat().
         * @throws IOException if prepare fails otherwise.
         */
        Prepare();

        /**
         * Begins capturing and encoding data to the file specified with
         * setOutputFile(). Call this after prepare().
         *
         * @throws IllegalStateException if it is called before
         * prepare().
         */
        Start();

        /**
         * Stops recording. Call this after start(). Once recording is stopped,
         * you will have to configure it again as if it has just been constructed.
         *
         * @throws IllegalStateException if it is called before start()
         */
        Stop();

        /**
         * Restarts the MediaRecorder to its idle state. After calling
         * this method, you will have to configure it again as if it had just been
         * constructed.
         */
        Reset();

        /**
         * Returns the maximum absolute amplitude that was sampled since the last
         * call to this method. Call this only after the setAudioSource().
         *
         * @return the maximum absolute amplitude measured since the last call, or
         * 0 when called for the first time
         * @throws IllegalStateException if it is called before
         * the audio source has been set.
         */
        GetMaxAmplitude(
            [out] Int32* maxAmplitude);

        /**
         * Register a callback to be invoked when an error occurs while
         * recording.
         *
         * @param l the callback that will be run
         */
        SetOnErrorListener(
            [in] IMediaRecorderOnErrorListener* l);

        /**
         * Register a callback to be invoked when an informational event occurs while
         * recording.
         *
         * @param listener the callback that will be run
         */
        SetOnInfoListener(
            [in] IMediaRecorderOnInfoListener* listener);

        /**
         * Releases resources associated with this MediaRecorder object.
         * It is good practice to call this method when you're done
         * using the MediaRecorder.
         */
        ReleaseResources();
    }

    interface IMediaRecorderHelper {
        /**
         * Gets the maximum value for audio sources.
         * @see android.media.MediaRecorder.AudioSource
         */
        GetAudioSourceMax(
            [out] Int32* maximun);
    }
}
