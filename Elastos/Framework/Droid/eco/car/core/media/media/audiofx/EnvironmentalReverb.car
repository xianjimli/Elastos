module
{
    /**
     * Room level. Parameter ID for OnParameterChangeListener
     */
    const EnvironmentalReverb_PARAM_ROOM_LEVEL = 0;
    /**
     * Room HF level. Parameter ID for OnParameterChangeListener
     */
    const EnvironmentalReverb_PARAM_ROOM_HF_LEVEL = 1;
    /**
     * Decay time. Parameter ID for OnParameterChangeListener
     */
    const EnvironmentalReverb_PARAM_DECAY_TIME = 2;
    /**
     * Decay HF ratio. Parameter ID for
     * {@link android.media.audiofx.EnvironmentalReverb.OnParameterChangeListener}
     */
    const EnvironmentalReverb_PARAM_DECAY_HF_RATIO = 3;
    /**
     * Early reflections level. Parameter ID for OnParameterChangeListener
     */
    const EnvironmentalReverb_PARAM_REFLECTIONS_LEVEL = 4;
    /**
     * Early reflections delay. Parameter ID for OnParameterChangeListener
     */
    const EnvironmentalReverb_PARAM_REFLECTIONS_DELAY = 5;
    /**
     * Reverb level. Parameter ID for OnParameterChangeListener
     */
    const EnvironmentalReverb_PARAM_REVERB_LEVEL = 6;
    /**
     * Reverb delay. Parameter ID for OnParameterChangeListener
     */
    const EnvironmentalReverb_PARAM_REVERB_DELAY = 7;
    /**
     * Diffusion. Parameter ID for OnParameterChangeListener
     */
    const EnvironmentalReverb_PARAM_DIFFUSION = 8;
    /**
     * Density. Parameter ID for OnParameterChangeListener
     */
    const EnvironmentalReverb_PARAM_DENSITY = 9;


    interface IEnvironmentalReverb;

    /**
     * The OnParameterChangeListener interface defines a method called by the EnvironmentalReverb
     * when a parameter value has changed.
     */
    interface IEnvironmentalReverbOnParameterChangeListener {
        /**
         * Method called when a parameter value has changed. The method is called only if the
         * parameter was changed by another application having the control of the same
         * EnvironmentalReverb engine.
         * @param effect the EnvironmentalReverb on which the interface is registered.
         * @param status status of the set parameter operation.
         * @param param ID of the modified parameter. See {@link #PARAM_ROOM_LEVEL} ...
         * @param value the new parameter value.
         */
        OnParameterChange(
            [in] IEnvironmentalReverb* effect,
            [in] Int32 status,
            [in] Int32 param,
            [in] Int32 value);
    }

    /**
     * The Settings class regroups all environmental reverb parameters. It is used in
     * conjuntion with getProperties() and setProperties() methods to backup and restore
     * all parameters in a single call.
     */
    interface IEnvironmentalReverbSettings {
        GetRoomLevel(
            [out] Int16* level);

        SetRoomLevel(
            [in] Int16 level);

        GetRoomHFLevel(
            [out] Int16* level);

        SetRoomHFLevel(
            [in] Int16 level);

        GetDecayTime(
            [out] Int32* time);

        SetDecayTime(
            [in] Int32 time);

        GetDecayHFRatio(
            [out] Int16* ratio);

        SetDecayHFRatio(
            [in] Int16 ratio);

        GetReflectionsLevel(
            [out] Int16* level);

        SetReflectionsLevel(
            [in] Int16 level);

        GetReflectionsDelay(
            [out] Int32* delay);

        SetReflectionsDelay(
            [in] Int32 delay);

        GetReverbLevel(
            [out] Int16* level);

        SetReverbLevel(
            [in] Int16 level);

        GetReverbDelay(
            [out] Int32* delay);

        SetReverbDelay(
            [in] Int32 delay);

        GetDiffusion(
            [out] Int16* diffusion);

        SetDiffusion(
            [in] Int16 diffusion);

        GetDensity(
            [out] Int16* density);

        SetDensity(
            [in] Int16 density);
    }

    interface IEnvironmentalReverb extends IAudioEffect {
        /**
         * Sets the master volume level of the environmental reverb effect.
         * @param room room level in millibels. The valid range is [-9000, 0].
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetRoomLevel(
            [in] Int16 room);

        /**
         * Gets the master volume level of the environmental reverb effect.
         * @return the room level in millibels.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetRoomLevel(
            [out] Int16* room);

        /**
         * Sets the volume level at 5 kHz relative to the volume level at low frequencies of the
         * overall reverb effect.
         * <p>This controls a low-pass filter that will reduce the level of the high-frequency.
         * @param roomHF high frequency attenuation level in millibels. The valid range is [-9000, 0].
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetRoomHFLevel(
            [in] Int16 roomHF);

        /**
         * Gets the room HF level.
         * @return the room HF level in millibels.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetRoomHFLevel(
            [out] Int16* roomHF);

        /**
         * Sets the time taken for the level of reverberation to decay by 60 dB.
         * @param decayTime decay time in milliseconds. The valid range is [100, 20000].
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetDecayTime(
            [in] Int32 decayTime);

        /**
         * Gets the decay time.
         * @return the decay time in milliseconds.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetDecayTime(
            [out] Int32* decayTime);

        /**
         * Sets the ratio of high frequency decay time (at 5 kHz) relative to the decay time at low
         * frequencies.
         * @param decayHFRatio high frequency decay ratio using a permille scale. The valid range is
         * [100, 2000]. A ratio of 1000 indicates that all frequencies decay at the same rate.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetDecayHFRatio(
            [in] Int16 decayHFRatio);

        /**
         * Gets the ratio of high frequency decay time (at 5 kHz) relative to low frequencies.
         * @return the decay HF ration. See {@link #setDecayHFRatio(short)} for units.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetDecayHFRatio(
            [out] Int16* decayHFRatio);

        /**
         * Sets the volume level of the early reflections.
         * <p>This level is combined with the overall room level
         * (set using {@link #setRoomLevel(short)}).
         * @param reflectionsLevel reflection level in millibels. The valid range is [-9000, 1000].
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetReflectionsLevel(
            [in] Int16 reflectionsLevel);

        /**
         * Gets the volume level of the early reflections.
         * @return the early reflections level in millibels.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetReflectionsLevel(
            [out] Int16* reflectionsLevel);

        /**
         * Sets the delay time for the early reflections.
         * <p>This method sets the time between when the direct path is heard and when the first
         * reflection is heard.
         * @param reflectionsDelay reflections delay in milliseconds. The valid range is [0, 300].
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetReflectionsDelay(
            [in] Int32 reflectionsDelay);

        /**
         * Gets the reflections delay.
         * @return the early reflections delay in milliseconds.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetReflectionsDelay(
            [out] Int32* reflectionsDelay);

        /**
         * Sets the volume level of the late reverberation.
         * <p>This level is combined with the overall room level (set using {@link #setRoomLevel(short)}).
         * @param reverbLevel reverb level in millibels. The valid range is [-9000, 2000].
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetReverbLevel(
            [in] Int16 reverbLevel);

        /**
         * Gets the reverb level.
         * @return the reverb level in millibels.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetReverbLevel(
            [out] Int16* reverbLevel);

        /**
         * Sets the time between the first reflection and the reverberation.
         * @param reverbDelay reverb delay in milliseconds. The valid range is [0, 100].
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetReverbDelay(
            [in] Int32 reverbDelay);

        /**
         * Gets the reverb delay.
         * @return the reverb delay in milliseconds.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetReverbDelay(
            [out] Int32* reverbDelay);

        /**
         * Sets the echo density in the late reverberation decay.
         * <p>The scale should approximately map linearly to the perceived change in reverberation.
         * @param diffusion diffusion specified using a permille scale. The diffusion valid range is
         * [0, 1000]. A value of 1000 o/oo indicates a smooth reverberation decay.
         * Values below this level give a more <i>grainy</i> character.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetDiffusion(
            [in] Int16 diffusion);

        /**
         * Gets diffusion level.
         * @return the diffusion level. See {@link #setDiffusion(short)} for units.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetDiffusion(
            [out] Int16* diffusion);

        /**
         * Controls the modal density of the late reverberation decay.
         * <p> The scale should approximately map linearly to the perceived change in reverberation.
         * A lower density creates a hollow sound that is useful for simulating small reverberation
         * spaces such as bathrooms.
         * @param density density specified using a permille scale. The valid range is [0, 1000].
         * A value of 1000 o/oo indicates a natural sounding reverberation. Values below this level
         * produce a more colored effect.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetDensity(
            [in] Int16 density);

        /**
         * Gets the density level.
         * @return the density level. See {@link #setDiffusion(short)} for units.
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetDensity(
            [out] Int16* density);

        /**
         * Registers an OnParameterChangeListener interface.
         * @param listener OnParameterChangeListener interface registered
         */
        SetParameterListenerEx(
            [in] IEnvironmentalReverbOnParameterChangeListener* listener);

        /**
         * Gets the environmental reverb properties. This method is useful when a snapshot of current
         * reverb settings must be saved by the application.
         * @return an EnvironmentalReverb.Settings object containing all current parameters values
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        GetProperties(
            [out] IEnvironmentalReverbSettings** properties);

        /**
         * Sets the environmental reverb properties. This method is useful when reverb settings have to
         * be applied from a previous backup.
         * @param settings a EnvironmentalReverb.Settings object containing the properties to apply
         * @throws IllegalStateException
         * @throws IllegalArgumentException
         * @throws UnsupportedOperationException
         */
        SetProperties(
            [in] IEnvironmentalReverbSettings* settings);
    }
}