
module
{
    /** indicates AudioTrack state is stopped */
    const AudioTrack_PLAYSTATE_STOPPED = 1;  // matches SL_PLAYSTATE_STOPPED
    /** indicates AudioTrack state is paused */
    const AudioTrack_PLAYSTATE_PAUSED  = 2;  // matches SL_PLAYSTATE_PAUSED
    /** indicates AudioTrack state is playing */
    const AudioTrack_PLAYSTATE_PLAYING = 3;  // matches SL_PLAYSTATE_PLAYING
    /**
     * Creation mode where audio data is transferred from Java to the native layer
     * only once before the audio starts playing.
     */
    const AudioTrack_MODE_STATIC = 0;
    /**
     * Creation mode where audio data is streamed from Java to the native layer
     * as the audio is playing.
     */
    const AudioTrack_MODE_STREAM = 1;

    /**
     * State of an AudioTrack that was not successfully initialized upon creation.
     */
    const AudioTrack_STATE_UNINITIALIZED = 0;
    /**
     * State of an AudioTrack that is ready to be used.
     */
    const AudioTrack_STATE_INITIALIZED = 1;
    /**
     * State of a successfully initialized AudioTrack that uses static data,
     * but that hasn't received that data yet.
     */
    const AudioTrack_STATE_NO_STATIC_DATA = 2;

    // Error codes:
    // to keep in sync with frameworks/base/core/jni/android_media_AudioTrack.cpp
    /**
     * Denotes a successful operation.
     */
    const AudioTrack_SUCCESS = 0;
    /**
     * Denotes a generic operation failure.
     */
    const AudioTrack_ERROR = -1;
    /**
     * Denotes a failure due to the use of an invalid value.
     */
    const AudioTrack_ERROR_BAD_VALUE = -2;
    
    /**
     * Denotes a failure due to the improper use of a method.
     */
    const AudioTrack_ERROR_INVALID_OPERATION = -3;

    interface IAudioTrack;

    /**
     * Interface definition for a callback to be invoked when the playback head position of
     * an AudioTrack has reached a notification marker or has increased by a certain period.
     */
    interface IOnPlaybackPositionUpdateListener {
        /**
         * Called on the listener to notify it that the previously set marker has been reached
         * by the playback head.
         */
        OnMarkerReached(
            [in] IAudioTrack* track);

        /**
         * Called on the listener to periodically notify it that the playback head has reached
         * a multiple of the notification period.
         */
        OnPeriodicNotification(
            [in] IAudioTrack* track);
    }
    [deprecated]
    interface IAudioTrack {
        /**
         * Releases the native AudioTrack resources.
         */
        ReleaseResources();

        /**
         * Returns the minimum valid volume value. Volume values set under this one will
         * be clamped at this value.
         * @return the minimum volume expressed as a linear attenuation.
         */
        GetMinVolume(
            [out] Float* minVolume);

        /**
         * Returns the maximum valid volume value. Volume values set above this one will
         * be clamped at this value.
         * @return the maximum volume expressed as a linear attenuation.
         */
        GetMaxVolume(
            [out] Float* maxVolume);

        /**
         * Returns the configured audio data sample rate in Hz
         */
        GetSampleRate(
            [out] Int32* rate);

        /**
         * Returns the current playback rate in Hz.
         */
        GetPlaybackRate(
            [out] Int32* rate);

        /**
         * Returns the configured audio data format. See {@link AudioFormat#ENCODING_PCM_16BIT}
         * and {@link AudioFormat#ENCODING_PCM_8BIT}.
         */
        GetAudioFormat(
            [out] Int32* format);

        /**
         * Returns the type of audio stream this AudioTrack is configured for.
         * Compare the result against {@link AudioManager#STREAM_VOICE_CALL},
         * {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING},
         * {@link AudioManager#STREAM_MUSIC} or {@link AudioManager#STREAM_ALARM}
         */
        GetStreamType(
            [out] Int32* type);

        /**
         * Returns the configured channel configuration.

         * See {@link AudioFormat#CHANNEL_OUT_MONO}
         * and {@link AudioFormat#CHANNEL_OUT_STEREO}.
         */
        GetChannelConfiguration(
            [out] Int32* config);

        /**
         * Returns the configured number of channels.
         */
        GetChannelCount(
            [out] Int32* count);

        /**
         * Returns the state of the AudioTrack instance. This is useful after the
         * AudioTrack instance has been created to check if it was initialized
         * properly. This ensures that the appropriate hardware resources have been
         * acquired.
         * @see #STATE_INITIALIZED
         * @see #STATE_NO_STATIC_DATA
         * @see #STATE_UNINITIALIZED
         */
        GetState(
            [out] Int32* state);

        /**
         * Returns the playback state of the AudioTrack instance.
         * @see #PLAYSTATE_STOPPED
         * @see #PLAYSTATE_PAUSED
         * @see #PLAYSTATE_PLAYING
         */
        GetPlayState(
            [out] Int32* state);

        /**
         * Returns marker position expressed in frames.
         */
        GetNotificationMarkerPosition(
            [out] Int32* pos);

        /**
         * Returns the notification update period expressed in frames.
         */
        GetPositionNotificationPeriod(
            [out] Int32* period);

        /**
         * Returns the playback head position expressed in frames
         */
        GetPlaybackHeadPosition(
            [out] Int32* position);

        /**
         * Returns the audio session ID.
         *
         * @return the ID of the audio session this AudioTrack belongs to.
         */
        GetAudioSessionId(
            [out] Int32* id);

        /**
         * Sets the listener the AudioTrack notifies when a previously set marker is reached or
         * for each periodic playback head position update.
         * Notifications will be received in the same thread as the one in which the AudioTrack
         * instance was created.
         * @param listener
         */
        SetPlaybackPositionUpdateListener(
            [in] IOnPlaybackPositionUpdateListener* listener);

        /**
         * Sets the listener the AudioTrack notifies when a previously set marker is reached or
         * for each periodic playback head position update.
         * Use this method to receive AudioTrack events in the Handler associated with another
         * thread than the one in which you created the AudioTrack instance.
         * @param listener
         * @param handler the Handler that will receive the event notification messages.
         */
        SetPlaybackPositionUpdateListenerEx(
            [in] IOnPlaybackPositionUpdateListener* listener,
            [in] IApartment* handler);

        /**
         * Sets the specified left/right output volume values on the AudioTrack. Values are clamped
         * to the ({@link #getMinVolume()}, {@link #getMaxVolume()}) interval if outside this range.
         * @param leftVolume output attenuation for the left channel. A value of 0.0f is silence,
         *      a value of 1.0f is no attenuation.
         * @param rightVolume output attenuation for the right channel
         * @return error code or success, see {@link #SUCCESS},
         *    {@link #ERROR_INVALID_OPERATION}
         */
        SetStereoVolume(
            [in] Float leftVolume,
            [in] Float rightVolume,
            [out] Int32* result);

        /**
         * Sets the playback sample rate for this track. This sets the sampling rate at which
         * the audio data will be consumed and played back, not the original sampling rate of the
         * content. Setting it to half the sample rate of the content will cause the playback to
         * last twice as long, but will also result in a negative pitch shift.
         * The valid sample rate range if from 1Hz to twice the value returned by
         * {@link #getNativeOutputSampleRate(Int32)}.
         * @param sampleRateInHz the sample rate expressed in Hz
         * @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE},
         *    {@link #ERROR_INVALID_OPERATION}
         */
        SetPlaybackRate(
            [in] Int32 sampleRateInHz,
            [out] Int32* result);

        /**
         * Sets the position of the notification marker.
         * @param markerInFrames marker in frames
         * @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE},
         *  {@link #ERROR_INVALID_OPERATION}
         */
        SetNotificationMarkerPosition(
            [in] Int32 markerInFrames,
            [out] Int32* result);

        /**
         * Sets the period for the periodic notification event.
         * @param periodInFrames update period expressed in frames
         * @return error code or success, see {@link #SUCCESS}, {@link #ERROR_INVALID_OPERATION}
         */
        SetPositionNotificationPeriod(
            [in] Int32 periodInFrames,
            [out] Int32* result);

        /**
         * Sets the playback head position. The track must be stopped for the position to be changed.
         * @param positionInFrames playback head position expressed in frames
         * @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE},
         *    {@link #ERROR_INVALID_OPERATION}
         */
        SetPlaybackHeadPosition(
            [in] Int32 positionInFrames,
            [out] Int32* result);

        /**
         * Sets the loop points and the loop count. The loop can be infinite.
         * @param startInFrames loop start marker expressed in frames
         * @param endInFrames loop end marker expressed in frames
         * @param loopCount the number of times the loop is looped.
         *    A value of -1 means infinite looping.
         * @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE},
         *    {@link #ERROR_INVALID_OPERATION}
         */
        SetLoopPoints(
            [in] Int32 startInFrames,
            [in] Int32 endInFrames,
            [in] Int32 loopCount,
            [out] Int32* result);

        /**
         * Starts playing an AudioTrack.
         * @throws IllegalStateException
         */
        Play();

        /**
         * Stops playing the audio data.
         * @throws IllegalStateException
         */
        Stop();

        /**
         * Pauses the playback of the audio data.
         * @throws IllegalStateException
         */
        Pause();

        /**
         * Flushes the audio data currently queued for playback.
         */
        Flush();

        /**
         * Writes the audio data to the audio hardware for playback.
         * @param audioData the array that holds the data to play.
         * @param offsetInBytes the offset expressed in bytes in audioData where the data to play
         *    starts.
         * @param sizeInBytes the number of bytes to read in audioData after the offset.
         * @return the number of bytes that were written or {@link #ERROR_INVALID_OPERATION}
         *    if the object wasn't properly initialized, or {@link #ERROR_BAD_VALUE} if
         *    the parameters don't resolve to valid data and indexes.
         */
        Write(
            [in] ArrayOf<Byte>* audioData,
            [in] Int32 offsetInBytes,
            [in] Int32 sizeInBytes,
            [out] Int32* num);

        /**
         * Writes the audio data to the audio hardware for playback.
         * @param audioData the array that holds the data to play.
         * @param offsetInShorts the offset expressed in shorts in audioData where the data to play
         *     starts.
         * @param sizeInShorts the number of bytes to read in audioData after the offset.
         * @return the number of shorts that were written or {@link #ERROR_INVALID_OPERATION}
         *    if the object wasn't properly initialized, or {@link #ERROR_BAD_VALUE} if
         *    the parameters don't resolve to valid data and indexes.
         */
        WriteEx(
            [in] ArrayOf<Int16>* audioData,
            [in] Int32 offsetInShorts,
            [in] Int32 sizeInShorts,
            [out] Int32* num);

        /**
         * Notifies the native resource to reuse the audio data already loaded in the native
         * layer. This call is only valid with AudioTrack instances that don't use the streaming
         * model.
         * @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE},
         *  {@link #ERROR_INVALID_OPERATION}
         */
        ReloadStaticData(
            [out] Int32* result);

        /**
         * Attaches an auxiliary effect to the audio track. A typical auxiliary
         * effect is a reverberation effect which can be applied on any sound source
         * that directs a certain amount of its energy to this effect. This amount
         * is defined by setAuxEffectSendLevel().
         * {@see #setAuxEffectSendLevel(Float)}.
         * <p>After creating an auxiliary effect (e.g.
         * {@link android.media.audiofx.EnvironmentalReverb}), retrieve its ID with
         * {@link android.media.audiofx.AudioEffect#getId()} and use it when calling
         * this method to attach the audio track to the effect.
         * <p>To detach the effect from the audio track, call this method with a
         * null effect id.
         *
         * @param effectId system wide unique id of the effect to attach
         * @return error code or success, see {@link #SUCCESS},
         *    {@link #ERROR_INVALID_OPERATION}, {@link #ERROR_BAD_VALUE}
         */
        AttachAuxEffect(
            [in] Int32 effectId,
            [out] Int32* result);

        /**
         * Sets the send level of the audio track to the attached auxiliary effect
         * {@see #attachAuxEffect(Int32)}. The level value range is 0 to 1.0.
         * <p>By default the send level is 0, so even if an effect is attached to the player
         * this method must be called for the effect to be applied.
         * <p>Note that the passed level value is a raw scalar. UI controls should be scaled
         * logarithmically: the gain applied by audio framework ranges from -72dB to 0dB,
         * so an appropriate conversion from linear UI input x to level is:
         * x == 0 -> level = 0
         * 0 < x <= R -> level = 10^(72*(x-R)/20/R)
         *
         * @param level send level scalar
         * @return error code or success, see {@link #SUCCESS},
         *    {@link #ERROR_INVALID_OPERATION}
         */
        SetAuxEffectSendLevel(
            [in] Float level,
            [out] Int32* result);
    }

    interface IAudioTrackHelper {
        /**
         *  Returns the hardware output sample rate
         */
        GetNativeOutputSampleRate(
            [in] Int32 streamType,
            [out] Int32* rate);

        /**
         * Returns the minimum buffer size required for the successful creation of an AudioTrack
         * object to be created in the {@link #MODE_STREAM} mode. Note that this size doesn't
         * guarantee a smooth playback under load, and higher values should be chosen according to
         * the expected frequency at which the buffer will be refilled with additional data to play.
         * @param sampleRateInHz the sample rate expressed in Hertz.
         * @param channelConfig describes the configuration of the audio channels.
         *   See {@link AudioFormat#CHANNEL_OUT_MONO} and
         *   {@link AudioFormat#CHANNEL_OUT_STEREO}
         * @param audioFormat the format in which the audio data is represented.
         *   See {@link AudioFormat#ENCODING_PCM_16BIT} and
         *   {@link AudioFormat#ENCODING_PCM_8BIT}
         * @return {@link #ERROR_BAD_VALUE} if an invalid parameter was passed,
         *   or {@link #ERROR} if the implementation was unable to query the hardware for its output
         *     properties,
         *   or the minimum buffer size expressed in bytes.
         */
        GetMinBufferSize(
            [in] Int32 sampleRateInHz,
            [in] Int32 channelConfig,
            [in] Int32 audioFormat,
            [out] Int32* size);
    }
}
