
module
{
    interface IAsyncPlayer
    {
        /**
         * Start playing the sound.  It will actually start playing at some
         * point in the future.  There are no guarantees about latency here.
         * Calling this before another audio file is done playing will stop
         * that one and start the new one.
         *
         * @param context Your application's context.
         * @param uri The URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)})
         * @param looping Whether the audio should loop forever.  
         *          (see {@link MediaPlayer#setLooping(Boolean)})
         * @param stream the AudioStream to use.
         *          (see {@link MediaPlayer#setAudioStreamType(Int32)})
         */
        Play(
            [in] IContext* context, 
            [in] IUri* uri, 
            [in] Boolean looping, 
            [in] Int32 stream);
        
        /**
         * Stop a previously played sound.  It can't be played again or unpaused
         * at this point.  Calling this multiple times has no ill effects.
         */
        Stop();

        /**
         * We want to hold a wake lock while we do the prepare and play.  The stop probably is
         * optional, but it won't hurt to have it too.  The problem is that if you start a sound
         * while you're holding a wake lock (e.g. an alarm starting a notification), you want the
         * sound to play, but if the CPU turns off before mThread gets to work, it won't.  The
         * simplest way to deal with this is to make it so there is a wake lock held while the
         * thread is starting or running.  You're going to need the WAKE_LOCK permission if you're
         * going to call this.
         *
         * This must be called before the first time play is called.
         *
         * @hide
         */
        SetUsesWakeLock(
            [in] IContext* context);
    }
}
