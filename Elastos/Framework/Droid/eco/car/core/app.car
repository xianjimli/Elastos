
module
{
    merge("app/activity.car");
    merge("app/service.car");
    merge("app/instrumentation.car");
    merge("app/iinstrumentationwatcher.car");
    merge("app/applicationapartment.car");
    merge("app/iserviceconnection.car");
    merge("app/application.car");
    merge("app/notification.car");
    merge("app/pendingintent.car");
    merge("app/ithumbnailreceiver.car");
    merge("app/iactivitywatcher.car");
    merge("app/iactivitycontroller.car");
    merge("app/activitymanager.car");
    merge("app/IBatteryStats.car");
    merge("app/IMediaContainerService.car");
    merge("app/Dialog.car");
    merge("app/AlertDialog.car");
    merge("app/ProgressDialog.car");
    merge("app/INotificationManager.car");
    merge("app/NotificationManager.car");
    merge("app/ITransientNotification.car");
    merge("app/ResultInfo.car");
    merge("app/RunningAppProcessInfo.car");

    class CContentProviderHolder {
        interface IContentProviderHolder;
        interface IParcelable;
    }

    class CActivityResult {
        interface IActivityResult;

        constructor(
            [in] Int32 resultCode,
            [in] IIntent* resultData);
    }

    class CDefaultInstrumentation {
        interface IInstrumentation;
    }

    class CInnerConnection {
        interface IServiceConnectionInner;
    }

    class CApplicationApartment {
        interface IApplicationApartment;
    }

    interface IContext;

    class CContextImpl {
        interface IContext;
    }

    class CApplication {
        interface IApplication;
    }

    class CResultInfo {
        constructor(
            [in] String resultWho,
            [in] Int32 requestCode,
            [in] Int32 resultCode,
            [in] IIntent* data);

        interface IResultInfo;
        interface IParcelable;
    }

    class CNotification {
        /**
         * Constructs a Notification object with everything set to 0.
         */
        constructor();

        /**
         * @deprecated use {@link #Notification(int,CharSequence,long)} and {@link #setLatestEventInfo}.
         * @hide
         */
        // constructor(Context context, int icon, CharSequence tickerText, long when,
        //        CharSequence contentTitle, CharSequence contentText, Intent contentIntent)

        /**
         * Constructs a Notification object with the information needed to
         * have a status bar icon without the standard expanded view.
         *
         * @param icon          The resource id of the icon to put in the status bar.
         * @param tickerText    The text that flows by in the status bar when the notification first
         *                      activates.
         * @param when          The time to show in the time field.  In the System.currentTimeMillis
         *                      timebase.
         */
        constructor(
            [in] Int32 icon,
            [in] ICharSequence* tickerText,
            [in] Int64 when);

        /**
         * Unflatten the notification from a parcel.
         */
        constructor(
            [in] IParcel* parcel);

        interface INotification;
        interface IParcelable;
    }

    class CPendingIntent {
        /*package*/
        constructor(
            [in] IIntentSender* target);

        /*package*/
        // constructor(
        //     [in] IBinder* target);

        interface IPendingIntent;
        interface IParcelable;
    }

    singleton class CPendingIntentHelper {
        interface IPendingIntentHelper;
    }

    class CFinishedDispatcher {
        constructor(
            [in] IPendingIntent* pi,
            [in] IOnFinished* who,
            [in] IHandler* handler);

        interface IIntentReceiver;
        interface IRunnable;
    }

    class CCrashInfo {
        interface IParcelable;
    }

    class CApplicationErrorReport {
        interface IParcelable;
    }

    class CWaitResult {
        constructor();
        constructor(
            [in] IParcel* source);

        interface IWaitResult;
        interface IParcelable;
    }

    class CRunningAppProcessInfo {
        interface IRunningAppProcessInfo;
        interface IParcelable;
    }

    class CProcessErrorStateInfo {
        interface IParcelable;
    }

    class CRunningServiceInfo {
        interface IParcelable;
    }

    class CDialog {
        /**
         * Create a Dialog window that uses a custom dialog style.
         *
         * @param context The Context in which the Dialog should run. In particular, it
         *                uses the window manager and theme from this context to
         *                present its UI.
         * @param theme A style resource describing the theme to use for the
         * window. See <a href="{@docRoot}guide/topics/resources/available-resources.html#stylesandthemes">Style
         * and Theme Resources</a> for more information about defining and using
         * styles.  This theme is applied on top of the current theme in
         * <var>context</var>.  If 0, the default dialog theme will be used.
         */
        constructor(
            [in] IContext* context);

        /**
         * Create a Dialog window that uses a custom dialog style.
         *
         * @param context The Context in which the Dialog should run. In particular, it
         *                uses the window manager and theme from this context to
         *                present its UI.
         * @param theme A style resource describing the theme to use for the
         * window. See <a href="{@docRoot}guide/topics/resources/available-resources.html#stylesandthemes">Style
         * and Theme Resources</a> for more information about defining and using
         * styles.  This theme is applied on top of the current theme in
         * <var>context</var>.  If 0, the default dialog theme will be used.
         */
        constructor(
            [in] IContext* context,
            [in] Int32 theme);

        constructor(
            [in] IContext* context,
            [in] Boolean cancelable,
            [in] IDialogInterfaceOnCancelListener* cancelListener);

        interface IDialog;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
    }

    class CAlertDialog {
        constructor(
            [in] IContext* context);

        constructor(
            [in] IContext* context,
            [in] Int32 theme);

        constructor(
            [in] IContext* context,
            [in] Boolean cancelable,
            [in] IDialogInterfaceOnCancelListener* cancelListener);

        interface IAlertDialog;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
    }

    class CAlertDialogBuilder {
        /**
         * Constructor using a context for this builder and the {@link AlertDialog} it creates.
         */
        constructor(
            [in] IContext* context);

        interface IAlertDialogBuilder;
    }

    class CProgressDialog {
        constructor(
            [in] IContext* context);

        constructor(
            [in] IContext* context,
            [in] Int32 theme);

        interface IProgressDialog;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
    }

    singleton class CProgressDialogHelper {
        interface IProgressDialogHelper;
    }
}
