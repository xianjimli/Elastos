
module
{
    /*
    * these constants are chosen to be binary compatible with their previous
    * location in PixelFormat.java
    */

    const IMAGEFORMAT_UNKNOWN = 0;

    /**
     * RGB format used for pictures encoded as RGB_565 see
     * {@link android.hardware.Camera.Parameters#setPictureFormat(int)}.
     */
    const IMAGEFORMAT_RGB_565 = 4;

    /**
     * Planar 4:2:0 YCrCb format. This format assumes an horizontal stride of 16
     * pixels for all planes and an implicit vertical stride of the image
     * height's next multiple of two.
     *   y_size = stride * ALIGN(height, 2)
     *   c_size = ALIGN(stride/2, 16) * height
     *   size = y_size + c_size * 2
     *   cr_offset = y_size
     *   cb_offset = y_size + c_size
     *
     * Whether this format is supported by the camera hardware can be determined
     * by
     * {@link android.hardware.Camera.Parameters#getSupportedPreviewFormats()}.
     */
    const IMAGEFORMAT_YV12 = 0x32315659;

    /**
     * YCbCr format, used for video. Whether this format is supported by the
     * camera hardware can be determined by
     * {@link android.hardware.Camera.Parameters#getSupportedPreviewFormats()}.
     */
    const IMAGEFORMAT_NV16 = 0x10;

    /**
     * YCrCb format used for images, which uses the NV21 encoding format. This
     * is the default format for camera preview images, when not otherwise set
     * with {@link android.hardware.Camera.Parameters#setPreviewFormat(int)}.
     */
    const IMAGEFORMAT_NV21 = 0x11;

    /**
     * YCbCr format used for images, which uses YUYV (YUY2) encoding format.
     * This is an alternative format for camera preview images. Whether this
     * format is supported by the camera hardware can be determined by
     * {@link android.hardware.Camera.Parameters#getSupportedPreviewFormats()}.
     */
    const IMAGEFORMAT_YUY2 = 0x14;

    /**
     * Encoded formats. These are not necessarily supported by the hardware.
     */
    const IMAGEFORMAT_JPEG = 0x100;

    /**
     * Use this function to retrieve the number of bits per pixel of an
     * ImageFormat.
     *
     * @param format
     * @return the number of bits per pixel of the given format or -1 if the
     *         format doesn't exist or is not supported.
     */

    interface IImageFormat {
        /**
         * Use this function to retrieve the number of bits per pixel of an
         * ImageFormat.
         *
         * @param format
         * @return the number of bits per pixel of the given format or -1 if the
         *         format doesn't exist or is not supported.
        */
        GetBitsPerPixel(
            [in] Int32 format,
            [out] Int32* bits);
    }
}
