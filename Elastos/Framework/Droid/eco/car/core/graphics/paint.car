
module
{
    /** bit mask for the flag enabling antialiasing */
    const Paint_ANTI_ALIAS_FLAG     = 0x01;
    /** bit mask for the flag enabling bitmap filtering */
    const Paint_FILTER_BITMAP_FLAG  = 0x02;
    /** bit mask for the flag enabling dithering */
    const Paint_DITHER_FLAG         = 0x04;
    /** bit mask for the flag enabling underline text */
    const Paint_UNDERLINE_TEXT_FLAG = 0x08;
    /** bit mask for the flag enabling strike-thru text */
    const Paint_STRIKE_THRU_TEXT_FLAG = 0x10;
    /** bit mask for the flag enabling fake-bold text */
    const Paint_FAKE_BOLD_TEXT_FLAG = 0x20;
    /** bit mask for the flag enabling linear-text (no caching) */
    const Paint_LINEAR_TEXT_FLAG    = 0x40;
    /** bit mask for the flag enabling subpixel-text */
    const Paint_SUBPIXEL_TEXT_FLAG  = 0x80;
    /** bit mask for the flag enabling device kerning for text */
    const Paint_DEV_KERN_TEXT_FLAG  = 0x100;

    /**
     * The Style specifies if the primitive being drawn is filled,
     * stroked, or both (in the same color). The default is FILL.
     */
    enum PaintStyle {
        /**
         * Geometry and text drawn with this style will be filled, ignoring all
         * stroke-related settings in the paint.
         */
        PaintStyle_FILL            = 0x00,
        /**
         * Geometry and text drawn with this style will be stroked, respecting
         * the stroke-related fields on the paint.
         */
        PaintStyle_STROKE          = 0x01,
        /**
         * Geometry and text drawn with this style will be both filled and
         * stroked at the same time, respecting the stroke-related fields on
         * the paint.
         */
        PaintStyle_FILL_AND_STROKE = 0x02,
    }

    /**
     * The Cap specifies the treatment for the beginning and ending of
     * stroked lines and paths. The default is BUTT.
     */
    enum PaintCap {
        /**
         * The stroke ends with the path, and does not project beyond it.
         */
        PaintCap_BUTT    = 0x00,
        /**
         * The stroke projects out as a semicircle, with the center at the
         * end of the path.
         */
        PaintCap_ROUND   = 0x01,
        /**
         * The stroke projects out as a square, with the center at the end
         * of the path.
         */
        PaintCap_SQUARE  = 0x02,
    }

    /**
     * The Join specifies the treatment where lines and curve segments
     * join on a stroked path. The default is MITER.
     */
    enum PaintJoin {
        /**
         * The outer edges of a join meet at a sharp angle
         */
        PaintJoin_MITER   = 0x00,
        /**
         * The outer edges of a join meet in a circular arc.
         */
        PaintJoin_ROUND   = 0x01,
        /**
         * The outer edges of a join meet with a straight line
         */
        PaintJoin_BEVEL   = 0x02,
    }

    /**
     * Align specifies how drawText aligns its text relative to the
     * [x,y] coordinates. The default is LEFT.
     */
    enum PaintAlign {
        /**
         * The text is drawn to the right of the x,y origin
         */
        PaintAlign_LEFT    = 0x00,
        /**
         * The text is drawn centered horizontally on the x,y origin
         */
        PaintAlign_CENTER  = 0x01,
        /**
         * The text is drawn to the left of the x,y origin
         */
        PaintAlign_RIGHT   = 0x02,
    }


    interface IPath;
    interface IShader;
    interface IColorFilter;
    interface IXfermode;
    interface IPathEffect;
    interface IMaskFilter;
    interface ITypeface;
    interface IRasterizer;
    interface IRect;

    interface IPaintFontMetrics {
        GetTop(
            [out] Float* top);

        SetTop(
            [in] Float top);

        GetAscent(
            [out] Float* ascent);

        SetAscent(
            [in] Float ascent);

        GetDescent(
            [out] Float* descent);

        SetDescent(
            [in] Float descent);

        GetBottom(
            [out] Float* bottom);

        SetBottom(
            [in] Float bottom);

        GetLeading(
            [out] Float* leading);

        SetLeading(
            [in] Float leading);
    }

    interface IPaintFontMetricsInt {
        GetTop(
            [out] Int32* top);

        SetTop(
            [in] Int32 top);

        GetAscent(
            [out] Int32* ascent);

        SetAscent(
            [in] Int32 ascent);

        GetDescent(
            [out] Int32* descent);

        SetDescent(
            [in] Int32 descent);

        GetBottom(
            [out] Int32* bottom);

        SetBottom(
            [in] Int32 bottom);

        GetLeading(
            [out] Int32* leading);

        SetLeading(
            [in] Int32 leading);
    }

    interface IPaint {
        /** Restores the paint to its default settings. */
        Reset();

        /**
         * Copy the fields from src into this paint. This is equivalent to calling
         * get() on all of the src fields, and calling the corresponding set()
         * methods on this.
         */
        Set(
            [in] IPaint* src);

        /** @hide */
        SetCompatibilityScaling(
            [in] Float factor);

        /**
         * Return the paint's flags. Use the Flag enum to test flag values.
         *
         * @return the paint's flags (see enums ending in _Flag for bit masks)
         */
        GetFlags(
            [out] Int32* flags);

        /**
         * Set the paint's flags. Use the Flag enum to specific flag values.
         *
         * @param flags The new flag bits for the paint
         */
        SetFlags(
            [in] Int32 flags);

        /**
         * Helper for getFlags(), returning true if ANTI_ALIAS_FLAG bit is set
         * AntiAliasing smooths out the edges of what is being drawn, but is has
         * no impact on the interior of the shape. See setDither() and
         * setFilterBitmap() to affect how colors are treated.
         *
         * @return true if the antialias bit is set in the paint's flags.
         */
        IsAntiAlias(
            [out] Boolean* isAntiAlias);

        /**
         * Helper for setFlags(), setting or clearing the ANTI_ALIAS_FLAG bit
         * AntiAliasing smooths out the edges of what is being drawn, but is has
         * no impact on the interior of the shape. See setDither() and
         * setFilterBitmap() to affect how colors are treated.
         *
         * @param aa true to set the antialias bit in the flags, false to clear it
         */
        SetAntiAlias(
            [in] Boolean aa);

        /**
         * Helper for getFlags(), returning true if DITHER_FLAG bit is set
         * Dithering affects how colors that are higher precision than the device
         * are down-sampled. No dithering is generally faster, but higher precision
         * colors are just truncated down (e.g. 8888 -> 565). Dithering tries to
         * distribute the error inherent in this process, to reduce the visual
         * artifacts.
         *
         * @return true if the dithering bit is set in the paint's flags.
         */
        IsDither(
            [out] Boolean* isDither);

        /**
         * Helper for setFlags(), setting or clearing the DITHER_FLAG bit
         * Dithering affects how colors that are higher precision than the device
         * are down-sampled. No dithering is generally faster, but higher precision
         * colors are just truncated down (e.g. 8888 -> 565). Dithering tries to
         * distribute the error inherent in this process, to reduce the visual
         * artifacts.
         *
         * @param dither true to set the dithering bit in flags, false to clear it
         */
        SetDither(
            [in] Boolean dither);

        /**
         * Helper for getFlags(), returning true if LINEAR_TEXT_FLAG bit is set
         *
         * @return true if the lineartext bit is set in the paint's flags
         */
        IsLinearText(
            [out] Boolean* isLinearText);

        /**
         * Helper for setFlags(), setting or clearing the LINEAR_TEXT_FLAG bit
         *
         * @param linearText true to set the linearText bit in the paint's flags,
         *                   false to clear it.
         */
        SetLinearText(
            [in] Boolean linearText);

        /**
         * Helper for getFlags(), returning true if SUBPIXEL_TEXT_FLAG bit is set
         *
         * @return true if the subpixel bit is set in the paint's flags
         */
        IsSubpixelText(
            [out] Boolean* isSubpixelText);

        /**
         * Helper for setFlags(), setting or clearing the SUBPIXEL_TEXT_FLAG bit
         *
         * @param subpixelText true to set the subpixelText bit in the paint's
         *                     flags, false to clear it.
         */
        SetSubpixelText(
            [in] Boolean subpixelText);

        /**
         * Helper for getFlags(), returning true if UNDERLINE_TEXT_FLAG bit is set
         *
         * @return true if the underlineText bit is set in the paint's flags.
         */
        IsUnderlineText(
            [out] Boolean* isUnderlineText);

        /**
         * Helper for setFlags(), setting or clearing the UNDERLINE_TEXT_FLAG bit
         *
         * @param underlineText true to set the underlineText bit in the paint's
         *                      flags, false to clear it.
         */
        SetUnderlineText(
            [in] Boolean underlineText);

        /**
         * Helper for getFlags(), returning true if STRIKE_THRU_TEXT_FLAG bit is set
         *
         * @return true if the strikeThruText bit is set in the paint's flags.
         */
        IsStrikeThruText(
            [out] Boolean* IsStrikeThruText);

        /**
         * Helper for setFlags(), setting or clearing the STRIKE_THRU_TEXT_FLAG bit
         *
         * @param strikeThruText true to set the strikeThruText bit in the paint's
         *                       flags, false to clear it.
         */
        SetStrikeThruText(
            [in] Boolean strikeThruText);

        /**
         * Helper for getFlags(), returning true if FAKE_BOLD_TEXT_FLAG bit is set
         *
         * @return true if the fakeBoldText bit is set in the paint's flags.
         */
        IsFakeBoldText(
            [out] Boolean* IsFakeBoldText);

        /**
         * Helper for setFlags(), setting or clearing the STRIKE_THRU_TEXT_FLAG bit
         *
         * @param fakeBoldText true to set the fakeBoldText bit in the paint's
         *                     flags, false to clear it.
         */
        SetFakeBoldText(
            [in] Boolean fakeBoldText);

        /**
         * Whether or not the bitmap filter is activated.
         * Filtering affects the sampling of bitmaps when they are transformed.
         * Filtering does not affect how the colors in the bitmap are converted into
         * device pixels. That is dependent on dithering and xfermodes.
         *
         * @see #setFilterBitmap(boolean) setFilterBitmap()
         */
        IsFilterBitmap(
            [out] Boolean* isFilterBitmap);

        /**
         * Helper for setFlags(), setting or clearing the FILTER_BITMAP_FLAG bit.
         * Filtering affects the sampling of bitmaps when they are transformed.
         * Filtering does not affect how the colors in the bitmap are converted into
         * device pixels. That is dependent on dithering and xfermodes.
         *
         * @param filter true to set the FILTER_BITMAP_FLAG bit in the paint's
         *               flags, false to clear it.
         */
        SetFilterBitmap(
            [in] Boolean filter);

        /**
         * Return the paint's style, used for controlling how primitives'
         * geometries are interpreted (except for drawBitmap, which always assumes
         * FILL_STYLE).
         *
         * @return the paint's style setting (Fill, Stroke, StrokeAndFill)
         */
        GetStyle(
            [out] PaintStyle* style);

        /**
         * Set the paint's style, used for controlling how primitives'
         * geometries are interpreted (except for drawBitmap, which always assumes
         * Fill).
         *
         * @param style The new style to set in the paint
         */
        SetStyle(
            [in] PaintStyle style);

        /**
         * Return the paint's color. Note that the color is a 32bit value
         * containing alpha as well as r,g,b. This 32bit value is not premultiplied,
         * meaning that its alpha can be any value, regardless of the values of
         * r,g,b. See the Color class for more details.
         *
         * @return the paint's color (and alpha).
         */
        GetColor(
            [out] Int32* color);

        /**
         * Set the paint's color. Note that the color is an int containing alpha
         * as well as r,g,b. This 32bit value is not premultiplied, meaning that
         * its alpha can be any value, regardless of the values of r,g,b.
         * See the Color class for more details.
         *
         * @param color The new color (including alpha) to set in the paint.
         */
        SetColor(
            [in] Int32 color);

        /**
         * Helper to getColor() that just returns the color's alpha value. This is
         * the same as calling getColor() >>> 24. It always returns a value between
         * 0 (completely transparent) and 255 (completely opaque).
         *
         * @return the alpha component of the paint's color.
         */
        GetAlpha(
            [out] Int32* alpha);

        /**
         * Helper to setColor(), that only assigns the color's alpha value,
         * leaving its r,g,b values unchanged. Results are undefined if the alpha
         * value is outside of the range [0..255]
         *
         * @param a set the alpha component [0..255] of the paint's color.
         */
        SetAlpha(
            [in] Int32 a);

        /**
         * Helper to setColor(), that takes a,r,g,b and constructs the color int
         *
         * @param a The new alpha component (0..255) of the paint's color.
         * @param r The new red component (0..255) of the paint's color.
         * @param g The new green component (0..255) of the paint's color.
         * @param b The new blue component (0..255) of the paint's color.
         */
        SetARGB(
            [in] Int32 a,
            [in] Int32 r,
            [in] Int32 g,
            [in] Int32 b);

        /**
         * Return the width for stroking.
         * <p />
         * A value of 0 strokes in hairline mode.
         * Hairlines always draws a single pixel independent of the canva's matrix.
         *
         * @return the paint's stroke width, used whenever the paint's style is
         *         Stroke or StrokeAndFill.
         */
        GetStrokeWidth(
            [out] Float* width);

        /**
         * Set the width for stroking.
         * Pass 0 to stroke in hairline mode.
         * Hairlines always draws a single pixel independent of the canva's matrix.
         *
         * @param width set the paint's stroke width, used whenever the paint's
         *              style is Stroke or StrokeAndFill.
         */
        SetStrokeWidth(
            [in] Float width);

        /**
         * Return the paint's stroke miter value. Used to control the behavior
         * of miter joins when the joins angle is sharp.
         *
         * @return the paint's miter limit, used whenever the paint's style is
         *         Stroke or StrokeAndFill.
         */
        GetStrokeMiter(
            [out] Float* strokeMiter);

        /**
         * Set the paint's stroke miter value. This is used to control the behavior
         * of miter joins when the joins angle is sharp. This value must be >= 0.
         *
         * @param miter set the miter limit on the paint, used whenever the paint's
         *              style is Stroke or StrokeAndFill.
         */
        SetStrokeMiter(
            [in] Float miter);

        /**
         * Return the paint's Cap, controlling how the start and end of stroked
         * lines and paths are treated.
         *
         * @return the line cap style for the paint, used whenever the paint's
         *         style is Stroke or StrokeAndFill.
         */
        GetStrokeCap(
            [out] PaintCap* cap);

        /**
         * Set the paint's Cap.
         *
         * @param cap set the paint's line cap style, used whenever the paint's
         *            style is Stroke or StrokeAndFill.
         */
        SetStrokeCap(
            [in] PaintCap cap);

        /**
         * Return the paint's stroke join type.
         *
         * @return the paint's Join.
         */
        GetStrokeJoin(
            [out] PaintJoin* join);

        /**
         * Set the paint's Join.
         *
         * @param join set the paint's Join, used whenever the paint's style is
         *             Stroke or StrokeAndFill.
         */
        SetStrokeJoin(
            [in] PaintJoin join);

        /**
         * Applies any/all effects (patheffect, stroking) to src, returning the
         * result in dst. The result is that drawing src with this paint will be
         * the same as drawing dst with a default paint (at least from the
         * geometric perspective).
         *
         * @param src input path
         * @param dst output path (may be the same as src)
         * @return    true if the path should be filled, or false if it should be
         *                 drawn with a hairline (width == 0)
         */
        GetFillPath(
            [in] IPath* src,
            [in] IPath* dst,
            [out] Boolean* isShouldFilled);

        /**
         * Get the paint's shader object.
         *
         * @return the paint's shader (or null)
         */
        GetShader(
            [out] IShader** shader);

        /**
         * Set or clear the shader object.
         * <p />
         * Pass null to clear any previous shader.
         * As a convenience, the parameter passed is also returned.
         *
         * @param shader May be null. the new shader to be installed in the paint
         * @return       shader
         */
        SetShader(
            [in] IShader* shader);

        /**
         * Get the paint's colorfilter (maybe be null).
         *
         * @return the paint's colorfilter (maybe be null)
         */
        GetColorFilter(
            [out] IColorFilter** filter);

        /**
         * Set or clear the paint's colorfilter, returning the parameter.
         *
         * @param filter May be null. The new filter to be installed in the paint
         * @return       filter
         */
        SetColorFilter(
            [in] IColorFilter* filter);

        /**
         * Get the paint's xfermode object.
         *
         * @return the paint's xfermode (or null)
         */
        GetXfermode(
            [out] IXfermode** xfermode);

        /**
         * Set or clear the xfermode object.
         * <p />
         * Pass null to clear any previous xfermode.
         * As a convenience, the parameter passed is also returned.
         *
         * @param xfermode May be null. The xfermode to be installed in the paint
         * @return         xfermode
         */
        SetXfermode(
            [in] IXfermode* xfermode);

        /**
         * Get the paint's patheffect object.
         *
         * @return the paint's patheffect (or null)
         */
        GetPathEffect(
            [out] IPathEffect** effect);

        /**
         * Set or clear the patheffect object.
         * <p />
         * Pass null to clear any previous patheffect.
         * As a convenience, the parameter passed is also returned.
         *
         * @param effect May be null. The patheffect to be installed in the paint
         * @return       effect
         */
        SetPathEffect(
            [in] IPathEffect* effect);

        /**
         * Get the paint's maskfilter object.
         *
         * @return the paint's maskfilter (or null)
         */
        GetMaskFilter(
            [out] IMaskFilter** maskfilter);

        /**
         * Set or clear the maskfilter object.
         * <p />
         * Pass null to clear any previous maskfilter.
         * As a convenience, the parameter passed is also returned.
         *
         * @param maskfilter May be null. The maskfilter to be installed in the
         *                   paint
         * @return           maskfilter
         */
        SetMaskFilter(
            [in] IMaskFilter* maskfilter);

        /**
         * Get the paint's typeface object.
         * <p />
         * The typeface object identifies which font to use when drawing or
         * measuring text.
         *
         * @return the paint's typeface (or null)
         */
        GetTypeface(
            [out] ITypeface** typeface);

        /**
         * Set or clear the typeface object.
         * <p />
         * Pass null to clear any previous typeface.
         * As a convenience, the parameter passed is also returned.
         *
         * @param typeface May be null. The typeface to be installed in the paint
         * @return         typeface
         */
        SetTypeface(
            [in] ITypeface* typeface);

        /**
         * Get the paint's rasterizer (or null).
         * <p />
         * The raster controls/modifies how paths/text are turned into alpha masks.
         *
         * @return         the paint's rasterizer (or null)
         */
        GetRasterizer(
            [out] IRasterizer** rasterizer);

        /**
         * Set or clear the rasterizer object.
         * <p />
         * Pass null to clear any previous rasterizer.
         * As a convenience, the parameter passed is also returned.
         *
         * @param rasterizer May be null. The new rasterizer to be installed in
         *                   the paint.
         * @return           rasterizer
         */
        SetRasterizer(
            [in] IRasterizer* rasterizer);

        /**
         * Temporary API to expose layer drawing. This draws a shadow layer below
         * the main layer, with the specified offset and color, and blur radius.
         * If radius is 0, then the shadow layer is removed.
         */
        SetShadowLayer(
            [in] Float radius,
            [in] Float rdx,
            [in] Float rdy,
            [in] Int32 color);

        /**
         * Temporary API to clear the shadow layer.
         */
        ClearShadowLayer();

        /**
         * Return the paint's Align value for drawing text. This controls how the
         * text is positioned relative to its origin. LEFT align means that all of
         * the text will be drawn to the right of its origin (i.e. the origin
         * specifieds the LEFT edge of the text) and so on.
         *
         * @return the paint's Align value for drawing text.
         */
        GetTextAlign(
            [out] PaintAlign* align);

        /**
         * Set the paint's text alignment. This controls how the
         * text is positioned relative to its origin. LEFT align means that all of
         * the text will be drawn to the right of its origin (i.e. the origin
         * specifieds the LEFT edge of the text) and so on.
         *
         * @param align set the paint's Align value for drawing text.
         */
        SetTextAlign(
            [in] PaintAlign align);

        /**
         * Return the paint's text size.
         *
         * @return the paint's text size.
         */
        GetTextSize(
            [out] Float* size);

        /**
         * Set the paint's text size. This value must be > 0
         *
         * @param textSize set the paint's text size.
         */
        SetTextSize(
            [in] Float textSize);

        /**
         * Return the paint's horizontal scale factor for text. The default value
         * is 1.0.
         *
         * @return the paint's scale factor in X for drawing/measuring text
         */
        GetTextScaleX(
            [out] Float* scaleX);

        /**
         * Set the paint's horizontal scale factor for text. The default value
         * is 1.0. Values > 1.0 will stretch the text wider. Values < 1.0 will
         * stretch the text narrower.
         *
         * @param scaleX set the paint's scale in X for drawing/measuring text.
         */
        SetTextScaleX(
            [in] Float scaleX);

        /**
         * Return the paint's horizontal skew factor for text. The default value
         * is 0.
         *
         * @return         the paint's skew factor in X for drawing text.
         */
        GetTextSkewX(
            [out] Float* skewX);

        /**
         * Set the paint's horizontal skew factor for text. The default value
         * is 0. For approximating oblique text, use values around -0.25.
         *
         * @param skewX set the paint's skew factor in X for drawing text.
         */
        SetTextSkewX(
            [in] Float skewX);

        /**
         * Return the distance above (negative) the baseline (ascent) based on the
         * current typeface and text size.
         *
         * @return the distance above (negative) the baseline (ascent) based on the
         *         current typeface and text size.
         */
        Ascent(
            [out] Float* distance);

        /**
         * Return the distance below (positive) the baseline (descent) based on the
         * current typeface and text size.
         *
         * @return the distance below (positive) the baseline (descent) based on
         *         the current typeface and text size.
         */
        Descent(
            [out] Float* distance);

        /**
         * Return the font's recommended interline spacing, given the Paint's
         * settings for typeface, textSize, etc. If metrics is not null, return the
         * fontmetric values in it.
         *
         * @param metrics If this object is not null, its fields are filled with
         *                the appropriate values given the paint's text attributes.
         * @return the font's recommended interline spacing.
         */
        GetFontMetrics(
            [in] IPaintFontMetrics* metrics,
            [out] Float* spacing);

        /**
         * Allocates a new FontMetrics object, and then calls getFontMetrics(fm)
         * with it, returning the object.
         */
        GetFontMetricsEx(
            [out] IPaintFontMetrics** metrics);

        /**
         * Return the font's interline spacing, given the Paint's settings for
         * typeface, textSize, etc. If metrics is not null, return the fontmetric
         * values in it. Note: all values have been converted to integers from
         * floats, in such a way has to make the answers useful for both spacing
         * and clipping. If you want more control over the rounding, call
         * getFontMetrics().
         *
         * @return the font's interline spacing.
         */
        GetFontMetricsInt(
            [in] IPaintFontMetricsInt* fmi,
            [out] Int32* spacing);

        GetFontMetricsIntEx(
            [out] IPaintFontMetricsInt** fmi);

        /**
         * Return the recommend line spacing based on the current typeface and
         * text size.
         *
         * @return  recommend line spacing based on the current typeface and
         *          text size.
         */
        GetFontSpacing(
            [out] Float* spacing);

        /**
         * Return the width of the text.
         *
         * @param text  The text to measure
         * @param index The index of the first character to start measuring
         * @param count THe number of characters to measure, beginning with start
         * @return      The width of the text
         */
        MeasureText(
            [in] ArrayOf<Char8> text,
            [in] Int32 index,
            [in] Int32 count,
            [out] Float* width);

        /**
         * Return the width of the text.
         *
         * @param text  The text to measure
         * @param start The index of the first character to start measuring
         * @param end   1 beyond the index of the last character to measure
         * @return      The width of the text
         */
        MeasureTextEx(
            [in] String text,
            [in] Int32 start,
            [in] Int32 end,
            [out] Float* width);

        /**
         * Return the width of the text.
         *
         * @param text  The text to measure
         * @return      The width of the text
         */
        MeasureTextEx2(
            [in] String text,
            [out] Float* width);

        /**
         * Return the width of the text.
         *
         * @param text  The text to measure
         * @param start The index of the first character to start measuring
         * @param end   1 beyond the index of the last character to measure
         * @return      The width of the text
         */
        MeasureTextEx3(
            [in] ICharSequence* text,
            [in] Int32 start,
            [in] Int32 end,
            [out] Float* width);

        /**
         * Measure the text, stopping early if the measured width exceeds maxWidth.
         * Return the number of chars that were measured, and if measuredWidth is
         * not null, return in it the actual width measured.
         *
         * @param text  The text to measure
         * @param index The offset into text to begin measuring at
         * @param count The number of maximum number of entries to measure. If count
         *              is negative, then the characters before index are measured
         *              in reverse order. This allows for measuring the end of
         *              string.
         * @param maxWidth The maximum width to accumulate.
         * @param measuredWidth Optional. If not null, returns the actual width
         *                     measured.
         * @return The number of chars that were measured. Will always be <=
         *         abs(count).
         */
        BreakText(
            [in] ArrayOf<Char8> text,
            [in] Int32 index,
            [in] Int32 count,
            [in] Float maxWidth,
            [out] ArrayOf<Float> measuredWidth,
            [out] Int32* number);

        /**
         * Measure the text, stopping early if the measured width exceeds maxWidth.
         * Return the number of chars that were measured, and if measuredWidth is
         * not null, return in it the actual width measured.
         *
         * @param text  The text to measure
         * @param start The offset into text to begin measuring at
         * @param end   The end of the text slice to measure.
         * @param measureForwards If true, measure forwards, starting at start.
         *                        Otherwise, measure backwards, starting with end.
         * @param maxWidth The maximum width to accumulate.
         * @param measuredWidth Optional. If not null, returns the actual width
         *                     measured.
         * @return The number of chars that were measured. Will always be <=
         *         abs(end - start).
         */
        BreakTextEx(
            [in] ICharSequence* text,
            [in] Int32 start,
            [in] Int32 end,
            [in] Boolean measureForwards,
            [in] Float maxWidth,
            [out] ArrayOf<Float> measuredWidth,
            [out] Int32* number);

        /**
         * Measure the text, stopping early if the measured width exceeds maxWidth.
         * Return the number of chars that were measured, and if measuredWidth is
         * not null, return in it the actual width measured.
         *
         * @param text  The text to measure
         * @param measureForwards If true, measure forwards, starting with the
         *                        first character in the string. Otherwise,
         *                        measure backwards, starting with the
         *                        last character in the string.
         * @param maxWidth The maximum width to accumulate.
         * @param measuredWidth Optional. If not null, returns the actual width
         *                     measured.
         * @return The number of chars that were measured. Will always be <=
         *         abs(count).
         */
        BreakTextEx2(
            [in] String text,
            [in] Boolean measureForwards,
            [in] Float maxWidth,
            [out] ArrayOf<Float> measuredWidth,
            [out] Int32* number);

        /**
         * Return the advance widths for the characters in the string.
         *
         * @param text     The text to measure
         * @param index    The index of the first char to to measure
         * @param count    The number of chars starting with index to measure
         * @param widths   array to receive the advance widths of the characters.
         *                 Must be at least a large as count.
         * @return         the actual number of widths returned.
         */
        GetTextWidths(
            [in] ArrayOf<Char8> text,
            [in] Int32 index,
            [in] Int32 count,
            [out] ArrayOf<Float> widths,
            [out] Int32* number);

        /**
         * Return the advance widths for the characters in the string.
         *
         * @param text     The text to measure
         * @param start    The index of the first char to to measure
         * @param end      The end of the text slice to measure
         * @param widths   array to receive the advance widths of the characters.
         *                 Must be at least a large as (end - start).
         * @return         the actual number of widths returned.
         */
        GetTextWidthsEx(
            [in] ICharSequence* text,
            [in] Int32 start,
            [in] Int32 end,
            [out] ArrayOf<Float> widths,
            [out] Int32* count);

        /**
         * Return the advance widths for the characters in the string.
         *
         * @param text   The text to measure
         * @param start  The index of the first char to to measure
         * @param end    The end of the text slice to measure
         * @param widths array to receive the advance widths of the characters.
         *               Must be at least a large as the text.
         * @return       the number of unichars in the specified text.
         */
        GetTextWidthsEx2(
            [in] String text,
            [in] Int32 start,
            [in] Int32 end,
            [out] ArrayOf<Float> widths,
            [out] Int32* count);

        /**
         * Return the advance widths for the characters in the string.
         *
         * @param text   The text to measure
         * @param widths array to receive the advance widths of the characters.
         *               Must be at least a large as the text.
         * @return       the number of unichars in the specified text.
         */
        GetTextWidthsEx3(
            [in] String text,
            [out] ArrayOf<Float> widths,
            [out] Int32* width);

        /**
         * Return the path (outline) for the specified text.
         * Note: just like Canvas.drawText, this will respect the Align setting in
         * the paint.
         *
         * @param text     The text to retrieve the path from
         * @param index    The index of the first character in text
         * @param count    The number of characterss starting with index
         * @param x        The x coordinate of the text's origin
         * @param y        The y coordinate of the text's origin
         * @param path     The path to receive the data describing the text. Must
         *                 be allocated by the caller.
         */
        GetTextPath(
            [in] ArrayOf<Char8> text,
            [in] Int32 index,
            [in] Int32 count,
            [in] Float x,
            [in] Float y,
            [in] IPath* path);

        /**
         * Return the path (outline) for the specified text.
         * Note: just like Canvas.drawText, this will respect the Align setting
         * in the paint.
         *
         * @param text  The text to retrieve the path from
         * @param start The first character in the text
         * @param end   1 past the last charcter in the text
         * @param x     The x coordinate of the text's origin
         * @param y     The y coordinate of the text's origin
         * @param path  The path to receive the data describing the text. Must
         *              be allocated by the caller.
         */
        GetTextPathEx(
            [in] String text,
            [in] Int32 start,
            [in] Int32 end,
            [in] Float x,
            [in] Float y,
            [in] IPath* path);

        /**
         * Return in bounds (allocated by the caller) the smallest rectangle that
         * encloses all of the characters, with an implied origin at (0,0).
         *
         * @param text  String to measure and return its bounds
         * @param start Index of the first char in the string to measure
         * @param end   1 past the last char in the string measure
         * @param bounds Returns the unioned bounds of all the text. Must be
         *               allocated by the caller.
         */
        GetTextBounds(
            [in] String text,
            [in] Int32 start,
            [in] Int32 end,
            [in] IRect* bounds);

        /**
         * Return in bounds (allocated by the caller) the smallest rectangle that
         * encloses all of the characters, with an implied origin at (0,0).
         *
         * @param text  Array of chars to measure and return their unioned bounds
         * @param index Index of the first char in the array to measure
         * @param count The number of chars, beginning at index, to measure
         * @param bounds Returns the unioned bounds of all the text. Must be
         *               allocated by the caller.
         */
        GetTextBoundsEx(
            [in] ArrayOf<Char8> text,
            [in] Int32 index,
            [in] Int32 count,
            [in] IRect* bounds);
    }
}
