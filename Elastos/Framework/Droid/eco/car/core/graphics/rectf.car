
module
{
    interface IRect;

    interface IRectF {
        /**
         * Returns true if the rectangle is empty (left >= right or top >= bottom)
         */
        IsEmpty(
            [out] Boolean* isEmpty);

        /**
         * @return the rectangle's width. This does not check for a valid rectangle
         * (i.e. left <= right) so the result may be negative.
         */
        Width(
            [out] Float* width);

        /**
         * @return the rectangle's height. This does not check for a valid rectangle
         * (i.e. top <= bottom) so the result may be negative.
         */
        Height(
            [out] Float* height);

        /**
         * @return the horizontal center of the rectangle. This does not check for
         * a valid rectangle (i.e. left <= right)
         */
        CenterX(
            [out] Float* x);

        /**
         * @return the vertical center of the rectangle. This does not check for
         * a valid rectangle (i.e. top <= bottom)
         */
        CenterY(
            [out] Float* y);

        /**
         * Set the rectangle to (0,0,0,0)
         */
        SetEmpty();

        /**
         * Set the rectangle's coordinates to the specified values. Note: no range
         * checking is performed, so it is up to the caller to ensure that
         * left <= right and top <= bottom.
         *
         * @param left   The X coordinate of the left side of the rectagle
         * @param top    The Y coordinate of the top of the rectangle
         * @param right  The X coordinate of the right side of the rectagle
         * @param bottom The Y coordinate of the bottom of the rectangle
         */
        Set(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom);

        /**
         * Copy the coordinates from src into this rectangle.
         *
         * @param src The rectangle whose coordinates are copied into this
         *           rectangle.
         */
        SetEx(
            [in] IRectF* src);

        /**
         * Copy the coordinates from src into this rectangle.
         *
         * @param src The rectangle whose coordinates are copied into this
         *           rectangle.
         */
        SetEx2(
            [in] IRect* src);

        /**
         * Offset the rectangle by adding dx to its left and right coordinates, and
         * adding dy to its top and bottom coordinates.
         *
         * @param dx The amount to add to the rectangle's left and right coordinates
         * @param dy The amount to add to the rectangle's top and bottom coordinates
         */
        Offset(
            [in] Float dx,
            [in] Float dy);

        /**
         * Offset the rectangle to a specific (left, top) position,
         * keeping its width and height the same.
         *
         * @param newLeft   The new "left" coordinate for the rectangle
         * @param newTop    The new "top" coordinate for the rectangle
         */
        OffsetTo(
            [in] Float newLeft,
            [in] Float newTop);

        /**
         * Inset the rectangle by (dx,dy). If dx is positive, then the sides are
         * moved inwards, making the rectangle narrower. If dx is negative, then the
         * sides are moved outwards, making the rectangle wider. The same holds true
         * for dy and the top and bottom.
         *
         * @param dx The amount to add(subtract) from the rectangle's left(right)
         * @param dy The amount to add(subtract) from the rectangle's top(bottom)
         */
        Inset(
            [in] Float dx,
            [in] Float dy);

        /**
         * Returns true if (x,y) is inside the rectangle. The left and top are
         * considered to be inside, while the right and bottom are not. This means
         * that for a x,y to be contained: left <= x < right and top <= y < bottom.
         * An empty rectangle never contains any point.
         *
         * @param x The X coordinate of the point being tested for containment
         * @param y The Y coordinate of the point being tested for containment
         * @return true iff (x,y) are contained by the rectangle, where containment
         *              means left <= x < right and top <= y < bottom
         */
        Contains(
            [in] Float x,
            [in] Float y,
            [out] Boolean* isContained);

        /**
         * Returns true iff the 4 specified sides of a rectangle are inside or equal
         * to this rectangle. i.e. is this rectangle a superset of the specified
         * rectangle. An empty rectangle never contains another rectangle.
         *
         * @param left The left side of the rectangle being tested for containment
         * @param top The top of the rectangle being tested for containment
         * @param right The right side of the rectangle being tested for containment
         * @param bottom The bottom of the rectangle being tested for containment
         * @return true iff the the 4 specified sides of a rectangle are inside or
         *              equal to this rectangle
         */
        ContainsEx(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [out] Boolean* isContained);

        /**
         * Returns true iff the specified rectangle r is inside or equal to this
         * rectangle. An empty rectangle never contains another rectangle.
         *
         * @param r The rectangle being tested for containment.
         * @return true iff the specified rectangle r is inside or equal to this
         *              rectangle
         */
        ContainsEx2(
             [in] IRectF* r,
             [out] Boolean* isContained);

        /**
         * If the rectangle specified by left,top,right,bottom intersects this
         * rectangle, return true and set this rectangle to that intersection,
         * otherwise return false and do not change this rectangle. No check is
         * performed to see if either rectangle is empty. Note: To just test for
         * intersection, use intersects()
         *
         * @param left The left side of the rectangle being intersected with this
         *             rectangle
         * @param top The top of the rectangle being intersected with this rectangle
         * @param right The right side of the rectangle being intersected with this
         *              rectangle.
         * @param bottom The bottom of the rectangle being intersected with this
         *             rectangle.
         * @return true if the specified rectangle and this rectangle intersect
         *              (and this rectangle is then set to that intersection) else
         *              return false and do not change this rectangle.
         */
        Intersect(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [out] Boolean* isIntersected);

        /**
         * If the specified rectangle intersects this rectangle, return true and set
         * this rectangle to that intersection, otherwise return false and do not
         * change this rectangle. No check is performed to see if either rectangle
         * is empty. To just test for intersection, use intersects()
         *
         * @param r The rectangle being intersected with this rectangle.
         * @return true if the specified rectangle and this rectangle intersect
         *              (and this rectangle is then set to that intersection) else
         *              return false and do not change this rectangle.
         */
        IntersectEx(
            [in] IRectF* r,
            [out] Boolean* isIntersected);

        /**
         * If rectangles a and b intersect, return true and set this rectangle to
         * that intersection, otherwise return false and do not change this
         * rectangle. No check is performed to see if either rectangle is empty.
         * To just test for intersection, use intersects()
         *
         * @param a The first rectangle being intersected with
         * @param b The second rectangle being intersected with
         * @return true iff the two specified rectangles intersect. If they do, set
         *              this rectangle to that intersection. If they do not, return
         *              false and do not change this rectangle.
         */
        SetIntersect(
            [in] IRectF* a,
            [in] IRectF* b,
            [out] Boolean* isIntersected);

        /**
         * Returns true if this rectangle intersects the specified rectangle.
         * In no event is this rectangle modified. No check is performed to see
         * if either rectangle is empty. To record the intersection, use intersect()
         * or setIntersect().
         *
         * @param left The left side of the rectangle being tested for intersection
         * @param top The top of the rectangle being tested for intersection
         * @param right The right side of the rectangle being tested for
         *              intersection
         * @param bottom The bottom of the rectangle being tested for intersection
         * @return true iff the specified rectangle intersects this rectangle. In
         *              no event is this rectangle modified.
         */
        Intersects(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [out] Boolean* isIntersected);

        /**
         * Returns true iff the two specified rectangles intersect. In no event are
         * either of the rectangles modified. To record the intersection,
         * use intersect() or setIntersect().
         *
         * @param a The first rectangle being tested for intersection
         * @param b The second rectangle being tested for intersection
         * @return true iff the two specified rectangles intersect. In no event are
         *              either of the rectangles modified.
         */
        // public static boolean intersects(RectF a, RectF b);

        /**
         * Set the dst integer Rect by rounding this rectangle's coordinates
         * to their nearest integer values.
         */
        Round(
            [in] IRect* dst);

        /**
         * Set the dst integer Rect by rounding "out" this rectangle, choosing the
         * floor of top and left, and the ceiling of right and bottom.
         */
        RoundOut(
            [in] IRect* dst);

        /**
         * Update this Rect to enclose itself and the specified rectangle. If the
         * specified rectangle is empty, nothing is done. If this rectangle is empty
         * it is set to the specified rectangle.
         *
         * @param left The left edge being unioned with this rectangle
         * @param top The top edge being unioned with this rectangle
         * @param right The right edge being unioned with this rectangle
         * @param bottom The bottom edge being unioned with this rectangle
         */
        Union(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom);

        /**
         * Update this Rect to enclose itself and the specified rectangle. If the
         * specified rectangle is empty, nothing is done. If this rectangle is empty
         * it is set to the specified rectangle.
         *
         * @param r The rectangle being unioned with this rectangle
         */
        UnionEx(
            [in] IRectF* r);

        /**
         * Update this Rect to enclose itself and the [x,y] coordinate. There is no
         * check to see that this rectangle is non-empty.
         *
         * @param x The x coordinate of the point to add to the rectangle
         * @param y The y coordinate of the point to add to the rectangle
         */
        UnionEx2(
            [in] Float x,
            [in] Float y);

        /**
         * Swap top/bottom or left/right if there are flipped (i.e. left > right
         * and/or top > bottom). This can be called if
         * the edges are computed separately, and may have crossed over each other.
         * If the edges are already correct (i.e. left <= right and top <= bottom)
         * then nothing is done.
         */
        Sort();
    }
}

