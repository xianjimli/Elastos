
module
{
    interface ICanvas;
    interface IPaint;

    /**
     * Defines a generic graphical "shape."
     * Any Shape can be drawn to a Canvas with its own draw() method,
     * but more graphical control is available if you instead pass
     * it to a {@link android.graphics.drawable.ShapeDrawable}.
     */
    interface IShape {
        /**
         * Returns the width of the Shape.
         */
        GetWidth(
            [out] Float* width);

        /**
         * Returns the height of the Shape.
         */
        GetHeight(
            [out] Float* height);

        /**
         * Draw this shape into the provided Canvas, with the provided Paint.
         * Before calling this, you must call {@link #resize(float,float)}.
         *
         * @param canvas the Canvas within which this shape should be drawn
         * @param paint  the Paint object that defines this shape's characteristics
         */
        Draw(
            [in] ICanvas* canvas,
            [in] IPaint* paint);


        /**
         * Resizes the dimensions of this shape.
         * Must be called before {@link #draw(Canvas,Paint)}.
         *
         * @param width the width of the shape (in pixels)
         * @param height the height of the shape (in pixels)
         */
        Resize(
            [in] Float width,
            [in] Float height);

        /**
         * Checks whether the Shape is opaque.
         * Default impl returns true. Override if your subclass can be opaque.
         *
         * @return true if any part of the drawable is <em>not</em> opaque.
         */
        HasAlpha(
            [out] Boolean* hasAlpha);

        Clone(
            [out] IShape** shape);
    }
}