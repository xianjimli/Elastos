
module
{
    interface IRect;
    interface IOutputStream;

    interface IYuvImage {
        /**
         * Compress a rectangle region in the YuvImage to a jpeg.
         * Only ImageFormat.NV21 and ImageFormat.YUY2
         * are supported for now.
         *
         * @param rectangle The rectangle region to be compressed. The medthod checks if rectangle is
         *                  inside the image. Also, the method modifies rectangle if the chroma pixels
         *                  in it are not matched with the luma pixels in it.
         * @param quality   Hint to the compressor, 0-100. 0 meaning compress for
         *                  small size, 100 meaning compress for max quality.
         * @param stream    OutputStream to write the compressed data.
         * @return          True if the compression is successful.
         * @throws IllegalArgumentException if rectangle is invalid; quality is not within [0,
         *                  100]; or stream is null.
         */
        CompressToJpeg(
            [in] IRect* rectangle,
            [in] Int32 quality,
            [in] IOutputStream* stream,
            [out] Boolean* result);

        /**
         * @return the YUV data.
         */
        GetYuvData(
            [out, callee] ArrayOf<Byte>* data);

        /**
         * @return the YUV format as defined in {@link PixelFormat}.
         */
        GetYuvFormat(
            [out] Int32* format);

        /**
         * @return the number of row bytes in each image plane.
         */
        GetStrides(
            [out, callee] ArrayOf<Int32>* strides);

        /**
         * @return the width of the image.
         */
        GetWidth(
            [out] Int32* width);

        /**
         * @return the height of the image.
         */
        GetHeight(
            [out] Int32* height);
    }
}
