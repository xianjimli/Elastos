
module
{
    merge("media/drm/mobile1/Exceptions.car");
    merge("media/drm/mobile1/DrmConstraintInfo.car");
    merge("media/drm/mobile1/DrmRights.car");
    merge("media/drm/mobile1/DrmRawContent.car");
    merge("media/drm/mobile1/DrmRightsManager.car");
    merge("media/media/audiofx/AudioEffect.car");
    merge("media/media/audiofx/BassBoost.car");
    merge("media/media/audiofx/EnvironmentalReverb.car");
    merge("media/media/audiofx/Equalizer.car");
    merge("media/media/audiofx/PresetReverb.car");
    merge("media/media/audiofx/Virtualizer.car");
    merge("media/media/audiofx/Visualizer.car");
    merge("media/media/AudioFormat.car");
    merge("media/media/IAudioFocusDispatcher.car");
    merge("media/media/IAudioService.car");
    merge("media/media/AudioService.car");
    merge("media/media/IMediaScannerListener.car");
    merge("media/media/MediaScannerService.car");
    merge("media/media/MediaScannerClient.car");
    merge("media/media/AudioTrack.car");
    merge("media/media/AudioSystem.car");
    merge("media/media/AudioManager.car");
    merge("media/media/Metadata.car");
    merge("media/media/MediaPlayer.car");
    merge("media/media/CamcorderProfile.car");
    merge("media/media/MediaRecorder.car");
    merge("media/media/AudioRecord.car");
    merge("media/media/MediaScanner.car");
    merge("media/media/ToneGenerator.car");
    merge("media/media/Ringtone.car");
    merge("media/media/RingtoneManager.car");
    merge("media/media/JetPlayer.car");
    merge("media/media/MediaScannerConnection.car");
    merge("media/media/SoundPool.car");
    merge("media/media/ExifInterface.car");
    merge("media/media/MediaMetadataRetriever.car");
    merge("media/media/AmrInputStream.car");
    merge("media/media/AsyncPlayer.car");
    merge("media/media/FaceDetector.car");
    merge("media/media/ResampleInputStream.car");
    merge("media/media/MiniThumbFile.car");

    class CDrmConstraintInfo {
        interface IDrmConstraintInfo;
    }

    class CDrmRights {
        interface IDrmRights;
    }

    class CDrmRawContent {
        constructor(
            [in] IInputStream* inRawdata,
            [in] Int32 len,
            [in] String mimeTypeStr);
            interface IDrmRawContent;
    }

    singleton class CDrmRightsManager {
        interface IDrmRightsManager;
    }

    class CAudioEffect {
        constructor(
            [in] IUUID* type,
            [in] IUUID* uuid,
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IAudioEffect;
    }

    class CBassBoost {
        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IBassBoost;
    }

    class CEnvironmentalReverb {
        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IEnvironmentalReverb;
    }

    class CEqualizer {
        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IEqualizer;
    }

    class CPresetReverb {
        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IPresetReverb;
    }

    class CVirtualizer {
        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IVirtualizer;
    }

    class CVisualizer {
        constructor(
            [in] Int32 audioSession);

        interface IVisualizer;
    }

    class CAudioTrack {
        constructor(
            [in] Int32 streamType,
            [in] Int32 sampleRateInHz,
            [in] Int32 channelConfig,
            [in] Int32 audioFormat,
            [in] Int32 bufferSizeInBytes,
            [in] Int32 mode);

        constructor(
            [in] Int32 streamType,
            [in] Int32 sampleRateInHz,
            [in] Int32 channelConfig,
            [in] Int32 audioFormat,
            [in] Int32 bufferSizeInBytes,
            [in] Int32 mode,
            [in] Int32 sessionId);

        interface IAudioTrack;
    }

    class CAudioManager {
        constructor(
            [in] IContext* context);

        interface IAudioManager;
    }

    class CAudioService {
        constructor(
            [in] IContext* context);

        interface IAudioService;
    }

    class CMetadata {
        constructor();

        interface IMetadata;
    }

    class CMediaPlayer {
        interface IMediaPlayer;
    }

    class CCamcorderProfile {
        constructor();

        interface ICamcorderProfile;
    }

    class CMediaRecorder {

        constructor();

        interface IMediaRecorder;
    }

    class CAudioRecord {

        constructor(
            [in] Int32 audioSource,
            [in] Int32 sampleRateInHz,
            [in] Int32 channelConfig,
            [in] Int32 audioFormat,
            [in] Int32 bufferSizeInBytes);

        interface IAudioRecord;
    }

    class CMediaScanner {

        constructor(
            [in] IContext* c);

        interface IMediaScanner;
    }

    class CToneGenerator {

        constructor(
            [in] Int32 streamType,
            [in] Int32 volume);

        interface IToneGenerator;
    }

    class CRingtoneManager {

        /**
         * Constructs a RingtoneManager. This constructor is recommended as its
         * constructed instance manages cursor(s).
         *
         * @param activity The activity used to get a managed cursor.
         */
        constructor(
            [in] IActivity* activity);

        /**
         * Constructs a RingtoneManager. The instance constructed by this
         * constructor will not manage the cursor(s), so the client should handle
         * this itself.
         *
         * @param context The context to used to get a cursor.
         */
        constructor(
            [in] IContext* context);

        interface IRingtoneManager;
    }

    class CRingtone {

        constructor(
            [in] IContext* context);

        interface IRingtone;

    }

    class CJetPlayer {

        constructor();

        interface IJetPlayer;
    }

    class CMediaScannerConnection {

        constructor(
            [in] IContext* context,
            [in] IMediaScannerConnectionClient* client);

        interface IMediaScannerConnection;
    }

    class CSoundPool {

        constructor(
            [in] Int32 maxStreams,
            [in] Int32 streamType,
            [in] Int32 srcQuality);

        interface ISoundPool;
    }

    class CExifInterface {

        constructor(
            [in] String fileName);

        interface IExifInterface;
    }

    class CMediaMetadataRetriever {

        constructor();

        interface IMediaMetadataRetriever;
    }

    class CAmrInputStream {
        constructor(
            [in] IInputStream* inputStream);

        interface IAmrInputStream;
    }

    class CAsyncPlayer {
        constructor(
            [in] String tag);

        interface IAsyncPlayer;
    }

    class CFaceDetectorFace {
        constructor();

        interface IFaceDetectorFace;
    }

    class CFaceDetector {
        constructor(
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 maxFaces);

        interface IFaceDetector;
    }

    class CResampleInputStream {
        constructor(
            [in] IInputStream* inputStream,
            [in] Int32 rateIn,
            [in] Int32 rateOut);

        interface IResampleInputStream;
    }

    class CMiniThumbFile {
        constructor(
            [in] IUri* uri);

        interface IMiniThumbFile;
    }
}
