
module
{
    interface IInputMethod;
    interface IInputMethodSession;
    interface ILocalInputMethodSessionCallback;

    /**
     * Base class for derived classes to implement their {@link InputMethod}
     * interface.  This takes care of basic maintenance of the input method,
     * but most behavior must be implemented in a derived class.
     */
    interface IAbstractInputMethodImpl extends ILocalInputMethod {
    }

   /**
     * Base class for derived classes to implement their {@link InputMethodSession}
     * interface.  This takes care of basic maintenance of the session,
     * but most behavior must be implemented in a derived class.
     */
    interface IAbstractInputMethodSessionImpl extends ILocalInputMethodSession {
        /**
         * Check whether this session has been enabled by the system.  If not
         * enabled, you should not execute any calls on to it.
         */
        IsEnabled(
            [out] Boolean* enabled);

        /**
         * Check whether this session has been revoked by the system.  Revoked
         * session is also always disabled, so there is generally no need to
         * explicitly check for this.
         */
        IsRevoked(
            [out] Boolean* revoked);

        /**
         * Change the enabled state of the session.  This only works if the
         * session has not been revoked.
         */
        SetEnabled(
            [in] Boolean enabled);

        /**
         * Revoke the session from the client.  This disabled the session, and
         * prevents it from ever being enabled again.
         */
        RevokeSelf();
    }

    /**
     * AbstractInputMethodService provides a abstract base class for input methods.
     * Normal input method implementations will not derive from this directly,
     * instead building on top of {@link InputMethodService} or another more
     * complete base class.  Be sure to read {@link InputMethod} for more
     * information on the basics of writing input methods.
     *
     * <p>This class combines a Service (representing the input method component
     * to the system with the InputMethod interface that input methods must
     * implement.  This base class takes care of reporting your InputMethod from
     * the service when clients bind to it, but provides no standard implementation
     * of the InputMethod interface itself.  Derived classes must implement that
     * interface.
     */
    interface IAbstractInputMethodService extends IService {
        /**
         * Return the global {@link KeyEvent.DispatcherState KeyEvent.DispatcherState}
         * for used for processing events from the target application.
         * Normally you will not need to use this directly, but
         * just use the standard high-level event callbacks like {@link #onKeyDown}.
         */
        GetKeyDispatcherState(
            [out] IDispatcherState** dispatcherState);

        /**
         * Called by the framework during initialization, when the InputMethod
         * interface for this service needs to be created.
         */
        OnCreateInputMethodInterface(
            [out] IAbstractInputMethodImpl** inputMethodImpl);

        /**
         * Called by the framework when a new InputMethodSession interface is
         * needed for a new client of the input method.
         */
        OnCreateInputMethodSessionInterface(
            [out] IAbstractInputMethodSessionImpl** abstractInputMethodSessionImpl);

        /**
         * Implement this to handle {@link android.os.Binder#dump Binder.dump()}
         * calls on your input method.
         */
        //Dump(
        //    [in] IFileDescriptor* fd,
        //    [in] IPrintWriter* fout,
        //    [in] String[] args);

        OnTrackballEvent(
            [in] IMotionEvent* event,
            [out] Boolean* state);
    }
}
