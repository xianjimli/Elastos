
/**
 * InputMethodService provides a standard implementation of an InputMethod,
 * which final implementations can derive from and customize.  See the
 * base class {@link AbstractInputMethodService} and the {@link InputMethod}
 * interface for more information on the basics of writing input methods.
 *
 * <p>In addition to the normal Service lifecycle methods, this class
 * introduces some new specific callbacks that most subclasses will want
 * to make use of:</p>
 * <ul>
 * <li> {@link #onInitializeInterface()} for user-interface initialization,
 * in particular to deal with configuration changes while the service is
 * running.
 * <li> {@link #onBindInput} to find out about switching to a new client.
 * <li> {@link #onStartInput} to deal with an input session starting with
 * the client.
 * <li> {@link #onCreateInputView()}, {@link #onCreateCandidatesView()},
 * and {@link #onCreateExtractTextView()} for non-demand generation of the UI.
 * <li> {@link #onStartInputView(EditorInfo, boolean)} to deal with input
 * starting within the input area of the IME.
 * </ul>
 *
 * <p>An input method has significant discretion in how it goes about its
 * work: the {@link android.inputmethodservice.InputMethodService} provides
 * a basic framework for standard UI elements (input view, candidates view,
 * and running in fullscreen mode), but it is up to a particular implementor
 * to decide how to use them.  For example, one input method could implement
 * an input area with a keyboard, another could allow the user to draw text,
 * while a third could have no input area (and thus not be visible to the
 * user) but instead listen to audio and perform text to speech conversion.</p>
 *
 * <p>In the implementation provided here, all of these elements are placed
 * together in a single window managed by the InputMethodService.  It will
 * execute callbacks as it needs information about them, and provides APIs for
 * programmatic control over them.  They layout of these elements is explicitly
 * defined:</p>
 *
 * <ul>
 * <li>The soft input view, if available, is placed at the bottom of the
 * screen.
 * <li>The candidates view, if currently shown, is placed above the soft
 * input view.
 * <li>If not running fullscreen, the application is moved or resized to be
 * above these views; if running fullscreen, the window will completely cover
 * the application and its top part will contain the extract text of what is
 * currently being edited by the application.
 * </ul>
 *
 *
 * <a name="SoftInputView"></a>
 * <h3>Soft Input View</h3>
 *
 * <p>Central to most input methods is the soft input view.  This is where most
 * user interaction occurs: pressing on soft keys, drawing characters, or
 * however else your input method wants to generate text.  Most implementations
 * will simply have their own view doing all of this work, and return a new
 * instance of it when {@link #onCreateInputView()} is called.  At that point,
 * as long as the input view is visible, you will see user interaction in
 * that view and can call back on the InputMethodService to interact with the
 * application as appropriate.</p>
 *
 * <p>There are some situations where you want to decide whether or not your
 * soft input view should be shown to the user.  This is done by implementing
 * the {@link #onEvaluateInputViewShown()} to return true or false based on
 * whether it should be shown in the current environment.  If any of your
 * state has changed that may impact this, call
 * {@link #updateInputViewShown()} to have it re-evaluated.  The default
 * implementation always shows the input view unless there is a hard
 * keyboard available, which is the appropriate behavior for most input
 * methods.</p>
 *
 *
 * <a name="CandidatesView"></a>
 * <h3>Candidates View</h3>
 *
 * <p>Often while the user is generating raw text, an input method wants to
 * provide them with a list of possible interpretations of that text that can
 * be selected for use.  This is accomplished with the candidates view, and
 * like the soft input view you implement {@link #onCreateCandidatesView()}
 * to instantiate your own view implementing your candidates UI.</p>
 *
 * <p>Management of the candidates view is a little different than the input
 * view, because the candidates view tends to be more transient, being shown
 * only when there are possible candidates for the current text being entered
 * by the user.  To control whether the candidates view is shown, you use
 * {@link #setCandidatesViewShown(boolean)}.  Note that because the candidate
 * view tends to be shown and hidden a lot, it does not impact the application
 * UI in the same way as the soft input view: it will never cause application
 * windows to resize, only cause them to be panned if needed for the user to
 * see the current focus.</p>
 *
 *
 * <a name="FullscreenMode"></a>
 * <h3>Fullscreen Mode</h3>
 *
 * <p>Sometimes your input method UI is too large to integrate with the
 * application UI, so you just want to take over the screen.  This is
 * accomplished by switching to full-screen mode, causing the input method
 * window to fill the entire screen and add its own "extracted text" editor
 * showing the user the text that is being typed.  Unlike the other UI elements,
 * there is a standard implementation for the extract editor that you should
 * not need to change.  The editor is placed at the top of the IME, above the
 * input and candidates views.</p>
 *
 * <p>Similar to the input view, you control whether the IME is running in
 * fullscreen mode by implementing {@link #onEvaluateFullscreenMode()}
 * to return true or false based on
 * whether it should be fullscreen in the current environment.  If any of your
 * state has changed that may impact this, call
 * {@link #updateFullscreenMode()} to have it re-evaluated.  The default
 * implementation selects fullscreen mode when the screen is in a landscape
 * orientation, which is appropriate behavior for most input methods that have
 * a significant input area.</p>
 *
 * <p>When in fullscreen mode, you have some special requirements because the
 * user can not see the application UI.  In particular, you should implement
 * {@link #onDisplayCompletions(CompletionInfo[])} to show completions
 * generated by your application, typically in your candidates view like you
 * would normally show candidates.
 *
 *
 * <a name="GeneratingText"></a>
 * <h3>Generating Text</h3>
 *
 * <p>The key part of an IME is of course generating text for the application.
 * This is done through calls to the
 * {@link android.view.inputmethod.InputConnection} interface to the
 * application, which can be retrieved from {@link #getCurrentInputConnection()}.
 * This interface allows you to generate raw key events or, if the target
 * supports it, directly edit in strings of candidates and committed text.</p>
 *
 * <p>Information about what the target is expected and supports can be found
 * through the {@link android.view.inputmethod.EditorInfo} class, which is
 * retrieved with {@link #getCurrentInputEditorInfo()} method.  The most
 * important part of this is {@link android.view.inputmethod.EditorInfo#inputType
 * EditorInfo.inputType}; in particular, if this is
 * {@link android.view.inputmethod.EditorInfo#TYPE_NULL EditorInfo.TYPE_NULL},
 * then the target does not support complex edits and you need to only deliver
 * raw key events to it.  An input method will also want to look at other
 * values here, to for example detect password mode, auto complete text views,
 * phone number entry, etc.</p>
 *
 * <p>When the user switches between input targets, you will receive calls to
 * {@link #onFinishInput()} and {@link #onStartInput(EditorInfo, boolean)}.
 * You can use these to reset and initialize your input state for the current
 * target.  For example, you will often want to clear any input state, and
 * update a soft keyboard to be appropriate for the new inputType.</p>
 *
 * @attr ref android.R.styleable#InputMethodService_imeFullscreenBackground
 * @attr ref android.R.styleable#InputMethodService_imeExtractEnterAnimation
 * @attr ref android.R.styleable#InputMethodService_imeExtractExitAnimation
 */

module
{
    interface IAbstractInputMethodService;
    interface ILayoutInflater;


    [deprecated]
    interface IInputMethodService extends IAbstractInputMethodService {
        /**
         * This is a hook that subclasses can use to perform initialization of
         * their interface.  It is called for you prior to any of your UI objects
         * being created, both after the service is first created and after a
         * configuration change happens.
         */
        OnInitializeInterface();

        GetLayoutInflater(
            [out] ILayoutInflater** inflater);

        GetWindow(
            [out] IDialog** dialog);

        /**
         * Return the maximum width, in pixels, available the input method.
         * Input methods are positioned at the bottom of the screen and, unless
         * running in fullscreen, will generally want to be as short as possible
         * so should compute their height based on their contents.  However, they
         * can stretch as much as needed horizontally.  The function returns to
         * you the maximum amount of space available horizontally, which you can
         * use if needed for UI placement.
         *
         * <p>In many cases this is not needed, you can just rely on the normal
         * view layout mechanisms to position your views within the full horizontal
         * space given to the input method.
         *
         * <p>Note that this value can change dynamically, in particular when the
         * screen orientation changes.
         */
        GetMaxWidth(
            [out] Int32* maxWidth);

        /**
         * Return the currently active InputBinding for the input method, or
         * null if there is none.
         */
        GetCurrentInputBinding(
            [out] IInputBinding** binding);

        /**
         * Retrieve the currently active InputConnection that is bound to
         * the input method, or null if there is none.
         */
        GetCurrentInputConnection(
            [out] IInputConnection** inputConnection);

        GetCurrentInputStarted(
            [out] Boolean* state);

        GetCurrentInputEditorInfo(
            [out] IEditorInfo** editorInfo);

        /**
         * Re-evaluate whether the input method should be running in fullscreen
         * mode, and update its UI if this has changed since the last time it
         * was evaluated.  This will call {@link #onEvaluateFullscreenMode()} to
         * determine whether it should currently run in fullscreen mode.  You
         * can use {@link #isFullscreenMode()} to determine if the input method
         * is currently running in fullscreen mode.
         */
        UpdateFullscreenMode();

        /**
         * Update the given window's parameters for the given mode.  This is called
         * when the window is first displayed and each time the fullscreen or
         * candidates only mode changes.
         *
         * <p>The default implementation makes the layout for the window
         * MATCH_PARENT x MATCH_PARENT when in fullscreen mode, and
         * MATCH_PARENT x WRAP_CONTENT when in non-fullscreen mode.
         *
         * @param win The input method's window.
         * @param isFullscreen If true, the window is running in fullscreen mode
         * and intended to cover the entire application display.
         * @param isCandidatesOnly If true, the window is only showing the
         * candidates view and none of the rest of its UI.  This is mutually
         * exclusive with fullscreen mode.
         */
        OnConfigureWindow(
            [in] IWindow* win,
            [in] Boolean isFullscreen,
            [in] Boolean isCandidatesOnly);

        /**
         * Return whether the input method is <em>currently</em> running in
         * fullscreen mode.  This is the mode that was last determined and
         * applied by {@link #updateFullscreenMode()}.
         */
        IsFullscreenMode(
            [out] Boolean* fullScreenMode);

        /**
         * Override this to control when the input method should run in
         * fullscreen mode.  The default implementation runs in fullsceen only
         * when the screen is in landscape mode.  If you change what
         * this returns, you will need to call {@link #updateFullscreenMode()}
         * yourself whenever the returned value may have changed to have it
         * re-evaluated and applied.
         */
        OnEvaluateFullscreenMode(
            [out] Boolean* screenMode);

        /**
         * Controls the visibility of the extracted text area.  This only applies
         * when the input method is in fullscreen mode, and thus showing extracted
         * text.  When false, the extracted text will not be shown, allowing some
         * of the application to be seen behind.  This is normally set for you
         * by {@link #onUpdateExtractingVisibility}.  This controls the visibility
         * of both the extracted text and candidate view; the latter since it is
         * not useful if there is no text to see.
         */
        SetExtractViewShown(
            [in] Boolean shown);

        /**
         * Return whether the fullscreen extract view is shown.  This will only
         * return true if {@link #isFullscreenMode()} returns true, and in that
         * case its value depends on the last call to
         * {@link #setExtractViewShown(boolean)}.  This effectively lets you
         * determine if the application window is entirely covered (when this
         * returns true) or if some part of it may be shown (if this returns
         * false, though if {@link #isFullscreenMode()} returns true in that case
         * then it is probably only a sliver of the application).
         */
        IsExtractViewShown(
            [out] Boolean* shown);

        /**
         * Re-evaluate whether the soft input area should currently be shown, and
         * update its UI if this has changed since the last time it
         * was evaluated.  This will call {@link #onEvaluateInputViewShown()} to
         * determine whether the input view should currently be shown.  You
         * can use {@link #isInputViewShown()} to determine if the input view
         * is currently shown.
         */
        UpdateInputViewShown();

        /**
         * Returns true if we have been asked to show our input view.
         */
        IsShowInputRequested(
            [out] Boolean* requested);

        /**
         * Return whether the soft input view is <em>currently</em> shown to the
         * user.  This is the state that was last determined and
         * applied by {@link #updateInputViewShown()}.
         */
        IsInputViewShown(
            [out] Boolean* shown);

        /**
         * Override this to control when the soft input area should be shown to
         * the user.  The default implementation only shows the input view when
         * there is no hard keyboard or the keyboard is hidden.  If you change what
         * this returns, you will need to call {@link #updateInputViewShown()}
         * yourself whenever the returned value may have changed to have it
         * re-evalauted and applied.
         */
        OnEvaluateInputViewShown(
            [out] Boolean* shown);

        /**
         * Controls the visibility of the candidates display area.  By default
         * it is hidden.
         */
        SetCandidatesViewShown(
            [in] Boolean shown);

        /**
         * Returns the visibility mode (either {@link View#INVISIBLE View.INVISIBLE}
         * or {@link View#GONE View.GONE}) of the candidates view when it is not
         * shown.  The default implementation returns GONE when
         * {@link #isExtractViewShown} returns true,
         * otherwise VISIBLE.  Be careful if you change this to return GONE in
         * other situations -- if showing or hiding the candidates view causes
         * your window to resize, this can cause temporary drawing artifacts as
         * the resize takes place.
         */
        GetCandidatesHiddenVisibility(
            [out] Int32* visibility);

        ShowStatusIcon(
            [in] Int32 iconResId);

        HideStatusIcon();

        /**
         * Force switch to a new input method, as identified by <var>id</var>.  This
         * input method will be destroyed, and the requested one started on the
         * current input field.
         *
         * @param id Unique identifier of the new input method ot start.
         */
        SwitchInputMethod(
            [in] String id);

        SetExtractView(
            [in] IView* view);

        /**
         * Replaces the current candidates view with a new one.  You only need to
         * call this when dynamically changing the view; normally, you should
         * implement {@link #onCreateCandidatesView()} and create your view when
         * first needed by the input method.
         */
        SetCandidatesView(
            [in] IView* view);
        /**
         * Replaces the current input view with a new one.  You only need to
         * call this when dynamically changing the view; normally, you should
         * implement {@link #onCreateInputView()} and create your view when
         * first needed by the input method.
         */
        SetInputView(
            [in] IView* view);

        /**
         * Called by the framework to create the layout for showing extacted text.
         * Only called when in fullscreen mode.  The returned view hierarchy must
         * have an {@link ExtractEditText} whose ID is
         * {@link android.R.id#inputExtractEditText}.
         */
        OnCreateExtractTextView(
            [out] IView** view);

        /**
         * Create and return the view hierarchy used to show candidates.  This will
         * be called once, when the candidates are first displayed.  You can return
         * null to have no candidates view; the default implementation returns null.
         *
         * <p>To control when the candidates view is displayed, use
         * {@link #setCandidatesViewShown(boolean)}.
         * To change the candidates view after the first one is created by this
         * function, use {@link #setCandidatesView(View)}.
         */
        OnCreateCandidatesView(
            [out] IView** view);

        /**
         * Create and return the view hierarchy used for the input area (such as
         * a soft keyboard).  This will be called once, when the input area is
         * first displayed.  You can return null to have no input area; the default
         * implementation returns null.
         *
         * <p>To control when the input view is displayed, implement
         * {@link #onEvaluateInputViewShown()}.
         * To change the input view after the first one is created by this
         * function, use {@link #setInputView(View)}.
         */
        OnCreateInputView(
            [out] IView** view);

        /**
         * Called when the input view is being shown and input has started on
         * a new editor.  This will always be called after {@link #onStartInput},
         * allowing you to do your general setup there and just view-specific
         * setup here.  You are guaranteed that {@link #onCreateInputView()} will
         * have been called some time before this function is called.
         *
         * @param info Description of the type of text being edited.
         * @param restarting Set to true if we are restarting input on the
         * same text field as before.
         */
        OnStartInputView(
            [in] IEditorInfo* info,
            [in] Boolean restarting);

        /**
         * Called when the input view is being hidden from the user.  This will
         * be called either prior to hiding the window, or prior to switching to
         * another target for editing.
         *
         * <p>The default
         * implementation uses the InputConnection to clear any active composing
         * text; you can override this (not calling the base class implementation)
         * to perform whatever behavior you would like.
         *
         * @param finishingInput If true, {@link #onFinishInput} will be
         * called immediately after.
         */
        OnFinishInputView(
            [in] Boolean finishingInput);

        /**
         * Called when only the candidates view has been shown for showing
         * processing as the user enters text through a hard keyboard.
         * This will always be called after {@link #onStartInput},
         * allowing you to do your general setup there and just view-specific
         * setup here.  You are guaranteed that {@link #onCreateCandidatesView()}
         * will have been called some time before this function is called.
         *
         * <p>Note that this will <em>not</em> be called when the input method
         * is running in full editing mode, and thus receiving
         * {@link #onStartInputView} to initiate that operation.  This is only
         * for the case when candidates are being shown while the input method
         * editor is hidden but wants to show its candidates UI as text is
         * entered through some other mechanism.
         *
         * @param info Description of the type of text being edited.
         * @param restarting Set to true if we are restarting input on the
         * same text field as before.
         */
        OnStartCandidatesView(
            [in] IEditorInfo* info,
            [in] Boolean restarting);

        /**
         * Called when the candidates view is being hidden from the user.  This will
         * be called either prior to hiding the window, or prior to switching to
         * another target for editing.
         *
         * <p>The default
         * implementation uses the InputConnection to clear any active composing
         * text; you can override this (not calling the base class implementation)
         * to perform whatever behavior you would like.
         *
         * @param finishingInput If true, {@link #onFinishInput} will be
         * called immediately after.
         */
        OnFinishCandidatesView(
            [in] Boolean finishingInput);

        /**
         * The system has decided that it may be time to show your input method.
         * This is called due to a corresponding call to your
         * {@link InputMethod#showSoftInput InputMethod.showSoftInput()}
         * method.  The default implementation uses
         * {@link #onEvaluateInputViewShown()}, {@link #onEvaluateFullscreenMode()},
         * and the current configuration to decide whether the input view should
         * be shown at this point.
         *
         * @param flags Provides additional information about the show request,
         * as per {@link InputMethod#showSoftInput InputMethod.showSoftInput()}.
         * @param configChange This is true if we are re-showing due to a
         * configuration change.
         * @return Returns true to indicate that the window should be shown.
         */
        OnShowInputRequested(
            [in] Int32 flags,
            [in] Boolean configChange,
            [out] Boolean* requested);

        ShowWindow(
            [in] Boolean showInput);

        HideWindow();

        /**
         * Called when the input method window has been shown to the user, after
         * previously not being visible.  This is done after all of the UI setup
         * for the window has occurred (creating its views etc).
         */
        OnWindowShown();

        /**
         * Called when the input method window has been hidden from the user,
         * after previously being visible.
         */
        OnWindowHidden();

        /**
         * Called when a new client has bound to the input method.  This
         * may be followed by a series of {@link #onStartInput(EditorInfo, boolean)}
         * and {@link #onFinishInput()} calls as the user navigates through its
         * UI.  Upon this call you know that {@link #getCurrentInputBinding}
         * and {@link #getCurrentInputConnection} return valid objects.
         */
        OnBindInput();

        /**
         * Called when the previous bound client is no longer associated
         * with the input method.  After returning {@link #getCurrentInputBinding}
         * and {@link #getCurrentInputConnection} will no longer return
         * valid objects.
         */
        OnUnbindInput();

        /**
         * Called to inform the input method that text input has started in an
         * editor.  You should use this callback to initialize the state of your
         * input to match the state of the editor given to it.
         *
         * @param attribute The attributes of the editor that input is starting
         * in.
         * @param restarting Set to true if input is restarting in the same
         * editor such as because the application has changed the text in
         * the editor.  Otherwise will be false, indicating this is a new
         * session with the editor.
         */
        OnStartInput(
            [in] IEditorInfo* attribute,
            [in] Boolean restarting);

        /**
         * Called to inform the input method that text input has finished in
         * the last editor.  At this point there may be a call to
         * {@link #onStartInput(EditorInfo, boolean)} to perform input in a
         * new editor, or the input method may be left idle.  This method is
         * <em>not</em> called when input restarts in the same editor.
         *
         * <p>The default
         * implementation uses the InputConnection to clear any active composing
         * text; you can override this (not calling the base class implementation)
         * to perform whatever behavior you would like.
         */
        OnFinishInput();

        /**
         * Called when the application has reported auto-completion candidates that
         * it would like to have the input method displayed.  Typically these are
         * only used when an input method is running in full-screen mode, since
         * otherwise the user can see and interact with the pop-up window of
         * completions shown by the application.
         *
         * <p>The default implementation here does nothing.
         */
        OnDisplayCompletions(
            [in] ArrayOf<ICompletionInfo*>* completions);

        /**
         * Called when the application has reported new extracted text to be shown
         * due to changes in its current text state.  The default implementation
         * here places the new text in the extract edit text, when the input
         * method is running in fullscreen mode.
         */
        OnUpdateExtractedText(
            [in] Int32 token,
            [in] IExtractedText* text);

        /**
         * Called when the application has reported a new selection region of
         * the text.  This is called whether or not the input method has requested
         * extracted text updates, although if so it will not receive this call
         * if the extracted text has changed as well.
         *
         * <p>The default implementation takes care of updating the cursor in
         * the extract text, if it is being shown.
         */
        OnUpdateSelection(
            [in] Int32 oldSelStart,
            [in] Int32 oldSelEnd,
            [in] Int32 newSelStart,
            [in] Int32 newSelEnd,
            [in] Int32 candidatesStart,
            [in] Int32 candidatesEnd);

        /**
         * Called when the application has reported a new location of its text
         * cursor.  This is only called if explicitly requested by the input method.
         * The default implementation does nothing.
         */
        OnUpdateCursor(
            [in] IRect* newCursor);

        /**
         * Close this input method's soft input area, removing it from the display.
         * The input method will continue running, but the user can no longer use
         * it to generate input by touching the screen.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link InputMethodManager#HIDE_IMPLICIT_ONLY
         * InputMethodManager.HIDE_IMPLICIT_ONLY} bit set.
         */
        RequestHideSelf(
            [in] Int32 flags);

        OnAppPrivateCommand(
            [in] String action,
            [in] IBundle* data);

        /**
         * Send the given key event code (as defined by {@link KeyEvent}) to the
         * current input connection is a key down + key up event pair.  The sent
         * events have {@link KeyEvent#FLAG_SOFT_KEYBOARD KeyEvent.FLAG_SOFT_KEYBOARD}
         * set, so that the recipient can identify them as coming from a software
         * input method, and
         * {@link KeyEvent#FLAG_KEEP_TOUCH_MODE KeyEvent.FLAG_KEEP_TOUCH_MODE}, so
         * that they don't impact the current touch mode of the UI.
         *
         * @param keyEventCode The raw key code to send, as defined by
         * {@link KeyEvent}.
         */
        SendDownUpKeyEvents(
            [in] Int32 keyEventCode);
        /**
         * Ask the input target to execute its default action via
         * {@link InputConnection#performEditorAction
         * InputConnection.performEditorAction()}.
         *
         * @param fromEnterKey If true, this will be executed as if the user had
         * pressed an enter key on the keyboard, that is it will <em>not</em>
         * be done if the editor has set {@link EditorInfo#IME_FLAG_NO_ENTER_ACTION
         * EditorInfo.IME_FLAG_NO_ENTER_ACTION}.  If false, the action will be
         * sent regardless of how the editor has set that flag.
         *
         * @return Returns a boolean indicating whether an action has been sent.
         * If false, either the editor did not specify a default action or it
         * does not want an action from the enter key.  If true, the action was
         * sent (or there was no input connection at all).
         */
        SendDefaultEditorAction(
            [in] Boolean fromEnterKey,
            [out] Boolean* state);

        /**
         * Send the given UTF-16 character to the current input connection.  Most
         * characters will be delivered simply by calling
         * {@link InputConnection#commitText InputConnection.commitText()} with
         * the character; some, however, may be handled different.  In particular,
         * the enter character ('\n') will either be delivered as an action code
         * or a raw key event, as appropriate.
         *
         * @param charCode The UTF-16 character code to send.
         */
        SendKeyChar(
            [in] Char32 charCode);
        /**
         * This is called when the user has moved the cursor in the extracted
         * text view, when running in fullsreen mode.  The default implementation
         * performs the corresponding selection change on the underlying text
         * editor.
         */
        OnExtractedSelectionChanged(
            [in] Int32 start,
            [in] Int32 end);

        /**
         * This is called when the user has clicked on the extracted text view,
         * when running in fullscreen mode.  The default implementation hides
         * the candidates view when this happens, but only if the extracted text
         * editor has a vertical scroll bar because its text doesn't fit.
         * Re-implement this to provide whatever behavior you want.
         */
        OnExtractedTextClicked();

        /**
         * This is called when the user has performed a cursor movement in the
         * extracted text view, when it is running in fullscreen mode.  The default
         * implementation hides the candidates view when a vertical movement
         * happens, but only if the extracted text editor has a vertical scroll bar
         * because its text doesn't fit.
         * Re-implement this to provide whatever behavior you want.
         * @param dx The amount of cursor movement in the x dimension.
         * @param dy The amount of cursor movement in the y dimension.
         */
        OnExtractedCursorMovement(
            [in] Int32 dx,
            [in] Int32 dy);

        /**
         * This is called when the user has selected a context menu item from the
         * extracted text view, when running in fullscreen mode.  The default
         * implementation sends this action to the current InputConnection's
         * {@link InputConnection#performContextMenuAction(int)}, for it
         * to be processed in underlying "real" editor.  Re-implement this to
         * provide whatever behavior you want.
         */
        OnExtractTextContextMenuItem(
            [in] Int32 id,
            [out] Boolean* state);

        /**
         * Return text that can be used as a button label for the given
         * {@link EditorInfo#imeOptions EditorInfo.imeOptions}.  Returns null
         * if there is no action requested.  Note that there is no guarantee that
         * the returned text will be relatively short, so you probably do not
         * want to use it as text on a soft keyboard key label.
         *
         * @param imeOptions The value from @link EditorInfo#imeOptions EditorInfo.imeOptions}.
         *
         * @return Returns a label to use, or null if there is no action.
         */
        GetTextForImeAction(
            [in] Int32 imeOptions,
            [out] ICharSequence** text);

        /**
         * Called when the fullscreen-mode extracting editor info has changed,
         * to determine whether the extracting (extract text and candidates) portion
         * of the UI should be shown.  The standard implementation hides or shows
         * the extract area depending on whether it makes sense for the
         * current editor.  In particular, a {@link InputType#TYPE_NULL}
         * input type or {@link EditorInfo#IME_FLAG_NO_EXTRACT_UI} flag will
         * turn off the extract area since there is no text to be shown.
         */
        OnUpdateExtractingVisibility(
            [in] IEditorInfo* ei);

        /**
         * Called when the fullscreen-mode extracting editor info has changed,
         * to update the state of its UI such as the action buttons shown.
         * You do not need to deal with this if you are using the standard
         * full screen extract UI.  If replacing it, you will need to re-implement
         * this to put the appropriate action button in your own UI and handle it,
         * and perform any other changes.
         *
         * <p>The standard implementation turns on or off its accessory area
         * depending on whether there is an action button, and hides or shows
         * the entire extract area depending on whether it makes sense for the
         * current editor.  In particular, a {@link InputType#TYPE_NULL} or
         * {@link InputType#TYPE_TEXT_VARIATION_FILTER} input type will turn off the
         * extract area since there is no text to be shown.
         */
        OnUpdateExtractingViews(
            [in] IEditorInfo* ei);

        /**
         * This is called when, while currently displayed in extract mode, the
         * current input target changes.  The default implementation will
         * auto-hide the IME if the new target is not a full editor, since this
         * can be an confusing experience for the user.
         */
        OnExtractingInputChanged(
            [in] IEditorInfo* ei);
    }
}
