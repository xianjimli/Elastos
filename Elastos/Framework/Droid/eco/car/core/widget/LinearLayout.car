
module
{
    interface IViewGroup;

    interface IViewGroupMarginLayoutParams;

    interface ILinearLayoutLayoutParams extends IViewGroupMarginLayoutParams {
        GetWeight(
            [out] Float* weight);

        SetWeight(
            [in] Float weight);

        GetGravity(
            [out] Int32* gravity);
    }

    interface ILinearLayout extends IViewGroup {
        /**
         * <p>Indicates whether widgets contained within this layout are aligned
         * on their baseline or not.</p>
         *
         * @return true when widgets are baseline-aligned, false otherwise
         */
        IsBaselineAligned(
            [out] Boolean* baselineAligned);

        /**
         * <p>Defines whether widgets contained in this layout are
         * baseline-aligned or not.</p>
         *
         * @param baselineAligned true to align widgets on their baseline,
         *         false otherwise
         *
         * @attr ref android.R.styleable#LinearLayout_baselineAligned
         */
        SetBaselineAligned(
            [in] Boolean baselineAligned);

        /**
         * @return The index of the child that will be used if this layout is
         *   part of a larger layout that is baseline aligned, or -1 if none has
         *   been set.
         */
        GetBaselineAlignedChildIndex(
            [out] Int32* baselineAlignedChildIndex);

        /**
         * @param i The index of the child that will be used if this layout is
         *          part of a larger layout that is baseline aligned.
         *
         * @attr ref android.R.styleable#LinearLayout_baselineAlignedChildIndex
         */
        SetBaselineAlignedChildIndex(
            [in] Int32 baselineAlignedChildIndex);

        /**
         * Returns the desired weights sum.
         *
         * @return A number greater than 0.0f if the weight sum is defined, or
         *         a number lower than or equals to 0.0f if not weight sum is
         *         to be used.
         */
        GetWeightSum(
            [out] Float* weightSum);

        /**
         * Defines the desired weights sum. If unspecified the weights sum is computed
         * at layout time by adding the layout_weight of each child.
         *
         * This can be used for instance to give a single child 50% of the total
         * available space by giving it a layout_weight of 0.5 and setting the
         * weightSum to 1.0.
         *
         * @param weightSum a number greater than 0.0f, or a number lower than or equals
         *        to 0.0f if the weight sum should be computed from the children's
         *        layout_weight
         */
        SetWeightSum(
            [in] Float weightSum);

        /**
         * Should the layout be a column or a row.
         * @param orientation Pass HORIZONTAL or VERTICAL. Default
         * value is HORIZONTAL.
         *
         * @attr ref android.R.styleable#LinearLayout_orientation
         */
        SetOrientation(
            [in] Int32 orientation);

        /**
         * Returns the current orientation.
         *
         * @return either {@link #HORIZONTAL} or {@link #VERTICAL}
         */
        GetOrientation(
            [out] Int32* orientation);

        /**
         * Describes how the child views are positioned. Defaults to GRAVITY_TOP. If
         * this layout has a VERTICAL orientation, this controls where all the child
         * views are placed if there is extra vertical space. If this layout has a
         * HORIZONTAL orientation, this controls the alignment of the children.
         *
         * @param gravity See {@link android.view.Gravity}
         *
         * @attr ref android.R.styleable#LinearLayout_gravity
         */
        SetGravity(
            [in] Int32 gravity);

        SetHorizontalGravity(
            [in] Int32 horizontalGravity);

        SetVerticalGravity(
            [in] Int32 verticalGravity);
    }
}
