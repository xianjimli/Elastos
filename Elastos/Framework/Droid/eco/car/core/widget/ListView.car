
module
{
    interface IView;
    interface IAdapter;
    interface IDrawable;
    interface IRect;
    interface IAbsListView;

    interface IFixedViewInfo {
    }

    interface IListViewSavedState extends IViewBaseSavedState {
    }

    interface IListView extends IAbsListView {
        GetMaxScrollAmount(
            [out] Int32* amount);

        /**
         * Add a fixed view to appear at the top of the list. If addHeaderView is
         * called more than once, the views will appear in the order they were
         * added. Views added using this call can take focus if they want.
         * <p>
         * NOTE: Call this before calling setAdapter. This is so ListView can wrap
         * the supplied cursor with one that will also account for header and footer
         * views.
         *
         * @param v The view to add.
         * @param data Data to associate with this view
         * @param isSelectable whether the item is selectable
         */
        AddHeaderView(
            [in] IView* v,
            [in] IInterface* data,
            [in] Boolean isSelectable);

        /**
         * Add a fixed view to appear at the top of the list. If addHeaderView is
         * called more than once, the views will appear in the order they were
         * added. Views added using this call can take focus if they want.
         * <p>
         * NOTE: Call this before calling setAdapter. This is so ListView can wrap
         * the supplied cursor with one that will also account for header and footer
         * views.
         *
         * @param v The view to add.
         */
        AddHeaderViewEx(
            [in] IView* v);

        /**
         * Removes a previously-added header view.
         *
         * @param v The view to remove
         * @return TRUE if the view was removed, FALSE if the view was not a header
         *         view
         */
        RemoveHeaderView(
            [in] IView* v,
            [out] Boolean* result);

        /**
         * Add a fixed view to appear at the bottom of the list. If addFooterView is
         * called more than once, the views will appear in the order they were
         * added. Views added using this call can take focus if they want.
         * <p>
         * NOTE: Call this before calling setAdapter. This is so ListView can wrap
         * the supplied cursor with one that will also account for header and footer
         * views.
         *
         * @param v The view to add.
         * @param data Data to associate with this view
         * @param isSelectable TRUE if the footer view can be selected
         */
        AddFooterView(
            [in] IView* v,
            [in] IInterface* data,
            [in] Boolean isSelectable);

        /**
         * Add a fixed view to appear at the bottom of the list. If addFooterView is called more
         * than once, the views will appear in the order they were added. Views added using
         * this call can take focus if they want.
         * <p>NOTE: Call this before calling setAdapter. This is so ListView can wrap the supplied
         * cursor with one that will also account for header and footer views.
         *
         *
         * @param v The view to add.
         */
        AddFooterViewEx(
            [in] IView* v);

        /**
         * Removes a previously-added footer view.
         *
         * @param v The view to remove
         * @return
         * TRUE if the view was removed, FALSE if the view was not a footer view
         */
        RemoveFooterView(
            [in] IView* v,
            [out] Boolean* result);

        /**
         * Sets the selected item and positions the selection y pixels from the top edge
         * of the ListView. (If in touch mode, the item will not be selected but it will
         * still be positioned appropriately.)
         *
         * @param position Index (starting at 0) of the data item to be selected.
         * @param y The distance from the top edge of the ListView (plus padding) that the
         *        item will be positioned.
         */
        SetSelectionFromTop(
            [in] Int32 position,
            [in] Int32 y);

        /**
         * setSelectionAfterHeaderView set the selection to be the first list item
         * after the header views.
         */
        SetSelectionAfterHeaderView();

        /**
         * Indicates that the views created by the ListAdapter can contain focusable
         * items.
         *
         * @param itemsCanFocus TRUE if items can Get focus, FALSE otherwise
         */
        SetItemsCanFocus(
            [in] Boolean itemsCanFocus);

        /**
         * @return Whether the views created by the ListAdapter can contain focusable
         * items.
         */
        GetItemsCanFocus(
            [out] Boolean* canFocus);

        /**
         * Returns the drawable that will be drawn between each item in the list.
         *
         * @return the current drawable drawn between list elements
         */
        GetDivider(
            [out] IDrawable** divider);

        /**
         * Sets the drawable that will be drawn between each item in the list. If the drawable does
         * not have an intrinsic height, you should also call {@link #setDividerHeight(Int32)}
         *
         * @param divider The drawable to use.
         */
        SetDivider(
            [in] IDrawable* divider);

        /**
         * @return Returns the height of the divider that will be drawn between each item in the list.
         */
        GetDividerHeight(
            [out] Int32* height);

        /**
         * Sets the height of the divider that will be drawn between each item in the list. Calling
         * this will override the intrinsic height as set by {@link #setDivider(Drawable)}
         *
         * @param height The new height of the divider in pixels.
         */
        SetDividerHeight(
            [in] Int32 height);

        /**
         * Enables or disables the drawing of the divider for header views.
         *
         * @param headerDividersEnabled True to draw the headers, FALSE otherwise.
         *
         * @see #setFooterDividersEnabled(Boolean)
         * @see #addHeaderView(android.view.View)
         */
        SetHeaderDividersEnabled(
            [in] Boolean headerDividersEnabled);

        /**
         * Enables or disables the drawing of the divider for footer views.
         *
         * @param footerDividersEnabled True to draw the footers, FALSE otherwise.
         *
         * @see #setHeaderDividersEnabled(Boolean)
         * @see #addFooterView(android.view.View)
         */
        SetFooterDividersEnabled(
            [in] Boolean footerDividersEnabled);

        /**
         * Sets the drawable that will be drawn above all other list content.
         * This area can become visible when the user overscrolls the list.
         *
         * @param header The drawable to use
         */
        SetOverscrollHeader(
            [in] IDrawable* header);

        /**
         * @return The drawable that will be drawn above all other list content
         */
        GetOverscrollHeader(
            [out] IDrawable** overScrollHeader);

        /**
         * Sets the drawable that will be drawn below all other list content.
         * This area can become visible when the user overscrolls the list,
         * or when the list's content does not fully fill the container area.
         *
         * @param footer The drawable to use
         */
        SetOverscrollFooter(
            [in] IDrawable* footer);

        /**
         * @return The drawable that will be drawn below all other list content
         */
        GetOverscrollFooter(
            [out] IDrawable** overScrollFooter);

        /**
         * @see #setChoiceMode(Int32)
         *
         * @return The current choice mode
         */
        GetChoiceMode(
            [out] Int32* choiceMode);

        /**
         * Defines the choice behavior for the List. By default, Lists do not have any choice behavior
         * ({@link #CHOICE_MODE_NONE}). By setting the choiceMode to {@link #CHOICE_MODE_SINGLE}, the
         * List allows up to one item to  be in a chosen state. By setting the choiceMode to
         * {@link #CHOICE_MODE_MULTIPLE}, the list allows any number of items to be chosen.
         *
         * @param choiceMode One of {@link #CHOICE_MODE_NONE}, {@link #CHOICE_MODE_SINGLE}, or
         * {@link #CHOICE_MODE_MULTIPLE}
         */
        SetChoiceMode(
            [in] Int32 choiceMode);

        /**
         * Sets the checked state of the specified position. The is only valid if
         * the choice mode has been set to {@link #CHOICE_MODE_SINGLE} or
         * {@link #CHOICE_MODE_MULTIPLE}.
         *
         * @param position The item whose checked state is to be checked
         * @param value The new checked state for the item
         */
        SetItemChecked(
            [in] Int32 position,
            [in] Boolean value);

        /**
         * Returns the checked state of the specified position. The result is only
         * valid if the choice mode has been set to {@link #CHOICE_MODE_SINGLE}
         * or {@link #CHOICE_MODE_MULTIPLE}.
         *
         * @param position The item whose checked state to return
         * @return The item's checked state or <code>FALSE</code> if choice mode
         *         is invalid
         *
         * @see #setChoiceMode(Int32)
         */
        IsItemChecked(
            [in] Int32 position,
            [out] Boolean* checked);

        /**
         * Returns the currently checked item. The result is only valid if the choice
         * mode has been set to {@link #CHOICE_MODE_SINGLE}.
         *
         * @return The position of the currently checked item or
         *         {@link #AdapterView_INVALID_POSITION} if nothing is selected
         *
         * @see #setChoiceMode(Int32)
         */
        GetCheckedItemPosition(
            [out] Int32* position);

        /**
         * Returns the set of checked items in the list. The result is only valid if
         * the choice mode has not been set to {@link #CHOICE_MODE_NONE}.
         *
         * @return  A SparseBooleanArray which will return TRUE for each call to
         *          Get(Int32 position) where position is a position in the list,
         *          or <code>NULL</code> if the choice mode is set to
         *          {@link #CHOICE_MODE_NONE}.
         */
        //SparseBooleanArray GetCheckedItemPositions();

        /**
         * Returns the set of checked items ids. The result is only valid if the
         * choice mode has not been set to {@link #CHOICE_MODE_NONE} and the adapter
         * has stable IDs. ({@link ListAdapter#hasStableIds()} == {@code TRUE})
         *
         * @return A new array which contains the id of each checked item in the
         *         list.
         */
        GetCheckedItemIds(
            [out, callee] ArrayOf<Int64>* ids);

        /**
         * Clear any choices previously set
         */
        ClearChoices();
    }
}
