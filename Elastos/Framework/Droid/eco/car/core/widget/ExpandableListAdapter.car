
module {

    /**
     * An adapter that links a {@link ExpandableListView} with the underlying
     * data. The implementation of this interface will provide access
     * to the data of the children (categorized by groups), and also instantiate
     * {@link View}s for children and groups.
     */
    interface IExpandableListAdapter {
        /**
         * @see Adapter#registerDataSetObserver(DataSetObserver)
         */
        RegisterDataSetObserver(
            [in] IDataSetObserver* observer);

        /**
         * @see Adapter#unregisterDataSetObserver(DataSetObserver)
         */
        UnregisterDataSetObserver(
            [in] IDataSetObserver* observer);

        /**
         * Gets the number of groups.
         * 
         * @return the number of groups
         */
        GetGroupCount(
            [out] Int32* count);

        /**
         * Gets the number of children in a specified group.
         * 
         * @param groupPosition the position of the group for which the children
         *            count should be returned
         * @return the children count in the specified group
         */
        GetChildrenCount(
            [in] Int32 groupPosition,
            [out] Int32* count);

        /**
         * Gets the data associated with the given group.
         * 
         * @param groupPosition the position of the group
         * @return the data child for the specified group
         */
        GetGroup(
            [in] Int32 groupPosition,
            [out] IInterface** child);
        
        /**
         * Gets the data associated with the given child within the given group.
         * 
         * @param groupPosition the position of the group that the child resides in
         * @param childPosition the position of the child with respect to other
         *            children in the group
         * @return the data of the child
         */
        GetChild(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition,
            [out] IInterface** child);

        /**
         * Gets the ID for the group at the given position. This group ID must be
         * unique across groups. The combined ID (see
         * {@link #getCombinedGroupId(Int64)}) must be unique across ALL items
         * (groups and all children).
         * 
         * @param groupPosition the position of the group for which the ID is wanted
         * @return the ID associated with the group
         */
        GetGroupId(
            [in] Int32 groupPosition,
            [out] Int64* id);

        /**
         * Gets the ID for the given child within the given group. This ID must be
         * unique across all children within the group. The combined ID (see
         * {@link #getCombinedChildId(Int64, Int64)}) must be unique across ALL items
         * (groups and all children).
         * 
         * @param groupPosition the position of the group that contains the child
         * @param childPosition the position of the child within the group for which
         *            the ID is wanted
         * @return the ID associated with the child
         */
        GetChildId(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition,
            [out] Int64* id);

        /**
         * Indicates whether the child and group IDs are stable across changes to the
         * underlying data.
         * 
         * @return whether or not the same ID always refers to the same object
         * @see Adapter#hasStableIds()
         */
        HasStableIds(
            [out] Boolean* id);

        /**
         * Gets a View that displays the given group. This View is only for the
         * group--the Views for the group's children will be fetched using
         * {@link #getChildView(Int32, Int32, Boolean, View, ViewGroup)}.
         * 
         * @param groupPosition the position of the group for which the View is
         *            returned
         * @param isExpanded whether the group is expanded or collapsed
         * @param convertView the old view to reuse, if possible. You should check
         *            that this view is non-null and of an appropriate type before
         *            using. If it is not possible to convert this view to display
         *            the correct data, this method can create a new view. It is not
         *            guaranteed that the convertView will have been previously
         *            created by
         *            {@link #getGroupView(Int32, Boolean, View, ViewGroup)}.
         * @param parent the parent that this view will eventually be attached to
         * @return the View corresponding to the group at the specified position
         */
        GetGroupView(
            [in] Int32 groupPosition, 
            [in] Boolean isExpanded, 
            [in] IView* convertView, 
            [in] IViewGroup* parent,
            [out] IView** view);

        /**
         * Gets a View that displays the data for the given child within the given
         * group.
         * 
         * @param groupPosition the position of the group that contains the child
         * @param childPosition the position of the child (for which the View is
         *            returned) within the group
         * @param isLastChild Whether the child is the last child within the group
         * @param convertView the old view to reuse, if possible. You should check
         *            that this view is non-null and of an appropriate type before
         *            using. If it is not possible to convert this view to display
         *            the correct data, this method can create a new view. It is not
         *            guaranteed that the convertView will have been previously
         *            created by
         *            {@link #getChildView(Int32, Int32, Boolean, View, ViewGroup)}.
         * @param parent the parent that this view will eventually be attached to
         * @return the View corresponding to the child at the specified position
         */
        GetChildView(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition, 
            [in] Boolean isLastChild,
            [in] IView* convertView, 
            [in] IViewGroup* parent,
            [out] IView** view);

        /**
         * Whether the child at the specified position is selectable.
         * 
         * @param groupPosition the position of the group that contains the child
         * @param childPosition the position of the child within the group
         * @return whether the child is selectable.
         */
        IsChildSelectable(
            [in] Int32 groupPosition, 
            [in] Int32 childPosition,
            [out] Boolean* selectable);

        /**
         * @see ListAdapter#areAllItemsEnabled()
         */
        AreAllItemsEnabled(
            [out] Boolean* enabled);
        
        /**
         * @see ListAdapter#isEmpty()
         */
        IsEmpty(
            [out] Boolean* empty);

        /**
         * Called when a group is expanded.
         * 
         * @param groupPosition The group being expanded.
         */
        OnGroupExpanded(
            [in] Int32 groupPosition);
        
        /**
         * Called when a group is collapsed.
         * 
         * @param groupPosition The group being collapsed.
         */
        OnGroupCollapsed(
            [in] Int32 groupPosition);
        
        /**
         * Gets an ID for a child that is unique across any item (either group or
         * child) that is in this list. Expandable lists require each item (group or
         * child) to have a unique ID among all children and groups in the list.
         * This method is responsible for returning that unique ID given a child's
         * ID and its group's ID. Furthermore, if {@link #hasStableIds()} is true, the
         * returned ID must be stable as well.
         * 
         * @param groupId The ID of the group that contains this child.
         * @param childId The ID of the child.
         * @return The unique (and possibly stable) ID of the child across all
         *         groups and children in this list.
         */
        GetCombinedChildId(
            [in] Int64 groupId, 
            [in] Int64 childId,
            [out] Int64* id);

        /**
         * Gets an ID for a group that is unique across any item (either group or
         * child) that is in this list. Expandable lists require each item (group or
         * child) to have a unique ID among all children and groups in the list.
         * This method is responsible for returning that unique ID given a group's
         * ID. Furthermore, if {@link #hasStableIds()} is true, the returned ID must be
         * stable as well.
         * 
         * @param groupId The ID of the group
         * @return The unique (and possibly stable) ID of the group across all
         *         groups and children in this list.
         */
        GetCombinedGroupId(
            [in] Int64 groupId,
            [out] Int64* id);
    }
}

