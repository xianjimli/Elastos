
module 
{
    interface ICursorAdapter extends IBaseAdapter
    {
        /**
         * Returns the cursor.
         * @return the cursor.
         */
        GetCursor(
            [out] ICursor** cursor);
        
        /**
         * Makes a new view to hold the data pointed to by cursor.
         * @param context Interface to application's global information
         * @param cursor The cursor from which to get the data. The cursor is already
         * moved to the correct position.
         * @param parent The parent to which the new view is attached to
         * @return the newly created view.
         */
        NewView(
            [in] IContext* context, 
            [in] ICursor* cursor, 
            [in] IViewGroup* parent,
            [out] IView** view);

        /**
         * Makes a new drop down view to hold the data pointed to by cursor.
         * @param context Interface to application's global information
         * @param cursor The cursor from which to get the data. The cursor is already
         * moved to the correct position.
         * @param parent The parent to which the new view is attached to
         * @return the newly created view.
         */
        NewDropDownView(
            [in] IContext* context, 
            [in] ICursor* cursor, 
            [in] IViewGroup* parent,
            [out] IView** view);

        /**
         * Bind an existing view to the data pointed to by cursor
         * @param view Existing view, returned earlier by newView
         * @param context Interface to application's global information
         * @param cursor The cursor from which to get the data. The cursor is already
         * moved to the correct position.
         */
        BindView(
            [in] IView* view, 
            [in] IContext* context, 
            [in] ICursor* cursor);
        
        /**
         * Change the underlying cursor to a new cursor. If there is an existing cursor it will be
         * closed.
         * 
         * @param cursor the new cursor to be used
         */
        ChangeCursor(
            [in] ICursor* cursor);

        /**
         * <p>Converts the cursor into a CharSequence. Subclasses should override this
         * method to convert their results. The default implementation returns an
         * empty String for NULL values or the default String representation of
         * the value.</p>
         *
         * @param cursor the cursor to convert to a CharSequence
         * @return a CharSequence representing the value
         */
        ConvertToString(
            [in] ICursor* cursor,
            [out] ICharSequence** cs);

        /**
         * Runs a query with the specified constraint. This query is requested
         * by the filter attached to this adapter.
         *
         * The query is provided by a
         * {@link android.widget.FilterQueryProvider}.
         * If no provider is specified, the current cursor is not filtered and returned.
         *
         * After this method returns the resulting cursor is passed to {@link #changeCursor(Cursor)}
         * and the previous cursor is closed.
         *
         * This method is always executed on a background thread, not on the
         * application's main thread (or UI thread.)
         * 
         * Contract: when constraint is NULL or empty, the original results,
         * prior to any filtering, must be returned.
         *
         * @param constraint the constraint with which the query must be filtered
         *
         * @return a Cursor representing the results of the new query
         *
         * @see #getFilter()
         * @see #getFilterQueryProvider()
         * @see #setFilterQueryProvider(android.widget.FilterQueryProvider)
         */
        RunQueryOnBackgroundThread(
            [in] ICharSequence* constraint,
            [out] ICursor** cursor);

        GetFilter(
            [out] IFilter** filter);

        /**
         * Returns the query filter provider used for filtering. When the
         * provider is NULL, no filtering occurs.
         *
         * @return the current filter query provider or NULL if it does not exist
         *
         * @see #setFilterQueryProvider(android.widget.FilterQueryProvider)
         * @see #runQueryOnBackgroundThread(CharSequence)
         */
        GetFilterQueryProvider(
            [out] IFilterQueryProvider** filterQueryProvider);

        /**
         * Sets the query filter provider used to filter the current Cursor.
         * The provider's
         * {@link android.widget.FilterQueryProvider#runQuery(CharSequence)}
         * method is invoked when filtering is requested by a client of
         * this adapter.
         *
         * @param filterQueryProvider the filter query provider or NULL to remove it
         *
         * @see #getFilterQueryProvider()
         * @see #runQueryOnBackgroundThread(CharSequence)
         */
        SetFilterQueryProvider(
            [in] IFilterQueryProvider* filterQueryProvider);

    }
}
