
module {

    /**
     * Metadata about an expanded group to help convert from a flat list
     * position to either a) group position for groups, or b) child position for
     * children
     */
    interface IGroupMetadata
    {    
        Obtain(
            [in] Int32 flPos, 
            [in] Int32 lastChildFlPos, 
            [in] Int32 gPos, 
            [in] Int64 gId,
            [out] IGroupMetadata** groupMetadata);
        
        CompareTo(
            [in] IGroupMetadata* another,
            [out] Int32* pos);

        DescribeContents(
            [out] Int32* contents);
    }    

    interface IPositionMetadata
    {
        Obtain(
            [in] Int32 flatListPos, 
            [in] Int32 type, 
            [in] Int32 groupPos,
            [in] Int32 childPos, 
            [in] IGroupMetadata* groupMetadata, 
            [in] Int32 groupInsertIndex,
            [out] IPositionMetadata** positionMetadata);

        Recycle();
        
        /**
         * Checks whether the group referred to in this object is expanded,
         * or not (at the time this object was created)
         * 
         * @return whether the group at groupPos is expanded or not
         */
        IsExpanded(
            [out] Boolean* expanded);
    }

    interface IExpandableListConnector extends IBaseAdapter
    {

        /**
         * Point to the {@link ExpandableListAdapter} that will give us data/Views
         * 
         * @param expandableListAdapter the adapter that supplies us with data/Views
         */
        SetExpandableListAdapter(
            [in] IExpandableListAdapter* expandableListAdapter);

        GetUnflattenedPos(
            [in] Int32 flPos,
            [out] IPositionMetadata** positionMetadata);
        
        /**
         * Whether the given group is currently expanded.
         * @param groupPosition The group to check.
         * @return Whether the group is currently expanded.
         */
        IsGroupExpanded(
            [in] Int32 groupPosition,
            [out] Boolean* expanded);
        
        /**
         * Set the maximum number of groups that can be expanded at any given time
         */
        SetMaxExpGroupCount(
            [in] Int32 maxExpGroupCount); 
    }
}
