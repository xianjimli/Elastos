
module
{
    interface IUsbDeviceConnection;
    interface IUsbEndpoint;


    interface IUsbRequest {
        /**
         * Initializes the request so it can read or write data on the given endpoint.
         * Whether the request allows reading or writing depends on the direction of the endpoint.
         *
         * @param endpoint the endpoint to be used for this request.
         * @return true if the request was successfully opened.
         */
        Initialize(
            [in] IUsbDeviceConnection* connection,
            [in] IUsbEndpoint* endpoint,
            [out] Boolean* result);

        /**
         * Releases all resources related to this request.
         */
        Close();

        /**
         * Returns the endpoint for the request, or null if the request is not opened.
         *
         * @return the request's endpoint
         */
        GetEndpoint(
            [out] IUsbEndpoint** endpoint);

        /**
         * Returns the client data for the request.
         * This can be used in conjunction with {@link #setClientData}
         * to associate another object with this request, which can be useful for
         * maintaining state between calls to {@link #queue} and
         * {@link android.hardware.usb.UsbDeviceConnection#requestWait}
         *
         * @return the client data for the request
         */
        GetClientData(
            [out] IInterface** data);

        /**
         * Sets the client data for the request.
         * This can be used in conjunction with {@link #getClientData}
         * to associate another object with this request, which can be useful for
         * maintaining state between calls to {@link #queue} and
         * {@link android.hardware.usb.UsbDeviceConnection#requestWait}
         *
         * @param data the client data for the request
         */
        SetClientData(
            [in] IInterface* data);

        /**
         * Queues the request to send or receive data on its endpoint.
         * For OUT endpoints, the given buffer data will be sent on the endpoint.
         * For IN endpoints, the endpoint will attempt to read the given number of bytes
         * into the specified buffer.
         * If the queueing operation is successful, we return true and the result will be
         * returned via {@link android.hardware.usb.UsbDeviceConnection#requestWait}
         *
         * @param buffer the buffer containing the bytes to write, or location to store
         * the results of a read
         * @param length number of bytes to read or write
         * @return true if the queueing operation succeeded
         */
        Queue(
            [in] IByteBuffer* buffer,
            [in] Int32 length,
            [out] Boolean* result);

        Dequeue();

        /**
         * Cancels a pending queue operation.
         *
         * @return true if cancelling succeeded
         */
        Cancel(
            [out] Boolean* result);
    }
}
