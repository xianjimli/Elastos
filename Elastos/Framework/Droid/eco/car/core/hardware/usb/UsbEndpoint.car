
module
{
    interface IUsbEndpoint {
        /**
         * Returns the endpoint's address field.
         * The address is a bitfield containing both the endpoint number
         * as well as the data direction of the endpoint.
         * the endpoint number and direction can also be accessed via
         * {@link #getEndpointNumber} and {@link #getDirection}.
         *
         * @return the endpoint's address
         */
        GetAddress(
            [out] Int32* address);

        /**
         * Extracts the endpoint's endpoint number from its address
         *
         * @return the endpoint's endpoint number
         */
        GetEndpointNumber(
            [out] Int32* number);

        /**
         * Returns the endpoint's direction.
         * Returns {@link UsbConstants#USB_DIR_OUT}
         * if the direction is host to device, and
         * {@link UsbConstants#USB_DIR_IN} if the
         * direction is device to host.
         * @see {@link UsbConstants#USB_DIR_IN}
         * @see {@link UsbConstants#USB_DIR_OUT}
         *
         * @return the endpoint's direction
         */
        GetDirection(
            [out] Int32* direction);

        /**
         * Returns the endpoint's attributes field.
         *
         * @return the endpoint's attributes
         */
        GetAttributes(
            [out] Int32* attributes);

        /**
         * Returns the endpoint's type.
         * Possible results are:
         * <ul>
         * <li>{@link UsbConstants#USB_ENDPOINT_XFER_CONTROL} (endpoint zero)
         * <li>{@link UsbConstants#USB_ENDPOINT_XFER_ISOC} (isochronous endpoint)
         * <li>{@link UsbConstants#USB_ENDPOINT_XFER_BULK} (bulk endpoint)
         * <li>{@link UsbConstants#USB_ENDPOINT_XFER_INT} (interrupt endpoint)
         * </ul>
         *
         * @return the endpoint's type
         */
        GetType(
            [out] Int32* type);

        /**
         * Returns the endpoint's maximum packet size.
         *
         * @return the endpoint's maximum packet size
         */
        GetMaxPacketSize(
            [out] Int32* size);

        /**
         * Returns the endpoint's interval field.
         *
         * @return the endpoint's interval
         */
        GetInterval(
            [out] Int32* interval);
    }
}
