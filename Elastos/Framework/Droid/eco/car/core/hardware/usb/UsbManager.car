
module
{
    /**
     * Broadcast Action:  A sticky broadcast for USB state change events when in device mode.
     *
     * This is a sticky broadcast for clients that includes USB connected/disconnected state,
     * <ul>
     * <li> {@link #USB_CONNECTED} boolean indicating whether USB is connected or disconnected.
     * <li> {@link #USB_CONFIGURED} boolean indicating whether USB is configured.
     * currently zero if not configured, one for configured.
     * <li> {@link #USB_FUNCTION_MASS_STORAGE} boolean extra indicating whether the
     * mass storage function is enabled
     * <li> {@link #USB_FUNCTION_ADB} boolean extra indicating whether the
     * adb function is enabled
     * <li> {@link #USB_FUNCTION_RNDIS} boolean extra indicating whether the
     * RNDIS ethernet function is enabled
     * <li> {@link #USB_FUNCTION_MTP} boolean extra indicating whether the
     * MTP function is enabled
     * <li> {@link #USB_FUNCTION_PTP} boolean extra indicating whether the
     * PTP function is enabled
     * <li> {@link #USB_FUNCTION_PTP} boolean extra indicating whether the
     * accessory function is enabled
     * <li> {@link #USB_FUNCTION_AUDIO_SOURCE} boolean extra indicating whether the
     * audio source function is enabled
     * </ul>
     *
     * {@hide}
     */
    /* public static final String ACTION_USB_STATE = "android.hardware.usb.action.USB_STATE"; */
    const UsbManager_ACTION_USB_STATE = "android.hardware.usb.action.USB_STATE";

   /**
     * Broadcast Action:  A broadcast for USB device attached event.
     *
     * This intent is sent when a USB device is attached to the USB bus when in host mode.
     * <ul>
     * <li> {@link #EXTRA_DEVICE} containing the {@link android.hardware.usb.UsbDevice}
     * for the attached device
     * </ul>
     */
    /* public static final String ACTION_USB_DEVICE_ATTACHED = "android.hardware.usb.action.USB_DEVICE_ATTACHED"; */
    const UsbManager_ACTION_USB_DEVICE_ATTACHED = "android.hardware.usb.action.USB_DEVICE_ATTACHED";

   /**
     * Broadcast Action:  A broadcast for USB device detached event.
     *
     * This intent is sent when a USB device is detached from the USB bus when in host mode.
     * <ul>
     * <li> {@link #EXTRA_DEVICE} containing the {@link android.hardware.usb.UsbDevice}
     * for the detached device
     * </ul>
     */
    /* public static final String ACTION_USB_DEVICE_DETACHED = "android.hardware.usb.action.USB_DEVICE_DETACHED"; */
    const UsbManager_ACTION_USB_DEVICE_DETACHED = "android.hardware.usb.action.USB_DEVICE_DETACHED";

   /**
     * Broadcast Action:  A broadcast for USB accessory attached event.
     *
     * This intent is sent when a USB accessory is attached.
     * <ul>
     * <li> {@link #EXTRA_ACCESSORY} containing the {@link android.hardware.usb.UsbAccessory}
     * for the attached accessory
     * </ul>
     */
    /* public static final String ACTION_USB_ACCESSORY_ATTACHED = "android.hardware.usb.action.USB_ACCESSORY_ATTACHED"; */
    const UsbManager_ACTION_USB_ACCESSORY_ATTACHED = "android.hardware.usb.action.USB_ACCESSORY_ATTACHED";

   /**
     * Broadcast Action:  A broadcast for USB accessory detached event.
     *
     * This intent is sent when a USB accessory is detached.
     * <ul>
     * <li> {@link #EXTRA_ACCESSORY} containing the {@link UsbAccessory}
     * for the attached accessory that was detached
     * </ul>
     */
    /* public static final String ACTION_USB_ACCESSORY_DETACHED = "android.hardware.usb.action.USB_ACCESSORY_DETACHED"; */
    const UsbManager_ACTION_USB_ACCESSORY_DETACHED = "android.hardware.usb.action.USB_ACCESSORY_DETACHED";

    /**
     * Boolean extra indicating whether USB is connected or disconnected.
     * Used in extras for the {@link #ACTION_USB_STATE} broadcast.
     *
     * {@hide}
     */
    /* public static final String USB_CONNECTED = "connected"; */
    const UsbManager_USB_CONNECTED = "connected";

    /**
     * Boolean extra indicating whether USB is configured.
     * Used in extras for the {@link #ACTION_USB_STATE} broadcast.
     *
     * {@hide}
     */
    /* public static final String USB_CONFIGURED = "configured"; */
    const UsbManager_USB_CONFIGURED = "configured";

    /**
     * Name of the USB mass storage USB function.
     * Used in extras for the {@link #ACTION_USB_STATE} broadcast
     *
     * {@hide}
     */
    /* public static final String USB_FUNCTION_MASS_STORAGE = "mass_storage"; */
    const UsbManager_USB_FUNCTION_MASS_STORAGE = "mass_storage";

    /**
     * Name of the adb USB function.
     * Used in extras for the {@link #ACTION_USB_STATE} broadcast
     *
     * {@hide}
     */
    /* public static final String USB_FUNCTION_ADB = "adb"; */
    const UsbManager_USB_FUNCTION_ADB = "adb";

    /**
     * Name of the RNDIS ethernet USB function.
     * Used in extras for the {@link #ACTION_USB_STATE} broadcast
     *
     * {@hide}
     */
    /* public static final String USB_FUNCTION_RNDIS = "rndis"; */
    const UsbManager_USB_FUNCTION_RNDIS = "rndis";

    /**
     * Name of the MTP USB function.
     * Used in extras for the {@link #ACTION_USB_STATE} broadcast
     *
     * {@hide}
     */
    /* public static final String USB_FUNCTION_MTP = "mtp"; */
    const UsbManager_USB_FUNCTION_MTP = "mtp";

    /**
     * Name of the PTP USB function.
     * Used in extras for the {@link #ACTION_USB_STATE} broadcast
     *
     * {@hide}
     */
    /* public static final String USB_FUNCTION_PTP = "ptp"; */
    const UsbManager_USB_FUNCTION_PTP = "ptp";

    /**
     * Name of the audio source USB function.
     * Used in extras for the {@link #ACTION_USB_STATE} broadcast
     *
     * {@hide}
     */
    /* public static final String USB_FUNCTION_AUDIO_SOURCE = "audio_source"; */
    const UsbManager_USB_FUNCTION_AUDIO_SOURCE = "audio_source";

    /**
     * Name of the Accessory USB function.
     * Used in extras for the {@link #ACTION_USB_STATE} broadcast
     *
     * {@hide}
     */
    /* public static final String USB_FUNCTION_ACCESSORY = "accessory"; */
    const UsbManager_USB_FUNCTION_ACCESSORY = "accessory";

    /**
     * Name of extra for {@link #ACTION_USB_DEVICE_ATTACHED} and
     * {@link #ACTION_USB_DEVICE_DETACHED} broadcasts
     * containing the UsbDevice object for the device.
     */
    /* public static final String EXTRA_DEVICE = "device"; */
    const UsbManager_EXTRA_DEVICE = "device";

    /**
     * Name of extra for {@link #ACTION_USB_ACCESSORY_ATTACHED} and
     * {@link #ACTION_USB_ACCESSORY_DETACHED} broadcasts
     * containing the UsbAccessory object for the accessory.
     */
    /* public static final String EXTRA_ACCESSORY = "accessory"; */
    const UsbManager_EXTRA_ACCESSORY = "accessory";

    /**
     * Name of extra added to the {@link android.app.PendingIntent}
     * passed into {@link #requestPermission(UsbDevice, PendingIntent)}
     * or {@link #requestPermission(UsbAccessory, PendingIntent)}
     * containing a boolean value indicating whether the user granted permission or not.
     */
    /* public static final String EXTRA_PERMISSION_GRANTED = "permission"; */
    const UsbManager_EXTRA_PERMISSION_GRANTED = "permission";

    interface ILocalUsbManager {
        /**
         * Returns a HashMap containing all USB devices currently attached.
         * USB device name is the key for the returned HashMap.
         * The result will be empty if no devices are attached, or if
         * USB host mode is inactive or unsupported.
         *
         * @return HashMap containing all connected USB devices.
         */
        GetDeviceList(
            [out] IObjectStringMap** list);

        /**
         * Opens the device so it can be used to send and receive
         * data using {@link android.hardware.usb.UsbRequest}.
         *
         * @param device the device to open
         * @return a {@link UsbDeviceConnection}, or {@code null} if open failed
         */
        OpenDevice(
            [in] IUsbDevice* device,
            [out] IUsbDeviceConnection** connection);

        /**
         * Returns a list of currently attached USB accessories.
         * (in the current implementation there can be at most one)
         *
         * @return list of USB accessories, or null if none are attached.
         */
        GetAccessoryList(
            [out, callee] ArrayOf<IUsbAccessory*>* list);

        /**
         * Opens a file descriptor for reading and writing data to the USB accessory.
         *
         * @param accessory the USB accessory to open
         * @return file descriptor, or null if the accessor could not be opened.
         */
        OpenAccessory(
            [in] IUsbAccessory* accessory,
            [out] IParcelFileDescriptor** descriptor);

        /**
         * Returns true if the caller has permission to access the device.
         * Permission might have been granted temporarily via
         * {@link #requestPermission(UsbDevice, PendingIntent)} or
         * by the user choosing the caller as the default application for the device.
         *
         * @param device to check permissions for
         * @return true if caller has permission
         */
        HasDevicePermission(
            [in] IUsbDevice* device,
            [out] Boolean* result);

        /**
         * Returns true if the caller has permission to access the accessory.
         * Permission might have been granted temporarily via
         * {@link #requestPermission(UsbAccessory, PendingIntent)} or
         * by the user choosing the caller as the default application for the accessory.
         *
         * @param accessory to check permissions for
         * @return true if caller has permission
         */
        HasAccessoryPermission(
            [in] IUsbAccessory* accessory,
            [out] Boolean* result);

        /**
         * Requests temporary permission for the given package to access the device.
         * This may result in a system dialog being displayed to the user
         * if permission had not already been granted.
         * Success or failure is returned via the {@link android.app.PendingIntent} pi.
         * If successful, this grants the caller permission to access the device only
         * until the device is disconnected.
         *
         * The following extras will be added to pi:
         * <ul>
         * <li> {@link #EXTRA_DEVICE} containing the device passed into this call
         * <li> {@link #EXTRA_PERMISSION_GRANTED} containing boolean indicating whether
         * permission was granted by the user
         * </ul>
         *
         * @param device to request permissions for
         * @param pi PendingIntent for returning result
         */
        RequestDevicePermission(
            [in] IUsbDevice* device,
            [in] IPendingIntent* pi);

        /**
         * Requests temporary permission for the given package to access the accessory.
         * This may result in a system dialog being displayed to the user
         * if permission had not already been granted.
         * Success or failure is returned via the {@link android.app.PendingIntent} pi.
         * If successful, this grants the caller permission to access the accessory only
         * until the device is disconnected.
         *
         * The following extras will be added to pi:
         * <ul>
         * <li> {@link #EXTRA_ACCESSORY} containing the accessory passed into this call
         * <li> {@link #EXTRA_PERMISSION_GRANTED} containing boolean indicating whether
         * permission was granted by the user
         * </ul>
         *
         * @param accessory to request permissions for
         * @param pi PendingIntent for returning result
         */
        RequestAccessoryPermission(
            [in] IUsbAccessory* accessory,
            [in] IPendingIntent* pi);

        /**
         * Returns true if the specified USB function is currently enabled.
         *
         * @param function name of the USB function
         * @return true if the USB function is enabled.
         *
         * {@hide}
         */
        IsFunctionEnabled(
            [in] String function,
            [out] Boolean* result);

        /**
         * Returns the current default USB function.
         *
         * @return name of the default function.
         *
         * {@hide}
         */
        GetDefaultFunction(
            [out] String* function);

        /**
         * Sets the current USB function.
         * If function is null, then the current function is set to the default function.
         *
         * @param function name of the USB function, or null to restore the default function
         * @param makeDefault true if the function should be set as the new default function
         *
         * {@hide}
         */
        SetCurrentFunction(
            [in] String function,
            [in] Boolean makeDefault);

        /**
         * Sets the file path for USB mass storage backing file.
         *
         * @param path backing file path
         *
         * {@hide}
         */
        SetMassStorageBackingFile(
            [in] String path);
    }
}
