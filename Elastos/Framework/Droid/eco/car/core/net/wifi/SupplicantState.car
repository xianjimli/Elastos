
module
{
    enum SupplicantState {
        /**
         * This state indicates that client is not associated, but is likely to
         * start looking for an access point. This state is entered when a
         * connection is lost.
         */
        SupplicantState_DISCONNECTED,

        /**
         * Inactive state (wpa_supplicant disabled).
         * <p/>
         * This state is entered if there are no enabled networks in the
         * configuration. wpa_supplicant is not trying to associate with a new
         * network and external interaction (e.g., ctrl_iface call to add or
         * enable a network) is needed to start association.
         */
        SupplicantState_INACTIVE,

        /**
         * Scanning for a network.
         * <p/>
         * This state is entered when wpa_supplicant starts scanning for a
         * network.
         */
        SupplicantState_SCANNING,

        /**
         * Trying to associate with a BSS/SSID.
         * <p/>
         * This state is entered when wpa_supplicant has found a suitable BSS
         * to associate with and the driver is configured to try to associate
         * with this BSS in ap_scan=1 mode. When using ap_scan=2 mode, this
         * state is entered when the driver is configured to try to associate
         * with a network using the configured SSID and security policy.
         */
        SupplicantState_ASSOCIATING,

        /**
         * Association completed.
         * <p/>
         * This state is entered when the driver reports that association has
         * been successfully completed with an AP. If IEEE 802.1X is used
         * (with or without WPA/WPA2), wpa_supplicant remains in this state
         * until the IEEE 802.1X/EAPOL authentication has been completed.
         */
        SupplicantState_ASSOCIATED,

        /**
         * WPA 4-Way Key Handshake in progress.
         * <p/>
         * This state is entered when WPA/WPA2 4-Way Handshake is started. In
         * case of WPA-PSK, this happens when receiving the first EAPOL-Key
         * frame after association. In case of WPA-EAP, this state is entered
         * when the IEEE 802.1X/EAPOL authentication has been completed.
         */
        SupplicantState_FOUR_WAY_HANDSHAKE,

        /**
         * WPA Group Key Handshake in progress.
         * <p/>
         * This state is entered when 4-Way Key Handshake has been completed
         * (i.e., when the supplicant sends out message 4/4) and when Group
         * Key rekeying is started by the AP (i.e., when supplicant receives
         * message 1/2).
         */
        SupplicantState_GROUP_HANDSHAKE,

        /**
         * All authentication completed.
         * <p/>
         * This state is entered when the full authentication process is
         * completed. In case of WPA2, this happens when the 4-Way Handshake is
         * successfully completed. With WPA, this state is entered after the
         * Group Key Handshake; with IEEE 802.1X (non-WPA) connection is
         * completed after dynamic keys are received (or if not used, after
         * the EAP authentication has been completed). With static WEP keys and
         * plaintext connections, this state is entered when an association
         * has been completed.
         * <p/>
         * This state indicates that the supplicant has completed its
         * processing for the association phase and that data connection is
         * fully configured. Note, however, that there may not be any IP
         * address associated with the connection yet. Typically, a DHCP
         * request needs to be sent at this point to obtain an address.
         */
        SupplicantState_COMPLETED,

        /**
         * An Android-added state that is reported when a client issues an
         * explicit DISCONNECT command. In such a case, the supplicant is
         * not only dissociated from the current access point (as for the
         * DISCONNECTED state above), but it also does not attempt to connect
         * to any access point until a RECONNECT or REASSOCIATE command
         * is issued by the client.
         */
        SupplicantState_DORMANT,

        /**
         * No connection to wpa_supplicant.
         * <p/>
         * This is an additional pseudo-state to handle the case where
         * wpa_supplicant is not running and/or we have not been able
         * to establish a connection to it.
         */
        SupplicantState_UNINITIALIZED,

        /**
         * A pseudo-state that should normally never be seen.
         */
        SupplicantState_INVALID;
    }
}
