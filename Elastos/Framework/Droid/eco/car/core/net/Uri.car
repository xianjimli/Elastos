
module
{
    const AbstractPart_Representation_BOTH = 0;
    const AbstractPart_Representation_ENCODED = 1;
    const AbstractPart_Representation_DECODED = 2;

    interface IComparable;
    interface IUriBuilder;

    /**
     * Wrapper for path segment array.
     */
    interface IPathSegments {

        Get(
            [in] Int32 index,
            [out] String* value);

        Size(
            [out] Int32* size);
    }

    /**
     * Builds PathSegments.
     */
    interface IPathSegmentsBuilder {

        Add(
            [in] String segment);

        Build(
            [out] IPathSegments** pathSegments);
    }

    /**
     * Support for part implementations.
     */
    interface IAbstractPart {

        /**
         * Enum which indicates which representation of a given part we have.
         */
        // static class Representation {
        //     static final int BOTH = 0;
        //     static final int ENCODED = 1;
        //     static final int DECODED = 2;
        // }

        GetEncoded(
            [out] String* encoded);

        GetDecoded(
            [out] String* decoded);
    }

    /**
     * Immutable wrapper of encoded and decoded versions of a URI part. Lazily
     * creates the encoded or decoded version from the other.
     */
    interface IPart extends IAbstractPart {
        IsEmpty(
            [out] Boolean* isEmpty);
    }

    /**
     * Immutable wrapper of encoded and decoded versions of a path part. Lazily
     * creates the encoded or decoded version from the other.
     */
    interface IPathPart extends IAbstractPart {
        /**
         * Gets the individual path segments. Parses them if necessary.
         *
         * @return parsed path segments or null if this isn't a hierarchical
         *  URI
         */
        GetPathSegments(
            [out] IPathSegments** pathSegments);
    }

    interface IUri extends IComparable {
        /**
         * Returns true if this URI is hierarchical like "http://google.com".
         * Absolute URIs are hierarchical if the scheme-specific part starts with
         * a '/'. Relative URIs are always hierarchical.
         */
        IsHierarchical(
            [out] Boolean* isHierarchical);

        /**
         * Returns true if this URI is opaque like "mailto:nobody@google.com". The
         * scheme-specific part of an opaque URI cannot start with a '/'.
         */
        IsOpaque(
            [out] Boolean* isOpaque);

        /**
         * Returns true if this URI is relative, i.e. if it doesn't contain an
         * explicit scheme.
         *
         * @return true if this URI is relative, false if it's absolute
         */
        IsRelative(
            [out] Boolean* isRelative);

        /**
         * Returns true if this URI is absolute, i.e. if it contains an
         * explicit scheme.
         *
         * @return true if this URI is absolute, false if it's relative
         */
        IsAbsolute(
            [out] Boolean* isAbsolute);

        /**
         * Gets the scheme of this URI. Example: "http"
         *
         * @return the scheme or null if this is a relative URI
         */
        GetScheme(
            [out] String* scheme);

        /**
         * Gets the scheme-specific part of this URI, i.e. everything between the
         * scheme separator ':' and the fragment separator '#'. If this is a
         * relative URI, this method returns the entire URI. Decodes escaped octets.
         *
         * <p>Example: "//www.google.com/search?q=android"
         *
         * @return the decoded scheme-specific-part
         */
        GetSchemeSpecificPart(
            [out] String* ssp);

        /**
         * Gets the scheme-specific part of this URI, i.e. everything between the
         * scheme separator ':' and the fragment separator '#'. If this is a
         * relative URI, this method returns the entire URI. Leaves escaped octets
         * intact.
         *
         * <p>Example: "//www.google.com/search?q=android"
         *
         * @return the decoded scheme-specific-part
         */
        GetEncodedSchemeSpecificPart(
            [out] String* essp);

        /**
         * Gets the decoded authority part of this URI. For
         * server addresses, the authority is structured as follows:
         * {@code [ userinfo '@' ] host [ ':' port ]}
         *
         * <p>Examples: "google.com", "bob@google.com:80"
         *
         * @return the authority for this URI or null if not present
         */
        GetAuthority(
            [out] String* authority);

        /**
         * Gets the encoded authority part of this URI. For
         * server addresses, the authority is structured as follows:
         * {@code [ userinfo '@' ] host [ ':' port ]}
         *
         * <p>Examples: "google.com", "bob@google.com:80"
         *
         * @return the authority for this URI or null if not present
         */
        GetEncodedAuthority(
            [out] String* authority);

        /**
         * Gets the decoded user information from the authority.
         * For example, if the authority is "nobody@google.com", this method will
         * return "nobody".
         *
         * @return the user info for this URI or null if not present
         */
        GetUserInfo(
            [out] String* userInfo);

        /**
         * Gets the encoded user information from the authority.
         * For example, if the authority is "nobody@google.com", this method will
         * return "nobody".
         *
         * @return the user info for this URI or null if not present
         */
        GetEncodedUserInfo(
            [out] String* userInfo);

        /**
         * Gets the encoded host from the authority for this URI. For example,
         * if the authority is "bob@google.com", this method will return
         * "google.com".
         *
         * @return the host for this URI or null if not present
         */
        GetHost(
            [out] String* host);

        /**
         * Gets the port from the authority for this URI. For example,
         * if the authority is "google.com:80", this method will return 80.
         *
         * @return the port for this URI or -1 if invalid or not present
         */
        GetPort(
            [out] Int32* port);

        /**
         * Gets the decoded path.
         *
         * @return the decoded path, or null if this is not a hierarchical URI
         * (like "mailto:nobody@google.com") or the URI is invalid
         */
        GetPath(
            [out] String* path);

        /**
         * Gets the encoded path.
         *
         * @return the encoded path, or null if this is not a hierarchical URI
         * (like "mailto:nobody@google.com") or the URI is invalid
         */
        GetEncodedPath(
            [out] String* path);

        /**
         * Gets the decoded query component from this URI. The query comes after
         * the query separator ('?') and before the fragment separator ('#'). This
         * method would return "q=android" for
         * "http://www.google.com/search?q=android".
         *
         * @return the decoded query or null if there isn't one
         */
        GetQuery(
            [out] String* query);

        /**
         * Gets the encoded query component from this URI. The query comes after
         * the query separator ('?') and before the fragment separator ('#'). This
         * method would return "q=android" for
         * "http://www.google.com/search?q=android".
         *
         * @return the encoded query or null if there isn't one
         */
        GetEncodedQuery(
            [out] String* query);

        /**
         * Gets the decoded fragment part of this URI, everything after the '#'.
         *
         * @return the decoded fragment or null if there isn't one
         */
        GetFragment(
            [out] String* fragment);

        /**
         * Gets the encoded fragment part of this URI, everything after the '#'.
         *
         * @return the encoded fragment or null if there isn't one
         */
        GetEncodedFragment(
            [out] String* fragment);

        /**
         * Gets the decoded path segments.
         *
         * @return decoded path segments, each without a leading or trailing '/'
         */
        GetPathSegments(
            [out, callee] ArrayOf<String>* pathSegments);

        /**
         * Gets the decoded last segment in the path.
         *
         * @return the decoded last segment or null if the path is empty
         */
        GetLastPathSegment(
            [out] String* pathSegment);

        Equals(
            [in] IUri* other,
            [out] Boolean* isEqual);

        /**
         * Hashes the encoded string represention of this Uri consistently with
         * {@link #equals(Object)}.
         */
        HashCode(
            [out] Int32* hashCode);

        /**
         * Compares the string representation of this Uri with that of
         * another.
         */
        CompareTo(
            [in] IUri* other,
            [out] Int32* result);

        /**
         * Returns the encoded string representation of this URI.
         * Example: "http://google.com/"
         */
        ToString(
            [out] String* result);

        /**
         * Constructs a new builder, copying the attributes from this Uri.
         */
        BuildUpon(
            [out] IUriBuilder** result);
    }

    interface IUriBuilder {

        /**
         * Sets the scheme.
         *
         * @param scheme name or {@code null} if this is a relative Uri
         */
        Scheme(
            [in] String scheme);

        OpaquePart(
            [in] IPart* opaquePart);

        /**
         * Encodes and sets the given opaque scheme-specific-part.
         *
         * @param opaquePart decoded opaque part
         */
        OpaquePart2(
            [in] String opaquePart);

        /**
         * Sets the previously encoded opaque scheme-specific-part.
         *
         * @param opaquePart encoded opaque part
         */
        EncodedOpaquePart(
            [in] String opaquePart);

        Authority(
            [in] IPart* authority);

        /**
         * Encodes and sets the authority.
         */
        Authority2(
            [in] String authority);

        /**
         * Sets the previously encoded authority.
         */
        EncodedAuthority(
            [in] String authority);

        Path(
            [in] IPathPart* path);

        /**
         * Sets the path. Leaves '/' characters intact but encodes others as
         * necessary.
         *
         * <p>If the path is not null and doesn't start with a '/', and if
         * you specify a scheme and/or authority, the builder will prepend the
         * given path with a '/'.
         */
        Path2(
            [in] String path);

        /**
         * Sets the previously encoded path.
         *
         * <p>If the path is not null and doesn't start with a '/', and if
         * you specify a scheme and/or authority, the builder will prepend the
         * given path with a '/'.
         */
        EncodedPath(
            [in] String path);

        /**
         * Encodes the given segment and appends it to the path.
         */
        AppendPath(
            [in] String newSegment);

        /**
         * Appends the given segment to the path.
         */
        AppendEncodedPath(
            [in] String newSegment);

        Query(
            [in] IPart* query);

        /**
         * Encodes and sets the query.
         */
        Query2(
            [in] String query);

        /**
         * Sets the previously encoded query.
         */
        EncodedQuery(
            [in] String query);

        Fragment(
            [in] IPart* fragment);

        /**
         * Encodes and sets the fragment.
         */
        Fragment2(
            [in] String fragment);

        /**
         * Sets the previously encoded fragment.
         */
        EncodedFragment(
            [in] String fragment);

        /**
         * Encodes the key and value and then appends the parameter to the
         * query string.
         *
         * @param key which will be encoded
         * @param value which will be encoded
         */
        AppendQueryParameter(
            [in] String key,
            [in] String value);

        /**
         * Constructs a Uri with the current attributes.
         *
         * @throws UnsupportedOperationException if the URI is opaque and the
         *  scheme is null
         */
        Build(
            [out] IUri** uri);
    }
}
