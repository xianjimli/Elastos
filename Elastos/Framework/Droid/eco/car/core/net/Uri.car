
module
{
    interface IComparable;

    interface IUri extends IComparable {
        /**
         * Returns true if this URI is hierarchical like "http://google.com".
         * Absolute URIs are hierarchical if the scheme-specific part starts with
         * a '/'. Relative URIs are always hierarchical.
         */
        IsHierarchical(
            [out] Boolean* isHierarchical);

        /**
         * Returns true if this URI is opaque like "mailto:nobody@google.com". The
         * scheme-specific part of an opaque URI cannot start with a '/'.
         */
        IsOpaque(
            [out] Boolean* isOpaque);

        /**
         * Returns true if this URI is relative, i.e. if it doesn't contain an
         * explicit scheme.
         *
         * @return true if this URI is relative, false if it's absolute
         */
        IsRelative(
            [out] Boolean* isRelative);

        /**
         * Returns true if this URI is absolute, i.e. if it contains an
         * explicit scheme.
         *
         * @return true if this URI is absolute, false if it's relative
         */
        IsAbsolute(
            [out] Boolean* isAbsolute);

        /**
         * Gets the scheme of this URI. Example: "http"
         *
         * @return the scheme or null if this is a relative URI
         */
        GetScheme(
            [out] String* scheme);

        /**
         * Gets the scheme-specific part of this URI, i.e. everything between the
         * scheme separator ':' and the fragment separator '#'. If this is a
         * relative URI, this method returns the entire URI. Decodes escaped octets.
         *
         * <p>Example: "//www.google.com/search?q=android"
         *
         * @return the decoded scheme-specific-part
         */
        GetSchemeSpecificPart(
            [out] String* ssp);

        /**
         * Gets the scheme-specific part of this URI, i.e. everything between the
         * scheme separator ':' and the fragment separator '#'. If this is a
         * relative URI, this method returns the entire URI. Leaves escaped octets
         * intact.
         *
         * <p>Example: "//www.google.com/search?q=android"
         *
         * @return the decoded scheme-specific-part
         */
        GetEncodedSchemeSpecificPart(
            [out] String* essp);

        /**
         * Gets the decoded authority part of this URI. For
         * server addresses, the authority is structured as follows:
         * {@code [ userinfo '@' ] host [ ':' port ]}
         *
         * <p>Examples: "google.com", "bob@google.com:80"
         *
         * @return the authority for this URI or null if not present
         */
        GetAuthority(
            [out] String* authority);

        /**
         * Gets the encoded authority part of this URI. For
         * server addresses, the authority is structured as follows:
         * {@code [ userinfo '@' ] host [ ':' port ]}
         *
         * <p>Examples: "google.com", "bob@google.com:80"
         *
         * @return the authority for this URI or null if not present
         */
        GetEncodedAuthority(
            [out] String* authority);

        /**
         * Gets the decoded user information from the authority.
         * For example, if the authority is "nobody@google.com", this method will
         * return "nobody".
         *
         * @return the user info for this URI or null if not present
         */
        GetUserInfo(
            [out] String* userInfo);

        /**
         * Gets the encoded user information from the authority.
         * For example, if the authority is "nobody@google.com", this method will
         * return "nobody".
         *
         * @return the user info for this URI or null if not present
         */
        GetEncodedUserInfo(
            [out] String* userInfo);

        /**
         * Gets the encoded host from the authority for this URI. For example,
         * if the authority is "bob@google.com", this method will return
         * "google.com".
         *
         * @return the host for this URI or null if not present
         */
        GetHost(
            [out] String* host);

        /**
         * Gets the port from the authority for this URI. For example,
         * if the authority is "google.com:80", this method will return 80.
         *
         * @return the port for this URI or -1 if invalid or not present
         */
        GetPort(
            [out] Int32* port);

        /**
         * Gets the decoded path.
         *
         * @return the decoded path, or null if this is not a hierarchical URI
         * (like "mailto:nobody@google.com") or the URI is invalid
         */
        GetPath(
            [out] String* path);

        /**
         * Gets the encoded path.
         *
         * @return the encoded path, or null if this is not a hierarchical URI
         * (like "mailto:nobody@google.com") or the URI is invalid
         */
        GetEncodedPath(
            [out] String* path);

        /**
         * Gets the decoded query component from this URI. The query comes after
         * the query separator ('?') and before the fragment separator ('#'). This
         * method would return "q=android" for
         * "http://www.google.com/search?q=android".
         *
         * @return the decoded query or null if there isn't one
         */
        GetQuery(
            [out] String* query);

        /**
         * Gets the encoded query component from this URI. The query comes after
         * the query separator ('?') and before the fragment separator ('#'). This
         * method would return "q=android" for
         * "http://www.google.com/search?q=android".
         *
         * @return the encoded query or null if there isn't one
         */
        GetEncodedQuery(
            [out] String* query);

        /**
         * Gets the decoded fragment part of this URI, everything after the '#'.
         *
         * @return the decoded fragment or null if there isn't one
         */
        GetFragment(
            [out] String* fragment);

        /**
         * Gets the encoded fragment part of this URI, everything after the '#'.
         *
         * @return the encoded fragment or null if there isn't one
         */
        GetEncodedFragment(
            [out] String* fragment);

        /**
         * Gets the decoded path segments.
         *
         * @return decoded path segments, each without a leading or trailing '/'
         */
        GetPathSegments(
            [out, callee] ArrayOf<String>* pathSegments);

        /**
         * Gets the decoded last segment in the path.
         *
         * @return the decoded last segment or null if the path is empty
         */
        GetLastPathSegment(
            [out] String* pathSegment);

        Equals(
            [in] IUri* other,
            [out] Boolean* isEqual);

        /**
         * Compares the string representation of this Uri with that of
         * another.
         */
        CompareTo(
            [in] IUri* other,
            [out] Int32* result);
    }
}
