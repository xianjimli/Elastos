
module
{
	interface INetworkInfo;
	interface IBinder;
	interface IObjectContainer;

    /**
	 * Interface that answers queries about, and allows changing, the
	 * state of network connectivity.
	 */
	/** {@hide} */
	interface IConnectivityManager {

		SetNetworkPreference(
			[in] Int32 pref);

		GetNetworkPreference(
			[out] Int32* result);

		GetActiveNetworkInfo(
			[out] INetworkInfo** result);

		GetNetworkInfo(
			[in] Int32 networkType,
			[out] INetworkInfo** result);

		GetAllNetworkInfo(
			[out] IObjectContainer** result);

		SetRadios(
			[in] Boolean onOff,
			[out] Boolean* result);

		SetRadio(
			[in] Int32 networkType, 
			[in] Boolean turnOn,
			[out] Boolean* result);

		StartUsingNetworkFeature(
			[in] Int32 networkType, 
			[in] String feature,
		    [in] IBinder* binder,
		    [out] Int32* result);

		StopUsingNetworkFeature(
			[in] Int32 networkType,
			[in] String feature,
			[out] Int32* result);

		RequestRouteToHost(
			[in] Int32 networkType, 
			[in] Int32 hostAddress,
			[out] Boolean* result);

		GetBackgroundDataSetting(
			[out] Boolean* result);

		SetBackgroundDataSetting(
			[in] Boolean allowBackgroundData);

		GetMobileDataEnabled(
			[out] Boolean* result);

		SetMobileDataEnabled(
			[in] Boolean enabled);

		Tether(
			[in] String iface,
			[out] Int32* result);

		Untether(
			[in] String iface,
			[out] Int32* result);

		GetLastTetherError(
			[in] String iface,
			[out] Int32* result);

		IsTetheringSupported(
			[out] Boolean* result);

		GetTetherableIfaces(
			[out, callee] ArrayOf<String>* result);

		GetTetheredIfaces(
			[out, callee] ArrayOf<String>* result);

		GetTetheringErroredIfaces(
			[out, callee] ArrayOf<String>* result);

		GetTetherableUsbRegexs(
			[out, callee] ArrayOf<String>* result);

		GetTetherableWifiRegexs(
			[out, callee] ArrayOf<String>* result);

		ReportInetCondition(
			[in] Int32 networkType, 
			[in] Int32 percentage);
	}
}
