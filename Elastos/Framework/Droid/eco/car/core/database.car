
module
{
    merge("database/sqlite/SQLiteClosable.car");
    merge("database/sqlite/SQLiteProgram.car");
    merge("database/sqlite/SQLiteCursorDriver.car");
    merge("database/sqlite/SQLiteQuery.car");
    merge("database/sqlite/SQLiteStatement.car");
    merge("database/sqlite/SQLiteDatabase.car");
    merge("database/sqlite/SQLiteOpenHelper.car");
    merge("database/sqlite/SQLiteQueryBuilder.car");
    merge("database/sqlite/SQLiteTransactionListener.car");
    merge("database/CharArrayBuffer.car");
    merge("database/Cursor.car");
    merge("database/DataSetObserver.car");
    merge("database/ContentObserver.car");
    merge("database/IContentObserver.car");
    merge("database/Observable.car");
    merge("database/DataSetObservable.car");
    merge("database/ContentObservable.car");
    merge("database/CursorWrapper.car");
    merge("database/CursorWindow.car");
    merge("database/CursorJoiner.car");
    merge("database/IBulkCursor.car");
    merge("database/CrossProcessCursor.car");
    merge("database/AbstractWindowedCursor.car");
    merge("database/MergeCursor.car");
    merge("database/MatrixCursor.car");
    merge("database/BulkCursorToCursorAdaptor.car");
    merge("database/CursorToBulkCursorAdaptor.car");
    merge("database/sqlite/SQLiteCursor.car");

//    singleton class CSQLiteDatabaseHelper {
//        interface ISQLiteDatabaseHelper;
//    }

    class CSQLiteQueryBuilder {
        /**
         * This is a convience class that helps build SQL queries to be sent to
         * {@link SQLiteDatabase} objects.
         */
        constructor();

        interface ISQLiteQueryBuilder;
    }

    [deprecated]
    class CCharArrayBuffer {
        constructor(
            [in] Int32 size);

        constructor(
            [in] ArrayOf<Char32>* buf);

        interface ICharArrayBuffer;
    }

    class CDataSetObservable {
        interface IDataSetObservable;
    }

    class CContentObservable {
        interface IContentObservable;
    }

    class CCursorWrapper {
        constructor(
            [in] ICursor* cursor);

        interface ICursorWrapper;
    }

    class CCursorWindow {
        constructor(
            [in] Boolean localWindow);

        interface ICursorWindow;
        interface IParcelable;
    }

    class CCursorJoiner {
        constructor(
            [in] ICursor* cursorLeft,
            [in] ArrayOf<String> columnNamesLeft,
            [in] ICursor* cursorRight,
            [in] ArrayOf<String> columnNamesRight);

        interface ICursorJoiner;
    }

    [deprecated]
    class CMergeCursor {
        constructor(
            [in] ArrayOf<ICursor*>* cursors);

        interface IMergeCursor;
    }

    [deprecated]
    class CMatrixCursor {
        constructor(
            [in] ArrayOf<String>* columnNames,
            [in] Int32 initialCapacity);

        constructor(
            [in] ArrayOf<String>* columnNames);

        interface IMatrixCursor;
    }

    class CBulkCursorToCursorAdaptor {
        interface IBulkCursorToCursorAdaptor;
    }

    class CCursorToBulkCursorAdaptor {
        constructor(
            [in] ICursor* cursor,
            [in] IContentObserver* observer,
            [in] String providerName,
            [in] Boolean allowWrite,
            [in] ICursorWindow* window);

        interface ICursorToBulkCursorAdaptor;
    }

    class CSQLiteCursor {
        /**
         * Execute a query and provide access to its result set through a Cursor
         * interface. For a query such as: {@code SELECT name, birth, phone FROM
         * myTable WHERE ... LIMIT 1,20 ORDER BY...} the column names (name, birth,
         * phone) would be in the projection argument and everything from
         * {@code FROM} onward would be in the params argument. This constructor
         * has package scope.
         *
         * @param db a reference to a Database object that is already constructed
         *     and opened
         * @param editTable the name of the table used for this query
         * @param query the rest of the query terms
         *     cursor is finalized
         */
        constructor(
            [in] ISQLiteDatabase* db,
            [in] ISQLiteCursorDriver* driver,
            [in] String editTable,
            [in] ISQLiteQuery* query);

        interface ISQLiteCursor;
    }
}

