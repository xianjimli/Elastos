
module
{
    interface ISpannable;
    interface ICharSequence;
    interface IObjectContainer;

    interface IEditable extends ISpannable {
        /**
         * Replaces the specified range (<code>st&hellip;en</code>) of text in this
         * Editable with a copy of the slice <code>start&hellip;end</code> from
         * <code>source</code>.  The destination slice may be empty, in which case
         * the operation is an insertion, or the source slice may be empty,
         * in which case the operation is a deletion.
         * <p>
         * Before the change is committed, each filter that was set with
         * {@link #setFilters} is given the opportunity to modify the
         * <code>source</code> text.
         * <p>
         * If <code>source</code>
         * is Spanned, the spans from it are preserved into the Editable.
         * Existing spans within the Editable that entirely cover the replaced
         * range are retained, but any that were strictly within the range
         * that was replaced are removed.  As a special case, the cursor
         * position is preserved even when the entire range where it is
         * located is replaced.
         * @return  a reference to this object.
         */
        Replace(
            [in] Int32 st,
            [in] Int32 en,
            [in] ICharSequence* source,
            [in] Int32 start,
            [in] Int32 end,
            [out] IEditable** editable);

        /**
         * Convenience for replace(st, en, text, 0, text.length())
         * @see #replace(int, int, CharSequence, int, int)
         */
        ReplaceEx(
            [in] Int32 st,
            [in] Int32 en,
            [in] ICharSequence* text,
            [out] IEditable** editable);

        /**
         * Convenience for replace(where, where, text, start, end)
         * @see #replace(int, int, CharSequence, int, int)
         */
        Insert(
            [in] Int32 where,
            [in] ICharSequence* text,
            [in] Int32 start,
            [in] Int32 end,
            [out] IEditable** editable);

        /**
         * Convenience for replace(where, where, text, 0, text.length());
         * @see #replace(int, int, CharSequence, int, int)
         */
        InsertEx(
            [in] Int32 where,
            [in] ICharSequence* text,
            [out] IEditable** editable);

        /**
         * Convenience for replace(st, en, "", 0, 0)
         * @see #replace(int, int, CharSequence, int, int)
         */
        Delete(
            [in] Int32 st,
            [in] Int32 en,
            [out] IEditable** editable);

        /**
         * Convenience for replace(length(), length(), text, 0, text.length())
         * @see #replace(int, int, CharSequence, int, int)
         */
        Append(
            [in] ICharSequence* text,
            [out] IEditable** editable);

        /**
         * Convenience for replace(length(), length(), text, start, end)
         * @see #replace(int, int, CharSequence, int, int)
         */
        AppendEx(
            [in] ICharSequence* text,
            [in] Int32 start,
            [in] Int32 end,
            [out] IEditable** editable);

        /**
         * Convenience for append(String.valueOf(text)).
         * @see #replace(int, int, CharSequence, int, int)
         */
        AppendEx2(
            [in] Char32 text,
            [out] IEditable** editable);

        /**
         * Convenience for replace(0, length(), "", 0, 0)
         * @see #replace(int, int, CharSequence, int, int)
         * Note that this clears the text, not the spans;
         * use {@link #clearSpans} if you need that.
         */
        Clear();

        /**
         * Removes all spans from the Editable, as if by calling
         * {@link #removeSpan} on each of them.
         */
        ClearSpans();

        /**
         * Sets the series of filters that will be called in succession
         * whenever the text of this Editable is changed, each of which has
         * the opportunity to limit or transform the text that is being inserted.
         */
        SetFilters(
            [in] IObjectContainer* filters);

        /**
         * Returns the array of input filters that are currently applied
         * to changes to this Editable.
         */
        GetFilters(
            [out] IObjectContainer** filters);
    }

    interface IEditableFactory {
        NewEditable(
            [in] ICharSequence* source,
            [out] IEditable** editable);
    }
}