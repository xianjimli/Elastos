
module
{
    merge("view/AbsSavedState.car");
    merge("view/Menu.car");
    merge("view/MenuInflater.car");
    merge("view/MenuItem.car");
    merge("view/SubMenu.car");
    merge("view/ContextMenu.car");
    merge("view/surface.car");
    merge("view/surfacesession.car");
    merge("view/view.car");
    merge("view/viewgroup.car");
    merge("view/viewparent.car");
    merge("view/viewmanager.car");
    merge("view/windowmanager.car");
    merge("view/windowmanagerpolicy.car");
    merge("view/gravity.car");
    merge("view/surfaceholder.car");
    merge("view/window.car");
    merge("view/display.car");
    merge("view/layoutinflater.car");
    merge("view/viewtreeobserver.car");
    merge("view/animation/Interpolator.car");
    merge("view/animation/Animation.car");
    merge("view/animation/AnimationSet.car");
    merge("view/animation/Transformation.car");
    merge("view/animation/LayoutAnimationController.car");
    merge("view/animation/GridLayoutAnimationController.car");
    merge("view/animation/AnimationUtils.car");
    merge("view/InputEvent.car");
    merge("view/KeyEvent.car");
    merge("view/MotionEvent.car");
    merge("view/accessibility/AccessibilityEvent.car");
    merge("view/accessibility/AccessibilityEventSource.car");
    merge("view/inputmethod/ExtractedText.car");
    merge("view/inputmethod/ExtractedTextRequest.car");
    merge("view/inputmethod/CompletionInfo.car");
    merge("view/inputmethod/EditorInfo.car");
    merge("view/inputmethod/InputConnection.car");
    merge("view/inputmethod/InputBinding.car");
    merge("view/inputmethod/InputMethod.car");
    merge("view/inputmethod/InputMethodInfo.car");
    merge("view/inputmethod/InputMethodSession.car");
    merge("view/inputmethod/InputMethodManager.car");
    merge("view/InputBindResult.car");
    merge("view/IInputMethodClientStub.car");
    merge("view/IInputContextCallbackStub.car");
    merge("view/IInputContextStub.car");
    merge("view/InputChannel.car");
    merge("view/InputDevice.car");
    merge("view/IInputMethodSessionStub.car");
    merge("view/IInputMethodCallbackStub.car");
    merge("view/IInputMethodStub.car");
    merge("view/IInputMethodManagerStub.car");
    merge("view/IOnKeyguardExitResult.car");
    merge("view/IRotationWatcher.car");
    merge("view/IInnerWindow.car");
    merge("view/IWindowSession.car");
    merge("view/IApplicationToken.car");
    merge("view/IWindowManagerEx.car");
    merge("view/TouchDelegate.car");
    merge("view/SoundEffectConstants.car");
    merge("view/HapticFeedbackConstants.car");
    merge("view/SurfaceView.car");

    /**
     * Handle on to a raw buffer that is being managed by the screen compositor.
     */
    class CSurface {
        /**
         * create a surface
         * {@hide}
         */
        constructor(
            [in] ISurfaceSession * s,
            [in] Int32 pid,
            [in] Int32 display,
            [in] Int32 w,
            [in] Int32 h,
            [in] Int32 format,
            [in] Int32 flags);

        /**
         * create a surface with a name
         * {@hide}
         */
        constructor(
            [in] ISurfaceSession * s,
            [in] Int32 pid,
            [in] String name,
            [in] Int32 display,
            [in] Int32 w,
            [in] Int32 h,
            [in] Int32 format,
            [in] Int32 flags);

        /**
         * Create an empty surface, which will later be filled in by
         * readFromParcel().
         * {@hide}
         */
        constructor();

        interface ISurface;
        interface IParcelable;
    }

    singleton class CSurfaceHelper {
        interface ISurfaceHelper;
    }

    class CSurfaceSession {
        interface ISurfaceSession;
    }

    class CViewGroupLayoutParams {
        constructor();

        constructor(
            [in] IContext* c,
            [in] IAttributeSet* attrs);

        constructor(
            [in] Int32 width,
            [in] Int32 height);

        constructor(
            [in] IViewGroupLayoutParams* source);

        interface IViewGroupLayoutParams;
    }

    /**
     * Per-child layout information for layouts that support margins.
     * See
     * {@link android.R.styleable#ViewGroup_MarginLayout ViewGroup Margin Layout Attributes}
     * for a list of all child view attributes that this class supports.
     */
    class CViewGroupMarginLayoutParams {
        constructor();

        constructor(
            [in] IContext* c,
            [in] IAttributeSet* attrs);

        constructor(
            [in] Int32 width,
            [in] Int32 height);

        constructor(
            [in] IViewGroupMarginLayoutParams* src);

        constructor(
            [in] IViewGroupLayoutParams* source);

        interface IViewGroupMarginLayoutParams;
    }

    class CWindowManagerLayoutParams {
        constructor();

        constructor(
            [in] Int32 type);

        constructor(
            [in] Int32 type,
            [in] Int32 flags);

        constructor(
            [in] Int32 type,
            [in] Int32 flags,
            [in] Int32 format);

        constructor(
            [in] Int32 w,
            [in] Int32 h,
            [in] Int32 type,
            [in] Int32 flags,
            [in] Int32 format);

        constructor(
            [in] Int32 w,
            [in] Int32 h,
            [in] Int32 xpos,
            [in] Int32 ypos,
            [in] Int32 type,
            [in] Int32 flags,
            [in] Int32 format);

        interface IWindowManagerLayoutParams;
        interface IParcelable;
    }

    class CDisplay {
        constructor(
            [in] Int32 display);

        interface IDisplay;
    }

    singleton class CWindowManagerImpl {
        interface IWindowManager;
    }

    singleton class CGravity {
        interface IGravity;
    }

    interface IInnerWindow;

    class CViewRootW {
        constructor(
            [in] Handle32 viewRoot,
            [in] IContext* ctx);

        interface IInnerWindow;
    }

    class CDispatcherState {
        interface IDispatcherState;
    }

    class CKeyEvent {
        /**
         * Create a new key event.
         *
         * @param action Action code: either {@link #ACTION_DOWN},
         * {@link #ACTION_UP}, or {@link #ACTION_MULTIPLE}.
         * @param code The key code.
         */
        constructor(
            [in] Int32 action,
            [in] Int32 code);

        /**
         * Create a new key event.
         *
         * @param downTime The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this key code originally went down.
         * @param eventTime The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this event happened.
         * @param action Action code: either {@link #ACTION_DOWN},
         * {@link #ACTION_UP}, or {@link #ACTION_MULTIPLE}.
         * @param code The key code.
         * @param repeat A repeat count for down events (> 0 if this is after the
         * initial down) or event count for multiple events.
         */
        constructor(
            [in] Int64 downTime,
            [in] Int64 eventTime,
            [in] Int32 action,
            [in] Int32 code,
            [in] Int32 repeat);

        /**
         * Create a new key event.
         *
         * @param downTime The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this key code originally went down.
         * @param eventTime The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this event happened.
         * @param action Action code: either {@link #ACTION_DOWN},
         * {@link #ACTION_UP}, or {@link #ACTION_MULTIPLE}.
         * @param code The key code.
         * @param repeat A repeat count for down events (> 0 if this is after the
         * initial down) or event count for multiple events.
         * @param metaState Flags indicating which meta keys are currently pressed.
         */
        constructor(
            [in] Int64 downTime,
            [in] Int64 eventTime,
            [in] Int32 action,
            [in] Int32 code,
            [in] Int32 repeat,
            [in] Int32 metaState);

        /**
         * Create a new key event.
         *
         * @param downTime The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this key code originally went down.
         * @param eventTime The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this event happened.
         * @param action Action code: either {@link #ACTION_DOWN},
         * {@link #ACTION_UP}, or {@link #ACTION_MULTIPLE}.
         * @param code The key code.
         * @param repeat A repeat count for down events (> 0 if this is after the
         * initial down) or event count for multiple events.
         * @param metaState Flags indicating which meta keys are currently pressed.
         * @param deviceId The device ID that generated the key event.
         * @param scancode Raw device scan code of the event.
         */
        constructor(
            [in] Int64 downTime,
            [in] Int64 eventTime,
            [in] Int32 action,
            [in] Int32 code,
            [in] Int32 repeat,
            [in] Int32 metaState,
            [in] Int32 deviceId,
            [in] Int32 scancode);

        /**
         * Create a new key event.
         *
         * @param downTime The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this key code originally went down.
         * @param eventTime The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this event happened.
         * @param action Action code: either {@link #ACTION_DOWN},
         * {@link #ACTION_UP}, or {@link #ACTION_MULTIPLE}.
         * @param code The key code.
         * @param repeat A repeat count for down events (> 0 if this is after the
         * initial down) or event count for multiple events.
         * @param metaState Flags indicating which meta keys are currently pressed.
         * @param deviceId The device ID that generated the key event.
         * @param scancode Raw device scan code of the event.
         * @param flags The flags for this key event
         */
        constructor(
            [in] Int64 downTime,
            [in] Int64 eventTime,
            [in] Int32 action,
            [in] Int32 code,
            [in] Int32 repeat,
            [in] Int32 metaState,
            [in] Int32 deviceId,
            [in] Int32 scancode,
            [in] Int32 flags);

        /**
         * Create a new key event.
         *
         * @param downTime The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this key code originally went down.
         * @param eventTime The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this event happened.
         * @param action Action code: either {@link #ACTION_DOWN},
         * {@link #ACTION_UP}, or {@link #ACTION_MULTIPLE}.
         * @param code The key code.
         * @param repeat A repeat count for down events (> 0 if this is after the
         * initial down) or event count for multiple events.
         * @param metaState Flags indicating which meta keys are currently pressed.
         * @param deviceId The device ID that generated the key event.
         * @param scancode Raw device scan code of the event.
         * @param flags The flags for this key event
         * @param source The input source such as {@link InputDevice#SOURCE_KEYBOARD}.
         */
        constructor(
            [in] Int64 downTime,
            [in] Int64 eventTime,
            [in] Int32 action,
            [in] Int32 code,
            [in] Int32 repeat,
            [in] Int32 metaState,
            [in] Int32 deviceId,
            [in] Int32 scancode,
            [in] Int32 flags,
            [in] Int32 source);

        /**
         * Create a new key event for a string of characters.  The key code,
         * action, repeat count and source will automatically be set to
         * {@link #KEYCODE_UNKNOWN}, {@link #ACTION_MULTIPLE}, 0, and
         * {@link InputDevice#SOURCE_KEYBOARD} for you.
         *
         * @param time The time (in {@link android.os.SystemClock#uptimeMillis})
         * at which this event occured.
         * @param characters The string of characters.
         * @param deviceId The device ID that generated the key event.
         * @param flags The flags for this key event
         */
        constructor(
            [in] Int64 time,
            [in] String characters,
            [in] Int32 deviceId,
            [in] Int32 flags);

        /**
         * Make an exact copy of an existing key event.
         */
        constructor(
            [in] IKeyEvent* origEvent);

        /**
         * Copy an existing key event, modifying its time and repeat count.
         *
         * @deprecated Use {@link #changeTimeRepeat(KeyEvent, Int64, Int32)}
         * instead.
         *
         * @param origEvent The existing event to be copied.
         * @param eventTime The new event time
         * (in {@link android.os.SystemClock#uptimeMillis}) of the event.
         * @param newRepeat The new repeat count of the event.
         */
        //@Deprecated
        constructor(
            [in] IKeyEvent* origEvent,
            [in] Int64 eventTime,
            [in] Int32 newRepeat);

        // private
        constructor(
            [in] IKeyEvent* origEvent,
            [in] Int32 action);

        // private
        constructor(
            [in] IParcel* parcel);

        interface IKeyEvent;
        interface IParcelable;
    }

    class CMotionEvent {
        constructor(
            [in] Int32 pointerCount,
            [in] Int32 sampleCount);

        interface IMotionEvent;
        interface IParcelable;
    }

    singleton class CMotionEventHelper {
        interface IMotionEventHelper;
    }

    class CExtractedText {
        interface IExtractedText;
        interface IParcelable;
    }

    class CExtractedTextRequest {
        interface IExtractedTextRequest;
        interface IParcelable;
    }

    class CCompletionInfo {
        interface IEditorInfo;
        interface IParcelable;
    }

    class CEditorInfo {
        constructor();

        interface IEditorInfo;
        interface IParcelable;
    }

    class CLocalInputMethodManager {
        constructor(
            [in] IInputMethodManagerStub* service,
            [in] IApartment* looper);

        interface ILocalInputMethodManager;
    }

    class CBaseInputConnection {
        constructor(
            [in] ILocalInputMethodManager* mgr,
            [in] Boolean fullEditor);

        constructor(
            [in] IView* targetView,
            [in] Boolean fullEditor);

        interface IInputConnection;
    }

    class CInputBindResult {
        interface IInputBindResult;
        interface IParcelable;
    }

    class CInputBinding {
        constructor(
            [in] IInputConnection* conn,
            [in] IBinder* connToken,
            [in] Int32 uid,
            [in] Int32 pid);

        constructor(
            [in] IInputConnection* conn,
            [in] IInputBinding* binding);

        constructor(
            [in] IParcel* source);

        interface IInputBinding;
        interface IParcelable;
    }

    class CInputConnectionWrapper {
        constructor(
            [in] IInputConnection* target,
            [in] Boolean mutable);

        interface IInputConnection;
    }

    class CInputChannel {
        interface IInputChannel;
        interface IParcelable;
    }

    singleton class CInputChannelHelper {
        interface IInputChannelHelper;
    }

    class CInputDevice {
        interface IInputDevice;
        interface IParcelable;
    }

    class CInputMethodCallback {
        constructor(
            [in] Handle32 viewRoot);

        interface IInputMethodCallbackStub;
    }

    class CTouchDelegate {
        /**
         * Constructor
         *
         * @param bounds Bounds in local coordinates of the containing view that should be mapped to
         *        the delegate view
         * @param delegateView The view that should receive motion events
         */
        constructor(
            [in] IRect* bounds,
            [in] IView* delegateView);

        interface ITouchDelegate;
    }

    class CViewBaseSavedState {
        constructor(
            [in] IParcelable* superState);

        constructor(
            [in] IParcel* source);

        interface IViewBaseSavedState;
        interface IParcelable;
    }

    class CAccelerateDecelerateInterpolator {
        constructor();

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        interface IInterpolator;
    }

    class CAccelerateInterpolator {
        constructor();

        /**
         * Constructor
         *
         * @param factor Degree to which the animation should be eased. Seting
         *        factor to 1.0f produces a y=x^2 parabola. Increasing factor above
         *        1.0f  exaggerates the ease-in effect (i.e., it starts even
         *        slower and ends evens faster)
         */
        constructor(
            [in] Float factor);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        interface IInterpolator;
    }

    class CAnticipateInterpolator {
        constructor();

        /**
         * @param tension Amount of anticipation. When tension equals 0.0f, there is
         *                no anticipation and the interpolator becomes a simple
         *                acceleration interpolator.
         */
        constructor(
            [in] Float tension);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        interface IInterpolator;
    }

    class CAnticipateOvershootInterpolator {
        constructor();

        /**
         * @param tension Amount of anticipation/overshoot. When tension equals 0.0f,
         *                there is no anticipation/overshoot and the interpolator becomes
         *                a simple acceleration/deceleration interpolator.
         */
        constructor(
            [in] Float tension);

        /**
         * @param tension Amount of anticipation/overshoot. When tension equals 0.0f,
         *                there is no anticipation/overshoot and the interpolator becomes
         *                a simple acceleration/deceleration interpolator.
         * @param extraTension Amount by which to multiply the tension. For instance,
         *                     to get the same overshoot as an OvershootInterpolator with
         *                     a tension of 2.0f, you would use an extraTension of 1.5f.
         */
        constructor(
            [in] Float tension,
            [in] Float extraTension);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        interface IInterpolator;
    }

    class CBounceInterpolator {
        constructor();

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        interface IInterpolator;
    }

    class CCycleInterpolator {
        constructor(
            [in] Float cycles);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        interface IInterpolator;
    }

    class CDecelerateInterpolator {
        constructor();

        /**
         * Constructor
         *
         * @param factor Degree to which the animation should be eased. Setting factor to 1.0f produces
         *        an upside-down y=x^2 parabola. Increasing factor above 1.0f makes exaggerates the
         *        ease-out effect (i.e., it starts even faster and ends evens slower)
         */
        constructor(
            [in] Float factor);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        interface IInterpolator;
    }

    class CLinearInterpolator {
        constructor();

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        interface IInterpolator;
    }

    class COvershootInterpolator {
        constructor();

        /**
         * @param tension Amount of overshoot. When tension equals 0.0f, there is
         *                no overshoot and the interpolator becomes a simple
         *                deceleration interpolator.
         */
        constructor(
            [in] Float tension);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        interface IInterpolator;
    }

    class CTransformation {
        constructor();

        interface ITransformation;
    }

    class CAnimationSet {
        /**
         * Constructor used when an AnimationSet is loaded from a resource.
         *
         * @param context Application context to use
         * @param attrs Attribute set from which to read values
         */
        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        /**
         * Constructor to use when building an AnimationSet from code
         *
         * @param shareInterpolator Pass TRUE if all of the animations in this set
         *        should use the interpolator assocciated with this AnimationSet.
         *        Pass FALSE if each animation should use its own interpolator.
         */
        constructor(
            [in] Boolean shareInterpolator);

        interface IAnimationSet;
    }

    class CAlphaAnimation {
        /**
         * Constructor used when an AlphaAnimation is loaded from a resource.
         *
         * @param context Application context to use
         * @param attrs Attribute set from which to read values
         */
        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        /**
         * Constructor to use when building an AlphaAnimation from code
         *
         * @param fromAlpha Starting alpha value for the animation, where 1.0 means
         *        fully opaque and 0.0 means fully transparent.
         * @param toAlpha Ending alpha value for the animation.
         */
        constructor(
            [in] Float fromAlpha,
            [in] Float toAlpha);

        interface IAnimation;
    }

    class CRotateAnimation {
        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        constructor(
            [in] Float fromDegrees,
            [in] Float toDegrees);

        constructor(
            [in] Float fromDegrees,
            [in] Float toDegrees,
            [in] Float pivotX,
            [in] Float pivotY);

        constructor(
            [in] Float fromDegrees,
            [in] Float toDegrees,
            [in] Float pivotXType,
            [in] Float pivotXValue,
            [in] Float pivotYType,
            [in] Float pivotYValue);

        interface IAnimation;
    }

    class CScaleAnimation {
        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        constructor(
            [in] Float fromX,
            [in] Float toX,
            [in] Float fromY,
            [in] Float toY);

        constructor(
            [in] Float fromX,
            [in] Float toX,
            [in] Float fromY,
            [in] Float toY,
            [in] Float pivotX,
            [in] Float pivotY);

        constructor(
            [in] Float fromX,
            [in] Float toX,
            [in] Float fromY,
            [in] Float toY,
            [in] Float pivotXType,
            [in] Float pivotXValue,
            [in] Float pivotYType,
            [in] Float pivotYValue);

        interface IAnimation;
    }

    class CTranslateAnimation {
        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        constructor(
            [in] Float fromXDelta,
            [in] Float toXDelta,
            [in] Float fromYDelta,
            [in] Float toYDelta);

        constructor(
            [in] Float fromXType,
            [in] Float fromXValue,
            [in] Float toXType,
            [in] Float toXValue,
            [in] Float fromYType,
            [in] Float fromYValue,
            [in] Float toYType,
            [in] Float toYValue);

        interface IAnimation;
    }

    class CLayoutAnimationController {
        /**
         * Creates a new layout animation controller from external resources.
         *
         * @param context the Context the view  group is running in, through which
         *        it can access the resources
         * @param attrs the attributes of the XML tag that is inflating the
         *        layout animation controller
         */
        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        /**
         * Creates a new layout animation controller with a delay of 50%
         * and the specified animation.
         *
         * @param animation the animation to use on each child of the view group
         */
         constructor(
             [in] IAnimation* animation);

        /**
         * Creates a new layout animation controller with the specified delay
         * and the specified animation.
         *
         * @param animation the animation to use on each child of the view group
         * @param delay the delay by which each child's animation must be offset
         */
        constructor(
            [in] IAnimation* animation,
            [in] Float delay);

        interface ILayoutAnimationController;
    }

    class CGridLayoutAnimationController {
        /**
         * Creates a new grid layout animation controller from external resources.
         *
         * @param context the Context the view  group is running in, through which
         *        it can access the resources
         * @param attrs the attributes of the XML tag that is inflating the
         *        layout animation controller
         */
        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        /**
         * Creates a new layout animation controller with a delay of 50%
         * for both rows and columns and the specified animation.
         *
         * @param animation the animation to use on each child of the view group
         */
        constructor(
            [in] IAnimation* animation);

        /**
         * Creates a new layout animation controller with the specified delays
         * and the specified animation.
         *
         * @param animation the animation to use on each child of the view group
         * @param columnDelay the delay by which each column animation must be offset
         * @param rowDelay the delay by which each row animation must be offset
         */
        constructor(
            [in] IAnimation* animation,
            [in] Float columnDelay,
            [in] Float rowDelay);

        interface IGridLayoutAnimationController;
    }

    singleton class CAnimationUtils {
        interface IAnimationUtils;
    }

    class CMenuInflater {
        interface IMenuInflater;

        constructor(
            [in] IContext* ctx);
    }

    class CSurfaceView {
        constructor(
            [in] IContext* context);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        interface ISurfaceView;
    }
}
