
module
{
    interface ICharArrayBuffer;
    interface ILocalContentObserver;
    interface IDataSetObserver;
    interface IContentResolver;
    interface IUri;
    interface IBundle;

    /**
     * This interface provides random read-write access to the result set returned
     * by a database query.
     *
     * Cursor implementations are not required to be synchronized so code using a Cursor from multiple
     * threads should perform its own synchronization when using the Cursor.
     */
    interface ICursor {
        /**
         * Returns the numbers of rows in the cursor.
         *
         * @return the number of rows in the cursor.
         */
        GetCount(
            [out] Int32* count);

        /**
         * Returns the current position of the cursor in the row set.
         * The value is zero-based. When the row set is first returned the cursor
         * will be at positon -1, which is before the first row. After the
         * last row is returned another call to next() will leave the cursor past
         * the last entry, at a position of count().
         *
         * @return the current cursor position.
         */
        GetPosition(
            [out] Int32* position);

        /**
         * Move the cursor by a relative amount, forward or backward, from the
         * current position. Positive offsets move forwards, negative offsets move
         * backwards. If the final position is outside of the bounds of the result
         * set then the resultant position will be pinned to -1 or count() depending
         * on whether the value is off the front or end of the set, respectively.
         *
         * <p>This method will return true if the requested destination was
         * reachable, otherwise, it returns false. For example, if the cursor is at
         * currently on the second entry in the result set and move(-5) is called,
         * the position will be pinned at -1, and false will be returned.
         *
         * @param offset the offset to be applied from the current position.
         * @return whether the requested move fully succeeded.
         */
        Move(
            [in] Int32 offset,
            [out] Boolean* value);

        /**
         * Move the cursor to an absolute position. The valid
         * range of values is -1 &lt;= position &lt;= count.
         *
         * <p>This method will return true if the request destination was reachable,
         * otherwise, it returns false.
         *
         * @param position the zero-based position to move to.
         * @return whether the requested move fully succeeded.
         */
        MoveToPosition(
            [in] Int32 position,
            [out] Boolean* value);

        /**
         * Move the cursor to the first row.
         *
         * <p>This method will return false if the cursor is empty.
         *
         * @return whether the move succeeded.
         */
        MoveToFirst(
            [out] Boolean* value);

        /**
         * Move the cursor to the last row.
         *
         * <p>This method will return false if the cursor is empty.
         *
         * @return whether the move succeeded.
         */
        MoveToLast(
            [out] Boolean* value);

        /**
         * Move the cursor to the next row.
         *
         * <p>This method will return false if the cursor is already past the
         * last entry in the result set.
         *
         * @return whether the move succeeded.
         */
        MoveToNext(
            [out] Boolean* value);

        /**
         * Move the cursor to the previous row.
         *
         * <p>This method will return false if the cursor is already before the
         * first entry in the result set.
         *
         * @return whether the move succeeded.
         */
        MoveToPrevious(
            [out] Boolean* value);

        /**
         * Returns whether the cursor is pointing to the first row.
         *
         * @return whether the cursor is pointing at the first entry.
         */
        IsFirst(
            [out] Boolean* value);

        /**
         * Returns whether the cursor is pointing to the last row.
         *
         * @return whether the cursor is pointing at the last entry.
         */
        IsLast(
            [out] Boolean* value);

        /**
         * Returns whether the cursor is pointing to the position before the first
         * row.
         *
         * @return whether the cursor is before the first result.
         */
        IsBeforeFirst(
            [out] Boolean* value);

        /**
         * Returns whether the cursor is pointing to the position after the last
         * row.
         *
         * @return whether the cursor is after the last result.
         */
        IsAfterLast(
            [out] Boolean* value);

        /**
         * Removes the row at the current cursor position from the underlying data
         * store. After this method returns the cursor will be pointing to the row
         * after the row that is deleted. This has the side effect of decrementing
         * the result of count() by one.
         * <p>
         * The query must have the row ID column in its selection, otherwise this
         * call will fail.
         *
         * @hide
         * @return whether the record was successfully deleted.
         * @deprecated use {@link ContentResolver#delete(Uri, String, String[])}
         */
        //@Deprecated
        DeleteRow(
            [out] Boolean* result);

        /**
         * Returns the zero-based index for the given column name, or -1 if the column doesn't exist.
         * If you expect the column to exist use {@link #getColumnIndexOrThrow(String)} instead, which
         * will make the error more clear.
         *
         * @param columnName the name of the target column.
         * @return the zero-based column index for the given column name, or -1 if
         * the column name does not exist.
         * @see #getColumnIndexOrThrow(String)
         */
        GetColumnIndex(
            [in] String columnName,
            [out] Int32* columnIndex);

        /**
         * Returns the zero-based index for the given column name, or throws
         * {@link IllegalArgumentException} if the column doesn't exist. If you're not sure if
         * a column will exist or not use {@link #getColumnIndex(String)} and check for -1, which
         * is more efficient than catching the exceptions.
         *
         * @param columnName the name of the target column.
         * @return the zero-based column index for the given column name
         * @see #getColumnIndex(String)
         * @throws IllegalArgumentException if the column does not exist
         */
        GetColumnIndexOrThrow(
            [in] String columnName,
            [out] Int32* columnIndex);

        /**
         * Returns the column name at the given zero-based column index.
         *
         * @param columnIndex the zero-based index of the target column.
         * @return the column name for the given column index.
         */
        GetColumnName(
            [in] Int32 columnIndex,
            [out] String* columnName);

        /**
         * Returns a string array holding the names of all of the columns in the
         * result set in the order in which they were listed in the result.
         *
         * @return the names of the columns returned in this query.
         */
        GetColumnNames(
            [out,callee] ArrayOf<String>* columnNames);

        /**
         * Return total number of columns
         * @return number of columns
         */
        GetColumnCount(
            [out] Int32* columnCount);

        /**
         * Returns the value of the requested column as a byte array.
         *
         * <p>If the native content of that column is not blob exception may throw
         *
         * @param columnIndex the zero-based index of the target column.
         * @return the value of that column as a byte array.
         */
        GetBlob(
            [in] Int32 columnIndex,
            [out,callee] ArrayOf<Byte>* blob);

        /**
         * Returns the value of the requested column as a String.
         *
         * <p>If the native content of that column is not text the result will be
         * the result of passing the column value to String.valueOf(x).
         *
         * @param columnIndex the zero-based index of the target column.
         * @return the value of that column as a String.
         */
        GetString(
            [in] Int32 columnIndex,
            [out] String* columnValue);

        /**
         * Retrieves the requested column text and stores it in the buffer provided.
         * If the buffer size is not sufficient, a new char buffer will be allocated
         * and assigned to CharArrayBuffer.data
         * @param columnIndex the zero-based index of the target column.
         *        if the target column is null, return buffer
         * @param buffer the buffer to copy the text into.
         */
        CopyStringToBuffer(
            [in] Int32 columnIndex,
            [in /*, out*/] ICharArrayBuffer* buf);

        /**
         * Returns the value of the requested column as a short.
         *
         * <p>If the native content of that column is not numeric the result will be
         * the result of passing the column value to Short.valueOf(x).
         *
         * @param columnIndex the zero-based index of the target column.
         * @return the value of that column as a short.
         */
        GetInt16(
            [in] Int32 columnIndex,
            [out] Int16* columnValue);

        /**
         * Returns the value of the requested column as an int.
         *
         * <p>If the native content of that column is not numeric the result will be
         * the result of passing the column value to Integer.valueOf(x).
         *
         * @param columnIndex the zero-based index of the target column.
         * @return the value of that column as an int.
         */
        GetInt32(
            [in] Int32 columnIndex,
            [out] Int32* columnValue);

        /**
         * Returns the value of the requested column as a long.
         *
         * <p>If the native content of that column is not numeric the result will be
         * the result of passing the column value to Long.valueOf(x).
         *
         * @param columnIndex the zero-based index of the target column.
         * @return the value of that column as a long.
         */
        GetInt64(
            [in] Int32 columnIndex,
            [out] Int64* columnValue);

        /**
         * Returns the value of the requested column as a float.
         *
         * <p>If the native content of that column is not numeric the result will be
         * the result of passing the column value to Float.valueOf(x).
         *
         * @param columnIndex the zero-based index of the target column.
         * @return the value of that column as a float.
         */
        GetFloat(
            [in] Int32 columnIndex,
            [out] Float* columnValue);

        /**
         * Returns the value of the requested column as a double.
         *
         * <p>If the native content of that column is not numeric the result will be
         * the result of passing the column value to Double.valueOf(x).
         *
         * @param columnIndex the zero-based index of the target column.
         * @return the value of that column as a double.
         */
        GetDouble(
            [in] Int32 columnIndex,
            [out] Double* columnValue);

        /**
         * Returns <code>true</code> if the value in the indicated column is null.
         *
         * @param columnIndex the zero-based index of the target column.
         * @return whether the column value is null.
         */
        IsNull(
            [in] Int32 columnIndex,
            [out] Boolean* value);

        /**
         * Returns <code>true</code> if the cursor supports updates.
         *
         * @return whether the cursor supports updates.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        SupportsUpdates(
            [out] Boolean* result);

        /**
         * Returns <code>true</code> if there are pending updates that have not yet been committed.
         *
         * @return <code>true</code> if there are pending updates that have not yet been committed.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        HasUpdates(
            [out] Boolean* result);

        /**
         * Updates the value for the given column in the row the cursor is
         * currently pointing at. Updates are not committed to the backing store
         * until {@link #commitUpdates()} is called.
         *
         * @param columnIndex the zero-based index of the target column.
         * @param value the new value.
         * @return whether the operation succeeded.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        UpdateBlob(
            [in] Int32 columnIndex,
            [in] ArrayOf<Byte> value,
            [out] Boolean* succeeded);

        /**
         * Updates the value for the given column in the row the cursor is
         * currently pointing at. Updates are not committed to the backing store
         * until {@link #commitUpdates()} is called.
         *
         * @param columnIndex the zero-based index of the target column.
         * @param value the new value.
         * @return whether the operation succeeded.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        UpdateString(
            [in] Int32 columnIndex,
            [in] String value,
            [out] Boolean* succeeded);

        /**
         * Updates the value for the given column in the row the cursor is
         * currently pointing at. Updates are not committed to the backing store
         * until {@link #commitUpdates()} is called.
         *
         * @param columnIndex the zero-based index of the target column.
         * @param value the new value.
         * @return whether the operation succeeded.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        UpdateInt16(
            [in] Int32 columnIndex,
            [in] Int16 value,
            [out] Boolean* succeeded);

        /**
         * Updates the value for the given column in the row the cursor is
         * currently pointing at. Updates are not committed to the backing store
         * until {@link #commitUpdates()} is called.
         *
         * @param columnIndex the zero-based index of the target column.
         * @param value the new value.
         * @return whether the operation succeeded.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        UpdateInt32(
            [in] Int32 columnIndex,
            [in] Int32 value,
            [out] Boolean* succeeded);

        /**
         * Updates the value for the given column in the row the cursor is
         * currently pointing at. Updates are not committed to the backing store
         * until {@link #commitUpdates()} is called.
         *
         * @param columnIndex the zero-based index of the target column.
         * @param value the new value.
         * @return whether the operation succeeded.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //Deprecated
        UpdateInt64(
            [in] Int32 columnIndex,
            [in] Int64 value,
            [out] Boolean* succeeded);

        /**
         * Updates the value for the given column in the row the cursor is
         * currently pointing at. Updates are not committed to the backing store
         * until {@link #commitUpdates()} is called.
         *
         * @param columnIndex the zero-based index of the target column.
         * @param value the new value.
         * @return whether the operation succeeded.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        UpdateFloat(
            [in] Int32 columnIndex,
            [in] Float value,
            [out] Boolean* succeeded);

        /**
         * Updates the value for the given column in the row the cursor is
         * currently pointing at. Updates are not committed to the backing store
         * until {@link #commitUpdates()} is called.
         *
         * @param columnIndex the zero-based index of the target column.
         * @param value the new value.
         * @return whether the operation succeeded.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        UpdateDouble(
            [in] Int32 columnIndex,
            [in] Double value,
            [out] Boolean* succeeded);

        /**
         * Removes the value for the given column in the row the cursor is
         * currently pointing at. Updates are not committed to the backing store
         * until {@link #commitUpdates()} is called.
         *
         * @param columnIndex the zero-based index of the target column.
         * @return whether the operation succeeded.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        UpdateToNull(
            [in] Int32 columnIndex,
            [out] Boolean* succeeded);

        /**
         * Atomically commits all updates to the backing store. After completion,
         * this method leaves the data in an inconsistent state and you should call
         * {@link #requery} before reading data from the cursor again.
         *
         * @return whether the operation succeeded.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        CommitUpdates(
            [out] Boolean* succeeded);

        /**
         * Atomically commits all updates to the backing store, as well as the
         * updates included in values. After completion,
         * this method leaves the data in an inconsistent state and you should call
         * {@link #requery} before reading data from the cursor again.
         *
         * @param values A map from row IDs to Maps associating column names with
         *               updated values. A null value indicates the field should be
                         removed.
         * @return whether the operation succeeded.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
//        @Deprecated
//        boolean commitUpdates(Map<? extends Long,
//                ? extends Map<String,Object>> values);

        /**
         * Reverts all updates made to the cursor since the last call to
         * commitUpdates.
         * @hide
         * @deprecated use the {@link ContentResolver} update methods instead of the Cursor
         * update methods
         */
        //@Deprecated
        AbortUpdates();

        /**
         * Deactivates the Cursor, making all calls on it fail until {@link #requery} is called.
         * Inactive Cursors use fewer resources than active Cursors.
         * Calling {@link #requery} will make the cursor active again.
         */
        Deactivate();

        /**
         * Performs the query that created the cursor again, refreshing its
         * contents. This may be done at any time, including after a call to {@link
         * #deactivate}.
         *
         * @return true if the requery succeeded, false if not, in which case the
         *         cursor becomes invalid.
         */
        Requery(
            [out] Boolean* succeeded);

        /**
         * Closes the Cursor, releasing all of its resources and making it completely invalid.
         * Unlike {@link #deactivate()} a call to {@link #requery()} will not make the Cursor valid
         * again.
         */
        Close();

        /**
         * return true if the cursor is closed
         * @return true if the cursor is closed.
         */
        IsClosed(
            [out] Boolean* closed);

        /**
         * Register an observer that is called when changes happen to the content backing this cursor.
         * Typically the data set won't change until {@link #requery()} is called.
         *
         * @param observer the object that gets notified when the content backing the cursor changes.
         * @see #unregisterContentObserver(ContentObserver)
         */
        RegisterContentObserver(
            [in] ILocalContentObserver* observer);

        /**
         * Unregister an observer that has previously been registered with this
         * cursor via {@link #registerContentObserver}.
         *
         * @param observer the object to unregister.
         * @see #registerContentObserver(ContentObserver)
         */
        UnregisterContentObserver(
            [in] ILocalContentObserver* observer);

        /**
         * Register an observer that is called when changes happen to the contents
         * of the this cursors data set, for example, when the data set is changed via
         * {@link #requery()}, {@link #deactivate()}, or {@link #close()}.
         *
         * @param observer the object that gets notified when the cursors data set changes.
         * @see #unregisterDataSetObserver(DataSetObserver)
         */
        RegisterDataSetObserver(
            [in] IDataSetObserver* observer);

        /**
         * Unregister an observer that has previously been registered with this
         * cursor via {@link #registerContentObserver}.
         *
         * @param observer the object to unregister.
         * @see #registerDataSetObserver(DataSetObserver)
         */
        UnregisterDataSetObserver(
            [in] IDataSetObserver* observer);

        /**
         * Register to watch a content URI for changes. This can be the URI of a specific data row (for
         * example, "content://my_provider_type/23"), or a a generic URI for a content type.
         *
         * @param cr The content resolver from the caller's context. The listener attached to
         * this resolver will be notified.
         * @param uri The content URI to watch.
         */
        SetNotificationUri(
            [in] IContentResolver* cr,
            [in] IUri* uri);

        /**
         * onMove() will only be called across processes if this method returns true.
         * @return whether all cursor movement should result in a call to onMove().
         */
        GetWantsAllOnMoveCalls(
            [out] Boolean* result);

        /**
         * Returns a bundle of extra values. This is an optional way for cursors to provide out-of-band
         * metadata to their users. One use of this is for reporting on the progress of network requests
         * that are required to fetch data for the cursor.
         *
         * <p>These values may only change when requery is called.
         * @return cursor-defined values, or Bundle.EMTPY if there are no values. Never null.
         */
        GetExtras(
            [out] IBundle** extras);

        /**
         * This is an out-of-band way for the the user of a cursor to communicate with the cursor. The
         * structure of each bundle is entirely defined by the cursor.
         *
         * <p>One use of this is to tell a cursor that it should retry its network request after it
         * reported an error.
         * @param extras extra values, or Bundle.EMTPY. Never null.
         * @return extra values, or Bundle.EMTPY. Never null.
         */
        Respond(
            [in] IBundle* extras,
            [out] IBundle** result);
    }
}
