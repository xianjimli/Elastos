module
{
    interface ISQLiteClosable;
    interface ISQLiteTransactionListener;

    interface IFile;
    interface ISQLiteCursorDriver;
    interface ISQLiteQuery;
    interface ICursor;
    interface IContentValues;
    interface ILocale;
    interface ISQLiteCompiledSql;
    interface ISQLiteStatement;

    interface ISQLiteDatabase extends ISQLiteClosable
    {
        AddSQLiteClosable(
            [in] ISQLiteClosable* closable);

        RemoveSQLiteClosable(
            [in] ISQLiteClosable* closable);

        SetLockingEnabled(
            [in] Boolean lockingEnabled);

        OnCorruption();

        Lock();

        UnLock();

        BeginTransaction();

        BeginTransactionWithListener(
            [in] ISQLiteTransactionListener* transactionListener);

        EndTransaction();

        SetTransactionSuccessful();

        InTransaction(
            [out] Boolean* result);

        IsDbLockedByCurrentThreads(
            [out] Boolean* isDbLockedByCurrentThreads);

        //@Deprecated
        YieldIfContended(
            [out] Boolean* isYielded);

        YieldIfContendedSafely(
            [out] Boolean* isYielded);

        YieldIfContendedSafelyEx(
            [in] Int64 sleepAfterYieldDelay,
            [out] Boolean* isYielded);

        YieldIfContendedHelper(
            [in] Boolean checkFullyYielded,
            [in] Int64 sleepAfterYieldDelay,
            [out] Boolean* isYielded);

//        GetSyncedTables(
//            [out] Map<String,String>* tables);

        OpenDatabase(
            [in] String path,
            [in] ICursorFactory* factory,
            [in] Int32 flags,
            [out] ISQLiteDatabase** db);

//        OpenOrCreateDatabase(
//            [in] IFile* file,
//            [in] ICursorFactory* factory,
//            [out] ISQliteDatabase** db);

//        OpenOrCreateDatabaseEx(
//            [in] String path,
//            [in] ICursorFactory* factory,
//            [out] ISQLiteDatabase** db);

//        Create(
//            [in] ICursorFactory* factory,
//            [out] ISQLiteDatabase** db);

        Close();

        GetVersion(
            [out] Int32* versions);

        SetVersion(
            [in] Int32 versions);

        GetMaximumSize(
            [out] Int64* maximumSize);

        SetMaximumSize(
            [in] Int64 numBytes);

        GetPageSize(
            [out] Int64* pageSize);

        SetPageSize(
            [in] Int64 pageSize);

        MarkTableSyncable(
            [in] String table,
            [in] String deletedTable);

        MarkTableSyncableEx(
            [in] String table,
            [in] String foreignKey,
            [in] String updateTable);

        RowUpdated(
            [in] String table,
            [in] Int64 rowId);

        FindEditTable(
            [in] String tables,
            [out] String* resultTables);

        CompileStatement(
            [in] String sql,
            [out] ISQLiteStatement** newObj);

        Query(
            [in] Boolean distinct,
            [in] String table,
            [in] ArrayOf<String> columns,
            [in] String selection,
            [in] ArrayOf<String> selectionArgs,
            [in] String groupBy,
            [in] String having,
            [in] String orderBy,
            [in] String limit,
            [out] ICursor** cursor);

        QueryWithFactory(
            [in] ICursorFactory* cursorFactory,
            [in] Boolean distinct,
            [in] String table,
            [in] ArrayOf<String> columns,
            [in] String selection,
            [in] ArrayOf<String> selectionArgs,
            [in] String groupBy,
            [in] String having,
            [in] String orderBy,
            [in] String limit,
            [out] ICursor** cursor);

        QueryEx(
            [in] String table,
            [in] ArrayOf<String> columns,
            [in] String selection,
            [in] ArrayOf<String> selectionArgs,
            [in] String groupBy,
            [in] String having,
            [in] String orderBy,
            [out] ICursor** cursor);

        QueryEx2(
            [in] String table,
            [in] ArrayOf<String> columns,
            [in] String selection,
            [in] ArrayOf<String> selectionArgs,
            [in] String groupBy,
            [in] String having,
            [in] String orderBy,
            [in] String limit,
            [out] ICursor** cursor);

        RawQuery(
            [in] String sql,
            [in] ArrayOf<String> selectionArgs,
            [out] ICursor** cursor);

        RawQueryWithFactory(
            [in] ICursorFactory* cursorFactory,
            [in] String sql,
            [in] ArrayOf<String> selectionArgs,
            [in] String editTable,
            [out] ICursor** cursor);

        RawQueryEx(
            [in] String sql,
            [in] ArrayOf<String> selectionArgs,
            [in] Int32 initialRead,
            [in] Int32 maxRead,
            [out] ICursor** cursor);

        Insert(
            [in] String table,
            [in] String nullColumnHack,
            [in] IContentValues* values,
            [out] Int64* value);

        InsertOrThrow(
            [in] String table,
            [in] String nullColumnHack,
            [in] IContentValues* values,
            [out] Int64* value);

        Replace(
            [in] String table,
            [in] String nullColumnHack,
            [in] IContentValues* initialValues,
            [out] Int64* value);

        ReplaceOrThrow(
            [in] String table,
            [in] String nullColumnHack,
            [in] IContentValues* initialValues,
            [out] Int64* value);

        InsertWithOnConflict(
            [in] String table,
            [in] String nullColumnHack,
            [in] IContentValues* initialValues,
            [in] Int64 conflictAlgorithm,
            [out] Int64* value);

        Delete(
            [in] String table,
            [in] String whereClause,
            [in] ArrayOf<String> whereArgs,
            [out] Int32* value);

        Update(
            [in] String table,
            [in] IContentValues* values,
            [in] String whereClause,
            [in] ArrayOf<String> whereArgs,
            [out] Int32* value);

        UpdateWithOnConflict(
            [in] String table,
            [in] IContentValues* values,
            [in] String whereClause,
            [in] ArrayOf<String> whereArgs,
            [in] Int32 conflictAlgorithm,
            [out] Int32* value);

        ExeSQL(
            [in] String sql);

        ExeSQLEx(
            [in] String sql,
            [in] ArrayOf<IInterface*> bindArgs);

        IsReadOnly(
            [out] Boolean* isReadOnlyed);

        IsOpen(
            [out] Boolean* isOpened);

        NeedUpgrade(
            [in] Int32 newVersion,
            [out] Boolean* result);

        GetPath(
            [out] String* path);

        LogTimeStat(
            [in] String sql,
            [in] Int64 beginMillis);

        LogTimeStatEx(
            [in] String sql,
            [in] Int64 beginMillis,
            [in] String prefix);

        SetLocale(
            [in] ILocale* locale);

        AddToCompiledQueries(
            [in] String sql,
            [in] ISQLiteCompiledSql* compiledStatement);

        GetCompiledStatementForSql(
            [in] String sql,
            [out] ISQLiteCompiledSql** compiledStatement);

        IsInCompiledSqlCache(
            [in] String sql,
            [out] Boolean* isInCompiledSqlCached);

        PurgeFromCompiledSqlCache(
            [in] String sql);

        ResetCompiledSqlCache();

        GetMaxSqlCacheSize(
            [out] Int32* maxSqlCacheSize);

        SetMaxSqlCacheSize(
            [in] Int32 cacheSize);

//        GetDbStats(
//            [out] Set<IDbStats>* dbStatsList);
    }
    interface ICursorFactory
    {
        NewCursor(
            [in] ISQLiteDatabase* db,
            [in] ISQLiteCursorDriver* masterQuery,
            [in] String editTable,
            [in] ISQLiteQuery* query,
            [out] ICursor** newCursor);
    }

}