module
{
    merge("os/apartment.car");
    merge("os/ClassLoader.car");
    merge("os/Binder.car");
    merge("os/BatteryStats.car");
    merge("os/ParcelFileDescriptor.car");
    merge("os/Bundle.car");
    merge("os/ServiceManager.car");
    merge("os/PatternMatcher.car");
    merge("os/FileObserver.car");
    merge("os/FileStatus.car");
    merge("os/Vibrator.car");
    merge("os/WorkSource.car");
    merge("os/ResultReceiver.car");
    merge("os/IResultReceiver.car");
    merge("os/RemoteCallbackList.car");
    merge("os/storage/IMountServiceListener.car");
    merge("os/storage/IMountShutdownObserver.car");
    merge("os/storage/IObbActionListener.car");
    merge("os/storage/IMountService.car");
    merge("os/storage/OnObbStateChangeListener.car");
    merge("os/storage/StorageEventListener.car");
    merge("os/storage/StorageVolume.car");
    merge("os/storage/StorageManager.car");
    merge("os/Handler.car");
    merge("os/Message.car");
    merge("os/BatteryManager.car");
    merge("os/PermissionController.car");

    class CRemoteCallbackList {
        constructor();
        interface IRemoteCallbackList;
    }

    class CApartment {
        constructor(
            [in] Boolean usingNativeMessageQueue);

        interface IApartment;
    }

    singleton class CApartmentHelper {
        interface IApartmentHelper;
    }

    class CClassLoader {
        interface IClassLoader;
    }

    class COnObbStateChangeListener {
        interface IOnObbStateChangeListener;
    }

    class CStorageEventListener {
        interface IStorageEventListener;
    }

    class CStorageVolume {
        interface IStorageVolume;
    }

    class CStorageManager {
        interface IStorageManager;
    }

    class CParcelFileDescriptor {
        constructor(
            [in] IParcelFileDescriptor* pfd);

        /*package*/ constructor(
            [in] IFileDescriptor* fd);

        interface IParcelFileDescriptor;
        interface IParcelable;
    }

    singleton class CParcelFileDescriptorHelper {
        interface IParcelFileDescriptorHelper;
    }

    /**
     * A simple pattern matcher, which is safe to use on untrusted data: it does
     * not provide full reg-exp support, only simple globbing that can not be
     * used maliciously.
     */
    class CPatternMatcher {
        constructor(
            [in] String pattern,
            [in] Int32 type);

        constructor(
            [in] IParcel* src);

        interface IParcelable;

        interface IPatternMatcher;
    }

    class CBundle {
        constructor();
        constructor(
            [in] IBundle* bundle);
        constructor(
            [in] IParcel* parcelledData);
        constructor(
            [in] IParcel* parcelledData,
            [in] Int32 length);
        constructor(
            [in] Int32 capacity);
        interface IBundle;
        interface IParcelable;
    }

    singleton class CServiceManager {
        interface IServiceManager;
    }

    class CVibrator {
        constructor();

        interface IVibrator;
    }

    /**
     * Describes the source of some work that may be done by someone else.
     * Currently the public representation of what a work source is is not
     * defined; this is an opaque container.
     */
    class CWorkSource {
        constructor();

        /**
         * Create a new WorkSource that is a copy of an existing one.
         * If <var>orig</var> is null, an empty WorkSource is created.
         */
        constructor(
            [in] IWorkSource* orig);

        /** @hide */
        constructor(
            [in] Int32 uid);

        constructor(
            [in] IParcel* src);

        interface IWorkSource;
        interface IParcelable;
    }

    class CResultReceiver {
        constructor(
            [in] IApartment* handler);

        interface ILocalResultReceiver;
        interface IParcelable;
    }

    class CBinder {
        constructor();

        interface IBinder;
    }

    class CMyResultReceiver {
        constructor(
            [in] Handle32 host);

        interface IResultReceiver;
    }

    class CParcel {
        constructor();

        interface IParcel;
    }

    class CPermissionController {
        constructor(
            [in] IActivityManager* activityManagerService);

        interface IPermissionController;
    }
}
