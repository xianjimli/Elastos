
/**
 * Service that allows the interaction with an authentication server.
 * @hide
 */
module
{
    interface IAccountAuthenticator {
        /**
         * prompts the user for account information and adds the result to the IAccountManager
         */
        AddAccount(
            [in] IAccountAuthenticatorResponse* response,
            [in] String accountType,
            [in] String authTokenType,
            [in] ArrayOf<String> requiredFeatures,
            [in] IBundle* options);

        /**
         * prompts the user for the credentials of the account
         */
        ConfirmCredentials(
            [in] IAccountAuthenticatorResponse* response,
            [in] IAccount* account,
            [in] IBundle* options);

        /**
         * gets the password by either prompting the user or querying the IAccountManager
         */
        GetAuthToken(
            [in] IAccountAuthenticatorResponse* response,
            [in] IAccount* account,
            [in] String authTokenType,
            [in] IBundle* options);

        /**
         * Gets the user-visible label of the given authtoken type.
         */
        GetAuthTokenLabel(
            [in] IAccountAuthenticatorResponse* response,
            [in] String authTokenType);

        /**
         * prompts the user for a new password and writes it to the IAccountManager
         */
        UpdateCredentials(
            [in] IAccountAuthenticatorResponse* response,
            [in] IAccount* account,
            [in] String authTokenType,
            [in] IBundle* options);

        /**
         * launches an activity that lets the user edit and set the properties for an authenticator
         */
        EditProperties(
            [in] IAccountAuthenticatorResponse* response,
            [in] String accountType);

        /**
         * returns a Bundle where the boolean value BOOLEAN_RESULT_KEY is set if the account has the
         * specified features
         */
        HasFeatures(
            [in] IAccountAuthenticatorResponse* response,
            [in] IAccount* account,
            [in] ArrayOf<String> features);

        /**
         * Gets whether or not the account is allowed to be removed.
         */
        GetAccountRemovalAllowed(
            [in] IAccountAuthenticatorResponse* response,
            [in] IAccount* account);
    }
}
