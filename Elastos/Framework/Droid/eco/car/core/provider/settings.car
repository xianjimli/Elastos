module
{
    interface ISettings;
    interface ISettingsNameValueTable;
    interface IBaseColumns;
    interface IContentResolver;
    interface IConfiguration;
    interface IIntent;

    /**
     * Activity Action: Show system settings.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: nothing.
     */
    const Settings_ACTION_SETTINGS = "android.settings.SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of APNs.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: nothing.
     */
    const Settings_ACTION_APN_SETTINGS = "android.settings.APN_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of current location
     * sources.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_LOCATION_SOURCE_SETTINGS =
                "android.settings.LOCATION_SOURCE_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of wireless controls
     * such as Wi-Fi, Bluetooth and Mobile networks.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_WIRELESS_SETTINGS =
                "android.settings.WIRELESS_SETTINGS";

    /**
     * Activity Action: Show settings to allow entering/exiting airplane mode.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_AIRPLANE_MODE_SETTINGS =
                "android.settings.AIRPLANE_MODE_SETTINGS";

    /**
     * Activity Action: Show settings for accessibility modules.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_ACCESSIBILITY_SETTINGS =
                "android.settings.ACCESSIBILITY_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of security and
     * location privacy.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_SECURITY_SETTINGS =
                "android.settings.SECURITY_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of privacy options.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_PRIVACY_SETTINGS =
                "android.settings.PRIVACY_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of Wi-Fi.

     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.

     */
    const Settings_ACTION_WIFI_SETTINGS =
                "android.settings.WIFI_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of a static IP
     * address for Wi-Fi.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you safeguard
     * against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_WIFI_IP_SETTINGS =
                "android.settings.WIFI_IP_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of Bluetooth.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_BLUETOOTH_SETTINGS =
                "android.settings.BLUETOOTH_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of date and time.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_DATE_SETTINGS =
                "android.settings.DATE_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of sound and volume.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_SOUND_SETTINGS =
                "android.settings.SOUND_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of display.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_DISPLAY_SETTINGS =
                "android.settings.DISPLAY_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of locale.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_LOCALE_SETTINGS =
                "android.settings.LOCALE_SETTINGS";

    /**
     * Activity Action: Show settings to configure input methods, in particular
     * allowing the user to enable input methods.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_INPUT_METHOD_SETTINGS =
                "android.settings.INPUT_METHOD_SETTINGS";

    /**
     * Activity Action: Show settings to manage the user input dictionary.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_USER_DICTIONARY_SETTINGS =
                "android.settings.USER_DICTIONARY_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of application-related settings.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_APPLICATION_SETTINGS =
                "android.settings.APPLICATION_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of application
     * development-related settings.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you safeguard
     * against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_APPLICATION_DEVELOPMENT_SETTINGS =
                "android.settings.APPLICATION_DEVELOPMENT_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of quick launch shortcuts.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_QUICK_LAUNCH_SETTINGS =
                "android.settings.QUICK_LAUNCH_SETTINGS";

    /**
     * Activity Action: Show settings to manage installed applications.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_MANAGE_APPLICATIONS_SETTINGS =
                "android.settings.MANAGE_APPLICATIONS_SETTINGS";

    /**
     * Activity Action: Show settings to manage all applications.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS =
                "android.settings.MANAGE_ALL_APPLICATIONS_SETTINGS";

    /**
     * Activity Action: Show screen of details about a particular application.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: The Intent's data URI specifies the application package name
     * to be shown, with the "package" scheme.  That is "package:com.my.app".
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_APPLICATION_DETAILS_SETTINGS =
                "android.settings.APPLICATION_DETAILS_SETTINGS";

    /**
     * Activity Action: Show settings for system update functionality.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     *
     * @hide
     */
    const Settings_ACTION_SYSTEM_UPDATE_SETTINGS =
                "android.settings.SYSTEM_UPDATE_SETTINGS";

    /**
     * Activity Action: Show settings to allow configuration of sync settings.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * The account types available to add via the add account button may be restricted by adding an
     * {@link #EXTRA_AUTHORITIES} extra to this Intent with one or more syncable content provider's
     * authorities. Only account types which can sync with that content provider will be offered to
     * the user.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_SYNC_SETTINGS =
                "android.settings.SYNC_SETTINGS";

    /**
     * Activity Action: Show add account screen for creating a new account.
     * <p>
     * In some cases, a matching Activity may not exist, so ensure you
     * safeguard against this.
     * <p>
     * The account types available to add may be restricted by adding an {@link #EXTRA_AUTHORITIES}
     * extra to the Intent with one or more syncable content provider's authorities.  Only account
     * types which can sync with that content provider will be offered to the user.
     * <p>
     * Input: Nothing.
     * <p>
     * Output: Nothing.
     */
    const Settings_ACTION_ADD_ACCOUNT =
                "android.settings.ADD_ACCOUNT_SETTINGS";

        /**
         * Activity Action: Show settings for selecting the network operator.
         * <p>
         * In some cases, a matching Activity may not exist, so ensure you
         * safeguard against this.
         * <p>
         * Input: Nothing.
         * <p>
         * Output: Nothing.
         */
    const Settings_ACTION_NETWORK_OPERATOR_SETTINGS =
                "android.settings.NETWORK_OPERATOR_SETTINGS";

        /**
         * Activity Action: Show settings for selection of 2G/3G.
         * <p>
         * In some cases, a matching Activity may not exist, so ensure you
         * safeguard against this.
         * <p>
         * Input: Nothing.
         * <p>
         * Output: Nothing.
         */
    const Settings_ACTION_DATA_ROAMING_SETTINGS =
                "android.settings.DATA_ROAMING_SETTINGS";

        /**
         * Activity Action: Show settings for internal storage.
         * <p>
         * In some cases, a matching Activity may not exist, so ensure you
         * safeguard against this.
         * <p>
         * Input: Nothing.
         * <p>
         * Output: Nothing.
         */
    const Settings_ACTION_INTERNAL_STORAGE_SETTINGS =
                "android.settings.INTERNAL_STORAGE_SETTINGS";
        /**
         * Activity Action: Show settings for memory card storage.
         * <p>
         * In some cases, a matching Activity may not exist, so ensure you
         * safeguard against this.
         * <p>
         * Input: Nothing.
         * <p>
         * Output: Nothing.
         */
    const Settings_ACTION_MEMORY_CARD_SETTINGS =
                "android.settings.MEMORY_CARD_SETTINGS";

        /**
         * Activity Action: Show settings for global search.
         * <p>
         * In some cases, a matching Activity may not exist, so ensure you
         * safeguard against this.
         * <p>
         * Input: Nothing.
         * <p>
         * Output: Nothing
         */
    const Settings_ACTION_SEARCH_SETTINGS =
            "android.search.action.SEARCH_SETTINGS";

        /**
         * Activity Action: Show general device information settings (serial
         * number, software version, phone number, etc.).
         * <p>
         * In some cases, a matching Activity may not exist, so ensure you
         * safeguard against this.
         * <p>
         * Input: Nothing.
         * <p>
         * Output: Nothing
         */
    const Settings_ACTION_DEVICE_INFO_SETTINGS =
            "android.settings.DEVICE_INFO_SETTINGS";

        // End of Intent actions for Settings

        /**
         * @hide - Private call() method on SettingsProvider to read from 'system' table.
         */
    const Settings_CALL_METHOD_GET_SYSTEM = "GET_system";

        /**
         * @hide - Private call() method on SettingsProvider to read from 'secure' table.
         */
    const Settings_CALL_METHOD_GET_SECURE = "GET_secure";

        /**
         * Activity Extra: Limit available options in launched activity based on the given authority.
         * <p>
         * This can be passed as an extra field in an Activity Intent with one or more syncable content
         * provider's authorities as a String[]. This field is used by some intents to alter the
         * behavior of the called activity.
         * <p>
         * Example: The {@link #ACTION_ADD_ACCOUNT} intent restricts the account types available based
         * on the authority given.
         */
    const Settings_EXTRA_AUTHORITIES = "authorities";

    const Settings_AUTHORITY = "settings";

    interface ISettings{
    }

    const SettingsNameValueTable_NAME = "name";
    const SettingsNameValueTable_VALUE = "value";

    interface ISettingsNameValueTable extends IBaseColumns{
        GetUriFor(
            [in] IUri* uri,
            [in] String name,
            [out] IUri** outUri);

    }

    const SettingsBookmarks_TAG = "Bookmarks";

    const SettingsBookmarks_ID = "_id";

    const SettingsBookmarks_TITLE = "title";

    const SettingsBookmarks_FOLDER = "folder";

    const SettingsBookmarks_INTENT = "intent";

    const SettingsBookmarks_SHORTCUT = "shortcut";

    const SettingsBookmarks_ORDERING = "ordering";


    interface ISettingsBookmarks extends IBaseColumns{
        GetIntentForShortcut(
            [in] IContentResolver* cr,
            [in] Char8 shortcut,
            [out] IIntent** outIntent);

        Add(
            [in] IContentResolver* cr,
            [in] IIntent* intent,
            [in] String title,
            [in] String folder,
            [in] Char8 shortcut,
            [in] Int32 ordering,
            [out] IUri** outUri);

    }

}
