
module
{
    interface IApartment;
    interface IWebViewClient;
    interface IDownloadListener;
    interface IWebBackForwardListClient;
    interface IKeyEvent;
    interface IBitmap;
    interface IMessage;
    interface IHttpAuthHandler;
    interface ISslErrorHandler;
    interface ISslError;
    interface ISslCertificate;
    interface IWebView;
    interface IWebStorageQuotaUpdater;
    interface IGeolocationPermissionsCallback;
    interface IWebHistoryItem;
    interface IWebBackForwardList;
    interface IBrowserFrame;

    interface ICallbackProxy extends IApartment {

       /**
         * Set the WebViewClient.
         * @param client An implementation of WebViewClient.
         */
        SetWebViewClient(
           [in] IWebViewClient* client);

        /**
         * Get the WebViewClient.
         * @return the current WebViewClient instance.
         *
         *@hide pending API council approval.
         */
        GetWebViewClient(
           [out] IWebViewClient** client);

        /**
         * Set the WebChromeClient.
         * @param client An implementation of WebChromeClient.
         */
        SetWebChromeClient(
           [in] IWebChromeClient* client);

        /**
         * Get the WebChromeClient.
         * @return the current WebChromeClient instance.
         */
        GetWebChromeClient(
           [out] IWebChromeClient** client);

        /**
         * Set the client DownloadListener.
         * @param client An implementation of DownloadListener.
         */
        SetDownloadListener(
           [in] IDownloadListener* client);

        /**
         * Get the Back/Forward list to return to the user or to update the cached
         * history list.
         */
        GetBackForwardList(
           [out] IWebBackForwardList** list);

        /**
         * Called by the UI side.  Calling overrideUrlLoading from the WebCore
         * side will post a message to call this method.
         */
        UiOverrideUrlLoading(
           [in] String overrideUrl,
           [out] Boolean* flag);

        /**
         * Called by UI side.
         */
        UiOverrideKeyEvent(
           [in] IKeyEvent* event,
           [out] Boolean* flag);

        /**
         * Return the latest progress.
         */
        GetProgress(
           [out] Int32* progress);

        OnPageStarted(
           [in] String url, 
           [in] IBitmap* favicon);

        OnPageFinished(
           [in] String url);

        // Because this method is public and because CallbackProxy is mistakenly
        // party of the public classes, we cannot remove this method.
        OnTooManyRedirects(
           [in] IMessage* cancelMsg, 
           [in] IMessage* continueMsg);

        OnReceivedError(
           [in] Int32 errorCode, 
           [in] String description,
           [in] String failingUrl);

        OnFormResubmission(
           [in] IMessage* dontResend,
           [in] IMessage* resend);

        /**
         * Called by the WebCore side
         */
        ShouldOverrideUrlLoading(
           [in] String url,
           [out] Boolean* flag);

        OnReceivedHttpAuthRequest(
           [in] IHttpAuthHandler* handler,
           [in] String hostName, 
           [in] String realmName);

        /**
         * @hide - hide this because it contains a parameter of type SslError.
         * SslError is located in a hidden package.
         */
        OnReceivedSslError(
           [in] ISslErrorHandler* handler, 
           [in] ISslError* error);

        /**
         * @hide - hide this because it contains a parameter of type SslCertificate,
         * which is located in a hidden package.
         */

        OnReceivedCertificate(
           [in] ISslCertificate* certificate);

        DoUpdateVisitedHistory(
           [in] String url, 
           [in] Boolean isReload);

        OnLoadResource(
           [in] String url);

        OnUnhandledKeyEvent(
           [in] IKeyEvent* event);

        OnScaleChanged(
           [in] Float oldScale, 
           [in] Float newScale);

        //--------------------------------------------------------------------------
        // DownloadListener functions.
        //--------------------------------------------------------------------------

        /**
         * Starts a download if a download listener has been registered, otherwise
         * return false.
         */
        OnDownloadStart(
           [in] String url, 
           [in] String userAgent,
           [in] String contentDisposition, 
           [in] String mimetype, 
           [in] Int64 contentLength,
           [out] Boolean* flag);


        //--------------------------------------------------------------------------
        // WebView specific functions that do not interact with a client. These
        // functions just need to operate within the UI thread.
        //--------------------------------------------------------------------------

        OnSavePassword(
           [in] String schemePlusHost, 
           [in] String username,
           [in] String password, 
           [in] IMessage* resumeMsg,
           [out] Boolean* flag);

        OnReceivedHttpAuthCredentials(
           [in] String host, 
           [in] String realm,
           [in] String username, 
           [in] String password);

        //--------------------------------------------------------------------------
        // WebChromeClient methods
        //--------------------------------------------------------------------------

        OnProgressChanged(
           [in] Int32 newProgress);

        CreateWindow(
           [in] Boolean dialog, 
           [in] Boolean userGesture,
           [out] IBrowserFrame** browseFrame);

        OnRequestFocus();

        OnCloseWindow(
           [in] IWebView* window);

        OnReceivedIcon(
           [in] IBitmap* icon);

        OnReceivedTitle(
           [in] String title);

        OnJsAlert(
           [in] String url, 
           [in] String message);

        OnJsConfirm(
           [in] String url, 
           [in] String message,
           [out] Boolean* flag);

        OnJsPrompt(
           [in] String url, 
           [in] String message, 
           [in] String defaultValue,
           [out] String* result);

        OnJsBeforeUnload(
           [in] String url, 
           [in] String message,
           [out] Boolean* result);

        /**
         * Called by WebViewCore to inform the Java side that the current origin
         * has overflowed it's database quota. Called in the WebCore thread so
         * posts a message to the UI thread that will prompt the WebChromeClient
         * for what to do. On return back to C++ side, the WebCore thread will
         * sleep pending a new quota value.
         * @param url The URL that caused the quota overflow.
         * @param databaseIdentifier The identifier of the database that the
         *     transaction that caused the overflow was running on.
         * @param currentQuota The current quota the origin is allowed.
         * @param estimatedSize The estimated size of the database.
         * @param totalUsedQuota is the sum of all origins' quota.
         * @param quotaUpdater An instance of a class encapsulating a callback
         *     to WebViewCore to run when the decision to allow or deny more
         *     quota has been made.
         */
        OnExceededDatabaseQuota(
           [in] String url, 
           [in] String databaseIdentifier, 
           [in] Int64 currentQuota,
           [in] Int64 estimatedSize, 
           [in] Int64 totalUsedQuota,
           [in] IWebStorageQuotaUpdater* quotaUpdater);

        /**
         * Called by WebViewCore to inform the Java side that the appcache has
         * exceeded its max size.
         * @param spaceNeeded is the amount of disk space that would be needed
         * in order for the last appcache operation to succeed.
         * @param totalUsedQuota is the sum of all origins' quota.
         * @param quotaUpdater An instance of a class encapsulating a callback
         * to WebViewCore to run when the decision to allow or deny a bigger
         * app cache size has been made.
         */
        OnReachedMaxAppCacheSize(
           [in] Int64 spaceNeeded,
           [in] Int64 totalUsedQuota, 
           [in] IWebStorageQuotaUpdater* quotaUpdater);

        /**
         * Called by WebViewCore to instruct the browser to display a prompt to ask
         * the user to set the Geolocation permission state for the given origin.
         * @param origin The origin requesting Geolocation permsissions.
         * @param callback The callback to call once a permission state has been
         *     obtained.
         */
        OnGeolocationPermissionsShowPrompt(
           [in] String origin, 
           [in] IGeolocationPermissionsCallback* callBack);

        /**
         * Called by WebViewCore to instruct the browser to hide the Geolocation
         * permissions prompt.
         */
        OnGeolocationPermissionsHidePrompt();

        /**
         * Called by WebViewCore when we have a message to be added to the JavaScript
         * error console. Sends a message to the Java side with the details.
         * @param message The message to add to the console.
         * @param lineNumber The lineNumber of the source file on which the error
         *     occurred.
         * @param sourceID The filename of the source file in which the error
         *     occurred.
         * @param msgLevel The message level, corresponding to the MessageLevel enum in
         *     WebCore/page/Console.h
         */
        AddMessageToConsole(
           [in] String message, 
           [in] Int32 lineNumber, 
           [in] String sourceID, 
           [in] Int32 msgLevel);

        OnJsTimeout(
           [out] Boolean* flag);

        GetVisitedHistory(
           [in] IValueCallback* callBack);

        /**
         * Called by WebViewCore to open a file chooser.
         */
        OnNewHistoryItem(
           [in] IWebHistoryItem* item);

        OnIndexChanged(
           [in] IWebHistoryItem* item, 
           [in] Int32 index);
    }

}