
module
{
	interface IURLUtil {

	    /**
	     * Cleans up (if possible) user-entered web addresses
	     */
		GuessUrl(
		   [out] String* outUrl,
		   [in] CString inUrl);

		ComposeSearchUrl(
		   [out] String* url,
		   [in] CString inQuery, 
		   [in] CString strTemplate,
		   [in] CString queryPlaceHolder);

	    Decode(
	       [out] ArrayOf<Byte> outUrl,
	       [in] ArrayOf<Byte> url);

	    /**
	     * @return True iff the url is an asset file.
	     */
		IsAssetUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * @return True iff the url is a resource file.
	     * @hide
	     */
		IsResourceUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * @return True iff the url is an proxy url to allow cookieless network 
	     * requests from a file url.
	     * @deprecated Cookieless proxy is no longer supported.
	     */
		IsCookielessProxyUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * @return True iff the url is a local file.
	     */
		IsFileUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * @return True iff the url is an about: url.
	     */
		IsAboutUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * @return True iff the url is a data: url.
	     */
		IsDataUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * @return True iff the url is a javascript: url.
	     */
		IsJavaScriptUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * @return True iff the url is an http: url.
	     */
		IsHttpUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * @return True iff the url is an https: url.
	     */
		IsHttpsUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * @return True iff the url is a network url.
	     */
		IsNetworkUrl(
		   [out] Boolean* flag,
		   [in] String url);

	    /**
	     * @return True iff the url is a content: url.
	     */
		IsContentUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * @return True iff the url is valid.
	     */
		IsValidUrl(
		   [out] Boolean* flag,
		   [in] CString url);

	    /**
	     * Strips the url of the anchor.
	     */
		StripAnchor(
		   [out] String* outUrl,
		   [in] String url);
	    
	    /**
	     * Guesses canonical filename that a download would have, using
	     * the URL and contentDisposition. File extension, if not defined,
	     * is added based on the mimetype
	     * @param url Url to the content
	     * @param contentDisposition Content-Disposition HTTP header or null
	     * @param mimeType Mime-type of the content or null
	     * 
	     * @return suggested filename
	     */
		GuessFileName(
		   [out] String* name,
		   [in] CString url,
		   [in] CString contentDisposition,
		   [in] CString mimeType);
	}
}