
module
{
    interface IURLUtil {

        /**
         * Cleans up (if possible) user-entered web addresses
         */
        GuessUrl(
           [in] String inUrl,
           [out] String* outUrl);

        ComposeSearchUrl(
           [in] String inQuery, 
           [in] String strTemplate,
           [in] String queryPlaceHolder,
           [out] String* url);

        Decode(
           [in] ArrayOf<Byte> url,
           [out] ArrayOf<Byte> outUrl);

        /**
         * @return True iff the url is an asset file.
         */
        IsAssetUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is a resource file.
         * @hide
         */
        IsResourceUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is an proxy url to allow cookieless network 
         * requests from a file url.
         * @deprecated Cookieless proxy is no longer supported.
         */
        IsCookielessProxyUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is a local file.
         */
        IsFileUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is an about: url.
         */
        IsAboutUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is a data: url.
         */
        IsDataUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is a javascript: url.
         */
        IsJavaScriptUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is an http: url.
         */
        IsHttpUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is an https: url.
         */
        IsHttpsUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is a network url.
         */
        IsNetworkUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is a content: url.
         */
        IsContentUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * @return True iff the url is valid.
         */
        IsValidUrl(
           [in] String url,
           [out] Boolean* flag);

        /**
         * Strips the url of the anchor.
         */
        StripAnchor(
           [in] String url,
           [out] String* outUrl);
        
        /**
         * Guesses canonical filename that a download would have, using
         * the URL and contentDisposition. File extension, if not defined,
         * is added based on the mimetype
         * @param url Url to the content
         * @param contentDisposition Content-Disposition HTTP header or null
         * @param mimeType Mime-type of the content or null
         * 
         * @return suggested filename
         */
        GuessFileName(
           [in] String url,
           [in] String contentDisposition,
           [in] String mimeType,
           [out] String* name);
    }
}