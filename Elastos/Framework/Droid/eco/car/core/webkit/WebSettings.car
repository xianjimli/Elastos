
module
{
    /**
     * Default cache usage pattern  Use with {@link #setCacheMode}.
     */
    const LOAD_DEFAULT = -1;

    /**
     * Normal cache usage pattern  Use with {@link #setCacheMode}.
     */
    const LOAD_NORMAL = 0;

    /**
     * Use cache if content is there, even if expired (eg, history nav)
     * If it is not in the cache, load from network.
     * Use with {@link #setCacheMode}.
     */
    const LOAD_CACHE_ELSE_NETWORK = 1;

    /**
     * Don't use the cache, load from network
     * Use with {@link #setCacheMode}.
     */
    const LOAD_NO_CACHE = 2;
    
    /**
     * Don't use the network, load from cache only.
     * Use with {@link #setCacheMode}.
     */
    const LOAD_CACHE_ONLY = 3;


    interface IWebSettings {
        
        /**
         * Enables dumping the pages navigation cache to a text file.
         */
        SetNavDump(
           [in] Boolean enabled);

        /**
         * Returns true if dumping the navigation cache is enabled.
         */
        GetNavDump(
           [out] Boolean* navDump);

        /**
         * Set whether the WebView supports zoom
         */
        SetSupportZoom(
           [in] Boolean support);

        /**
         * Returns whether the WebView supports zoom
         */
        SupportZoom(
           [out] Boolean* supportZoom);

        /**
         * Sets whether the zoom mechanism built into WebView is used.
         */
        SetBuiltInZoomControls(
           [in] Boolean enabled);
        
        /**
         * Returns true if the zoom mechanism built into WebView is being used.
         */
        GetBuiltInZoomControls(
           [out] Boolean* builtInZoomControls);
        
        /**
         * Enable or disable file access within WebView. File access is enabled by
         * default. Note that this enables or disables file system access only.
         * Assets and resources are still accessible using file:///android_asset and
         * file:///android_res.
         */
        SetAllowFileAccess(
           [in] Boolean allow);

        /**
         * Returns true if this WebView supports file access.
         */
        GetAllowFileAccess(
           [out] Boolean* allowFileAccess);

        /**
         * Enable or disable content url access within WebView.  Content url access
         * allows WebView to load content from a content provider installed in the
         * system.  The default is enabled.
         * @hide
         */
        SetAllowContentAccess(
           [in] Boolean allow);

        /**
         * Returns true if this WebView supports content url access.
         * @hide
         */
        GetAllowContentAccess(
           [out] Boolean* allowContentAccess);

        /**
         * Set whether the WebView loads a page with overview mode.
         */
        SetLoadWithOverviewMode(
           [in] Boolean overview);

        /**
         * Returns true if this WebView loads page with overview mode
         */
        GetLoadWithOverviewMode(
           [out] Boolean* loadWithOverviewMode);

        /**
         * Set whether the WebView uses its background for over scroll background.
         * If true, it will use the WebView's background. If false, it will use an
         * internal pattern. Default is true.
         */
        SetUseWebViewBackgroundForOverscrollBackground(
           [in] Boolean view);

        /**
         * Returns true if this WebView uses WebView's background instead of
         * internal pattern for over scroll background.
         */
        GetUseWebViewBackgroundForOverscrollBackground(
           [out] Boolean* useWebViewBackgroundOverscrollBackground);

        /**
         * Store whether the WebView is saving form data.
         */
        SetSaveFormData(
           [in] Boolean save);

        /**
         *  Return whether the WebView is saving form data.
         */
        GetSaveFormData(
           [out] Boolean* saveFormData);

        /**
         *  Store whether the WebView is saving password.
         */
        SetSavePassword(
           [in] Boolean save);

        /**
         *  Return whether the WebView is saving password.
         */
        GetSavePassword(
           [out] Boolean* savePassword);

        /**
         * Set the text size of the page.
         * @param t A TextSize value for increasing or decreasing the text.
         * @see WebSettings.TextSize
         */
        SetTextSize(
           [in] Int32 t);

        /**
         * Get the text size of the page.
         * @return A TextSize enum value describing the text size.
         * @see WebSettings.TextSize
         */
        GetTextSize(
           [out] Int32* textSize);

        /**
         * Set the default zoom density of the page. This should be called from UI
         * thread.
         * @param zoom A ZoomDensity value
         * @see WebSettings.ZoomDensity
         */
        SetDefaultZoom(
           [in] Int32 zoom);

        /**
         * Get the default zoom density of the page. This should be called from UI
         * thread.
         * @return A ZoomDensity value
         * @see WebSettings.ZoomDensity
         */
        GetDefaultZoom(
           [out] Int32* defaultZoom);

        /**
         * Enables using light touches to make a selection and activate mouseovers.
         */
        SetLightTouchEnabled(
           [in] Boolean enabled);

        /**
         * Returns true if light touches are enabled.
         */
        GetLightTouchEnabled(
           [out] Boolean* ligthTouchEnabled);

        /**
         * @deprecated This setting controlled a rendering optimization
         * that is no longer present. Setting it now has no effect.
         */
        SetUseDoubleTree(
           [in] Boolean use);

        /**
         * @deprecated This setting controlled a rendering optimization
         * that is no longer present. Setting it now has no effect.
         */
        GetUseDoubleTree(
           [out] Boolean* useDoubleTree);

        /**
         * Tell the WebView about user-agent string.
         * @param ua 0 if the WebView should use an Android user-agent string,
         *           1 if the WebView should use a desktop user-agent string.
         *
         * @deprecated Please use setUserAgentString instead.
         */
        SetUserAgent(
           [in] Int32 ua);

        /**
         * Return user-agent as int
         * @return int  0 if the WebView is using an Android user-agent string.
         *              1 if the WebView is using a desktop user-agent string.
         *             -1 if the WebView is using user defined user-agent string.
         *
         * @deprecated Please use getUserAgentString instead.
         */
        GetUserAgent(
           [out] Int32* userAgent);

        /**
         * Tell the WebView to use the wide viewport
         */
        SetUseWideViewPort(
           [in] Boolean use);

        /**
         * @return True if the WebView is using a wide viewport
         */
        GetUseWideViewPort(
           [out] Boolean* useWideViewport);

        /**
         * Tell the WebView whether it supports multiple windows. TRUE means
         *         that {@link WebChromeClient#onCreateWindow(WebView, boolean,
         *         boolean, Message)} is implemented by the host application.
         */
        SetSupportMultipleWindows(
           [in] Boolean support);

        /**
         * @return True if the WebView is supporting multiple windows. This means
         *         that {@link WebChromeClient#onCreateWindow(WebView, boolean,
         *         boolean, Message)} is implemented by the host application.
         */
        SupportMultipleWindows(
           [out] Boolean* supportMultipleWindows);

        /**
         * Set the underlying layout algorithm. This will cause a relayout of the
         * WebView.
         * @param l A LayoutAlgorithm enum specifying the algorithm to use.
         * @see WebSettings.LayoutAlgorithm
         */
        SetLayoutAlgorithm(
           [in] Int32 l);

        /**
         * Return the current layout algorithm. The default is NARROW_COLUMNS.
         * @return LayoutAlgorithm enum value describing the layout algorithm
         *         being used.
         * @see WebSettings.LayoutAlgorithm
         */
        GetLayoutAlgorithm(
           [out] Int32* layoutAlgorithm);

        /**
         * Set the standard font family name.
         * @param font A font family name.
         */
        SetStandardFontFamily(
           [in] CString font);

        /**
         * Get the standard font family name. The default is "sans-serif".
         * @return The standard font family name as a string.
         */
        GetStandardFontFamily(
           [out] String* standardFontFamily);

        /**
         * Set the fixed font family name.
         * @param font A font family name.
         */
        SetFixedFontFamily(
           [in] CString font);

        /**
         * Get the fixed font family name. The default is "monospace".
         * @return The fixed font family name as a string.
         */
        GetFixedFontFamily(
           [out] String* fixedFontFamily);

        /**
         * Set the sans-serif font family name.
         * @param font A font family name.
         */
        SetSansSerifFontFamily(
           [in] CString font);

        /**
         * Get the sans-serif font family name.
         * @return The sans-serif font family name as a string.
         */
        GetSansSerifFontFamily(
           [out] String* sacsSerifFontFamily);

        /**
         * Set the serif font family name. The default is "sans-serif".
         * @param font A font family name.
         */
        SetSerifFontFamily(
           [in] CString font);

        /**
         * Get the serif font family name. The default is "serif".
         * @return The serif font family name as a string.
         */
        GetSerifFontFamily(
           [out] String* serifFontFamily);

        /**
         * Set the cursive font family name.
         * @param font A font family name.
         */
        SetCursiveFontFamily(
           [in] CString font);

        /**
         * Get the cursive font family name. The default is "cursive".
         * @return The cursive font family name as a string.
         */
        GetCursiveFontFamily(
           [out] String* cursiveFontFamily);

        /**
         * Set the fantasy font family name.
         * @param font A font family name.
         */
        SetFantasyFontFamily(
           [in] CString font);

        /**
         * Get the fantasy font family name. The default is "fantasy".
         * @return The fantasy font family name as a string.
         */
        GetFantasyFontFamily(
           [out] String* fantasyFontFamily);

        /**
         * Set the minimum font size.
         * @param size A non-negative integer between 1 and 72.
         * Any number outside the specified range will be pinned.
         */
        SetMinimumFontSize(
           [in] Int32 size);

        /**
         * Get the minimum font size. The default is 8.
         * @return A non-negative integer between 1 and 72.
         */
        GetMinimumFontSize(
           [out] Int32* minimumFontSize);

        /**
         * Set the minimum logical font size.
         * @param size A non-negative integer between 1 and 72.
         * Any number outside the specified range will be pinned.
         */
        SetMinimumLogicalFontSize(
           [in] Int32 size);

        /**
         * Get the minimum logical font size. The default is 8.
         * @return A non-negative integer between 1 and 72.
         */
        GetMinimumLogicalFontSize(
           [out] Int32* size);

        /**
         * Set the default font size.
         * @param size A non-negative integer between 1 and 72.
         * Any number outside the specified range will be pinned.
         */
        SetDefaultFontSize(
           [in] Int32 size);

        /**
         * Get the default font size. The default is 16.
         * @return A non-negative integer between 1 and 72.
         */
        GetDefaultFontSize(
           [out] Int32* size);

        /**
         * Set the default fixed font size.
         * @param size A non-negative integer between 1 and 72.
         * Any number outside the specified range will be pinned.
         */
        SetDefaultFixedFontSize(
           [in] Int32 size);

        /**
         * Get the default fixed font size. The default is 16.
         * @return A non-negative integer between 1 and 72.
         */
        GetDefaultFixedFontSize(
           [out] Int32* size);

        /**
         * Set the number of pages cached by the WebKit for the history navigation.
         * @param size A non-negative integer between 0 (no cache) and 20 (max).
         * @hide
         */
        SetPageCacheCapacity(
           [in] Int32 size);

        /**
         * Tell the WebView to load image resources automatically.
         * @param flag True if the WebView should load images automatically.
         */
        SetLoadsImagesAutomatically(
           [in] Boolean flag);

        /**
         * Return true if the WebView will load image resources automatically.
         * The default is true.
         * @return True if the WebView loads images automatically.
         */
        GetLoadsImagesAutomatically(
           [out] Boolean* b);

        /**
         * Tell the WebView to block network images. This is only checked when
         * {@link #getLoadsImagesAutomatically} is true. If you set the value to
         * false, images will automatically be loaded. Use this api to reduce
         * bandwidth only. Use {@link #setBlockNetworkLoads} if possible.
         * @param flag True if the WebView should block network images.
         * @see #setBlockNetworkLoads
         */
        SetBlockNetworkImage(
           [in] Boolean flag);

        /**
         * Return true if the WebView will block network images. The default is
         * false.
         * @return True if the WebView blocks network images.
         */
        GetBlockNetworkImage(
           [out] Boolean* flag);

        /**
         * Tell the WebView to block all network load requests. If you set the
         * value to false, you must call {@link android.webkit.WebView#reload} to
         * fetch remote resources. This flag supercedes the value passed to
         * {@link #setBlockNetworkImage}.
         * @param flag True if the WebView should block all network loads.
         * @see android.webkit.WebView#reload
         */
        SetBlockNetworkLoads(
           [in] Boolean flag);

        /**
         * Return true if the WebView will block all network loads. The default is
         * false.
         * @return True if the WebView blocks all network loads.
         */
        GetBlockNetworkLoads(
           [out] Boolean* flag);

        /**
         * Tell the WebView to enable javascript execution.
         * @param flag True if the WebView should execute javascript.
         */
        SetJavaScriptEnabled(
           [in] Boolean flag);

        /**
         * Tell the WebView to enable plugins.
         * @param flag True if the WebView should load plugins.
         * @deprecated This method has been deprecated in favor of
         *             {@link #setPluginState}
         */
        SetPluginsEnabled(
           [in] Boolean flag);

        /**
         * Tell the WebView to enable, disable, or have plugins on demand. On
         * demand mode means that if a plugin exists that can handle the embedded
         * content, a placeholder icon will be shown instead of the plugin. When
         * the placeholder is clicked, the plugin will be enabled.
         * @param state One of the PluginState values.
         */
        SetPluginState(
           [in] Int32 state);

        /**
         * Set a custom path to plugins used by the WebView. This method is
         * obsolete since each plugin is now loaded from its own package.
         * @param pluginsPath String path to the directory containing plugins.
         * @deprecated This method is no longer used as plugins are loaded from
         * their own APK via the system's package manager.
         */
        SetPluginsPath(
           [in] CString pluginsPath);

        /**
         * Set the path to where database storage API databases should be saved.
         * Nota that the WebCore Database Tracker only allows the path to be set once.
         * This will update WebCore when the Sync runs in the C++ side.
         * @param databasePath String path to the directory where databases should
         *     be saved. May be the empty string but should never be null.
         */
        SetDatabasePath(
           [in] CString databasePath);

        /**
         * Set the path where the Geolocation permissions database should be saved.
         * This will update WebCore when the Sync runs in the C++ side.
         * @param databasePath String path to the directory where the Geolocation
         *     permissions database should be saved. May be the empty string but
         *     should never be null.
         */
        SetGeolocationDatabasePath(
           [in] CString databasePath);

        /**
         * Tell the WebView to enable Application Caches API.
         * @param flag True if the WebView should enable Application Caches.
         */
        SetAppCacheEnabled(
           [in] Boolean flag);

        /**
         * Set a custom path to the Application Caches files. The client
         * must ensure it exists before this call.
         * @param appCachePath String path to the directory containing Application
         * Caches files. The appCache path can be the empty string but should not
         * be null. Passing null for this parameter will result in a no-op.
         */
        SetAppCachePath(
           [in] CString appCachePath);

        /**
         * Set the maximum size for the Application Caches content.
         * @param appCacheMaxSize the maximum size in bytes.
         */
        SetAppCacheMaxSize(
           [in] Int64 appCacheMaxSize);

        /**
         * Set whether the database storage API is enabled.
         * @param flag boolean True if the WebView should use the database storage
         *     API.
         */
        SetDatabaseEnabled(
           [in] Boolean flag);

        /**
         * Set whether the DOM storage API is enabled.
         * @param flag boolean True if the WebView should use the DOM storage
         *     API.
         */
        SetDomStorageEnabled(
           [in] Boolean flag);

        /**
         * Returns true if the DOM Storage API's are enabled.
         * @return True if the DOM Storage API's are enabled.
         */
        GetDomStorageEnabled();

        /**
         * Return the path to where database storage API databases are saved for
         * the current WebView.
         * @return the String path to the database storage API databases.
         */
        GetDatabasePath(
           [out] String* databasePath);

        /**
         * Returns true if database storage API is enabled.
         * @return True if the database storage API is enabled.
         */
        GetDatabaseEnabled(
           [out] Boolean* flag);

        /**
         * Tell the WebView to enable WebWorkers API.
         * @param flag True if the WebView should enable WebWorkers.
         * Note that this flag only affects V8. JSC does not have
         * an equivalent setting.
         * @hide pending api council approval
         */
        SetWorkersEnabled(
           [in] Boolean flag);

        /**
         * Sets whether Geolocation is enabled.
         * @param flag Whether Geolocation should be enabled.
         */
        SetGeolocationEnabled(
           [in] Boolean flag);

        /**
         * Return true if javascript is enabled. <b>Note: The default is false.</b>
         * @return True if javascript is enabled.
         */
        GetJavaScriptEnabled(
           [out] Boolean* flag);

        /**
         * Return true if plugins are enabled.
         * @return True if plugins are enabled.
         * @deprecated This method has been replaced by {@link #getPluginState}
         */
        GetPluginsEnabled(
           [out] Boolean* flag);

        /**
         * Return the current plugin state.
         * @return A value corresponding to the enum PluginState.
         */
        GetPluginState(
           [out] Int32* pluginState);

        /**
         * Returns the directory that contains the plugin libraries. This method is
         * obsolete since each plugin is now loaded from its own package.
         * @return An empty string.
         * @deprecated This method is no longer used as plugins are loaded from
         * their own APK via the system's package manager.
         */
        GetPluginsPath(
           [out] String* pluginsPath);

        /**
         * Tell javascript to open windows automatically. This applies to the
         * javascript function window.open().
         * @param flag True if javascript can open windows automatically.
         */
        SetJavaScriptCanOpenWindowsAutomatically(
           [in] Boolean flag);

        /**
         * Return true if javascript can open windows automatically. The default
         * is false.
         * @return True if javascript can open windows automatically during
         *         window.open().
         */
        GetJavaScriptCanOpenWindowsAutomatically(
           [out] Boolean* flag);

        /**
         * Set the default text encoding name to use when decoding html pages.
         * @param encoding The text encoding name.
         */
        SetDefaultTextEncodingName(
           [in] CString encoding);

        /**
         * Get the default text encoding name. The default is "Latin-1".
         * @return The default text encoding name as a string.
         */
        GetDefaultTextEncodingName(
           [out] String* TextEncodingName);

        /**
         * Set the WebView's user-agent string. If the string "ua" is null or empty,
         * it will use the system default user-agent string.
         */
        SetUserAgentString(
           [in] CString ua);

        /**
         * Return the WebView's user-agent string.
         */
        GetUserAgentString(
           [out] String* userAgent);
        
        /**
         * Tell the WebView whether it needs to set a node to have focus when
         * {@link WebView#requestFocus(int, android.graphics.Rect)} is called.
         * 
         * @param flag
         */
        SetNeedInitialFocus(
           [in] Boolean flag);

        /**
         * Set the priority of the Render thread. Unlike the other settings, this
         * one only needs to be called once per process. The default is NORMAL.
         *
         * @param priority RenderPriority, can be normal, high or low.
         */
        SetRenderPriority(
           [in] Int32 priority);
        
        /**
         * Override the way the cache is used. The way the cache is used is based
         * on the navigation option. For a normal page load, the cache is checked
         * and content is re-validated as needed. When navigating back, content is
         * not revalidated, instead the content is just pulled from the cache.
         * This function allows the client to override this behavior.
         * @param mode One of the LOAD_ values.
         */
        SetCacheMode(
           [in] Int32 mode);
        
        /**
         * Return the current setting for overriding the cache mode. For a full
         * description, see the {@link #setCacheMode(int)} function.
         */
        GetCacheMode(
           [out] Int32* cacheMode);
        
        /**
         * If set, webkit alternately shrinks and expands images viewed outside
         * of an HTML page to fit the screen. This conflicts with attempts by
         * the UI to zoom in and out of an image, so it is set false by default.
         * @param shrink Set true to let webkit shrink the standalone image to fit.
         * {@hide}
         */
        SetShrinksStandaloneImagesToFit(
           [in] Boolean shrink);

        GetDoubleTapToastCount(
           [out] Int32* count);

        SetDoubleTapToastCount(
           [in] Int32 count);
    }
}