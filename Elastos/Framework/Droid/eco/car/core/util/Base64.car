
module
{
    /**
     * Default values for encoder/decoder flags.
     */
    const Base64_DEFAULT = 0;

    /**
     * Encoder flag bit to omit the padding '=' characters at the end
     * of the output (if any).
     */
    const Base64_NO_PADDING = 1;

    /**
     * Encoder flag bit to omit all line terminators (i.e., the output
     * will be on one long line).
     */
    const Base64_NO_WRAP = 2;

    /**
     * Encoder flag bit to indicate lines should be terminated with a
     * CRLF pair instead of just an LF.  Has no effect if {@code
     * NO_WRAP} is specified as well.
     */
    const Base64_CRLF = 4;

    /**
     * Encoder/decoder flag bit to indicate using the "URL and
     * filename safe" variant of Base64 (see RFC 3548 section 4) where
     * {@code -} and {@code _} are used in place of {@code +} and
     * {@code /}.
     */
    const Base64_URL_SAFE = 8;

    /**
     * Flag to pass to {@link Base64OutputStream} to indicate that it
     * should not close the output stream it is wrapping when it
     * itself is closed.
     */
    const Base64_NO_CLOSE = 16;

    interface IBase64 {

        //  --------------------------------------------------------
        //  decoding
        //  --------------------------------------------------------

        /**
         * Decode the Base64-encoded data in input and return the data in
         * a new byte array.
         *
         * <p>The padding '=' characters at the end are considered optional, but
         * if any are present, there must be the correct number of them.
         *
         * @param str    the input String to decode, which is converted to
         *               bytes using the default charset
         * @param flags  controls certain features of the decoded output.
         *               Pass {@code DEFAULT} to decode standard Base64.
         *
         * @throws IllegalArgumentException if the input contains
         * incorrect padding
         */
        Decode(
            [in] String str,
            [in] Int32 flags,
            [out, callee] ArrayOf<Byte>* result);

        /**
         * Decode the Base64-encoded data in input and return the data in
         * a new byte array.
         *
         * <p>The padding '=' characters at the end are considered optional, but
         * if any are present, there must be the correct number of them.
         *
         * @param input the input array to decode
         * @param flags  controls certain features of the decoded output.
         *               Pass {@code DEFAULT} to decode standard Base64.
         *
         * @throws IllegalArgumentException if the input contains
         * incorrect padding
         */
        Decode2(
            [in] ArrayOf<Byte> input,
            [in] Int32 flags,
            [out, callee] ArrayOf<Byte>* result);

        /**
         * Decode the Base64-encoded data in input and return the data in
         * a new byte array.
         *
         * <p>The padding '=' characters at the end are considered optional, but
         * if any are present, there must be the correct number of them.
         *
         * @param input  the data to decode
         * @param offset the position within the input array at which to start
         * @param len    the number of bytes of input to decode
         * @param flags  controls certain features of the decoded output.
         *               Pass {@code DEFAULT} to decode standard Base64.
         *
         * @throws IllegalArgumentException if the input contains
         * incorrect padding
         */
        Decode3(
            [in] ArrayOf<Byte> input,
            [in] Int32 offset,
            [in] Int32 len,
            [in] Int32 flags,
            [out, callee] ArrayOf<Byte>* result);

        //  --------------------------------------------------------
        //  encoding
        //  --------------------------------------------------------

        /**
         * Base64-encode the given data and return a newly allocated
         * String with the result.
         *
         * @param input  the data to encode
         * @param flags  controls certain features of the encoded output.
         *               Passing {@code DEFAULT} results in output that
         *               adheres to RFC 2045.
         */
        EncodeToString(
            [in] ArrayOf<Byte> input,
            [in] Int32 flags,
            [out] String* result);

        /**
         * Base64-encode the given data and return a newly allocated
         * String with the result.
         *
         * @param input  the data to encode
         * @param offset the position within the input array at which to
         *               start
         * @param len    the number of bytes of input to encode
         * @param flags  controls certain features of the encoded output.
         *               Passing {@code DEFAULT} results in output that
         *               adheres to RFC 2045.
         */
        EncodeToString2(
            [in] ArrayOf<Byte> input,
            [in] Int32 offset,
            [in] Int32 len,
            [in] Int32 flags,
            [out] String* result);

        /**
         * Base64-encode the given data and return a newly allocated
         * byte[] with the result.
         *
         * @param input  the data to encode
         * @param flags  controls certain features of the encoded output.
         *               Passing {@code DEFAULT} results in output that
         *               adheres to RFC 2045.
         */
        Encode(
            [in] ArrayOf<Byte> input,
            [in] Int32 flags,
            [out, callee] ArrayOf<Byte>* result);

        /**
         * Base64-encode the given data and return a newly allocated
         * byte[] with the result.
         *
         * @param input  the data to encode
         * @param offset the position within the input array at which to
         *               start
         * @param len    the number of bytes of input to encode
         * @param flags  controls certain features of the encoded output.
         *               Passing {@code DEFAULT} results in output that
         *               adheres to RFC 2045.
         */
        Encode2(
            [in] ArrayOf<Byte> input,
            [in] Int32 offset,
            [in] Int32 len,
            [in] Int32 flags,
            [out, callee] ArrayOf<Byte>* result);
    }
}

