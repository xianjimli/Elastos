/**
package android.os.storage;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.Parcelable;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.util.Log;
import android.util.SparseArray;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
 */

module
{
    interface IStorageManager {
	
	GetNextNonce(
	    [out] Int32* path);

	/**
	* Registers a {@link android.os.storage.StorageEventListener StorageEventListener}.
	*
	* @param listener A {@link android.os.storage.StorageEventListener StorageEventListener} object.
	*
	* @hide
	*/
//	RegisterListener(
//	    [in] IStorageEventListener* listener);

	/**
	* Unregisters a {@link android.os.storage.StorageEventListener StorageEventListener}.
	*
	* @param listener A {@link android.os.storage.StorageEventListener StorageEventListener} object.
	*
	* @hide
	*/
//	UnregisterListener(
//             [in] IStorageEventListener* listener);

	/**
	 * Enables USB Mass Storage (UMS) on the device.
	 *
	 * @hide
	 */
	 EnableUsbMassStorage();

	/**
	 * Disables USB Mass Storage (UMS) on the device.
	 *
	 * @hide
	 */
	 DisableUsbMassStorage();

	/**
	 * Query if a USB Mass Storage (UMS) host is connected.
	 * @return true if UMS host is connected.
	 *
	 * @hide
	 */
	 IsUsbMassStorageConnected(
	    [out] Boolean* connect);

	/**
	 * Query if a USB Mass Storage (UMS) is enabled on the device.
	 * @return true if UMS host is enabled.
	 *
	 * @hide
	 */
	 IsUsbMassStorageEnabled(
             [out] Boolean* enabled);

	/**
	* Query if a USB Mass Storage (UMS) is enabled on the device.
	* @return true if UMS host is enabled.
	*
	* @hide
	*/
	IsUsbMassStorageAllEnabled(
             [out] Boolean* enabled);

	/**
	* Mount an Opaque Binary Blob (OBB) file. If a <code>key</code> is
	* specified, it is supplied to the mounting process to be used in any
	* encryption used in the OBB.
	* <p>
	* The OBB will remain mounted for as long as the StorageManager reference
	* is held by the application. As soon as this reference is lost, the OBBs
	* in use will be unmounted. The {@link OnObbStateChangeListener} registered
	* with this call will receive the success or failure of this operation.
	* <p>
	* <em>Note:</em> you can only mount OBB files for which the OBB tag on the
	* file matches a package ID that is owned by the calling program's UID.
	* That is, shared UID applications can attempt to mount any other
	* application's OBB that shares its UID.
	* 
	* @param filename the path to the OBB file
	* @param key secret used to encrypt the OBB; may be <code>null</code> if no
	*            encryption was used on the OBB.
	* @param listener will receive the success or failure of the operation
	* @return whether the mount call was successfully queued or not
	*/
//	MountObb(
//             [in] CString filename,
//             [in] CString key,
//             [in] IOnObbStateChangeListener* listener,
//             [out] Boolean* mounted);

	/**
	* Unmount an Opaque Binary Blob (OBB) file asynchronously. If the
	* <code>force</code> flag is true, it will kill any application needed to
	* unmount the given OBB (even the calling application).
	* <p>
	* The {@link OnObbStateChangeListener} registered with this call will
	* receive the success or failure of this operation.
	* <p>
	* <em>Note:</em> you can only mount OBB files for which the OBB tag on the
	* file matches a package ID that is owned by the calling program's UID.
	* That is, shared UID applications can obtain access to any other
	* application's OBB that shares its UID.
	* <p>
	* 
	* @param filename path to the OBB file
	* @param force whether to kill any programs using this in order to unmount
	*            it
	* @param listener will receive the success or failure of the operation
	* @return whether the unmount call was successfully queued or not
	*/
//	UnmountObb(
//             [in] CString filename,
//             [in] Boolean force,
//             [in] IOnObbStateChangeListener* listener,
//             [out] Boolean* mounted);

	/**
	* Check whether an Opaque Binary Blob (OBB) is mounted or not.
	* 
	* @param filename path to OBB image
	* @return true if OBB is mounted; false if not mounted or on error
	*/
	IsObbMounted(
             [in] CString filename,
             [out] Boolean* mounted);

	/**
	* Check the mounted path of an Opaque Binary Blob (OBB) file. This will
	* give you the path to where you can obtain access to the internals of the
	* OBB.
	* 
	* @param filename path to OBB image
	* @return absolute path to mounted OBB image data or <code>null</code> if
	*         not mounted or exception encountered trying to read status
	*/
	GetMountedObbPath(
             [in] CString filename,
             [out] CString* obbpath);

	/**
	* Gets the state of a volume via its mountpoint.
	* @hide
	*/
	GetVolumeState(
             [in] CString mountPoint,
             [out] CString* state);

	/**
	* Returns list of all mountable volumes.
	* @hide
	*/
	GetVolumeList(
             [out, callee] ArrayOf<IStorageVolume*>* volumelists);

	/**
	* Returns list of paths for all mountable volumes.
	* @hide
	*/
	GetVolumePaths(
             [out, callee] ArrayOf<String>* volumepaths);

	/**
	* Gets the filesystem label of the mountpoint.
	* @hide
	*/
	GetVolumeFSLabel(
             [in] CString mountPoint,
             [out] CString* label);
    }
}

