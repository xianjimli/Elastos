
module
{
    interface IDescribable;
    interface IClassLoader;
    interface ICharSequence;
    interface IParcelable;
    interface IBinder;

    [deprecated]
    interface IBundle extends IDescribable {

        /**
         * TODO: optimize this later (getting just the value part of a Bundle
         * with a single pair) once Bundle.forPair() above is implemented
         * with a special single-value Map implementation/serialization.
         *
         * Note: value in single-pair Bundle may be null.
         *
         * @hide
         */
        GetPairValue(
            [out] String* result);

        /**
         * Changes the ClassLoader this Bundle uses when instantiating objects.
         *
         * @param loader An explicit ClassLoader to use when instantiating objects
         * inside of the Bundle.
         */
        SetClassLoader(
            [in] IClassLoader* loader);

        /**
         * Clones the current Bundle. The internal map is cloned, but the keys and
         * values to which it refers are copied by reference.
         */
        // @Override
        Clone(
            [out] IInterface** result);

        /**
         * Returns the number of mappings contained in this Bundle.
         *
         * @return the number of mappings as an int.
         */
        Size(
            [out] Int32* result);

        /**
         * Returns true if the mapping of this Bundle is empty, false otherwise.
         */
        IsEmpty(
            [out] Boolean* result);

        /**
         * Removes all elements from the mapping of this Bundle.
         */
        Clear();

        /**
         * Returns true if the given key is contained in the mapping
         * of this Bundle.
         *
         * @param key a String key
         * @return true if the key is part of the mapping, false otherwise
         */
        ContainsKey(
            [in] String key,
            [out] Boolean* result);

        /**
         * Returns the entry with the given key as an object.
         *
         * @param key a String key
         * @return an Object, or null
         */
        Get(
            [in] String key,
            [out] IInterface** value);

        /**
         * Removes any entry with the given key from the mapping of this Bundle.
         *
         * @param key a String key
         */
        Remove(
            [in] String key);

        /**
         * Inserts all mappings from the given Bundle into this Bundle.
         *
         * @param map a Bundle
         */
        PutAll(
            [in] IBundle* map);

        /**
         * Returns a Set containing the Strings used as keys in this Bundle.
         *
         * @return a Set of String keys
         */
        KeySet(
            [out] IObjectContainer** result);

        /**
         * Reports whether the bundle contains any parcelled file descriptors.
         */
        HasFileDescriptors(
            [out] Boolean* result);

        PutBoolean(
            [in] String key,
            [in] Boolean value);

        PutByte(
            [in] String key,
            [in] Byte value);

        PutChar(
            [in] String key,
            [in] Char32 value);

        PutInt16(
            [in] String key,
            [in] Int16 value);

        PutInt32(
            [in] String key,
            [in] Int32 value);

        PutInt64(
            [in] String key,
            [in] Int64 value);

        PutFloat(
            [in] String key,
            [in] Float value);

        PutDouble(
            [in] String key,
            [in] Double value);

        PutString(
            [in] String key,
            [in] String value);

        /**
         * Inserts a CharSequence value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a CharSequence, or null
         */
        PutCharSequence(
            [in] String key,
            [in] ICharSequence* value);

        /**
         * Inserts a Parcelable value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a Parcelable object, or null
         */
        PutParcelable(
            [in] String key,
            [in] IParcelable* value);

        /**
         * Inserts an array of Parcelable values into the mapping of this Bundle,
         * replacing any existing value for the given key.  Either key or value may
         * be null.
         *
         * @param key a String, or null
         * @param value an array of Parcelable objects, or null
         */
        PutParcelableArray(
            [in] String key,
            [in] ArrayOf<IParcelable*>* value);

        /**
         * Inserts a List of Parcelable values into the mapping of this Bundle,
         * replacing any existing value for the given key.  Either key or value may
         * be null.
         *
         * @param key a String, or null
         * @param value an ArrayList of Parcelable objects, or null
         */
        PutParcelableArrayList(
            [in] String key,
            [in] IObjectContainer* value);

        /**
         * Inserts a SparceArray of Parcelable values into the mapping of this
         * Bundle, replacing any existing value for the given key.  Either key
         * or value may be null.
         *
         * @param key a String, or null
         * @param value a SparseArray of Parcelable objects, or null
         */
        // public void putSparseParcelableArray(String key,
        //         SparseArray<? extends Parcelable> value);

        /**
         * Inserts an ArrayList<Integer> value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value an ArrayList<Integer> object, or null
         */
        PutIntegerArrayList(
            [in] String key,
            [in] IObjectContainer* value);

        /**
         * Inserts an ArrayList<String> value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value an ArrayList<String> object, or null
         */
        PutStringArrayList(
            [in] String key,
            [in] IObjectContainer* value);

        /**
         * Inserts an ArrayList<CharSequence> value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value an ArrayList<CharSequence> object, or null
         */
        PutCharSequenceArrayList(
            [in] String key,
            [in] IObjectContainer* value);

        /**
         * Inserts a Serializable value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a Serializable object, or null
         */
        // PutSerializable(
        //     [in] String key,
        //     [in] ISerializable* value);

        /**
         * Inserts a boolean array value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a boolean array object, or null
         */
        PutBooleanArray(
            [in] String key,
            [in] ArrayOf<Boolean>* value);

        /**
         * Inserts a byte array value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a byte array object, or null
         */
        PutByteArray(
            [in] String key,
            [in] ArrayOf<Byte>* value);

        /**
         * Inserts a short array value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a short array object, or null
         */
        PutInt16Array(
            [in] String key,
            [in] ArrayOf<Int16>* value);

        /**
         * Inserts a char array value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a char array object, or null
         */
        PutCharArray(
            [in] String key,
            [in] ArrayOf<Char32>* value);

        /**
         * Inserts an int array value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value an int array object, or null
         */
        PutInt32Array(
            [in] String key,
            [in] ArrayOf<Int32>* value);

        /**
         * Inserts a long array value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a long array object, or null
         */
        PutInt64Array(
            [in] String key,
            [in] ArrayOf<Int64>* value);

        /**
         * Inserts a float array value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a float array object, or null
         */
        PutFloatArray(
            [in] String key,
            [in] ArrayOf<Float>* value);

        /**
         * Inserts a double array value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a double array object, or null
         */
        PutDoubleArray(
            [in] String key,
            [in] ArrayOf<Double>* value);

        /**
         * Inserts a String array value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a String array object, or null
         */
        PutStringArray(
            [in] String key,
            [in] ArrayOf<String>* value);

        /**
         * Inserts a CharSequence array value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a CharSequence array object, or null
         */
        PutCharSequenceArray(
            [in] String key,
            [in] ArrayOf<ICharSequence*>* value);

        /**
         * Inserts a Bundle value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value a Bundle object, or null
         */
        PutBundle(
            [in] String key,
            [in] IBundle* value);

        /**
         * Inserts an IBinder value into the mapping of this Bundle, replacing
         * any existing value for the given key.  Either key or value may be null.
         *
         * @param key a String, or null
         * @param value an IBinder object, or null
         *
         * @deprecated
         * @hide
         */
        // @Deprecated
        PutIBinder(
            [in] String key,
            [in] IBinder* value);

        GetBoolean(
            [in] String key,
            [out] Boolean* value);

        /**
         * Returns the value associated with the given key, or defaultValue if
         * no mapping of the desired type exists for the given key.
         *
         * @param key a String
         * @return a boolean value
         */
        GetBooleanEx(
            [in] String key,
            [in] Boolean defaultValue,
            [out] Boolean* value);

        GetByte(
            [in] String key,
            [out] Byte* value);

        /**
         * Returns the value associated with the given key, or defaultValue if
         * no mapping of the desired type exists for the given key.
         *
         * @param key a String
         * @return a byte value
         */
        GetByteEx(
            [in] String key,
            [in] Byte defaultValue,
            [out] Byte* value);

        GetChar(
            [in] String key,
            [out] Char32* value);

        /**
         * Returns the value associated with the given key, or (char) 0 if
         * no mapping of the desired type exists for the given key.
         *
         * @param key a String
         * @return a char value
         */
        GetCharEx(
            [in] String key,
            [in] Char32 defaultValue,
            [out] Char32* value);

        GetInt16(
            [in] String key,
            [out] Int16* value);

        /**
         * Returns the value associated with the given key, or defaultValue if
         * no mapping of the desired type exists for the given key.
         *
         * @param key a String
         * @return a short value
         */
        GetInt16Ex(
            [in] String key,
            [in] Int16 defaultValue,
            [out] Int16* value);

        GetInt32(
            [in] String key,
            [out] Int32* value);

        /**
         * Returns the value associated with the given key, or defaultValue if
         * no mapping of the desired type exists for the given key.
         *
         * @param key a String
         * @return an int value
         */
        GetInt32Ex(
            [in] String key,
            [in] Int32 defaultValue,
            [out] Int32* value);

        GetInt64(
            [in] String key,
            [out] Int64* value);

        /**
         * Returns the value associated with the given key, or defaultValue if
         * no mapping of the desired type exists for the given key.
         *
         * @param key a String
         * @return a long value
         */
        GetInt64Ex(
            [in] String key,
            [in] Int64 defaultValue,
            [out] Int64* value);

        GetFloat(
            [in] String key,
            [out] Float* value);

        /**
         * Returns the value associated with the given key, or defaultValue if
         * no mapping of the desired type exists for the given key.
         *
         * @param key a String
         * @return a float value
         */
        GetFloatEx(
            [in] String key,
            [in] Float defaultValue,
            [out] Float* value);

        GetDouble(
            [in] String key,
            [out] Double* value);

        /**
         * Returns the value associated with the given key, or defaultValue if
         * no mapping of the desired type exists for the given key.
         *
         * @param key a String
         * @return a double value
         */
        GetDoubleEx(
            [in] String key,
            [in] Double defaultValue,
            [out] Double* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a String value, or null
         */
        GetString(
            [in] String key,
            [out] String* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a CharSequence value, or null
         */
        GetCharSequence(
            [in] String key,
            [out] ICharSequence** value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a Bundle value, or null
         */
        GetBundle(
            [in] String key,
            [out] IBundle** value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a Parcelable value, or null
         */
        GetParcelable(
            [in] String key,
            [out] IParcelable** value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a Parcelable[] value, or null
         */
        GetParcelableArray(
            [in] String key,
            [out, callee] ArrayOf<IParcelable*>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return an ArrayList<T> value, or null
         */
        GetParcelableArrayList(
            [in] String key,
            [out] IObjectContainer** value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         *
         * @return a SparseArray of T values, or null
         */
        // public <T extends Parcelable> SparseArray<T> getSparseParcelableArray(String key);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a Serializable value, or null
         */
        // GetSerializable(
        //     [in] String key,
        //     [out] ISerializable** result);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return an ArrayList<String> value, or null
         */
        GetIntegerArrayList(
            [in] String key,
            [out] IObjectContainer** value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return an ArrayList<String> value, or null
         */
        GetStringArrayList(
            [in] String key,
            [out] IObjectContainer** value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return an ArrayList<CharSequence> value, or null
         */
        GetCharSequenceArrayList(
            [in] String key,
            [out] IObjectContainer** value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a boolean[] value, or null
         */
        GetBooleanArray(
            [in] String key,
            [out, callee] ArrayOf<Boolean>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a byte[] value, or null
         */
        GetByteArray(
            [in] String key,
            [out, callee] ArrayOf<Byte>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a short[] value, or null
         */
        GetInt16Array(
            [in] String key,
            [out, callee] ArrayOf<Int16>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a char[] value, or null
         */
        GetCharArray(
            [in] String key,
            [out, callee] ArrayOf<Char32>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return an int[] value, or null
         */
        GetInt32Array(
            [in] String key,
            [out, callee] ArrayOf<Int32>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a long[] value, or null
         */
        GetInt64Array(
            [in] String key,
            [out, callee] ArrayOf<Int64>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a float[] value, or null
         */
        GetFloatArray(
            [in] String key,
            [out, callee] ArrayOf<Float>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a double[] value, or null
         */
        GetDoubleArray(
            [in] String key,
            [out, callee] ArrayOf<Double>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a String[] value, or null
         */
        GetStringArray(
            [in] String key,
            [out, callee] ArrayOf<String>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return a CharSequence[] value, or null
         */
        GetCharSequenceArray(
            [in] String key,
            [out, callee] ArrayOf<ICharSequence*>* value);

        /**
         * Returns the value associated with the given key, or null if
         * no mapping of the desired type exists for the given key or a null
         * value is explicitly associated with the key.
         *
         * @param key a String, or null
         * @return an IBinder value, or null
         *
         * @deprecated
         * @hide
         */
        // @Deprecated
        GetIBinder(
            [in] String key,
            [out] IBinder** value);

        // @Override
        // public synchronized String toString();
    }
}
