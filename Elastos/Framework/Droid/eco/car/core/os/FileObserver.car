
module
{
    /** Event type: Data was read from a file */
    const FileObserver_ACCESS = 0x00000001;
    /** Event type: Data was written to a file */
    const FileObserver_MODIFY = 0x00000002;
    /** Event type: Metadata (permissions, owner, timestamp) was changed explicitly */
    const FileObserver_ATTRIB = 0x00000004;
    /** Event type: Someone had a file or directory open for writing, and closed it */
    const FileObserver_CLOSE_WRITE = 0x00000008;
    /** Event type: Someone had a file or directory open read-only, and closed it */
    const FileObserver_CLOSE_NOWRITE = 0x00000010;
    /** Event type: A file or directory was opened */
    const FileObserver_OPEN = 0x00000020;
    /** Event type: A file or subdirectory was moved from the monitored directory */
    const FileObserver_MOVED_FROM = 0x00000040;
    /** Event type: A file or subdirectory was moved to the monitored directory */
    const FileObserver_MOVED_TO = 0x00000080;
    /** Event type: A new file or subdirectory was created under the monitored directory */
    const FileObserver_CREATE = 0x00000100;
    /** Event type: A file was deleted from the monitored directory */
    const FileObserver_DELETE = 0x00000200;
    /** Event type: The monitored file or directory was deleted; monitoring effectively stops */
    const FileObserver_DELETE_SELF = 0x00000400;
    /** Event type: The monitored file or directory was moved; monitoring continues */
    const FileObserver_MOVE_SELF = 0x00000800;

    /** Event mask: All valid event types, combined */
    const FileObserver_ALL_EVENTS = 0x00000fff;
//     ACCESS | MODIFY | ATTRIB | CLOSE_WRITE
//            | CLOSE_NOWRITE | OPEN | MOVED_FROM | MOVED_TO | DELETE | CREATE
//            | DELETE_SELF | MOVE_SELF;

    interface IFileObserver {
        /**
         * Start watching for events.  The monitored file or directory must exist at
         * this time, or else no events will be reported (even if it appears later).
         * If monitoring is already started, this call has no effect.
         */
        StartWatching();

        /**
         * Stop watching for events.  Some events may be in process, so events
         * may continue to be reported even after this method completes.  If
         * monitoring is already stopped, this call has no effect.
         */
        StopWatching();

        /**
         * The event handler, which must be implemented by subclasses.
         *
         * <p class="note">This method is invoked on a special FileObserver thread.
         * It runs independently of any threads, so take care to use appropriate
         * synchronization!  Consider using {@link Handler#post(Runnable)} to shift
         * event handling work to the main thread to avoid concurrency problems.</p>
         *
         * <p>Event handlers must not throw exceptions.</p>
         *
         * @param event The type of event which happened
         * @param path The path, relative to the main monitored file or directory,
         *     of the file or directory which triggered the event
         */
        OnEvent(
            [in] Int32 event,
            [in] String path);
    }
}
