
module
{
    /**
     * @deprecated instead use
     * {@link #requestSync(android.accounts.Account, String, android.os.Bundle)}
     */
    // @Deprecated
    const ContentResolver_SYNC_EXTRAS_ACCOUNT = "account";
    const ContentResolver_SYNC_EXTRAS_EXPEDITED = "expedited";
    /**
     * @deprecated instead use
     * {@link #SYNC_EXTRAS_MANUAL}
     */
    // @Deprecated
    const ContentResolver_SYNC_EXTRAS_FORCE = "force";

    /**
     * If this extra is set to true then the sync settings (like getSyncAutomatically())
     * are ignored by the sync scheduler.
     */
    const ContentResolver_SYNC_EXTRAS_IGNORE_SETTINGS = "ignore_settings";

    /**
     * If this extra is set to true then any backoffs for the initial attempt (e.g. due to retries)
     * are ignored by the sync scheduler. If this request fails and gets rescheduled then the
     * retries will still honor the backoff.
     */
    const ContentResolver_SYNC_EXTRAS_IGNORE_BACKOFF = "ignore_backoff";

    /**
     * If this extra is set to true then the request will not be retried if it fails.
     */
    const ContentResolver_SYNC_EXTRAS_DO_NOT_RETRY = "do_not_retry";

    /**
     * Setting this extra is the equivalent of setting both {@link #SYNC_EXTRAS_IGNORE_SETTINGS}
     * and {@link #SYNC_EXTRAS_IGNORE_BACKOFF}
     */
    const ContentResolver_SYNC_EXTRAS_MANUAL = "force";

    const ContentResolver_SYNC_EXTRAS_UPLOAD = "upload";
    const ContentResolver_SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS = "deletions_override";
    const ContentResolver_SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS = "discard_deletions";

    /**
     * Set by the SyncManager to request that the SyncAdapter initialize itself for
     * the given account/authority pair. One required initialization step is to
     * ensure that {@link #setIsSyncable(android.accounts.Account, String, int)} has been
     * called with a >= 0 value. When this flag is set the SyncAdapter does not need to
     * do a full sync, though it is allowed to do so.
     */
    const ContentResolver_SYNC_EXTRAS_INITIALIZE = "initialize";

    const ContentResolver_SCHEME_CONTENT = "content";
    const ContentResolver_SCHEME_ANDROID_RESOURCE = "elastos.resource";
    const ContentResolver_SCHEME_FILE = "file";

    /**
     * This is the Android platform's base MIME type for a content: URI
     * containing a Cursor of a single item.  Applications should use this
     * as the base type along with their own sub-type of their content: URIs
     * that represent a particular item.  For example, hypothetical IMAP email
     * client may have a URI
     * <code>content://com.company.provider.imap/inbox/1</code> for a particular
     * message in the inbox, whose MIME type would be reported as
     * <code>CURSOR_ITEM_BASE_TYPE + "/vnd.company.imap-msg"</code>
     *
     * <p>Compare with {@link #CURSOR_DIR_BASE_TYPE}.
     */
    const ContentResolver_CURSOR_ITEM_BASE_TYPE = "vnd.android.cursor.item";

    /**
     * This is the Android platform's base MIME type for a content: URI
     * containing a Cursor of zero or more items.  Applications should use this
     * as the base type along with their own sub-type of their content: URIs
     * that represent a directory of items.  For example, hypothetical IMAP email
     * client may have a URI
     * <code>content://com.company.provider.imap/inbox</code> for all of the
     * messages in its inbox, whose MIME type would be reported as
     * <code>CURSOR_DIR_BASE_TYPE + "/vnd.company.imap-msg"</code>
     *
     * <p>Note how the base MIME type varies between this and
     * {@link #CURSOR_ITEM_BASE_TYPE} depending on whether there is
     * one single item or multiple items in the data set, while the sub-type
     * remains the same because in either case the data structure contained
     * in the cursor is the same.
     */
    const ContentResolver_CURSOR_DIR_BASE_TYPE = "vnd.android.cursor.dir";

    /** @hide */
    const ContentResolver_SYNC_ERROR_SYNC_ALREADY_IN_PROGRESS = 1;
    /** @hide */
    const ContentResolver_SYNC_ERROR_AUTHENTICATION = 2;
    /** @hide */
    const ContentResolver_SYNC_ERROR_IO = 3;
    /** @hide */
    const ContentResolver_SYNC_ERROR_PARSE = 4;
    /** @hide */
    const ContentResolver_SYNC_ERROR_CONFLICT = 5;
    /** @hide */
    const ContentResolver_SYNC_ERROR_TOO_MANY_DELETIONS = 6;
    /** @hide */
    const ContentResolver_SYNC_ERROR_TOO_MANY_RETRIES = 7;
    /** @hide */
    const ContentResolver_SYNC_ERROR_INTERNAL = 8;

    const ContentResolver_SYNC_OBSERVER_TYPE_SETTINGS = 1; // 1<<0;
    const ContentResolver_SYNC_OBSERVER_TYPE_PENDING = 2; // 1<<1;
    const ContentResolver_SYNC_OBSERVER_TYPE_ACTIVE = 4; // 1<<2;
    /** @hide */
    const ContentResolver_SYNC_OBSERVER_TYPE_STATUS = 8; // 1<<3;
    /** @hide */
    const ContentResolver_SYNC_OBSERVER_TYPE_ALL = 0x7fffffff;

    /** @hide */
    const ContentResolver_CONTENT_SERVICE_NAME = "content";

    interface IAccount;
    interface IResources;
    interface IUri;
    interface ICursor;
    interface IContentValues;
    interface IParcelFileDescriptor;
    interface IContentProvider;
    interface IContentObserver;

    /**
     * A resource identified by the {@link Resources} that contains it, and a resource id.
     *
     * @hide
     */
    interface IOpenResourceIdResult {
        GetResources(
            [out] IResources** resources);

        SetResources(
            [in] IResources* resources);

        GetResourceId(
            [out] Int32* id);

        SetResourceId(
            [in] Int32 id);
    }

    interface IContentResolver {

        /** @hide */
        AcquireProvider(
            [in] IContext* c,
            [in] String name,
            [out] IContentProvider** provider);

        /** Providing a default implementation of this, to avoid having to change
         * a lot of other things, but implementations of ContentResolver should
         * implement it. @hide */
        AcquireExistingProvider(
            [in] IContext* c,
            [in] String name,
            [out] IContentProvider** provider);

        /** @hide */
		ReleaseProvider(
			[in] IContentProvider* icp,
			[out] Boolean* result);

        /**
         * Return the MIME type of the given content URL.
         *
         * @param url A Uri identifying content (either a list or specific type),
         * using the content:// scheme.
         * @return A MIME type for the content, or null if the URL is invalid or the type is unknown
         */
        GetType(
            [in] IUri* uri,
            [out] String* type);

        /**
         * <p>
         * Query the given URI, returning a {@link Cursor} over the result set.
         * </p>
         * <p>
         * For best performance, the caller should follow these guidelines:
         * <ul>
         * <li>Provide an explicit projection, to prevent
         * reading data from storage that aren't going to be used.</li>
         * <li>Use question mark parameter markers such as 'phone=?' instead of
         * explicit values in the {@code selection} parameter, so that queries
         * that differ only by those values will be recognized as the same
         * for caching purposes.</li>
         * </ul>
         * </p>
         *
         * @param uri The URI, using the content:// scheme, for the content to
         *         retrieve.
         * @param projection A list of which columns to return. Passing null will
         *         return all columns, which is inefficient.
         * @param selection A filter declaring which rows to return, formatted as an
         *         SQL WHERE clause (excluding the WHERE itself). Passing null will
         *         return all rows for the given URI.
         * @param selectionArgs You may include ?s in selection, which will be
         *         replaced by the values from selectionArgs, in the order that they
         *         appear in the selection. The values will be bound as Strings.
         * @param sortOrder How to order the rows, formatted as an SQL ORDER BY
         *         clause (excluding the ORDER BY itself). Passing null will use the
         *         default sort order, which may be unordered.
         * @return A Cursor object, which is positioned before the first entry, or null
         * @see Cursor
         */
        Query(
            [in] IUri* uri,
            [in] ArrayOf<String> projection,
            [in] String selection,
            [in] ArrayOf<String> selectionArgs,
            [in] String sortOrder,
            [out] ICursor** cursor);

        /**
         * Open a stream on to the content associated with a content URI.  If there
         * is no data associated with the URI, FileNotFoundException is thrown.
         *
         * <h5>Accepts the following URI schemes:</h5>
         * <ul>
         * <li>content ({@link #SCHEME_CONTENT})</li>
         * <li>android.resource ({@link #SCHEME_ANDROID_RESOURCE})</li>
         * <li>file ({@link #SCHEME_FILE})</li>
         * </ul>
         *
         * <p>See {@link #openAssetFileDescriptor(Uri, String)} for more information
         * on these schemes.
         *
         * @param uri The desired URI.
         * @return InputStream
         * @throws FileNotFoundException if the provided URI could not be opened.
         * @see #openAssetFileDescriptor(Uri, String)
         */
        OpenInputStream(
            [in] IUri* uri,
            [out] IInputStream** istream);

        /**
         * Synonym for {@link #openOutputStream(Uri, String)
         * openOutputStream(uri, "w")}.
         * @throws FileNotFoundException if the provided URI could not be opened.
         */
        OpenOutputStream(
            [in] IUri* uri,
            [out] IOutputStream** ostream);

        /**
         * Open a stream on to the content associated with a content URI.  If there
         * is no data associated with the URI, FileNotFoundException is thrown.
         *
         * <h5>Accepts the following URI schemes:</h5>
         * <ul>
         * <li>content ({@link #SCHEME_CONTENT})</li>
         * <li>file ({@link #SCHEME_FILE})</li>
         * </ul>
         *
         * <p>See {@link #openAssetFileDescriptor(Uri, String)} for more information
         * on these schemes.
         *
         * @param uri The desired URI.
         * @param mode May be "w", "wa", "rw", or "rwt".
         * @return OutputStream
         * @throws FileNotFoundException if the provided URI could not be opened.
         * @see #openAssetFileDescriptor(Uri, String)
         */
        OpenOutputStream2(
            [in] IUri* uri,
            [in] String mode,
            [out] IOutputStream** ostream);

        /**
         * Open a raw file descriptor to access data under a "content:" URI.  This
         * is like {@link #openAssetFileDescriptor(Uri, String)}, but uses the
         * underlying {@link ContentProvider#openFile}
         * ContentProvider.openFile()} method, so will <em>not</em> work with
         * providers that return sub-sections of files.  If at all possible,
         * you should use {@link #openAssetFileDescriptor(Uri, String)}.  You
         * will receive a FileNotFoundException exception if the provider returns a
         * sub-section of a file.
         *
         * <h5>Accepts the following URI schemes:</h5>
         * <ul>
         * <li>content ({@link #SCHEME_CONTENT})</li>
         * <li>file ({@link #SCHEME_FILE})</li>
         * </ul>
         *
         * <p>See {@link #openAssetFileDescriptor(Uri, String)} for more information
         * on these schemes.
         *
         * @param uri The desired URI to open.
         * @param mode The file mode to use, as per {@link ContentProvider#openFile
         * ContentProvider.openFile}.
         * @return Returns a new ParcelFileDescriptor pointing to the file.  You
         * own this descriptor and are responsible for closing it when done.
         * @throws FileNotFoundException Throws FileNotFoundException of no
         * file exists under the URI or the mode is invalid.
         * @see #openAssetFileDescriptor(Uri, String)
         */
        OpenFileDescriptor(
            [in] IUri* uri,
            [in] String mode,
            [out] IParcelFileDescriptor** result);

        /**
         * Open a raw file descriptor to access data under a "content:" URI.  This
         * interacts with the underlying {@link ContentProvider#openAssetFile}
         * ContentProvider.openAssetFile()} method of the provider associated with the
         * given URI, to retrieve any file stored there.
         *
         * <h5>Accepts the following URI schemes:</h5>
         * <ul>
         * <li>content ({@link #SCHEME_CONTENT})</li>
         * <li>android.resource ({@link #SCHEME_ANDROID_RESOURCE})</li>
         * <li>file ({@link #SCHEME_FILE})</li>
         * </ul>
         * <h5>The android.resource ({@link #SCHEME_ANDROID_RESOURCE}) Scheme</h5>
         * <p>
         * A Uri object can be used to reference a resource in an APK file.  The
         * Uri should be one of the following formats:
         * <ul>
         * <li><code>android.resource://package_name/id_number</code><br/>
         * <code>package_name</code> is your package name as listed in your AndroidManifest.xml.
         * For example <code>com.example.myapp</code><br/>
         * <code>id_number</code> is the int form of the ID.<br/>
         * The easiest way to construct this form is
         * <pre>Uri uri = Uri.parse("android.resource://com.example.myapp/" + R.raw.my_resource");</pre>
         * </li>
         * <li><code>android.resource://package_name/type/name</code><br/>
         * <code>package_name</code> is your package name as listed in your AndroidManifest.xml.
         * For example <code>com.example.myapp</code><br/>
         * <code>type</code> is the string form of the resource type.  For example, <code>raw</code>
         * or <code>drawable</code>.
         * <code>name</code> is the string form of the resource name.  That is, whatever the file
         * name was in your res directory, without the type extension.
         * The easiest way to construct this form is
         * <pre>Uri uri = Uri.parse("android.resource://com.example.myapp/raw/my_resource");</pre>
         * </li>
         * </ul>
         *
         * @param uri The desired URI to open.
         * @param mode The file mode to use, as per {@link ContentProvider#openAssetFile
         * ContentProvider.openAssetFile}.
         * @return Returns a new ParcelFileDescriptor pointing to the file.  You
         * own this descriptor and are responsible for closing it when done.
         * @throws FileNotFoundException Throws FileNotFoundException of no
         * file exists under the URI or the mode is invalid.
         */
        OpenAssetFileDescriptor(
            [in] IUri* uri,
            [in] String mode,
            [out] IAssetFileDescriptor** result);

        /**
         * Resolves an android.resource URI to a {@link Resources} and a resource id.
         *
         * @hide
         */
        GetResourceId(
            [in] IUri* uri,
            [out] IOpenResourceIdResult** result);

        /**
         * Inserts a row into a table at the given URL.
         *
         * If the content provider supports transactions the insertion will be atomic.
         *
         * @param url The URL of the table to insert into.
         * @param values The initial values for the newly inserted row. The key is the column name for
         *               the field. Passing an empty ContentValues will create an empty row.
         * @return the URL of the newly created row.
         */
        Insert(
            [in] IUri* uri,
            [in] IContentValues* values,
            [out] IUri** insertedItemUri);

        /**
         * Applies each of the {@link ContentProviderOperation} objects and returns an array
         * of their results. Passes through OperationApplicationException, which may be thrown
         * by the call to {@link ContentProviderOperation#apply}.
         * If all the applications succeed then a {@link ContentProviderResult} array with the
         * same number of elements as the operations will be returned. It is implementation-specific
         * how many, if any, operations will have been successfully applied if a call to
         * apply results in a {@link OperationApplicationException}.
         * @param authority the authority of the ContentProvider to which this batch should be applied
         * @param operations the operations to apply
         * @return the results of the applications
         * @throws OperationApplicationException thrown if an application fails.
         * See {@link ContentProviderOperation#apply} for more information.
         * @throws RemoteException thrown if a RemoteException is encountered while attempting
         *   to communicate with a remote provider.
         */
        // TODO: ALEX
        // ApplyBatch(
        //     [in] String authority,
        //     [in] ArrayOf<IContentProviderOperation*> operations,
        //     [out, callee] ArrayOf<IContentProviderResult*>* result);

        /**
         * Inserts multiple rows into a table at the given URL.
         *
         * This function make no guarantees about the atomicity of the insertions.
         *
         * @param url The URL of the table to insert into.
         * @param values The initial values for the newly inserted rows. The key is the column name for
         *               the field. Passing null will create an empty row.
         * @return the number of newly created rows.
         */
        BulkInsert(
            [in] IUri* url,
            [in] ArrayOf<IContentValues*> values,
            [out] Int32* result);

        /**
         * Deletes row(s) specified by a content URI.
         *
         * If the content provider supports transactions, the deletion will be atomic.
         *
         * @param url The URL of the row to delete.
         * @param where A filter to apply to rows before deleting, formatted as an SQL WHERE clause
                        (excluding the WHERE itself).
         * @return The number of rows deleted.
         */
        Delete(
            [in] IUri* uri,
            [in] String selection,
            [in] ArrayOf<String> selectionArgs,
            [out] Int32* rowsAffected);

        /**
         * Update row(s) in a content URI.
         *
         * If the content provider supports transactions the update will be atomic.
         *
         * @param uri The URI to modify.
         * @param values The new field values. The key is the column name for the field.
                         A null value will remove an existing field value.
         * @param where A filter to apply to rows before updating, formatted as an SQL WHERE clause
                        (excluding the WHERE itself).
         * @return The number of rows updated.
         * @throws NullPointerException if uri or values are null
         */
        Update(
            [in] IUri* uri,
            [in] IContentValues* values,
            [in] String selection,
            [in] ArrayOf<String> selectionArgs,
            [out] Int32* rowsAffected);

        /**
         * Returns the content provider for the given content URI.
         *
         * @param uri The URI to a content provider
         * @return The ContentProvider for the given URI, or null if no content provider is found.
         * @hide
         */
        AcquireProvider2(
            [in] IUri* uri,
            [out] IContentProvider** result);

        /**
         * Returns the content provider for the given content URI if the process
         * already has a reference on it.
         *
         * @param uri The URI to a content provider
         * @return The ContentProvider for the given URI, or null if no content provider is found.
         * @hide
         */
        AcquireExistingProvider2(
            [in] IUri* uri,
            [out] IContentProvider** result);

        /**
         * @hide
         */
        AcquireProvider3(
            [in] String name,
            [out] IContentProvider** result);

        /**
         * Returns a {@link ContentProviderClient} that is associated with the {@link ContentProvider}
         * that services the content at uri, starting the provider if necessary. Returns
         * null if there is no provider associated wih the uri. The caller must indicate that they are
         * done with the provider by calling {@link ContentProviderClient#release} which will allow
         * the system to release the provider it it determines that there is no other reason for
         * keeping it active.
         * @param uri specifies which provider should be acquired
         * @return a {@link ContentProviderClient} that is associated with the {@link ContentProvider}
         * that services the content at uri or null if there isn't one.
         */
        // TODO: ALEX
        // AcquireContentProviderClient(
        //     [in] IUri* uri,
        //     [out] IContentProviderClient** result);

        /**
         * Returns a {@link ContentProviderClient} that is associated with the {@link ContentProvider}
         * with the authority of name, starting the provider if necessary. Returns
         * null if there is no provider associated wih the uri. The caller must indicate that they are
         * done with the provider by calling {@link ContentProviderClient#release} which will allow
         * the system to release the provider it it determines that there is no other reason for
         * keeping it active.
         * @param name specifies which provider should be acquired
         * @return a {@link ContentProviderClient} that is associated with the {@link ContentProvider}
         * with the authority of name or null if there isn't one.
         */
        // TODO: ALEX
        // AcquireContentProviderClient(
        //     [in] String name,
        //     [out] IContentProviderClient** result);

        /**
         * Register an observer class that gets callbacks when data identified by a
         * given content URI changes.
         *
         * @param uri The URI to watch for changes. This can be a specific row URI, or a base URI
         * for a whole class of content.
         * @param notifyForDescendents If <code>true</code> changes to URIs beginning with <code>uri</code>
         * will also cause notifications to be sent. If <code>false</code> only changes to the exact URI
         * specified by <em>uri</em> will cause notifications to be sent. If true, than any URI values
         * at or below the specified URI will also trigger a match.
         * @param observer The object that receives callbacks when changes occur.
         * @see #unregisterContentObserver
         */
        RegisterContentObserver(
            [in] IUri* uri,
            [in] Boolean notifyForDescendents,
            [in] IContentObserver* observer);

        /**
         * Unregisters a change observer.
         *
         * @param observer The previously registered observer that is no longer needed.
         * @see #registerContentObserver
         */
        UnregisterContentObserver(
            [in] IContentObserver* observer);

        /**
         * Notify registered observers that a row was updated.
         * To register, call {@link #registerContentObserver(android.net.Uri , boolean, android.database.ContentObserver) registerContentObserver()}.
         * By default, CursorAdapter objects will get this notification.
         *
         * @param uri
         * @param observer The observer that originated the change, may be <code>null</null>
         */
        NotifyChange(
            [in] IUri* uri,
            [in] IContentObserver* observer);

        /**
         * Notify registered observers that a row was updated.
         * To register, call {@link #registerContentObserver(android.net.Uri , boolean, android.database.ContentObserver) registerContentObserver()}.
         * By default, CursorAdapter objects will get this notification.
         *
         * @param uri
         * @param observer The observer that originated the change, may be <code>null</null>
         * @param syncToNetwork If true, attempt to sync the change to the network.
         */
        NotifyChange2(
            [in] IUri* uri,
            [in] IContentObserver* observer,
            [in] Boolean syncToNetwork);

        /**
         * Start an asynchronous sync operation. If you want to monitor the progress
         * of the sync you may register a SyncObserver. Only values of the following
         * types may be used in the extras bundle:
         * <ul>
         * <li>Integer</li>
         * <li>Long</li>
         * <li>Boolean</li>
         * <li>Float</li>
         * <li>Double</li>
         * <li>String</li>
         * </ul>
         *
         * @param uri the uri of the provider to sync or null to sync all providers.
         * @param extras any extras to pass to the SyncAdapter.
         * @deprecated instead use
         * {@link #requestSync(android.accounts.Account, String, android.os.Bundle)}
         */
        // @Deprecated
        // StartSync(
        //     [in] IUri* uri,
        //     [in] IBundle* extras);

        /**
         * Cancel any active or pending syncs that match the Uri. If the uri is null then
         * all syncs will be canceled.
         *
         * @param uri the uri of the provider to sync or null to sync all providers.
         * @deprecated instead use {@link #cancelSync(android.accounts.Account, String)}
         */
        // @Deprecated
        // CancelSync(
        //     [in] IUri* uri);
    }
    
    interface IContentResolverHelper{
        /** @hide */
        ModeToMode(
            [in] IUri* uri,
            [in] String mode,
            [out] Int32* result);

        /**
         * Start an asynchronous sync operation. If you want to monitor the progress
         * of the sync you may register a SyncObserver. Only values of the following
         * types may be used in the extras bundle:
         * <ul>
         * <li>Integer</li>
         * <li>Long</li>
         * <li>Boolean</li>
         * <li>Float</li>
         * <li>Double</li>
         * <li>String</li>
         * </ul>
         *
         * @param account which account should be synced
         * @param authority which authority should be synced
         * @param extras any extras to pass to the SyncAdapter.
         */
        RequestSync(
            [in] IAccount* account,
            [in] String authority,
            [in] IBundle *extras);
            
        /**
         * Check that only values of the following types are in the Bundle:
         * <ul>
         * <li>Integer</li>
         * <li>Long</li>
         * <li>Boolean</li>
         * <li>Float</li>
         * <li>Double</li>
         * <li>String</li>
         * <li>Account</li>
         * <li>null</li>
         * </ul>
         * @param extras the Bundle to check
         */
        ValidateSyncExtrasBundle(
            [in] IBundle* extras);
            
        /**
         * Cancel any active or pending syncs that match account and authority. The account and
         * authority can each independently be set to null, which means that syncs with any account
         * or authority, respectively, will match.
         *
         * @param account filters the syncs that match by this account
         * @param authority filters the syncs that match by this authority
          */
        CancelSync(
            [in] IAccount* account,
            [in] String authority);
            
        /**
         * Get information about the SyncAdapters that are known to the system.
         * @return an array of SyncAdapters that have registered with the system
         */
        GetSyncAdapterTypes(
            [out, callee] ArrayOf<ISyncAdapterType*>* type);
            
        /**
         * Check if the provider should be synced when a network tickle is received
         *
         * @param account the account whose setting we are querying
         * @param authority the provider whose setting we are querying
         * @return true if the provider should be synced when a network tickle is received
         */
        GetSyncAutomatically(
            [in] IAccount* account,
            [in] String authority,
            [out] Boolean* result);
            
        /**
         * Set whether or not the provider is synced when it receives a network tickle.
         *
         * @param account the account whose setting we are querying
         * @param authority the provider whose behavior is being controlled
         * @param sync true if the provider should be synced when tickles are received for it
          */
        SetSyncAutomatically(
            [in] IAccount* account,
            [in] String authority,
            [in] Boolean sync);
            
        /**
         * Specifies that a sync should be requested with the specified the account, authority,
         * and extras at the given frequency. If there is already another periodic sync scheduled
         * with the account, authority and extras then a new periodic sync won't be added, instead
         * the frequency of the previous one will be updated.
         * <p>
         * These periodic syncs honor the "syncAutomatically" and "masterSyncAutomatically" settings.
         * Although these sync are scheduled at the specified frequency, it may take longer for it to
         * actually be started if other syncs are ahead of it in the sync operation queue. This means
         * that the actual start time may drift.
         * <p>
         * Periodic syncs are not allowed to have any of {@link #SYNC_EXTRAS_DO_NOT_RETRY},
         * {@link #SYNC_EXTRAS_IGNORE_BACKOFF}, {@link #SYNC_EXTRAS_IGNORE_SETTINGS},
         * {@link #SYNC_EXTRAS_INITIALIZE}, {@link #SYNC_EXTRAS_FORCE},
         * {@link #SYNC_EXTRAS_EXPEDITED}, {@link #SYNC_EXTRAS_MANUAL} set to true.
         * If any are supplied then an {@link IllegalArgumentException} will be thrown.
         *
         * @param account the account to specify in the sync
         * @param authority the provider to specify in the sync request
         * @param extras extra parameters to go along with the sync request
         * @param pollFrequency how frequently the sync should be performed, in seconds.
         * @throws IllegalArgumentException if an illegal extra was set or if any of the parameters
         * are null.
         */
        AddPeriodicSync(
            [in] IAccount* account,
            [in] String authority,
            [in] IBundle* extras,
            [in] Int64 pollFrequency);
            
        /**
         * Remove a periodic sync. Has no affect if account, authority and extras don't match
         * an existing periodic sync.
         *
         * @param account the account of the periodic sync to remove
         * @param authority the provider of the periodic sync to remove
         * @param extras the extras of the periodic sync to remove
         */
        RemovePeriodicSync(
            [in] IAccount* account,
            [in] String authority,
            [in] IBundle* extras);
            
        /**
         * Get the list of information about the periodic syncs for the given account and authority.
         *
         * @param account the account whose periodic syncs we are querying
         * @param authority the provider whose periodic syncs we are querying
         * @return a list of PeriodicSync objects. This list may be empty but will never be null.
         */
        GetPeriodicSyncs(
            [in] IAccount* account,
            [in] String authority,
            [out] IObjectContainer** periodicSyncs);
            
        /**
         * Check if this account/provider is syncable.
         * @return >0 if it is syncable, 0 if not, and <0 if the state isn't known yet.
         */
        GetIsSyncable(
            [in] IAccount* account,
            [in] String authority,
            [out] Int32* isSyncable);
        
        /**
         * Set whether this account/provider is syncable.
         * @param syncable >0 denotes syncable, 0 means not syncable, <0 means unknown
         */
        SetIsSyncable(
            [in] IAccount* account,
            [in] String authority,
            [in] Int32 syncable);
            
        /**
         * Gets the master auto-sync setting that applies to all the providers and accounts.
         * If this is false then the per-provider auto-sync setting is ignored.
         *
         * @return the master auto-sync setting that applies to all the providers and accounts
         */
        GetMasterSyncAutomatically(
            [out] Boolean* result);
            
        /**
         * Sets the master auto-sync setting that applies to all the providers and accounts.
         * If this is false then the per-provider auto-sync setting is ignored.
         *
         * @param sync the master auto-sync setting that applies to all the providers and accounts
         */
        SetMasterSyncAutomatically(
            [in] Boolean sync);
        
        /**
         * Returns true if there is currently a sync operation for the given
         * account or authority in the pending list, or actively being processed.
         * @param account the account whose setting we are querying
         * @param authority the provider whose behavior is being queried
         * @return true if a sync is active for the given account or authority.
         */
        IsSyncActive(
            [in] IAccount* account,
            [in] String authority,
            [out] Boolean* isSyncActive);
            
        /**
         * If a sync is active returns the information about it, otherwise returns false.
         * @return the SyncInfo for the currently active sync or null if one is not active.
         */
        GetCurrentSync(
            [out] ISyncInfo** syncInfo);
        
        /**
         * Returns the status that matches the authority.
         * @param account the account whose setting we are querying
         * @param authority the provider whose behavior is being queried
         * @return the SyncStatusInfo for the authority, or null if none exists
         * @hide
         */
        GetSyncStatus(
            [in] IAccount* account,
            [in] String authority,
            [out] ISyncStatusInfo** syncStatusInfo);
        
        /**
         * Return true if the pending status is true of any matching authorities.
         * @param account the account whose setting we are querying
         * @param authority the provider whose behavior is being queried
         * @return true if there is a pending sync with the matching account and authority
         */
        IsSyncPending(
            [in] IAccount* account,
            [in] String authority,
            [out] Boolean* isSyncPending);
            
        /**
         * Request notifications when the different aspects of the SyncManager change. The
         * different items that can be requested are:
         * <ul>
         * <li> {@link #SYNC_OBSERVER_TYPE_PENDING}
         * <li> {@link #SYNC_OBSERVER_TYPE_ACTIVE}
         * <li> {@link #SYNC_OBSERVER_TYPE_SETTINGS}
         * </ul>
         * The caller can set one or more of the status types in the mask for any
         * given listener registration.
         * @param mask the status change types that will cause the callback to be invoked
         * @param callback observer to be invoked when the status changes
         * @return a handle that can be used to remove the listener at a later time
         */
        AddStatusChangeListener(
            [in] Int32 mask,
            [in] ISyncStatusObserver* observerCallback,
            [out] IInterface** item);
        
        /**
         * Remove a previously registered status change listener.
         * @param handle the handle that was returned by {@link #addStatusChangeListener}
         */
        RemoveStatusChangeListener(
            [in] IInterface* item);
        
        /** @hide */
        GetContentService(
            [out] IContentService** contentService);
    }
}
