
module
{
    /**
     * Value for {@link #flags}: if set, this application is installed in the
     * device's system image.
     */
    const ApplicationInfo_FLAG_SYSTEM = 0x00000001; //1<<0;

    /**
     * Value for {@link #flags}: set to true if this application would like to
     * allow debugging of its
     * code, even when installed on a non-development system.  Comes
     * from {@link android.R.styleable#AndroidManifestApplication_debuggable
     * android:debuggable} of the &lt;application&gt; tag.
     */
    const ApplicationInfo_FLAG_DEBUGGABLE = 0x00000002; //1<<1;

    /**
     * Value for {@link #flags}: set to true if this application has code
     * associated with it.  Comes
     * from {@link android.R.styleable#AndroidManifestApplication_hasCode
     * android:hasCode} of the &lt;application&gt; tag.
     */
    const ApplicationInfo_FLAG_HAS_CODE = 0x00000004; //1<<2;

    /**
     * Value for {@link #flags}: set to true if this application is persistent.
     * Comes from {@link android.R.styleable#AndroidManifestApplication_persistent
     * android:persistent} of the &lt;application&gt; tag.
     */
    const ApplicationInfo_FLAG_PERSISTENT = 0x00000008; //1<<3;

    /**
     * Value for {@link #flags}: set to true if this application holds the
     * {@link android.Manifest.permission#FACTORY_TEST} permission and the
     * device is running in factory test mode.
     */
    const ApplicationInfo_FLAG_FACTORY_TEST = 0x00000010; //1<<4;

    /**
     * Value for {@link #flags}: default value for the corresponding ActivityInfo flag.
     * Comes from {@link android.R.styleable#AndroidManifestApplication_allowTaskReparenting
     * android:allowTaskReparenting} of the &lt;application&gt; tag.
     */
    const ApplicationInfo_FLAG_ALLOW_TASK_REPARENTING = 0x00000020; //1<<5;

    /**
     * Value for {@link #flags}: default value for the corresponding ActivityInfo flag.
     * Comes from {@link android.R.styleable#AndroidManifestApplication_allowClearUserData
     * android:allowClearUserData} of the &lt;application&gt; tag.
     */
    const ApplicationInfo_FLAG_ALLOW_CLEAR_USER_DATA = 0x00000040; //1<<6;

    /**
     * Value for {@link #flags}: this is set if this application has been
     * install as an update to a built-in system application.
     */
    const ApplicationInfo_FLAG_UPDATED_SYSTEM_APP = 0x00000080; //1<<7;

    /**
     * Value for {@link #flags}: this is set of the application has specified
     * {@link android.R.styleable#AndroidManifestApplication_testOnly
     * android:testOnly} to be true.
     */
    const ApplicationInfo_FLAG_TEST_ONLY = 0x00000100; //1<<8;

    /**
     * Value for {@link #flags}: true when the application's window can be
     * reduced in size for smaller screens.  Corresponds to
     * {@link android.R.styleable#AndroidManifestSupportsScreens_smallScreens
     * android:smallScreens}.
     */
    const ApplicationInfo_FLAG_SUPPORTS_SMALL_SCREENS = 0x00000200; //1<<9;

    /**
     * Value for {@link #flags}: true when the application's window can be
     * displayed on normal screens.  Corresponds to
     * {@link android.R.styleable#AndroidManifestSupportsScreens_normalScreens
     * android:normalScreens}.
     */
    const ApplicationInfo_FLAG_SUPPORTS_NORMAL_SCREENS = 0x00000400; //1<<10;

    /**
     * Value for {@link #flags}: true when the application's window can be
     * increased in size for larger screens.  Corresponds to
     * {@link android.R.styleable#AndroidManifestSupportsScreens_largeScreens
     * android:largeScreens}.
     */
    const ApplicationInfo_FLAG_SUPPORTS_LARGE_SCREENS = 0x00000800; //1<<11;

    /**
     * Value for {@link #flags}: true when the application knows how to adjust
     * its UI for different screen sizes.  Corresponds to
     * {@link android.R.styleable#AndroidManifestSupportsScreens_resizeable
     * android:resizeable}.
     */
    const ApplicationInfo_FLAG_RESIZEABLE_FOR_SCREENS = 0x00001000; //1<<12;

    /**
     * Value for {@link #flags}: true when the application knows how to
     * accomodate different screen densities.  Corresponds to
     * {@link android.R.styleable#AndroidManifestSupportsScreens_anyDensity
     * android:anyDensity}.
     */
    const ApplicationInfo_FLAG_SUPPORTS_SCREEN_DENSITIES = 0x00002000; //1<<13;

    /**
     * Value for {@link #flags}: set to true if this application would like to
     * request the VM to operate under the safe mode. Comes from
     * {@link android.R.styleable#AndroidManifestApplication_vmSafeMode
     * android:vmSafeMode} of the &lt;application&gt; tag.
     */
    const ApplicationInfo_FLAG_VM_SAFE_MODE = 0x00004000; //1<<14;

    /**
     * Value for {@link #flags}: set to <code>false</code> if the application does not wish
     * to permit any OS-driven backups of its data; <code>true</code> otherwise.
     *
     * <p>Comes from the
     * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}
     * attribute of the &lt;application&gt; tag.
     */
    const ApplicationInfo_FLAG_ALLOW_BACKUP = 0x00008000; //1<<15;

    /**
     * Value for {@link #flags}: set to <code>false</code> if the application must be kept
     * in memory following a full-system restore operation; <code>true</code> otherwise.
     * Ordinarily, during a full system restore operation each application is shut down
     * following execution of its agent's onRestore() method.  Setting this attribute to
     * <code>false</code> prevents this.  Most applications will not need to set this attribute.
     *
     * <p>If
     * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}
     * is set to <code>false</code> or no
     * {@link android.R.styleable#AndroidManifestApplication_backupAgent android:backupAgent}
     * is specified, this flag will be ignored.
     *
     * <p>Comes from the
     * {@link android.R.styleable#AndroidManifestApplication_killAfterRestore android:killAfterRestore}
     * attribute of the &lt;application&gt; tag.
     */
    const ApplicationInfo_FLAG_KILL_AFTER_RESTORE = 0x00010000; //1<<16;

    /**
     * Value for {@link #flags}: Set to <code>true</code> if the application's backup
     * agent claims to be able to handle restore data even "from the future,"
     * i.e. from versions of the application with a versionCode greater than
     * the one currently installed on the device.  <i>Use with caution!</i>  By default
     * this attribute is <code>false</code> and the Backup Manager will ensure that data
     * from "future" versions of the application are never supplied during a restore operation.
     *
     * <p>If
     * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}
     * is set to <code>false</code> or no
     * {@link android.R.styleable#AndroidManifestApplication_backupAgent android:backupAgent}
     * is specified, this flag will be ignored.
     *
     * <p>Comes from the
     * {@link android.R.styleable#AndroidManifestApplication_restoreAnyVersion android:restoreAnyVersion}
     * attribute of the &lt;application&gt; tag.
     */
    const ApplicationInfo_FLAG_RESTORE_ANY_VERSION = 0x00020000; //1<<17;

    /**
     * Value for {@link #flags}: Set to true if the application is
     * currently installed on external/removable/unprotected storage.  Such
     * applications may not be available if their storage is not currently
     * mounted.  When the storage it is on is not available, it will look like
     * the application has been uninstalled (its .apk is no longer available)
     * but its persistent data is not removed.
     */
    const ApplicationInfo_FLAG_EXTERNAL_STORAGE = 0x00040000; //1<<18;

    /**
     * Value for {@link #flags}: true when the application's window can be
     * increased in size for extra large screens.  Corresponds to
     * {@link android.R.styleable#AndroidManifestSupportsScreens_xlargeScreens
     * android:xlargeScreens}.
     * @hide
     */
    const ApplicationInfo_FLAG_SUPPORTS_XLARGE_SCREENS = 0x00080000; //1<<19;

    /**
     * Value for {@link #flags}: this is true if the application has set
     * its android:neverEncrypt to true, false otherwise. It is used to specify
     * that this package specifically "opts-out" of a secured file system solution,
     * and will always store its data in-the-clear.
     *
     * {@hide}
     */
    const ApplicationInfo_FLAG_NEVER_ENCRYPT = 0x40000000; //1<<30;

    /**
     * Value for {@link #flags}: Set to true if the application has been
     * installed using the forward lock option.
     *
     * {@hide}
     */
    const ApplicationInfo_FLAG_FORWARD_LOCK = 0x20000000; //1<<29;

    /**
     * Value for {@link #flags}: set to <code>true</code> if the application
     * has reported that it is heavy-weight, and thus can not participate in
     * the normal application lifecycle.
     *
     * <p>Comes from the
     * {@link android.R.styleable#AndroidManifestApplication_cantSaveState android:cantSaveState}
     * attribute of the &lt;application&gt; tag.
     *
     * {@hide}
     */
    const ApplicationInfo_FLAG_CANT_SAVE_STATE = 0x08000000; //1<<27;

    [deprecated]
    interface IApplicationInfo extends ICapsuleItemInfo {
        DisableCompatibilityMode();

        GetTaskAffinity(
            [out] String* task);

        SetTaskAffinity(
            [in] String task);

        GetPermission(
            [out] String* permission);

        SetPermission(
            [in] String permission);

        GetProcessName(
            [out] String* name);

        SetProcessName(
            [in] String name);

        GetClassName(
            [out] String* name);

        SetClassName(
            [in] String name);

        GetDescriptionRes(
            [out] Int32* desRes);

        SetDescriptionRes(
            [in] Int32 desRes);

        GetTheme(
            [out] Int32* theme);

        SetTheme(
            [in] Int32 theme);

        GetManageSpaceActivityName(
            [out] String* name);

        SetManageSpaceActivityName(
            [in] String name);

        GetBackupAgentName(
            [out] String* name);

        SetBackupAgentName(
            [in] String name);

        GetFlags(
            [out] Int32* flags);

        SetFlags(
            [in] Int32 flags);

        GetSourceDir(
            [out] String* sourceDir);

        SetSourceDir(
            [in] String sourceDir);

        GetPublicSourceDir(
            [out] String* publicSourceDir);

        SetPublicSourceDir(
            [in] String pubicSourceDir);

        GetSharedLibraryFiles(
            [out, callee] ArrayOf<String>* sharedLibraryFiles);

        SetSharedLibraryFiles(
            [in] ArrayOf<String>* sharedLibraryFiles);

        GetDataDir(
            [out] String* dataDir);

        SetDataDir(
            [in] String dataDir);

        GetNativeLibraryDir(
            [out] String* libraryDir);

        SetNativeLibraryDir(
            [in] String libraryDir);

        GetUid(
            [out] Int32* uid);

        SetUid(
            [in] Int32 uid);

        GetTargetSdkVersion(
            [out] Int32* sdkVersion);

        SetTargetSdkVersion(
            [in] Int32 sdkVersion);

        IsEnabled(
            [out] Boolean* isEnabled);

        SetEnabled(
            [in] Boolean enabled);

        GetInstallLocation(
            [out] Int32* location);

        SetInstallLocation(
            [in] Int32 location);

        GetDescription(
            [out] String* description);
    }
}
