
module
{
    /**
     * The identifier for the positive button.
     */
    const DialogInterface_BUTTON_POSITIVE = -1;

    /**
     * The identifier for the negative button. 
     */
    const DialogInterface_BUTTON_NEGATIVE = -2;

    /**
     * The identifier for the neutral button. 
     */
    const DialogInterface_BUTTON_NEUTRAL = -3;

    interface IDialogInterface;
    interface IKeyEvent;

    /**
     * Interface used to allow the creator of a dialog to run some code when the
     * dialog is canceled.
     * <p>
     * This will only be called when the dialog is canceled, if the creator
     * needs to know when it is dismissed in general, use
     * {@link DialogInterface.OnDismissListener}.
     */
    interface IDialogInterfaceOnCancelListener {
        /**
         * This method will be invoked when the dialog is canceled.
         * 
         * @param dialog The dialog that was canceled will be passed into the
         *            method.
         */
        OnCancel(
            [in] IDialogInterface* dialog);
    }

    /**
     * Interface used to allow the creator of a dialog to run some code when the
     * dialog is dismissed.
     */
    interface IDialogInterfaceOnDismissListener {
        /**
         * This method will be invoked when the dialog is dismissed.
         * 
         * @param dialog The dialog that was dismissed will be passed into the
         *            method.
         */
        OnDismiss(
            [in] IDialogInterface* dialog);
    }

    /**
     * Interface used to allow the creator of a dialog to run some code when the
     * dialog is shown.
     */
    interface IDialogInterfaceOnShowListener {
        /**
         * This method will be invoked when the dialog is shown.
         *
         * @param dialog The dialog that was shown will be passed into the
         *            method.
         */
        OnShow(
            [in] IDialogInterface* dialog);
    }

    /**
     * Interface used to allow the creator of a dialog to run some code when an
     * item on the dialog is clicked..
     */
    interface IDialogInterfaceOnClickListener {
        /**
         * This method will be invoked when a button in the dialog is clicked.
         * 
         * @param dialog The dialog that received the click.
         * @param which The button that was clicked (e.g.
         *            {@link DialogInterface#BUTTON1}) or the position
         *            of the item clicked.
         */
        /* TODO: Change to use BUTTON_POSITIVE after API council */
        OnClick(
            [in] IDialogInterface* dialog,
            [in] Int32 which);
    }
    
    /**
     * Interface used to allow the creator of a dialog to run some code when an
     * item in a multi-choice dialog is clicked.
     */
    interface IDialogInterfaceOnMultiChoiceClickListener {
        /**
         * This method will be invoked when an item in the dialog is clicked.
         * 
         * @param dialog The dialog where the selection was made.
         * @param which The position of the item in the list that was clicked.
         * @param isChecked True if the click checked the item, else false.
         */
        OnClick(
            [in] IDialogInterface* dialog,
            [in] Int32 which,
            [in] Boolean isChecked);
    }
    
    /**
     * Interface definition for a callback to be invoked when a key event is
     * dispatched to this dialog. The callback will be invoked before the key
     * event is given to the dialog.
     */
    interface IDialogInterfaceOnKeyListener {
        /**
         * Called when a key is dispatched to a dialog. This allows listeners to
         * get a chance to respond before the dialog.
         * 
         * @param dialog The dialog the key has been dispatched to.
         * @param keyCode The code for the physical key that was pressed
         * @param event The KeyEvent object containing full information about
         *            the event.
         * @return True if the listener has consumed the event, false otherwise.
         */
        OnKey(
            [in] IDialogInterface* dialog,
            [in] Int32 keyCode,
            [in] IKeyEvent* event);
    }

    interface IDialogInterface {        
        Cancel();

        Dismiss();
    }
}
