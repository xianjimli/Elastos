
module
{
    interface IIntentReceiver;
    interface IContext;
    interface IIntent;
    interface IHandler;
    interface IOnFinished;

    interface IHandler {}

    interface IIntentSender {
        Send(
            [in] Int32 code,
            [in] IIntent* intent,
            [in] String resolvedType,
            [in] IIntentReceiver* finishedReceiver,
            [out] Int32* result);

        /**
         * Perform the operation associated with this IntentSender, allowing the
         * caller to specify information about the Intent to use and be notified
         * when the send has completed.
         *
         * @param context The Context of the caller.  This may be null if
         * <var>intent</var> is also null.
         * @param code Result code to supply back to the IntentSender's target.
         * @param intent Additional Intent data.  See {@link Intent#fillIn
         * Intent.fillIn()} for information on how this is applied to the
         * original Intent.  Use null to not modify the original Intent.
         * @param onFinished The object to call back on when the send has
         * completed, or null for no callback.
         * @param handler Handler identifying the thread on which the callback
         * should happen.  If null, the callback will happen from the thread
         * pool of the process.
         *
         *
         * @throws SendIntentException Throws CanceledIntentException if the IntentSender
         * is no longer allowing more intents to be sent through it.
         */
        SendIntent(
            [in] IContext* context,
            [in] Int32 code,
            [in] IIntent* intent,
            [in] IOnFinished* onFinished,
            [in] IHandler* handler);
    }
}
