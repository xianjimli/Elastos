
module
{
    interface ISyncAdapterType;
    //interface ISyncInfo;
    //interface ISyncStatusObserver;
    interface IAccount;
    interface IBundle;
    interface IContentObserver;
    interface IUri;

    [deprecated]
    interface IContentService {

        RegisterContentObserver(
            [in] IUri* uri,
            [in] Boolean notifyForDescendentsn,
            [in] IContentObserver* observer);

        UnregisterContentObserver(
            [in] IContentObserver* observer);

        NotifyChange(
            [in] IUri* uri,
            [in] IContentObserver* observer,
            [in] Boolean observerWantsSelfNotifications,
            [in] Boolean syncToNetwork);

        RequestSync(
            [in] IAccount* account,
            [in] String authority,
            [in] IBundle* extras);

        CancelSync(
            [in] IAccount* account,
            [in] String authority);

        /**
        * Check if the provider should be synced when a network tickle is received
        * @param providerName the provider whose setting we are querying
        * @return true if the provider should be synced when a network tickle is received
        */
        GetSyncAutomatically(
            [in] IAccount* account,
            [in] String providerName,
            [out] Boolean* result);

        /**
        * Set whether or not the provider is synced when it receives a network tickle.
        *
        * @param providerName the provider whose behavior is being controlled
        * @param sync true if the provider should be synced when tickles are received for it
        */
        SetSyncAutomatically(
            [in] IAccount* account,
            [in] String providerName,
            [in] Boolean sync);

        /**
        * Get the frequency of the periodic poll, if any.
        * @param providerName the provider whose setting we are querying
        * @return the frequency of the periodic sync in seconds. If 0 then no periodic syncs
        * will take place.
        */
        GetPeriodicSyncs(
            [in] IAccount* account,
            [in] String providerName,
            [out] IObjectContainer** periodicSyncList);

        /**
        * Set whether or not the provider is to be synced on a periodic basis.
        *
        * @param providerName the provider whose behavior is being controlled
        * @param pollFrequency the period that a sync should be performed, in seconds. If this is
        * zero or less then no periodic syncs will be performed.
        */
        AddPeriodicSync(
            [in] IAccount* account,
            [in] String providerName,
            [in] IBundle* extras,
            [in] Int64 pollFrequency);

        /**
        * Set whether or not the provider is to be synced on a periodic basis.
        *
        * @param providerName the provider whose behavior is being controlled
        * @param pollFrequency the period that a sync should be performed, in seconds. If this is
        * zero or less then no periodic syncs will be performed.
        */
        RemovePeriodicSync(
            [in] IAccount* account,
            [in] String providerName,
            [in] IBundle* extras);

        /**
        * Check if this account/provider is syncable.
        * @return >0 if it is syncable, 0 if not, and <0 if the state isn't known yet.
        */
        GetIsSyncable(
            [in] IAccount* account,
            [in] String providerName,
            [out] Int32* value);

        /**
        * Set whether this account/provider is syncable.
        * @param syncable, >0 denotes syncable, 0 means not syncable, <0 means unknown
        */
        SetIsSyncable(
            [in] IAccount* account,
            [in] String providerName,
            [in] Int32 syncable);

        SetMasterSyncAutomatically(
            [in] Boolean flag);

        GetMasterSyncAutomatically(
            [out] Boolean* result);

        /**
        * Returns true if there is currently a sync operation for the given
        * account or authority in the pending list, or actively being processed.
        */
        IsSyncActive(
            [in] IAccount* account,
            [in] String authority,
            [out] Boolean* isActive);

        //GetCurrentSync(
        //    [out] ISyncInfo** syncInfo);

        /**
        * Returns the types of the SyncAdapters that are registered with the system.
        * @return Returns the types of the SyncAdapters that are registered with the system.
        */
        GetSyncAdapterTypes(
            [out, callee] ArrayOf<ISyncAdapterType*>* result);

        /**
        * Returns the status that matches the authority. If there are multiples accounts for
        * the authority, the one with the latest "lastSuccessTime" status is returned.
        * @param authority the authority whose row should be selected
        * @return the SyncStatusInfo for the authority, or null if none exists
        */
        //GetSyncStatus(
        //    [in] IAccount* account,
        //    [in] String authority,
        //    [out] ISyncStatusInfo** result);

        /**
        * Return true if the pending status is true of any matching authorities.
        */
        IsSyncPending(
            [in] IAccount* account,
            [in] String authority,
            [out] Boolean* isPending);

        //AddStatusChangeListener(
        //    [in] Int32 mask,
        //    [in] ISyncStatusObserver* callback);

        //RemoveStatusChangeListener(
        //    [in] ISyncStatusObserver* callback);
    }
    
}
