
module
{
    /**
     * Interface definition for a callback to be invoked when the global layout state
     * or the visibility of views within the view tree changes.
     */
    interface IOnGlobalLayoutListener {
        /**
         * Callback method to be invoked when the global layout state or the visibility of views
         * within the view tree changes
         */
        OnGlobalLayout();
    }

    /**
     * Interface definition for a callback to be invoked when the view tree is about to be drawn.
     */
    interface IOnPreDrawListener {
        /**
         * Callback method to be invoked when the view tree is about to be drawn. At this point, all
         * views in the tree have been measured and given a frame. Clients can use this to adjust
         * their scroll bounds or even to request a new layout before drawing occurs.
         *
         * @return Return true to proceed with the current drawing pass, or false to cancel.
         *
         * @see android.view.View#onMeasure
         * @see android.view.View#onLayout
         * @see android.view.View#onDraw
         */
        OnPreDraw(
            [out] Boolean* result);
    }

    /**
     * Interface definition for a callback to be invoked when the touch mode changes.
     */
    interface IOnTouchModeChangeListener {
        /**
         * Callback method to be invoked when the touch mode changes.
         *
         * @param isInTouchMode True if the view hierarchy is now in touch mode, false  otherwise.
         */
        OnTouchModeChanged(
            [in] Boolean isInTouchMode);
    }

    interface IOnScrollChangedListener {
        /**
         * Callback method to be invoked when something in the view tree
         * has been scrolled.
         */
        OnScrollChanged();
    }

    /**
     * Interface definition for a callback to be invoked when the focus state within
     * the view tree changes.
     */
    interface IOnGlobalFocusChangeListener {
        /**
         * Callback method to be invoked when the focus changes in the view tree. When
         * the view tree transitions from touch mode to non-touch mode, oldFocus is null.
         * When the view tree transitions from non-touch mode to touch mode, newFocus is
         * null. When focus changes in non-touch mode (without transition from or to
         * touch mode) either oldFocus or newFocus can be null.
         *
         * @param oldFocus The previously focused view, if any.
         * @param newFocus The newly focused View, if any.
         */
        OnGlobalFocusChanged(
            [in] IView* oldFocus,
            [in] IView* newFocus);
    }

    /**
     * Interface definition for a callback to be invoked when layout has
     * completed and the client can compute its interior insets.
     *
     * We are not yet ready to commit to this API and support it, so
     * @hide
     */
//    interface IOnComputeInternalInsetsListener {
//        /**
//         * Callback method to be invoked when layout has completed and the
//         * client can compute its interior insets.
//         *
//         * @param inoutInfo Should be filled in by the implementation with
//         * the information about the insets of the window.  This is called
//         * with whatever values the previous OnComputeInternalInsetsListener
//         * returned, if there are multiple such listeners in the window.
//         */
//        OnComputeInternalInsets(InternalInsetsInfo inoutInfo);
//    }

    interface IViewTreeObserver {
        /**
         * Register a callback to be invoked when a view has been scrolled.
         *
         * @param listener The callback to add
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         */
        AddOnScrollChangedListener(
            [in] IOnScrollChangedListener* listener);

        /**
         * Remove a previously installed scroll-changed callback
         *
         * @param victim The callback to remove
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         *
         * @see #addOnScrollChangedListener(OnScrollChangedListener)
         */
        RemoveOnScrollChangedListener(
            [in] IOnScrollChangedListener* victim);

        /**
         * Register a callback to be invoked when the invoked when the touch mode changes.
         *
         * @param listener The callback to add
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         */
        AddOnTouchModeChangeListener(
            [in] IOnTouchModeChangeListener* listener);

        /**
         * Remove a previously installed touch mode change callback
         *
         * @param victim The callback to remove
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         *
         * @see #addOnTouchModeChangeListener(OnTouchModeChangeListener)
         */
        RemoveOnTouchModeChangeListener(
            [in] IOnTouchModeChangeListener* victim);

        /**
         * Register a callback to be invoked when the view tree is about to be drawn
         *
         * @param listener The callback to add
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         */
        AddOnPreDrawListener(
            [in] IOnPreDrawListener* listener);

         /**
         * Remove a previously installed pre-draw callback
         *
         * @param victim The callback to remove
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         *
         * @see #addOnPreDrawListener(OnPreDrawListener)
         */
        RemoveOnPreDrawListener(
            [in] IOnPreDrawListener* victim);

        /**
         * Merges all the listeners registered on the specified observer with the listeners
         * registered on this object. After this method is invoked, the specified observer
         * will return false in {@link #isAlive()} and should not be used anymore.
         *
         * @param observer The ViewTreeObserver whose listeners must be added to this observer
         */
        Merge(
            [in] IViewTreeObserver* observer);

        /**
         * Register a callback to be invoked when the focus state within the view tree changes.
         *
         * @param listener The callback to add
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         */
        AddOnGlobalFocusChangeListener(
            [in] IOnGlobalFocusChangeListener* listener);

        /**
         * Remove a previously installed focus change callback.
         *
         * @param victim The callback to remove
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         *
         * @see #addOnGlobalFocusChangeListener(OnGlobalFocusChangeListener)
         */
        RemoveOnGlobalFocusChangeListener(
            [in] IOnGlobalFocusChangeListener* victim);

        /**
         * Register a callback to be invoked when the global layout state or the visibility of views
         * within the view tree changes
         *
         * @param listener The callback to add
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         */
        AddOnGlobalLayoutListener(
            [in] IOnGlobalLayoutListener* listener);

        /**
         * Remove a previously installed global layout callback
         *
         * @param victim The callback to remove
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         *
         * @see #addOnGlobalLayoutListener(OnGlobalLayoutListener)
         */
        RemoveGlobalOnLayoutListener(
            [in] IOnGlobalLayoutListener*  victim);

        /**
         * Register a callback to be invoked when the invoked when it is time to
         * compute the window's internal insets.
         *
         * @param listener The callback to add
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         *
         * We are not yet ready to commit to this API and support it, so
         * @hide
         */
        //AddOnComputeInternalInsetsListener(
        //    [in] IOnComputeInternalInsetsListener* listener);

        /**
         * Remove a previously installed internal insets computation callback
         *
         * @param victim The callback to remove
         *
         * @throws IllegalStateException If {@link #isAlive()} returns false
         *
         * @see #addOnComputeInternalInsetsListener(OnComputeInternalInsetsListener)
         *
         * We are not yet ready to commit to this API and support it, so
         * @hide
         */
        //RemoveOnComputeInternalInsetsListener(
        //    [in] IOnComputeInternalInsetsListener* victim);

        /**
         * Indicates whether this ViewTreeObserver is alive. When an observer is not alive,
         * any call to a method (except this one) will throw an exception.
         *
         * If an application keeps a long-lived reference to this ViewTreeObserver, it should
         * always check for the result of this method before calling any other method.
         *
         * @return True if this object is alive and be used, false otherwise.
         */
        IsAlive(
            [out] Boolean* alive);

        /**
         * Notifies registered listeners that focus has changed.
         */
        DispatchOnGlobalFocusChange(
            [in] IView* oldFocus,
            [in] IView* newFocus);

        /**
         * Notifies registered listeners that a global layout happened. This can be called
         * manually if you are forcing a layout on a View or a hierarchy of Views that are
         * not attached to a Window or in the GONE state.
         */
        DispatchOnGlobalLayout();

        /**
         * Notifies registered listeners that the drawing pass is about to start. If a
         * listener returns true, then the drawing pass is canceled and rescheduled. This can
         * be called manually if you are forcing the drawing on a View or a hierarchy of Views
         * that are not attached to a Window or in the GONE state.
         *
         * @return True if the current draw should be canceled and resceduled, false otherwise.
         */
        DispatchOnPreDraw(
            [out] Boolean* cancelDraw);

        /**
         * Notifies registered listeners that the touch mode has changed.
         *
         * @param inTouchMode True if the touch mode is now enabled, false otherwise.
         */
        DispatchOnTouchModeChanged(
            [in] Boolean inTouchMode);

        /**
         * Notifies registered listeners that something has scrolled.
         */
        DispatchOnScrollChanged();

        /**
         * Returns whether there are listeners for computing internal insets.
         */
        HasComputeInternalInsetsListeners(
            [out] Boolean* has);

        /**
         * Calls all listeners to compute the current insets.
         */
        //DispatchOnComputeInternalInsets(
        //    /* [in] */ InternalInsetsInfo* inoutInfo);
    }
}