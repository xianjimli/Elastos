
module
{
    /**
     * Special value for the height or width requested by a View.
     * FILL_PARENT means that the view wants to be as big as its parent,
     * minus the parent's padding, if any. This value is deprecated
     * starting in API Level 8 and replaced by {@link #MATCH_PARENT}.
     */
    const ViewGroupLayoutParams_FILL_PARENT = -1;

    /**
     * Special value for the height or width requested by a View.
     * MATCH_PARENT means that the view wants to be as big as its parent,
     * minus the parent's padding, if any. Introduced in API Level 8.
     */
    const ViewGroupLayoutParams_MATCH_PARENT = -1;

    /**
     * Special value for the height or width requested by a View.
     * WRAP_CONTENT means that the view wants to be just large enough to fit
     * its own internal content, taking its own padding into account.
     */
    const ViewGroupLayoutParams_WRAP_CONTENT = -2;


    /**
     * This view will get focus before any of its descendants.
     */
    const ViewGroup_FOCUS_BEFORE_DESCENDANTS = 0x20000;

    /**
     * This view will get focus only if none of its descendants want it.
     */
    const ViewGroup_FOCUS_AFTER_DESCENDANTS = 0x40000;

    /**
     * This view will block any of its descendants from getting focus, even
     * if they are focusable.
     */
    const ViewGroup_FOCUS_BLOCK_DESCENDANTS = 0x60000;

    /**
     * Used to indicate that no drawing cache should be kept in memory.
     */
    const ViewGroup_PERSISTENT_NO_CACHE = 0x0;

    /**
     * Used to indicate that the animation drawing cache should be kept in memory.
     */
    const ViewGroup_PERSISTENT_ANIMATION_CACHE = 0x1;

    /**
     * Used to indicate that the scrolling drawing cache should be kept in memory.
     */
    const ViewGroup_PERSISTENT_SCROLLING_CACHE = 0x2;

    /**
     * Used to indicate that all drawing caches should be kept in memory.
     */
    const ViewGroup_PERSISTENT_ALL_CACHES = 0x3;


    interface IDescribable;
    interface IView;
    interface IViewGroupLayoutParams;
    interface IRect;
    interface IAttributeSet;
    interface ILayoutAnimationController;
    interface IAnimationListener;

    /**
     * Interface definition for a callback to be invoked when the hierarchy
     * within this view changed. The hierarchy changes whenever a child is added
     * to or removed from this view.
     */
    interface IViewGroupOnHierarchyChangeListener {
        /**
         * Called when a new child is added to a parent view.
         *
         * @param parent the view in which a child was added
         * @param child the new child view added in the hierarchy
         */
        OnChildViewAdded(
            [in] IView* parent,
            [in] IView* child);

        /**
         * Called when a child is removed from a parent view.
         *
         * @param parent the view from which the child was removed
         * @param child the child removed from the hierarchy
         */
        OnChildViewRemoved(
            [in] IView* parent,
            [in] IView* child);
    }

    interface IViewGroupLayoutParams extends IDescribable {
        SetWidth(
            [in] Int32 width);

        SetHeight(
            [in] Int32 height);

        GetWidth(
            [out] Int32* width);

        GetHeight(
            [out] Int32* height);
    }

    interface IViewGroupMarginLayoutParams extends IViewGroupLayoutParams {
        /**
         * Sets the margins, in pixels.
         *
         * @param left the left margin size
         * @param top the top margin size
         * @param right the right margin size
         * @param bottom the bottom margin size
         *
         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginLeft
         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginTop
         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginRight
         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginBottom
         */
        SetMargins(
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom);

        GetMargins(
            [out] Int32* left,
            [out] Int32* top,
            [out] Int32* right,
            [out] Int32* bottom);
    }

    [deprecated]
    interface IViewGroup extends IView {
        /**
         * Gets the descendant focusability of this view group.  The descendant
         * focusability defines the relationship between this view group and its
         * descendants when looking for a view to take focus in
         * {@link #requestFocus(int, android.graphics.Rect)}.
         *
         * @return one of {@link #FOCUS_BEFORE_DESCENDANTS}, {@link #FOCUS_AFTER_DESCENDANTS},
         *   {@link #FOCUS_BLOCK_DESCENDANTS}.
         */
        GetDescendantFocusability(
            [out] Int32* focusability);

        /**
         * Set the descendant focusability of this view group. This defines the relationship
         * between this view group and its descendants when looking for a view to
         * take focus in {@link #requestFocus(int, android.graphics.Rect)}.
         *
         * @param focusability one of {@link #FOCUS_BEFORE_DESCENDANTS}, {@link #FOCUS_AFTER_DESCENDANTS},
         *   {@link #FOCUS_BLOCK_DESCENDANTS}.
         */
        SetDescendantFocusability(
            [in] Int32 focusability);

        /**
         * Returns the focused child of this view, if any. The child may have focus
         * or contain focus.
         *
         * @return the focused child or null.
         */
        GetFocusedChild(
            [out] IView** focusedChild);

        /**
         * Implement this method to intercept all touch screen motion events.  This
         * allows you to watch events as they are dispatched to your children, and
         * take ownership of the current gesture at any point.
         *
         * <p>Using this function takes some care, as it has a fairly complicated
         * interaction with {@link View#onTouchEvent(MotionEvent)
         * View.onTouchEvent(MotionEvent)}, and using it requires implementing
         * that method as well as this one in the correct way.  Events will be
         * received in the following order:
         *
         * <ol>
         * <li> You will receive the down event here.
         * <li> The down event will be handled either by a child of this view
         * group, or given to your own onTouchEvent() method to handle; this means
         * you should implement onTouchEvent() to return true, so you will
         * continue to see the rest of the gesture (instead of looking for
         * a parent view to handle it).  Also, by returning true from
         * onTouchEvent(), you will not receive any following
         * events in onInterceptTouchEvent() and all touch processing must
         * happen in onTouchEvent() like normal.
         * <li> For as long as you return false from this function, each following
         * event (up to and including the final up) will be delivered first here
         * and then to the target's onTouchEvent().
         * <li> If you return true from here, you will not receive any
         * following events: the target view will receive the same event but
         * with the action {@link MotionEvent#ACTION_CANCEL}, and all further
         * events will be delivered to your onTouchEvent() method and no longer
         * appear here.
         * </ol>
         *
         * @param ev The motion event being dispatched down the hierarchy.
         * @return Return true to steal motion events from the children and have
         * them dispatched to this ViewGroup through onTouchEvent().
         * The current target will receive an ACTION_CANCEL event, and no further
         * messages will be delivered here.
         */
        OnInterceptTouchEvent(
            [in] IMotionEvent* ev,
            [out] Boolean* value);

        /**
         * By default, children are clipped to their bounds before drawing. This
         * allows view groups to override this behavior for animations, etc.
         *
         * @param clipChildren true to clip children to their bounds,
         *        false otherwise
         * @attr ref android.R.styleable#ViewGroup_clipChildren
         */
        SetClipChildren(
            [in] Boolean clipChildren);

        /**
         * By default, children are clipped to the padding of the ViewGroup. This
         * allows view groups to override this behavior
         *
         * @param clipToPadding true to clip children to the padding of the
         *        group, false otherwise
         * @attr ref android.R.styleable#ViewGroup_clipToPadding
         */
        SetClipToPadding(
            [in] Boolean clipToPadding);

        /**
         * Adds a child view. If no layout parameters are already set on the child, the
         * default parameters for this ViewGroup are set on the child.
         *
         * @param child the child view to add
         *
         * @see #generateDefaultLayoutParams()
         */
        AddView(
            [in] IView* child);

        /**
         * Adds a child view. If no layout parameters are already set on the child, the
         * default parameters for this ViewGroup are set on the child.
         *
         * @param child the child view to add
         * @param index the position at which to add the child
         *
         * @see #generateDefaultLayoutParams()
         */
        AddViewEx(
            [in] IView* child,
            [in] Int32 index);

        /**
         * Adds a child view with this ViewGroup's default layout parameters and the
         * specified width and height.
         *
         * @param child the child view to add
         */
        AddViewEx2(
            [in] IView* child,
            [in] Int32 width,
            [in] Int32 height);

        /**
         * Adds a child view with the specified layout parameters.
         *
         * @param child the child view to add
         * @param params the layout parameters to set on the child
         */
        AddViewEx3(
            [in] IView* child,
            [in] IViewGroupLayoutParams* params);

        /**
         * Adds a child view with the specified layout parameters.
         *
         * @param child the child view to add
         * @param index the position at which to add the child
         * @param params the layout parameters to set on the child
         */
        AddViewEx4(
            [in] IView* child,
            [in] Int32 index,
            [in] IViewGroupLayoutParams* params);

        /**
         * Register a callback to be invoked when a child is added to or removed
         * from this view.
         *
         * @param listener the callback to invoke on hierarchy change
         */
        SetOnHierarchyChangeListener(
            [in] IViewGroupOnHierarchyChangeListener* listener);

        /**
         * Removes a view during layout. This is useful if in your onLayout() method,
         * you need to remove more views.
         *
         * @param view the view to remove from the group
         */
        RemoveViewInLayout(
            [in] IView* view);

        /**
         * Removes a range of views during layout. This is useful if in your onLayout() method,
         * you need to remove more views.
         *
         * @param start the index of the first view to remove from the group
         * @param count the number of views to remove from the group
         */
        RemoveViewsInLayout(
            [in] Int32 start,
            [in] Int32 count);

        /**
         * Removes the view at the specified position in the group.
         *
         * @param index the position in the group of the view to remove
         */
        RemoveViewAt(
            [in] Int32 index);

        /**
         * Removes the specified range of views from the group.
         *
         * @param start the first position in the group of the range of views to remove
         * @param count the number of views to remove
         */
        RemoveViews(
            [in] Int32 start,
            [in] Int32 count);

        /**
         * Call this method to remove all child views from the
         * ViewGroup.
         */
        RemoveAllViews();

        /**
         * Called by a ViewGroup subclass to remove child views from itself,
         * when it must first know its size on screen before it can calculate how many
         * child views it will render. An example is a Gallery or a ListView, which
         * may "have" 50 children, but actually only render the number of children
         * that can currently fit inside the object on screen. Do not call
         * this method unless you are extending ViewGroup and understand the
         * view measuring and layout pipeline.
         */
        RemoveAllViewsInLayout();

        /**
         * Offset a rectangle that is in a descendant's coordinate
         * space into our coordinate space.
         * @param descendant A descendant of this view
         * @param rect A rectangle defined in descendant's coordinate space.
         */
        OffsetDescendantRectToMyCoords(
            [in] IView* descendant,
            [in] IRect* rect);

        /**
         * Offset a rectangle that is in our coordinate space into an ancestor's
         * coordinate space.
         * @param descendant A descendant of this view
         * @param rect A rectangle defined in descendant's coordinate space.
         */
        OffsetRectIntoDescendantCoords(
            [in] IView* descendant,
            [in] IRect* rect);

        /**
         * Offset the vertical location of all children of this view by the specified number of pixels.
         *
         * @param offset the number of pixels to offset
         *
         * @hide
         */
        OffsetChildrenTopAndBottom(
            [in] Int32 offset);

        /**
         * Runs the layout animation. Calling this method triggers a relayout of
         * this view group.
         */
        StartLayoutAnimation();

        /**
         * Schedules the layout animation to be played after the next layout pass
         * of this view group. This can be used to restart the layout animation
         * when the content of the view group changes or when the activity is
         * paused and resumed.
         */
        ScheduleLayoutAnimation();

        /**
         * Sets the layout animation controller used to animate the group's
         * children after the first layout.
         *
         * @param controller the animation controller
         */
        SetLayoutAnimation(
            [in] ILayoutAnimationController* controller);

        /**
         * Returns the layout animation controller used to animate the group's
         * children.
         *
         * @return the current animation controller
         */
        GetLayoutAnimation(
            [out] ILayoutAnimationController** controller);

        /**
         * Indicates whether the children's drawing cache is used during a layout
         * animation. By default, the drawing cache is enabled but this will prevent
         * nested layout animations from working. To nest animations, you must disable
         * the cache.
         *
         * @return true if the animation cache is enabled, false otherwise
         *
         * @see #setAnimationCacheEnabled(boolean)
         * @see View#setDrawingCacheEnabled(boolean)
         */
        IsAnimationCacheEnabled(
            [out] Boolean* enabled);

        /**
         * Enables or disables the children's drawing cache during a layout animation.
         * By default, the drawing cache is enabled but this will prevent nested
         * layout animations from working. To nest animations, you must disable the
         * cache.
         *
         * @param enabled true to enable the animation cache, false otherwise
         *
         * @see #isAnimationCacheEnabled()
         * @see View#setDrawingCacheEnabled(boolean)
         */
        SetAnimationCacheEnabled(
            [in] Boolean enabled);

        /**
         * Indicates whether this ViewGroup will always try to draw its children using their
         * drawing cache. By default this property is enabled.
         *
         * @return true if the animation cache is enabled, false otherwise
         *
         * @see #setAlwaysDrawnWithCacheEnabled(boolean)
         * @see #setChildrenDrawnWithCacheEnabled(boolean)
         * @see View#setDrawingCacheEnabled(boolean)
         */
        IsAlwaysDrawnWithCacheEnabled(
            [out] Boolean* always);

        /**
         * Indicates whether this ViewGroup will always try to draw its children using their
         * drawing cache. This property can be set to true when the cache rendering is
         * slightly different from the children's normal rendering. Renderings can be different,
         * for instance, when the cache's quality is set to low.
         *
         * When this property is disabled, the ViewGroup will use the drawing cache of its
         * children only when asked to. It's usually the task of subclasses to tell ViewGroup
         * when to start using the drawing cache and when to stop using it.
         *
         * @param always true to always draw with the drawing cache, false otherwise
         *
         * @see #isAlwaysDrawnWithCacheEnabled()
         * @see #setChildrenDrawnWithCacheEnabled(boolean)
         * @see View#setDrawingCacheEnabled(boolean)
         * @see View#setDrawingCacheQuality(int)
         */
        SetAlwaysDrawnWithCacheEnabled(
            [in] Boolean always);

        /**
         * Returns an integer indicating what types of drawing caches are kept in memory.
         *
         * @see #setPersistentDrawingCache(int)
         * @see #setAnimationCacheEnabled(boolean)
         *
         * @return one or a combination of {@link #PERSISTENT_NO_CACHE},
         *         {@link #PERSISTENT_ANIMATION_CACHE}, {@link #PERSISTENT_SCROLLING_CACHE}
         *         and {@link #PERSISTENT_ALL_CACHES}
         */
        GetPersistentDrawingCache(
            [out] Int32* drawingCacheToKeep);

        /**
         * Indicates what types of drawing caches should be kept in memory after
         * they have been created.
         *
         * @see #getPersistentDrawingCache()
         * @see #setAnimationCacheEnabled(boolean)
         *
         * @param drawingCacheToKeep one or a combination of {@link #PERSISTENT_NO_CACHE},
         *        {@link #PERSISTENT_ANIMATION_CACHE}, {@link #PERSISTENT_SCROLLING_CACHE}
         *        and {@link #PERSISTENT_ALL_CACHES}
         */
        SetPersistentDrawingCache(
            [in] Int32 drawingCacheToKeep);

        /**
         * Returns a new set of layout parameters based on the supplied attributes set.
         *
         * @param attrs the attributes to build the layout parameters from
         *
         * @return an instance of {@link android.view.ViewGroup.LayoutParams} or one
         *         of its descendants
         */
        GenerateLayoutParams(
            [in] IAttributeSet* attrs,
            [out] IViewGroupLayoutParams** layoutParams);

        /**
         * Returns the position in the group of the specified child view.
         *
         * @param child the view for which to get the position
         * @return a positive integer representing the position of the view in the
         *         group, or -1 if the view does not exist in the group
         */
        IndexOfChild(
            [in] IView* child,
            [out] Int32* index);

        /**
         * Returns the number of children in the group.
         *
         * @return a positive integer representing the number of children in
         *         the group
         */
        GetChildCount(
            [out] Int32* count);

        /**
         * Returns the view at the specified position in the group.
         *
         * @param index the position at which to get the view from
         * @return the view at the specified position or null if the position
         *         does not exist within the group
         */
        GetChildAt(
            [in] Int32 index,
            [out] IView** child);

        /**
         * Removes any pending animations for views that have been removed. Call
         * this if you don't want animations for exiting views to stack up.
         */
        ClearDisappearingChildren();

        /**
         * Returns the animation listener to which layout animation events are
         * sent.
         *
         * @return an {@link android.view.animation.Animation.AnimationListener}
         */
        GetLayoutAnimationListener(
            [out] IAnimationListener** listener);

        /**
         * Sets whether this ViewGroup's drawable states also include
         * its children's drawable states.  This is used, for example, to
         * make a group appear to be focused when its child EditText or button
         * is focused.
         */
        SetAddStatesFromChildren(
            [in] Boolean addsStates);

        /**
         * Returns whether this ViewGroup's drawable states also include
         * its children's drawable states.  This is used, for example, to
         * make a group appear to be focused when its child EditText or button
         * is focused.
         */
        AddStatesFromChildren(
            [out] Boolean* drawable);

        /**
         * Specifies the animation listener to which layout animation events must
         * be sent. Only
         * {@link android.view.animation.Animation.AnimationListener#onAnimationStart(Animation)}
         * and
         * {@link android.view.animation.Animation.AnimationListener#onAnimationEnd(Animation)}
         * are invoked.
         *
         * @param animationListener the layout animation listener
         */
        SetLayoutAnimationListener(
            [in] IAnimationListener* animationListener);
    }
}
