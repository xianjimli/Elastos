
module
{
    interface ILayoutAnimationController;

    /**
     * Animates the children starting from the left of the grid to the right.
     */
    const GridLayoutAnimationController_DIRECTION_LEFT_TO_RIGHT = 0x0;

    /**
     * Animates the children starting from the right of the grid to the left.
     */
    const GridLayoutAnimationController_DIRECTION_RIGHT_TO_LEFT = 0x1;

    /**
     * Animates the children starting from the top of the grid to the bottom.
     */
    const GridLayoutAnimationController_DIRECTION_TOP_TO_BOTTOM = 0x0;

    /**
     * Animates the children starting from the bottom of the grid to the top.
     */
    const GridLayoutAnimationController_DIRECTION_BOTTOM_TO_TOP = 0x2;

    /**
     * Bitmask used to retrieve the horizontal component of the direction.
     */
    const GridLayoutAnimationController_DIRECTION_HORIZONTAL_MASK = 0x1;

    /**
     * Bitmask used to retrieve the vertical component of the direction.
     */
    const GridLayoutAnimationController_DIRECTION_VERTICAL_MASK   = 0x2;

    /**
     * Rows and columns are animated at the same time.
     */
    const GridLayoutAnimationController_PRIORITY_NONE   = 0;

    /**
     * Columns are animated first.
     */
    const GridLayoutAnimationController_PRIORITY_COLUMN = 1;

    /**
     * Rows are animated first.
     */
    const GridLayoutAnimationController_PRIORITY_ROW    = 2;

    interface IGridLayoutAnimationController extends ILayoutAnimationController {
        /**
         * Returns the delay by which the children's animation are offset from one
         * column to the other. The delay is expressed as a fraction of the
         * animation duration.
         *
         * @return a fraction of the animation duration
         *
         * @see #setColumnDelay(Float)
         * @see #getRowDelay()
         * @see #setRowDelay(Float)
         */
        GetColumnDelay(
            [out] Float* columnDelay);

        /**
         * Sets the delay, as a fraction of the animation duration, by which the
         * children's animations are offset from one column to the other.
         *
         * @param columnDelay a fraction of the animation duration
         *
         * @see #getColumnDelay()
         * @see #getRowDelay()
         * @see #setRowDelay(Float)
         */
        SetColumnDelay(
            [in] Float columnDelay);

        /**
         * Returns the delay by which the children's animation are offset from one
         * row to the other. The delay is expressed as a fraction of the
         * animation duration.
         *
         * @return a fraction of the animation duration
         *
         * @see #setRowDelay(Float)
         * @see #getColumnDelay()
         * @see #setColumnDelay(Float)
         */
        GetRowDelay(
            [out] Float* rowDelay);

        /**
         * Sets the delay, as a fraction of the animation duration, by which the
         * children's animations are offset from one row to the other.
         *
         * @param rowDelay a fraction of the animation duration
         *
         * @see #getRowDelay()
         * @see #getColumnDelay()
         * @see #setColumnDelay(Float) 
         */
        SetRowDelay(
            [in] Float rowDelay);

        /**
         * Returns the direction of the animation. {@link #GridLayoutAnimationController_DIRECTION_HORIZONTAL_MASK}
         * and {@link #DIRECTION_VERTICAL_MASK} can be used to retrieve the
         * horizontal and vertical components of the direction.
         *
         * @return the direction of the animation
         *
         * @see #setDirection(Int32)
         * @see #DIRECTION_BOTTOM_TO_TOP
         * @see #DIRECTION_TOP_TO_BOTTOM
         * @see #DIRECTION_LEFT_TO_RIGHT
         * @see #GridLayoutAnimationController_DIRECTION_RIGHT_TO_LEFT
         * @see #GridLayoutAnimationController_DIRECTION_HORIZONTAL_MASK
         * @see #DIRECTION_VERTICAL_MASK
         */
        GetDirection(
            [out] Int32* direction);

        /**
         * Sets the direction of the animation. The direction is expressed as an
         * integer containing a horizontal and vertical component. For instance,
         * <code>DIRECTION_BOTTOM_TO_TOP | GridLayoutAnimationController_DIRECTION_RIGHT_TO_LEFT</code>.
         *
         * @param direction the direction of the animation
         *
         * @see #getDirection()
         * @see #DIRECTION_BOTTOM_TO_TOP
         * @see #DIRECTION_TOP_TO_BOTTOM
         * @see #DIRECTION_LEFT_TO_RIGHT
         * @see #GridLayoutAnimationController_DIRECTION_RIGHT_TO_LEFT
         * @see #GridLayoutAnimationController_DIRECTION_HORIZONTAL_MASK
         * @see #DIRECTION_VERTICAL_MASK
         */
        SetDirection(
            [in] Int32 direction);

        /**
         * Returns the direction priority for the animation. The priority can
         * be either {@link #GridLayoutAnimationController_PRIORITY_NONE}, {@link #GridLayoutAnimationController_PRIORITY_COLUMN} or
         * {@link #GridLayoutAnimationController_PRIORITY_ROW}.
         *
         * @return the priority of the animation direction
         *
         * @see #setDirectionPriority(Int32)
         * @see #GridLayoutAnimationController_PRIORITY_COLUMN
         * @see #GridLayoutAnimationController_PRIORITY_NONE
         * @see #GridLayoutAnimationController_PRIORITY_ROW
         */
        GetDirectionPriority(
            [out] Int32* directionPriority);

        /**
         * Specifies the direction priority of the animation. For instance,
         * {@link #GridLayoutAnimationController_PRIORITY_COLUMN} will give priority to columns: the animation
         * will first play on the column, then on the rows.Z
         *
         * @param directionPriority the direction priority of the animation
         *
         * @see #getDirectionPriority()
         * @see #GridLayoutAnimationController_PRIORITY_COLUMN
         * @see #GridLayoutAnimationController_PRIORITY_NONE
         * @see #GridLayoutAnimationController_PRIORITY_ROW
         */
        SetDirectionPriority(
            [in] Int32 directionPriority);
    }
}
