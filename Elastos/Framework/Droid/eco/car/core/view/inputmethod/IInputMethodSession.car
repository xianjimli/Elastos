
module
{
	interface IRect;
	interface IObjectContainer;
	interface IExtractedText;
	interface IKeyEvent;
	interface IKeyEventCallback;
	interface IMotionEvent;
	interface IBundle;


    interface IInputMethodSession {
	    /**
	     * This method is called when the application would like to stop
	     * receiving text input.
	     */
	    FinishInput();

	    /**
	     * This method is called when the selection or cursor in the current
	     * target input field has changed.
	     *
	     * @param oldSelStart The previous text offset of the cursor selection
	     * start position.
	     * @param oldSelEnd The previous text offset of the cursor selection
	     * end position.
	     * @param newSelStart The new text offset of the cursor selection
	     * start position.
	     * @param newSelEnd The new text offset of the cursor selection
	     * end position.
	     * @param candidatesStart The text offset of the current candidate
	     * text start position.
	     * @param candidatesEnd The text offset of the current candidate
	     * text end position.
	     */
	    UpdateSelection(
	    	[in] Int32 oldSelStart,
	    	[in] Int32 oldSelEnd,
	        [in] Int32 newSelStart,
	        [in] Int32 newSelEnd,
	        [in] Int32 candidatesStart,
	        [in] Int32 candidatesEnd);

	    /**
	     * This method is called when cursor location of the target input field
	     * has changed within its window.  This is not normally called, but will
	     * only be reported if requested by the input method.
	     *
	     * @param newCursor The rectangle of the cursor currently being shown in
	     * the input field's window coordinates.
	     */
	    UpdateCursor(
	    	[in] IRect* newCursor);

	    /**
	     * Called by a text editor that performs auto completion, to tell the
	     * input method about the completions it has available.  This can be used
	     * by the input method to display them to the user to select the text to
	     * be inserted.
	     *
	     * @param completions Array of text completions that are available, starting with
	     * the best.  If this array is null, any existing completions will be
	     * removed.
	     */
	    DisplayCompletions(
	    	[in] IObjectContainer* completions);

	    /**
	     * Called by a text editor to report its new extracted text when its
	     * contents change.  This will only be called if the input method
	     * calls {@link InputConnection#getExtractedText(ExtractedTextRequest, int)
	     * InputConnection.getExtractedText()} with the option to report updates.
	     *
	     * @param token The input method supplied token for identifying its request.
	     * @param text The new extracted text.
	     */
	    UpdateExtractedText(
	    	[in] Int32 token,
	    	[in] IExtractedText* text);

	    /**
	     * This method is called when a key is pressed.  When done with the event,
	     * the implementation must call back on <var>callback</var> with its
	     * result.
	     *
	     * <p>
	     * If the input method wants to handle this event, return true, otherwise
	     * return false and the caller (i.e. the application) will handle the event.
	     *
	     * @param event The key event.
	     *
	     * @return Whether the input method wants to handle this event.
	     *
	     * @see #dispatchKeyUp
	     * @see android.view.KeyEvent
	     */
	    DispatchKeyEvent(
	    	[in] Int32 seq,
	    	[in] IKeyEvent* event,
	    	[in] IKeyEventCallback* clback);

	    /**
	     * This method is called when there is a track ball event.
	     *
	     * <p>
	     * If the input method wants to handle this event, return true, otherwise
	     * return false and the caller (i.e. the application) will handle the event.
	     *
	     * @param event The motion event.
	     *
	     * @return Whether the input method wants to handle this event.
	     *
	     * @see android.view.MotionEvent
	     */
	    DispatchTrackballEvent(
	    	[in] Int32 seq,
	    	[in] IMotionEvent* event,
	    	[in] IKeyEventCallback* clback);

	    /**
	     * Process a private command sent from the application to the input method.
	     * This can be used to provide domain-specific features that are
	     * only known between certain input methods and their clients.
	     *
	     * @param action Name of the command to be performed.  This <em>must</em>
	     * be a scoped name, i.e. prefixed with a package name you own, so that
	     * different developers will not create conflicting commands.
	     * @param data Any data to include with the command.
	     */
	    AppPrivateCommand(
	    	[in] String action,
	    	[in] IBundle* data);

	    /**
	     * Toggle the soft input window.
	     * Applications can toggle the state of the soft input window.
	     * @param showFlags Provides additional operating flags.  May be
	     * 0 or have the {@link InputMethodManager#SHOW_IMPLICIT},
	     * {@link InputMethodManager#SHOW_FORCED} bit set.
	     * @param hideFlags Provides additional operating flags.  May be
	     * 0 or have the {@link  InputMethodManager#HIDE_IMPLICIT_ONLY},
	     * {@link  InputMethodManager#HIDE_NOT_ALWAYS} bit set.
	     */
	    ToggleSoftInput(
	    	[in] Int32 showFlags,
	    	[in] Int32 hideFlags);
    }
}
