
module
{
    interface IInputMethodClientStub;
    interface IContext;
    interface IInputMethodInfo;
    interface IApartment;
    interface IBinder;
    interface IView;
    interface IInputConnection;
    interface ICompletionInfo;
    interface IExtractedText;
    interface IBundle;
    interface IKeyEvent;
    interface IInputMethodCallback;
    interface IResultReceiver;
    interface IInputContextStub;


    /**
     * Flag for {@link #showSoftInput} to indicate that this is an implicit
     * request to show the input window, not as the result of a direct request
     * by the user.  The window may not be shown in this case.
     */
    const InputMethodManager_SHOW_IMPLICIT = 0x0001;

    /**
     * Flag for {@link #showSoftInput} to indicate that the user has forced
     * the input method open (such as by long-pressing menu) so it should
     * not be closed until they explicitly do so.
     */
    const InputMethodManager_SHOW_FORCED = 0x0002;

    /**
     * Flag for the {@link ResultReceiver} result code from
     * {@link #showSoftInput(View, int, ResultReceiver)} and
     * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
     * state of the soft input window was unchanged and remains shown.
     */
    const InputMethodManager_RESULT_UNCHANGED_SHOWN = 0;

    /**
     * Flag for the {@link ResultReceiver} result code from
     * {@link #showSoftInput(View, int, ResultReceiver)} and
     * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
     * state of the soft input window was unchanged and remains hidden.
     */
    const InputMethodManager_RESULT_UNCHANGED_HIDDEN = 1;

    /**
     * Flag for the {@link ResultReceiver} result code from
     * {@link #showSoftInput(View, int, ResultReceiver)} and
     * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
     * state of the soft input window changed from hidden to shown.
     */
    const InputMethodManager_RESULT_SHOWN = 2;

    /**
     * Flag for the {@link ResultReceiver} result code from
     * {@link #showSoftInput(View, int, ResultReceiver)} and
     * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
     * state of the soft input window changed from shown to hidden.
     */
    const InputMethodManager_RESULT_HIDDEN = 3;

    /**
     * Flag for {@link #hideSoftInputFromWindow} to indicate that the soft
     * input window should only be hidden if it was not explicitly shown
     * by the user.
     */
    const InputMethodManager_HIDE_IMPLICIT_ONLY = 0x0001;

    /**
     * Flag for {@link #hideSoftInputFromWindow} to indicate that the soft
     * input window should normally be hidden, unless it was originally
     * shown with {@link #SHOW_FORCED}.
     */
    const InputMethodManager_HIDE_NOT_ALWAYS = 0x0002;


    [deprecated]
    interface ILocalInputMethodManager {
        /** @hide */
        GetClient(
            [out] IInputMethodClientStub** client);

        /** @hide */
        GetInputContext(
            [out] IInputContextStub** context);

        GetInputMethodList(
            [out] IObjectContainer** infos);

        GetEnabledInputMethodList(
            [out] IObjectContainer** infos);

        ShowStatusIcon(
            [in] IBinder* imeToken,
            [in] String capsuleName,
            [in] Int32 iconId);

        HideStatusIcon(
            [in] IBinder* imeToken);

        /** @hide */
        SetFullscreenMode(
            [in] Boolean fullScreen);

        /**
         * Allows you to discover whether the attached input method is running
         * in fullscreen mode.  Return true if it is fullscreen, entirely covering
         * your UI, else returns false.
         */
        IsFullscreenMode(
            [out] Boolean* mode);

        /**
         * Return true if the given view is the currently active view for the
         * input method.
         */
        IsActive(
            [in] IView* view,
            [out] Boolean* active);

        /**
         * Return true if any view is currently active in the input method.
         */
        IsActiveEx(
            [out] Boolean* active);

        /**
         * Return true if the currently served view is accepting full text edits.
         * If false, it has no input connection, so can only handle raw key events.
         */
        IsAcceptingText(
            [out] Boolean* accept);

        /**
         * Called from the FINISH_INPUT_CONNECTION message above.
         * @hide
         */
        ReportFinishInputConnection(
            [in] IInputConnection* ic);

        DisplayCompletions(
            [in] IView* view,
            [in] ArrayOf<ICompletionInfo*>* completions);

        UpdateExtractedText(
            [in] IView* view,
            [in] Int32 token,
            [in] IExtractedText* text);

        /**
         * Synonym for {@link #showSoftInput(View, int, ResultReceiver)} without
         * a result receiver: explicitly request that the current input method's
         * soft input area be shown to the user, if needed.
         *
         * @param view The currently focused view, which would like to receive
         * soft keyboard input.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #SHOW_IMPLICIT} bit set.
         */
        ShowSoftInput(
            [in] IView* view,
            [in] Int32 flags,
            [out] Boolean* ret);

        /**
         * Explicitly request that the current input method's soft input area be
         * shown to the user, if needed.  Call this if the user interacts with
         * your view in such a way that they have expressed they would like to
         * start performing input into it.
         *
         * @param view The currently focused view, which would like to receive
         * soft keyboard input.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #SHOW_IMPLICIT} bit set.
         * @param resultReceiver If non-null, this will be called by the IME when
         * it has processed your request to tell you what it has done.  The result
         * code you receive may be either {@link #RESULT_UNCHANGED_SHOWN},
         * {@link #RESULT_UNCHANGED_HIDDEN}, {@link #RESULT_SHOWN}, or
         * {@link #RESULT_HIDDEN}.
         */
        ShowSoftInputEx(
            [in] IView* view,
            [in] Int32 flags,
            [in] IResultReceiver* resultReceiver,
            [out] Boolean* ret);

        /** @hide */
        ShowSoftInputUnchecked(
            [in] Int32 flags,
            [in] IResultReceiver* resultReceiver);

        /**
         * Synonym for {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)
         * without a result: request to hide the soft input window from the
         * context of the window that is currently accepting input.
         *
         * @param windowToken The token of the window that is making the request,
         * as returned by {@link View#getWindowToken() View.getWindowToken()}.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #HIDE_IMPLICIT_ONLY} bit set.
         */
        HideSoftInputFromWindow(
            [in] IBinder* windowToken,
            [in] Int32 flags,
            [out] Boolean* ret);

        /**
         * Request to hide the soft input window from the context of the window
         * that is currently accepting input.  This should be called as a result
         * of the user doing some actually than fairly explicitly requests to
         * have the input window hidden.
         *
         * @param windowToken The token of the window that is making the request,
         * as returned by {@link View#getWindowToken() View.getWindowToken()}.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #HIDE_IMPLICIT_ONLY} bit set.
         * @param resultReceiver If non-null, this will be called by the IME when
         * it has processed your request to tell you what it has done.  The result
         * code you receive may be either {@link #RESULT_UNCHANGED_SHOWN},
         * {@link #RESULT_UNCHANGED_HIDDEN}, {@link #RESULT_SHOWN}, or
         * {@link #RESULT_HIDDEN}.
         */
        HideSoftInputFromWindowEx(
            [in] IBinder* windowToken,
            [in] Int32 flags,
            [in] IResultReceiver* resultReceiver,
            [out] Boolean* ret);

        /**
         * This method toggles the input method window display.
         * If the input window is already displayed, it gets hidden.
         * If not the input window will be displayed.
         * @param windowToken The token of the window that is making the request,
         * as returned by {@link View#getWindowToken() View.getWindowToken()}.
         * @param showFlags Provides additional operating flags.  May be
         * 0 or have the {@link #SHOW_IMPLICIT},
         * {@link #SHOW_FORCED} bit set.
         * @param hideFlags Provides additional operating flags.  May be
         * 0 or have the {@link #HIDE_IMPLICIT_ONLY},
         * {@link #HIDE_NOT_ALWAYS} bit set.
         **/
        ToggleSoftInputFromWindow(
            [in] IBinder* windowToken,
            [in] Int32 showFlags,
            [in] Int32 hideFlags);

        /*
         * This method toggles the input method window display.
         * If the input window is already displayed, it gets hidden.
         * If not the input window will be displayed.
         * @param showFlags Provides additional operating flags.  May be
         * 0 or have the {@link #SHOW_IMPLICIT},
         * {@link #SHOW_FORCED} bit set.
         * @param hideFlags Provides additional operating flags.  May be
         * 0 or have the {@link #HIDE_IMPLICIT_ONLY},
         * {@link #HIDE_NOT_ALWAYS} bit set.
         * @hide
         */
        ToggleSoftInput(
            [in] Int32 showFlags,
            [in] Int32 hideFlags);

        /**
         * If the input method is currently connected to the given view,
         * restart it with its new contents.  You should call this when the text
         * within your view changes outside of the normal input method or key
         * input flow, such as when an application calls TextView.setText().
         *
         * @param view The view whose text has changed.
         */
        RestartInput(
            [in] IView* view);

        /**
         * When the focused window is dismissed, this method is called to finish the
         * input method started before.
         * @hide
         */
        WindowDismissed(
            [in] IBinder* appWindowToken);

        /**
         * Call this when a view receives focus.
         * @hide
         */
        FocusIn(
            [in] IView* view);

        /**
         * Call this when a view loses focus.
         * @hide
         */
        FocusOut(
            [in] IView* view);

        /**
         * @hide
         */
        CheckFocus();

        /**
         * Called by ViewRoot when its window gets input focus.
         * @hide
         */
        OnWindowFocus(
            [in] IView* rootView,
            [in] IView* focusedView,
            [in] Int32 softInputMode,
            [in] Boolean first,
            [in] Int32 windowFlags);

        /** @hide */
        StartGettingWindowFocus(
            [in] IView* rootView);

        /**
         * Report the current selection range.
         */
        UpdateSelection(
            [in] IView* view,
            [in] Int32 selStart,
            [in] Int32 selEnd,
            [in] Int32 candidatesStart,
            [in] Int32 candidatesEnd);

        /**
         * Returns true if the current input method wants to watch the location
         * of the input editor's cursor in its window.
         */
        IsWatchingCursor(
            [in] IView* view,
            [out] Boolean* ret);

        /**
         * Report the current cursor location in its window.
         */
        UpdateCursor(
            [in] IView* view,
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom);

        /**
         * Call {@link InputMethodSession#appPrivateCommand(String, Bundle)
         * InputMethodSession.appPrivateCommand()} on the current Input Method.
         * @param view Optional View that is sending the command, or null if
         * you want to send the command regardless of the view that is attached
         * to the input method.
         * @param action Name of the command to be performed.  This <em>must</em>
         * be a scoped name, i.e. prefixed with a package name you own, so that
         * different developers will not create conflicting commands.
         * @param data Any data to include with the command.
         */
        SendAppPrivateCommand(
            [in] IView* view,
            [in] String action,
            [in] IBundle* data);

        /**
         * Force switch to a new input method component.  This can only be called
         * from the currently active input method, as validated by the given token.
         * @param token Supplies the identifying token given to an input method
         * when it was started, which allows it to perform this operation on
         * itself.
         * @param id The unique identifier for the new input method to be switched to.
         */
        SetInputMethod(
            [in] IBinder* token,
            [in] String id);

        /**
         * Close/hide the input method's soft input area, so the user no longer
         * sees it or can interact with it.  This can only be called
         * from the currently active input method, as validated by the given token.
         *
         * @param token Supplies the identifying token given to an input method
         * when it was started, which allows it to perform this operation on
         * itself.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #HIDE_IMPLICIT_ONLY},
         * {@link #HIDE_NOT_ALWAYS} bit set.
         */
        HideSoftInputFromInputMethod(
            [in] IBinder* token,
            [in] Int32 flags);

        /**
         * Show the input method's soft input area, so the user
         * sees the input method window and can interact with it.
         * This can only be called from the currently active input method,
         * as validated by the given token.
         *
         * @param token Supplies the identifying token given to an input method
         * when it was started, which allows it to perform this operation on
         * itself.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #SHOW_IMPLICIT} or
         * {@link #SHOW_FORCED} bit set.
         */
        ShowSoftInputFromInputMethod(
            [in] IBinder* token,
            [in] Int32 flags);

        /**
         * @hide
         */
        DispatchKeyEvent(
            [in] IContext* context,
            [in] Int32 seq,
            [in] IKeyEvent* key,
            [in] IInputMethodCallback* cback);

        ShowInputMethodPicker();
    }
}
