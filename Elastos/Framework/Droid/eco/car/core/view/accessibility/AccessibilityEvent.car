
module
{
    /**
     * Invalid selection/focus position.
     *
     * @see #getCurrentItemIndex()
     */
    const AccessibilityEvent_INVALID_POSITION = -1;

    /**
     * Maximum length of the text fields.
     *
     * @see #getBeforeText()
     * @see #getText()
     */
    const AccessibilityEvent_MAX_TEXT_LENGTH = 500;

    /**
     * Represents the event of clicking on a {@link android.view.View} like
     * {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.
     */
    const AccessibilityEvent_TYPE_VIEW_CLICKED = 0x00000001;

    /**
     * Represents the event of long clicking on a {@link android.view.View} like
     * {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.
     */
    const AccessibilityEvent_TYPE_VIEW_LONG_CLICKED = 0x00000002;

    /**
     * Represents the event of selecting an item usually in the context of an
     * {@link android.widget.AdapterView}.
     */
    const AccessibilityEvent_TYPE_VIEW_SELECTED = 0x00000004;

    /**
     * Represents the event of focusing a {@link android.view.View}.
     */
    const AccessibilityEvent_TYPE_VIEW_FOCUSED = 0x00000008;

    /**
     * Represents the event of changing the text of an {@link android.widget.EditText}.
     */
    const AccessibilityEvent_TYPE_VIEW_TEXT_CHANGED = 0x00000010;

    /**
     * Represents the event of opening/closing a {@link android.widget.PopupWindow},
     * {@link android.view.Menu}, {@link android.app.Dialog}, etc.
     */
    const AccessibilityEvent_TYPE_WINDOW_STATE_CHANGED = 0x00000020;

    /**
     * Represents the event showing/hiding a {@link android.app.Notification}.
     */
    const AccessibilityEvent_TYPE_NOTIFICATION_STATE_CHANGED = 0x00000040;

    /**
     *Mask for {@link AccessibilityEvent} all types.
     *
     * @see #TYPE_VIEW_CLICKED
     * @see #TYPE_VIEW_LONG_CLICKED
     * @see #TYPE_VIEW_SELECTED
     * @see #TYPE_VIEW_FOCUSED
     * @see #TYPE_VIEW_TEXT_CHANGED
     * @see #TYPE_WINDOW_STATE_CHANGED
     * @see #TYPE_NOTIFICATION_STATE_CHANGED
     */
    const AccessibilityEvent_TYPES_ALL_MASK = 0xFFFFFFFF;

    interface IAccessibilityEvent {
        /**
         * Gets if the source is checked.
         *
         * @return True if the view is checked, false otherwise.
         */
        IsChecked(
            [out] Boolean* isChecked);

        /**
         * Sets if the source is checked.
         *
         * @param isChecked True if the view is checked, false otherwise.
         */
        SetChecked(
            [in] Boolean isChecked);

        /**
         * Gets if the source is enabled.
         *
         * @return True if the view is enabled, false otherwise.
         */
        IsEnabled(
            [out] Boolean* isEnabled);

        /**
         * Sets if the source is enabled.
         *
         * @param isEnabled True if the view is enabled, false otherwise.
         */
        SetEnabled(
            [in] Boolean isEnabled);

        /**
         * Gets if the source is a password field.
         *
         * @return True if the view is a password field, false otherwise.
         */
        IsPassword(
            [out] Boolean* isPassword);

        /**
         * Sets if the source is a password field.
         *
         * @param isPassword True if the view is a password field, false otherwise.
         */
        SetPassword(
            [in] Boolean isPassword);

        /**
         * Sets if the source is taking the entire screen.
         *
         * @param isFullScreen True if the source is full screen, false otherwise.
         */
        SetFullScreen(
            [in] Boolean isFullScreen);

        /**
         * Gets if the source is taking the entire screen.
         *
         * @return True if the source is full screen, false otherwise.
         */
        IsFullScreen(
            [out] Boolean* isFullScreen);

        /**
         * Gets the event type.
         *
         * @return The event type.
         */
        GetEventType(
            [out] Int32* eventType);

        /**
         * Sets the event type.
         *
         * @param eventType The event type.
         */
        SetEventType(
            [in] Int32 eventType);

        /**
         * Gets the number of items that can be visited.
         *
         * @return The number of items.
         */
        GetItemCount(
            [out] Int32* itemCount);

        /**
         * Sets the number of items that can be visited.
         *
         * @param itemCount The number of items.
         */
        SetItemCount(
            [in] Int32 itemCount);

        /**
         * Gets the index of the source in the list of items the can be visited.
         *
         * @return The current item index.
         */
        GetCurrentItemIndex(
            [out] Int32* index);

        /**
         * Sets the index of the source in the list of items that can be visited.
         *
         * @param currentItemIndex The current item index.
         */
        SetCurrentItemIndex(
            [in] Int32 currentItemIndex);

        /**
         * Gets the index of the first character of the changed sequence.
         *
         * @return The index of the first character.
         */
        GetFromIndex(
            [out] Int32* index);

        /**
         * Sets the index of the first character of the changed sequence.
         *
         * @param fromIndex The index of the first character.
         */
        SetFromIndex(
            [in] Int32 fromIndex);

        /**
         * Gets the number of added characters.
         *
         * @return The number of added characters.
         */
        GetAddedCount(
            [out] Int32* count);

        /**
         * Sets the number of added characters.
         *
         * @param addedCount The number of added characters.
         */
        SetAddedCount(
            [in] Int32 addedCount);

        /**
         * Gets the number of removed characters.
         *
         * @return The number of removed characters.
         */
        GetRemovedCount(
            [out] Int32* count);

        /**
         * Sets the number of removed characters.
         *
         * @param removedCount The number of removed characters.
         */
        SetRemovedCount(
            [in] Int32 removedCount);

        /**
         * Gets the time in which this event was sent.
         *
         * @return The event time.
         */
        GetEventTime(
            [out] Int64* eventTime);

        /**
         * Sets the time in which this event was sent.
         *
         * @param eventTime The event time.
         */
        SetEventTime(
            [in] Int64 eventTime);

        /**
         * Gets the class name of the source.
         *
         * @return The class name.
         */
        GetClassName(
            [out] ICharSequence** className);

        /**
         * Sets the class name of the source.
         *
         * @param className The lass name.
         */
        SetClassName(
            [in] ICharSequence* className);

        /**
         * Gets the package name of the source.
         *
         * @return The package name.
         */
        GetCapsuleName(
            [out] ICharSequence** capsuleName);

        /**
         * Sets the package name of the source.
         *
         * @param packageName The package name.
         */
        SetCapsuleName(
            [in] ICharSequence* capsuleName);

        /**
         * Gets the text of the event. The index in the list represents the priority
         * of the text. Specifically, the lower the index the higher the priority.
         *
         * @return The text.
         */
        GetText(
            [out] IObjectContainer** container);

        /**
         * Sets the text before a change.
         *
         * @return The text before the change.
         */
        GetBeforeText(
            [out] ICharSequence** beforeText);

        /**
         * Sets the text before a change.
         *
         * @param beforeText The text before the change.
         */
        SetBeforeText(
            [in] ICharSequence* beforeText);

        /**
         * Gets the description of the source.
         *
         * @return The description.
         */
        GetContentDescription(
            [out] ICharSequence** contentDescription);

        /**
         * Sets the description of the source.
         *
         * @param contentDescription The description.
         */
        SetContentDescription(
            [in] ICharSequence* contentDescription);

        /**
         * Gets the {@link Parcelable} data.
         *
         * @return The parcelable data.
         */
        GetParcelableData(
            [out] IParcelable** parcelableData);
        /**
         * Sets the {@link Parcelable} data of the event.
         *
         * @param parcelableData The parcelable data.
         */
        SetParcelableData(
            [in] IParcelable* parcelableData);

        /**
         * Return an instance back to be reused.
         * <p>
         * <b>Note: You must not touch the object after calling this function.</b>
         */
        Recycle();

        /**
         * Creates a new instance from a {@link Parcel}.
         *
         * @param parcel A parcel containing the state of a {@link AccessibilityEvent}.
         */
        InitFromParcel(
            [in] IParcel* parcel);

        DescribeContents(
            [out] Int32* describeContents);
    }

    interface IAccessibilityEventHelper {
        /**
         * Returns a cached instance if such is available or a new one is
         * instantiated with type property set.
         *
         * @param eventType The event type.
         * @return An instance.
         */
        Obtain(
            [in] Int32 eventType,
            [out] IAccessibilityEvent** event);

        /**
         * Returns a cached instance if such is available or a new one is
         * instantiated.
         *
         * @return An instance.
         */
        ObtainEx(
            [out] IAccessibilityEvent** event);
    }

}
