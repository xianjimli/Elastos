
module
{
    interface IProgressBarSavedState extends IViewBaseSavedState {
    }

    interface IProgressBar extends IView {
        /**
         * <p>Indicate whether this progress bar is in indeterminate mode.</p>
         *
         * @return true if the progress bar is in indeterminate mode
         */
        IsIndeterminate(
            [out] Boolean* indeterminate);
        
        /**
         * <p>Change the indeterminate mode for this progress bar. In indeterminate
         * mode, the progress is ignored and the progress bar shows an infinite
         * animation instead.</p>
         * 
         * If this progress bar's style only supports indeterminate mode (such as the circular
         * progress bars), then this will be ignored.
         *
         * @param indeterminate true to enable the indeterminate mode
         */
        SetIndeterminate(
            [in] Boolean indeterminate);
        
        /**
         * <p>Get the drawable used to draw the progress bar in
         * indeterminate mode.</p>
         *
         * @return a {@link android.graphics.drawable.Drawable} instance
         *
         * @see #setIndeterminateDrawable(android.graphics.drawable.Drawable)
         * @see #setIndeterminate(boolean)
         */
        GetIndeterminateDrawable(
            [out] IDrawable** d);
        
        /**
         * <p>Define the drawable used to draw the progress bar in
         * indeterminate mode.</p>
         *
         * @param d the new drawable
         *
         * @see #getIndeterminateDrawable()
         * @see #setIndeterminate(boolean)
         */
        SetIndeterminateDrawable(
            [in] IDrawable* d);
        
        /**
         * <p>Get the drawable used to draw the progress bar in
         * progress mode.</p>
         *
         * @return a {@link android.graphics.drawable.Drawable} instance
         *
         * @see #setProgressDrawable(android.graphics.drawable.Drawable)
         * @see #setIndeterminate(boolean)
         */
        GetProgressDrawable(
            [out] IDrawable** d);
        
        /**
         * <p>Define the drawable used to draw the progress bar in
         * progress mode.</p>
         *
         * @param d the new drawable
         *
         * @see #getProgressDrawable()
         * @see #setIndeterminate(boolean)
         */
        SetProgressDrawable(
            [in] IDrawable* d);
        
        /**
         * <p>Set the current progress to the specified value. Does not do anything
         * if the progress bar is in indeterminate mode.</p>
         *
         * @param progress the new progress, between 0 and {@link #getMax()}
         *
         * @see #setIndeterminate(boolean)
         * @see #isIndeterminate()
         * @see #getProgress()
         * @see #incrementProgressBy(int) 
         */
        SetProgress(
            [in] Int32 progress);
        
        /**
         * <p>
         * Set the current secondary progress to the specified value. Does not do
         * anything if the progress bar is in indeterminate mode.
         * </p>
         * 
         * @param secondaryProgress the new secondary progress, between 0 and {@link #getMax()}
         * @see #setIndeterminate(boolean)
         * @see #isIndeterminate()
         * @see #getSecondaryProgress()
         * @see #incrementSecondaryProgressBy(int)
         */
        SetSecondaryProgress(
            [in] Int32 secondaryProgress);
        
        /**
         * <p>Get the progress bar's current level of progress. Return 0 when the
         * progress bar is in indeterminate mode.</p>
         *
         * @return the current progress, between 0 and {@link #getMax()}
         *
         * @see #setIndeterminate(boolean)
         * @see #isIndeterminate()
         * @see #setProgress(int)
         * @see #setMax(int)
         * @see #getMax()
         */
        GetProgress(
            [out] Int32* progress);
        
        /**
         * <p>Get the progress bar's current level of secondary progress. Return 0 when the
         * progress bar is in indeterminate mode.</p>
         *
         * @return the current secondary progress, between 0 and {@link #getMax()}
         *
         * @see #setIndeterminate(boolean)
         * @see #isIndeterminate()
         * @see #setSecondaryProgress(int)
         * @see #setMax(int)
         * @see #getMax()
         */
        GetSecondaryProgress(
            [out] Int32* secondaryProgress);
        
        /**
         * <p>Return the upper limit of this progress bar's range.</p>
         *
         * @return a positive integer
         *
         * @see #setMax(int)
         * @see #getProgress()
         * @see #getSecondaryProgress()
         */
        GetMax(
            [out] Int32* max);
        
        /**
         * <p>Set the range of the progress bar to 0...<tt>max</tt>.</p>
         *
         * @param max the upper range of this progress bar
         *
         * @see #getMax()
         * @see #setProgress(int) 
         * @see #setSecondaryProgress(int) 
         */
        SetMax(
            [in] Int32 max);
        
        /**
         * <p>Increase the progress bar's progress by the specified amount.</p>
         *
         * @param diff the amount by which the progress must be increased
         *
         * @see #setProgress(int) 
         */
        IncrementProgressBy(
            [in] Int32 diff);
        
        /**
         * <p>Increase the progress bar's secondary progress by the specified amount.</p>
         *
         * @param diff the amount by which the secondary progress must be increased
         *
         * @see #setSecondaryProgress(int) 
         */
        IncrementSecondaryProgressBy(
            [in] Int32 diff);
        
        /**
         * Sets the acceleration curve for the indeterminate animation.
         * The interpolator is loaded as a resource from the specified context.
         *
         * @param context The application environment
         * @param resID The resource identifier of the interpolator to load
         */
        SetInterpolator(
            [in] IContext* ctx,
            [in] Int32 resID);
        
        /**
         * Sets the acceleration curve for the indeterminate animation.
         * Defaults to a linear interpolation.
         *
         * @param interpolator The interpolator which defines the acceleration curve
         */
        SetInterpolatorEx(
            [in] IInterpolator* interpolator);
        
        /**
         * Gets the acceleration curve type for the indeterminate animation.
         *
         * @return the {@link Interpolator} associated to this animation
         */
        GetInterpolator(
            [out] IInterpolator** interpolator);
    }
}