
module
{
    /**
     * <p>Listener used to receive a notification upon completion of a filtering
     * operation.</p>
     */
   interface IFilterListener {
        /**
         * <p>Notifies the end of a filtering operation.</p>
         *
         * @param count the number of values computed by the filter
         */
        OnFilterComplete(
            [in] Int32 count);
    }

    /**
     * <p>Holds the results of a filtering operation. The results are the values
     * computed by the filtering operation and the number of these values.</p>
     */
    interface IFilterResults {
    }

    interface IFilterDelayer {
        /**
         * @param constraint The constraint passed to {@link Filter#filter(CharSequence)}
         * @return The delay that should be used for
         *         {@link Handler#sendMessageDelayed(android.os.Message, Int64)}
         */
        GetPostingDelay(
            [in] ICharSequence* constraint,
            [out] Int64* delay);
    }

    /**
     * <p>A filter constrains data with a filtering pattern.</p>
     *
     * <p>Filters are usually created by {@link android.widget.Filterable}
     * classes.</p>
     *
     * <p>Filtering operations performed by calling {@link #filter(CharSequence)} or
     * {@link #filter(CharSequence, android.widget.Filter.FilterListener)} are
     * performed asynchronously. When these methods are called, a filtering request
     * is posted in a request queue and processed later. Any call to one of these
     * methods will cancel any previous non-executed filtering request.</p>
     *
     * @see android.widget.Filterable
     */
   interface IFilter {
        /**
         * Provide an interface that decides how Int64 to delay the message for a given query.  Useful
         * for heuristics such as posting a delay for the delete key to avoid doing any work while the
         * user holds down the delete key.
         *
         * @param delayer The delayer.
         * @hide
         */
        SetDelayer(
            [in] IFilterDelayer* delayer);

        /**
         * <p>Starts an asynchronous filtering operation. Calling this method
         * cancels all previous non-executed filtering requests and posts a new
         * filtering request that will be executed later.</p>
         *
         * @param constraint the constraint used to filter the data
         *
         * @see #filter(CharSequence, android.widget.Filter.FilterListener)
         */
        DoFilter(
            [in] ICharSequence* constraint);

        /**
         * <p>Starts an asynchronous filtering operation. Calling this method
         * cancels all previous non-executed filtering requests and posts a new
         * filtering request that will be executed later.</p>
         *
         * <p>Upon completion, the listener is notified.</p>
         *
         * @param constraint the constraint used to filter the data
         * @param listener a listener notified upon completion of the operation
         *
         * @see #filter(CharSequence)
         * @see #performFiltering(CharSequence)
         * @see #publishResults(CharSequence, android.widget.Filter.FilterResults)
         */
        DoFilterEx(
            [in] ICharSequence* constraint,
            [in] IFilterListener* listener);

        /**
         * <p>Converts a value from the filtered set into a CharSequence. Subclasses
         * should override this method to convert their results. The default
         * implementation returns an empty String for NULL values or the default
         * String representation of the value.</p>
         *
         * @param resultValue the value to convert to a CharSequence
         * @return a CharSequence representing the value
         */
        ConvertResultToString(
            [in] IInterface* resultValue,
            [out] ICharSequence** cs); 
   }
}
