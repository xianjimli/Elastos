
module
{
    /**
     * Options for scaling the bounds of an image to the bounds of this view.
     */
    enum ImageViewScaleType {
        /**
         * Scale using the image matrix when drawing. The image matrix can be set using
         * {@link ImageView#setImageMatrix(Matrix)}. From XML, use this syntax:
         * <code>android:scaleType="matrix"</code>.
         */
        ImageViewScaleType_MATRIX = 0,
        /**
         * Scale the image using {@link Matrix.ScaleToFit#FILL}.
         * From XML, use this syntax: <code>android:scaleType="fitXY"</code>.
         */
        ImageViewScaleType_FIT_XY = 1,
        /**
         * Scale the image using {@link Matrix.ScaleToFit#START}.
         * From XML, use this syntax: <code>android:scaleType="fitStart"</code>.
         */
        ImageViewScaleType_FIT_START = 2,
        /**
         * Scale the image using {@link Matrix.ScaleToFit#CENTER}.
         * From XML, use this syntax:
         * <code>android:scaleType="fitCenter"</code>.
         */
        ImageViewScaleType_FIT_CENTER = 3,
        /**
         * Scale the image using {@link Matrix.ScaleToFit#END}.
         * From XML, use this syntax: <code>android:scaleType="fitEnd"</code>.
         */
        ImageViewScaleType_FIT_END = 4,
        /**
         * Center the image in the view, but perform no scaling.
         * From XML, use this syntax: <code>android:scaleType="center"</code>.
         */
        ImageViewScaleType_CENTER = 5,
        /**
         * Scale the image uniformly (maintain the image's aspect ratio) so
         * that both dimensions (width and height) of the image will be equal
         * to or larger than the corresponding dimension of the view
         * (minus padding). The image is then centered in the view.
         * From XML, use this syntax: <code>android:scaleType="centerCrop"</code>.
         */
        ImageViewScaleType_CENTER_CROP = 6,
        /**
         * Scale the image uniformly (maintain the image's aspect ratio) so
         * that both dimensions (width and height) of the image will be equal
         * to or less than the corresponding dimension of the view
         * (minus padding). The image is then centered in the view.
         * From XML, use this syntax: <code>android:scaleType="centerInside"</code>.
         */
        ImageViewScaleType_CENTER_INSIDE=7,
    }

    interface IView;
    interface IBitmap;
    interface IDrawable;

    interface IImageView extends IView {
        /**
         * Set this to true if you want the ImageView to adjust its bounds
         * to preserve the aspect ratio of its drawable.
         * @param adjustViewBounds Whether to adjust the bounds of this view
         * to presrve the original aspect ratio of the drawable
         *
         * @attr ref android.R.styleable#ImageView_adjustViewBounds
         */
        SetAdjustViewBounds(
            [in] Boolean adjustViewBounds);

        /**
         * An optional argument to supply a maximum width for this view. Only valid if
         * {@link #setAdjustViewBounds} has been set to true. To set an image to be a maximum of 100 x
         * 100 while preserving the original aspect ratio, do the following: 1) set adjustViewBounds to
         * true 2) set maxWidth and maxHeight to 100 3) set the height and width layout params to
         * WRAP_CONTENT.
         *
         * <p>
         * Note that this view could be still smaller than 100 x 100 using this approach if the original
         * image is small. To set an image to a fixed size, specify that size in the layout params and
         * then use {@link #setScaleType} to determine how to fit the image within the bounds.
         * </p>
         *
         * @param maxWidth maximum width for this view
         *
         * @attr ref android.R.styleable#ImageView_maxWidth
         */
        SetMaxWidth(
            [in] Int32 maxWidth);

        /**
         * An optional argument to supply a maximum height for this view. Only valid if
         * {@link #setAdjustViewBounds} has been set to true. To set an image to be a maximum of 100 x
         * 100 while preserving the original aspect ratio, do the following: 1) set adjustViewBounds to
         * true 2) set maxWidth and maxHeight to 100 3) set the height and width layout params to
         * WRAP_CONTENT.
         *
         * <p>
         * Note that this view could be still smaller than 100 x 100 using this approach if the original
         * image is small. To set an image to a fixed size, specify that size in the layout params and
         * then use {@link #setScaleType} to determine how to fit the image within the bounds.
         * </p>
         *
         * @param maxHeight maximum height for this view
         *
         * @attr ref android.R.styleable#ImageView_maxHeight
         */
        SetMaxHeight(
            [in] Int32 maxHeight);

        /** Return the view's drawable, or null if no drawable has been
         * assigned.
         */
        GetDrawable(
            [out] IDrawable** drawable);

        /**
         * Sets a drawable as the content of this ImageView.
         *
         * <p class="note">This does Bitmap reading and decoding on the UI
         * thread, which can cause a latency hiccup.  If that's a concern,
         * consider using {@link #setImageDrawable} or
         * {@link #setImageBitmap} and
         * {@link android.graphics.BitmapFactory} instead.</p>
         *
         * @param resId the resource identifier of the the drawable
         *
         * @attr ref android.R.styleable#ImageView_src
         */
        SetImageResource(
            [in] Int32 resId);

        /**
         * Sets the content of this ImageView to the specified Uri.
         *
         * <p class="note">This does Bitmap reading and decoding on the UI
         * thread, which can cause a latency hiccup.  If that's a concern,
         * consider using {@link #setImageDrawable} or
         * {@link #setImageBitmap} and
         * {@link android.graphics.BitmapFactory} instead.</p>
         *
         * @param uri The Uri of an image
         */
        SetImageURI(
            [in] IUri* uri);

        /**
         * Sets a drawable as the content of this ImageView.
         *
         * @param drawable The drawable to set
         */
        SetImageDrawable(
            [in] IDrawable* drawable);

        /**
         * Sets a Bitmap as the content of this ImageView.
         *
         * @param bm The bitmap to set
         */
        SetImageBitmap(
            [in] IBitmap* bm);

        SetImageState(
            [in] ArrayOf<Int32> state,
            [in] Boolean mg);

        /**
         * Sets the image level, when it is constructed from a
         * {@link android.graphics.drawable.LevelListDrawable}.
         *
         * @param level The new level for the image.
         */
        SetImageLevel(
            [in] Int32 level);

        /**
         * Controls how the image should be resized or moved to match the size
         * of this ImageView.
         *
         * @param scaleType The desired scaling mode.
         *
         * @attr ref android.R.styleable#ImageView_scaleType
         */
        SetScaleType(
            [in] ImageViewScaleType scaleType);

        /**
         * Return the current scale type in use by this ImageView.
         *
         * @see ImageView.ImageViewScaleType
         *
         * @attr ref android.R.styleable#ImageView_scaleType
         */
        GetScaleType(
            [out] ImageViewScaleType* scaleType);

        /** Return the view's optional matrix. This is applied to the
         *  view's drawable when it is drawn. If there is not matrix,
         *  this method will return null.
         *  Do not change this matrix in place. If you want a different matrix
         *  applied to the drawable, be sure to call setImageMatrix().
         */
        GetImageMatrix(
            [out] IMatrix** martix);

        SetImageMatrix(
            [in] IMatrix* matrix);
    }
}
