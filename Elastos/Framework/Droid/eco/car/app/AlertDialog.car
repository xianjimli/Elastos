
module
{
    interface IDialog;
    interface IButton;
    interface IListView;
    interface IView;
    interface ICharSequence;
    interface IDialogInterfaceOnClickListener;
    interface IDrawable;
    interface IListAdapter;
    interface IOnItemSelectedListener;

    interface IAlertDialog extends IDialog {
        /**
         * Gets one of the buttons used in the dialog.
         * <p>
         * If a button does not exist in the dialog, NULL will be returned.
         *
         * @param whichButton The identifier of the button that should be returned.
         *            For example, this can be
         *            {@link DialogInterface#BUTTON_POSITIVE}.
         * @return The button from the dialog, or NULL if a button does not exist.
         */
        GetButton(
            [in] Int32 whichButton,
            [out] IButton** button);

        /**
         * Gets the list view used in the dialog.
         *
         * @return The {@link ListView} from the dialog.
         */
        GetListView(
            [out] IListView** listView);

        /**
         * @see Builder#setCustomTitle(View)
         */
        SetCustomTitle(
            [in] IView* customTitleView);

        SetMessage(
            [in] ICharSequence* message);

        /**
         * Set the view to display in that dialog.
         */
        SetView(
            [in] IView* view);

        /**
         * Set the view to display in that dialog, specifying the spacing to appear around that
         * view.
         *
         * @param view The view to show in the content area of the dialog
         * @param viewSpacingLeft Extra space to appear to the left of {@code view}
         * @param viewSpacingTop Extra space to appear above {@code view}
         * @param viewSpacingRight Extra space to appear to the right of {@code view}
         * @param viewSpacingBottom Extra space to appear below {@code view}
         */
        SetViewEx(
            [in] IView* view,
            [in] Int32 viewSpacingLeft,
            [in] Int32 viewSpacingTop,
            [in] Int32 viewSpacingRight,
            [in] Int32 viewSpacingBottom);

        /**
         * Set a message to be sent when a button is pressed.
         *
         * @param whichButton Which button to set the message for, can be one of
         *            {@link DialogInterface#BUTTON_POSITIVE},
         *            {@link DialogInterface#BUTTON_NEGATIVE}, or
         *            {@link DialogInterface#BUTTON_NEUTRAL}
         * @param text The text to display in positive button.
         * @param msg The {@link Message} to be sent when clicked.
         */
        SetButton(
            [in] Int32 whichButton,
            [in] ICharSequence* text);

        /**
         * Set a listener to be invoked when the positive button of the dialog is pressed.
         *
         * @param whichButton Which button to set the listener on, can be one of
         *            {@link DialogInterface#BUTTON_POSITIVE},
         *            {@link DialogInterface#BUTTON_NEGATIVE}, or
         *            {@link DialogInterface#BUTTON_NEUTRAL}
         * @param text The text to display in positive button.
         * @param listener The {@link DialogInterface.OnClickListener} to use.
         */
        SetButtonEx(
            [in] Int32 whichButton,
            [in] ICharSequence* text,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set resId to 0 if you don't want an icon.
         * @param resId the resourceId of the drawable to use as the icon or 0
         * if you don't want an icon.
         */
        SetIcon(
            [in] Int32 resId);

        SetIconEx(
            [in] IDrawable* icon);

        SetInverseBackgroundForced(
            [in] Boolean forceInverseBackground);
    }

    interface IAlertDialogBuilder {
        /**
         * Set the title using the given resource id.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetTitle(
            [in] Int32 titleId);

        /**
         * Set the title displayed in the {@link Dialog}.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetTitleEx(
            [in] ICharSequence* title);

        /**
         * Set the title using the custom view {@code customTitleView}. The
         * methods {@link #setTitle(Int32)} and {@link #setIcon(Int32)} should be
         * sufficient for most titles, but this is provided if the title needs
         * more customization. Using this will replace the title and icon Set
         * via the other methods.
         *
         * @param customTitleView The custom view to use as the title.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetCustomTitle(
            [in] IView* customTitleView);

        /**
         * Set the message to display using the given resource id.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetMessage(
            [in] Int32 messageId);

        /**
         * Set the message to display.
          *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetMessageEx(
            [in] ICharSequence* message);

        /**
         * Set the resource id of the {@link Drawable} to be used in the title.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetIcon(
            [in] Int32 iconId);

        /**
         * Set the {@link Drawable} to be used in the title.
          *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetIconEx(
            [in] IDrawable* icon);

        /**
         * Set a listener to be invoked when the positive button of the dialog is pressed.
         * @param textId The resource id of the text to display in the positive button
         * @param listener The {@link DialogInterface.OnClickListener} to use.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetPositiveButton(
            [in] Int32 textId,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a listener to be invoked when the positive button of the dialog is pressed.
         * @param text The text to display in the positive button
         * @param listener The {@link DialogInterface.OnClickListener} to use.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetPositiveButtonEx(
            [in] ICharSequence* text,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a listener to be invoked when the negative button of the dialog is pressed.
         * @param textId The resource id of the text to display in the negative button
         * @param listener The {@link DialogInterface.OnClickListener} to use.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetNegativeButton(
            [in] Int32 textId,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a listener to be invoked when the negative button of the dialog is pressed.
         * @param text The text to display in the negative button
         * @param listener The {@link DialogInterface.OnClickListener} to use.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetNegativeButtonEx(
            [in] ICharSequence* text,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a listener to be invoked when the neutral button of the dialog is pressed.
         * @param textId The resource id of the text to display in the neutral button
         * @param listener The {@link DialogInterface.OnClickListener} to use.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetNeutralButton(
            [in] Int32 textId,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a listener to be invoked when the neutral button of the dialog is pressed.
         * @param text The text to display in the neutral button
         * @param listener The {@link DialogInterface.OnClickListener} to use.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetNeutralButtonEx(
            [in] ICharSequence* text,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Sets whether the dialog is cancelable or not.  Default is TRUE.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetCancelable(
            [in] Boolean cancelable);

        /**
         * Sets the callback that will be called if the dialog is canceled.
         * @see #setCancelable(Boolean)
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetOnCancelListener(
            [in] IDialogInterfaceOnCancelListener* onCancelListener);

        /**
         * Sets the callback that will be called if a key is dispatched to the dialog.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetOnKeyListener(
            [in] IDialogInterfaceOnKeyListener* onKeyListener);

        /**
         * Set a list of items to be displayed in the dialog as the content, you will be notified of the
         * selected item via the supplied listener. This should be an array type i.e. R.array.foo
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetItems(
            [in] Int32 itemsId,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a list of items to be displayed in the dialog as the content, you will be notified of the
         * selected item via the supplied listener.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetItemsEx(
            [in] ArrayOf<ICharSequence*> items,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a list of items, which are supplied by the given {@link ListAdapter}, to be
         * displayed in the dialog as the content, you will be notified of the
         * selected item via the supplied listener.
         *
         * @param adapter The {@link ListAdapter} to supply the list of items
         * @param listener The listener that will be called when an item is clicked.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetAdapter(
            [in] IListAdapter* adapter,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a list of items, which are supplied by the given {@link Cursor}, to be
         * displayed in the dialog as the content, you will be notified of the
         * selected item via the supplied listener.
         *
         * @param cursor The {@link Cursor} to supply the list of items
         * @param listener The listener that will be called when an item is clicked.
         * @param labelColumn The column name on the cursor containing the string to display
         *          in the label.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetCursor(
            [in] ICursor* cursor,
            [in] IDialogInterfaceOnClickListener* listener,
            [in] String labelColumn);

        /**
         * Set a list of items to be displayed in the dialog as the content,
         * you will be notified of the selected item via the supplied listener.
         * This should be an array type, e.g. R.array.foo. The list will have
         * a check mark displayed to the right of the text for each checked
         * item. Clicking on an item in the list will not dismiss the dialog.
         * Clicking on a button will dismiss the dialog.
         *
         * @param itemsId the resource id of an array i.e. R.array.foo
         * @param checkedItems specifies which items are checked. It should be null in which case no
         *        items are checked. If non null it must be exactly the same length as the array of
         *        items.
         * @param listener notified when an item on the list is clicked. The dialog will not be
         *        dismissed when an item is clicked. It will only be dismissed if clicked on a
         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetMultiChoiceItems(
            [in] Int32 itemsId,
            [in] ArrayOf<Boolean> checkedItems,
            [in] IDialogInterfaceOnMultiChoiceClickListener* listener);

        /**
         * Set a list of items to be displayed in the dialog as the content,
         * you will be notified of the selected item via the supplied listener.
         * The list will have a check mark displayed to the right of the text
         * for each checked item. Clicking on an item in the list will not
         * dismiss the dialog. Clicking on a button will dismiss the dialog.
         *
         * @param items the text of the items to be displayed in the list.
         * @param checkedItems specifies which items are checked. It should be null in which case no
         *        items are checked. If non null it must be exactly the same length as the array of
         *        items.
         * @param listener notified when an item on the list is clicked. The dialog will not be
         *        dismissed when an item is clicked. It will only be dismissed if clicked on a
         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetMultiChoiceItemsEx(
            [in] ArrayOf<ICharSequence*> items,
            [in] ArrayOf<Boolean> checkedItems,
            [in] IDialogInterfaceOnMultiChoiceClickListener* listener);

        /**
         * Set a list of items to be displayed in the dialog as the content,
         * you will be notified of the selected item via the supplied listener.
         * The list will have a check mark displayed to the right of the text
         * for each checked item. Clicking on an item in the list will not
         * dismiss the dialog. Clicking on a button will dismiss the dialog.
         *
         * @param cursor the cursor used to provide the items.
         * @param isCheckedColumn specifies the column name on the cursor to use to determine
         *        whether a checkbox is checked or not. It must return an Int32eger value where 1
         *        means checked and 0 means unchecked.
         * @param labelColumn The column name on the cursor containing the string to display in the
         *        label.
         * @param listener notified when an item on the list is clicked. The dialog will not be
         *        dismissed when an item is clicked. It will only be dismissed if clicked on a
         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetMultiChoiceItemsEx2(
            [in] ICursor* cursor,
            [in] String isCheckedColumn,
            [in] String labelColumn,
            [in] IDialogInterfaceOnMultiChoiceClickListener* listener);

        /**
         * Set a list of items to be displayed in the dialog as the content, you will be notified of
         * the selected item via the supplied listener. This should be an array type i.e.
         * R.array.foo The list will have a check mark displayed to the right of the text for the
         * checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a
         * button will dismiss the dialog.
         *
         * @param itemsId the resource id of an array i.e. R.array.foo
         * @param checkedItem specifies which item is checked. If -1 no items are checked.
         * @param listener notified when an item on the list is clicked. The dialog will not be
         *        dismissed when an item is clicked. It will only be dismissed if clicked on a
         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetSingleChoiceItems(
            [in] Int32 itemsId,
            [in] Int32 checkedItem,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a list of items to be displayed in the dialog as the content, you will be notified of
         * the selected item via the supplied listener. The list will have a check mark displayed to
         * the right of the text for the checked item. Clicking on an item in the list will not
         * dismiss the dialog. Clicking on a button will dismiss the dialog.
         *
         * @param cursor the cursor to retrieve the items from.
         * @param checkedItem specifies which item is checked. If -1 no items are checked.
         * @param labelColumn The column name on the cursor containing the string to display in the
         *        label.
         * @param listener notified when an item on the list is clicked. The dialog will not be
         *        dismissed when an item is clicked. It will only be dismissed if clicked on a
         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetSingleChoiceItemsEx(
            [in] ICursor* cursor,
            [in] Int32 checkedItem,
            [in] String labelColumn,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a list of items to be displayed in the dialog as the content, you will be notified of
         * the selected item via the supplied listener. The list will have a check mark displayed to
         * the right of the text for the checked item. Clicking on an item in the list will not
         * dismiss the dialog. Clicking on a button will dismiss the dialog.
         *
         * @param items the items to be displayed.
         * @param checkedItem specifies which item is checked. If -1 no items are checked.
         * @param listener notified when an item on the list is clicked. The dialog will not be
         *        dismissed when an item is clicked. It will only be dismissed if clicked on a
         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetSingleChoiceItemsEx2(
            [in] ArrayOf<ICharSequence*> items,
            [in] Int32 checkedItem,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Set a list of items to be displayed in the dialog as the content, you will be notified of
         * the selected item via the supplied listener. The list will have a check mark displayed to
         * the right of the text for the checked item. Clicking on an item in the list will not
         * dismiss the dialog. Clicking on a button will dismiss the dialog.
         *
         * @param adapter The {@link ListAdapter} to supply the list of items
         * @param checkedItem specifies which item is checked. If -1 no items are checked.
         * @param listener notified when an item on the list is clicked. The dialog will not be
         *        dismissed when an item is clicked. It will only be dismissed if clicked on a
         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetSingleChoiceItemsEx3(
            [in] IListAdapter* adapter,
            [in] Int32 checkedItem,
            [in] IDialogInterfaceOnClickListener* listener);

        /**
         * Sets a listener to be invoked when an item in the list is selected.
         *
         * @param listener The listener to be invoked.
         * @see AdapterView#setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetOnItemSelectedListener(
            [in] IOnItemSelectedListener* listener);

        /**
         * Set a custom view to be the contents of the Dialog. If the supplied view is an instance
         * of a {@link ListView} the light background will be used.
         *
         * @param view The view to use as the contents of the Dialog.
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetView(
            [in] IView* view);

        /**
         * Set a custom view to be the contents of the Dialog, specifying the
         * spacing to appear around that view. If the supplied view is an
         * instance of a {@link ListView} the light background will be used.
         *
         * @param view The view to use as the contents of the Dialog.
         * @param viewSpacingLeft Spacing between the left edge of the view and
         *        the dialog frame
         * @param viewSpacingTop Spacing between the top edge of the view and
         *        the dialog frame
         * @param viewSpacingRight Spacing between the right edge of the view
         *        and the dialog frame
         * @param viewSpacingBottom Spacing between the bottom edge of the view
         *        and the dialog frame
         * @return This Builder object to allow for chaining of calls to Set
         *         methods
         *
         *
         * This is currently hidden because it seems like people should just
         * be able to put padding around the view.
         * @hide
         */
        SetViewEx(
            [in] IView* view,
            [in] Int32 viewSpacingLeft,
            [in] Int32 viewSpacingTop,
            [in] Int32 viewSpacingRight,
            [in] Int32 viewSpacingBottom);

        /**
         * Sets the Dialog to use the inverse background, regardless of what the
         * contents is.
         *
         * @param useInverseBackground Whether to use the inverse background
         *
         * @return This Builder object to allow for chaining of calls to Set methods
         */
        SetInverseBackgroundForced(
            [in] Boolean useInverseBackground);
        /**
         * @hide
         */
        SetRecycleOnMeasureEnabled(
            [in] Boolean enabled);
        /**
         * Creates a {@link AlertDialog} with the arguments supplied to this builder. It does not
         * {@link Dialog#show()} the dialog. This allows the user to do any extra processing
         * before displaying the dialog. Use {@link #show()} if you don't have any other processing
         * to do and want this to be created and displayed.
         */
        Create(
            [out] IAlertDialog** dialog);
        /**
         * Creates a {@link AlertDialog} with the arguments supplied to this builder and
         * {@link Dialog#show()}'s the dialog.
         */
        Show(
            [out] IAlertDialog** dialog);
    }
}
