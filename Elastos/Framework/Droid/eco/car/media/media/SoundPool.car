
module
{
    interface ISoundPool;

    /**
     * Interface definition for a callback to be invoked when all the
     * sounds are loaded.
     */
    interface IOnLoadCompleteListener
    {
        /**
         * Called when a sound has completed loading.
         *
         * @param soundPool SoundPool object from the load() method
         * @param soundPool the sample ID of the sound loaded.
         * @param status the status of the load operation (0 = success)
         */
        OnLoadComplete(
            [in] ISoundPool* soundPool, 
            [in] Int32 sampleId, 
            [in] Int32 status);
    }

    interface ISoundPool
    {
        /**
         * Load the sound from the specified path.
         *
         * @param path the path to the audio file
         * @param priority the priority of the sound. Currently has no effect. Use
         *                 a value of 1 for future compatibility.
         * @return a sound ID. This value can be used to play or unload the sound.
         */
        Load(
            [in] String path, 
            [in] Int32 priority,
            [out] Int32* ID);

        /**
         * Load the sound from the specified APK resource.
         *
         * Note that the extension is dropped. For example, if you want to load
         * a sound from the raw resource file "explosion.mp3", you would specify
         * "R.raw.explosion" as the resource ID. Note that this means you cannot
         * have both an "explosion.wav" and an "explosion.mp3" in the res/raw
         * directory.
         * 
         * @param context the application context
         * @param resId the resource ID
         * @param priority the priority of the sound. Currently has no effect. Use
         *                 a value of 1 for future compatibility.
         * @return a sound ID. This value can be used to play or unload the sound.
         */
        LoadEx(
            [in] IContext* context, 
            [in] Int32 resId, 
            [in] Int32 priority,
            [out] Int32* ID);

        /**
         * Load the sound from an asset file descriptor.
         *
         * @param afd an asset file descriptor
         * @param priority the priority of the sound. Currently has no effect. Use
         *                 a value of 1 for future compatibility.
         * @return a sound ID. This value can be used to play or unload the sound.
         */
        LoadEx2(
            [in] IAssetFileDescriptor* afd, 
            [in] Int32 priority,
            [out] Int32* ID);

        /**
         * Load the sound from a FileDescriptor.
         *
         * This version is useful if you store multiple sounds in a single
         * binary. The offset specifies the offset from the start of the file
         * and the length specifies the length of the sound within the file.
         *
         * @param fd a FileDescriptor object
         * @param offset offset to the start of the sound
         * @param length length of the sound
         * @param priority the priority of the sound. Currently has no effect. Use
         *                 a value of 1 for future compatibility.
         * @return a sound ID. This value can be used to play or unload the sound.
         */
        LoadEx3(
            [in] IFileDescriptor* fd, 
            [in] Int64 offset, 
            [in] Int64 length, 
            [in] Int32 priority,
            [out] Int32* ID);

        /**
         * Sets the callback hook for the OnLoadCompleteListener.
         */
        SetOnLoadCompleteListener(
            [in] IOnLoadCompleteListener* listener);

    }
}
