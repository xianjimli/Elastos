
module
{
    /*
     * Handles the audio error callback.
     */
    interface IAudioSystemErrorCallback {
        /*
         * Callback for audio server errors.
         * param error   error code:
         * - AUDIO_STATUS_OK
         * - AUDIO_STATUS_SERVER_DIED
         * - AUDIO_STATUS_ERROR
         */
        OnError(
            [in] Int32 error);
    }

    interface IAudioSystem {
        GetNumStreamTypes(
            [out] Int32* types);

        /*
         * Sets the microphone mute on or off.
         *
         * param on set <var>true</var> to mute the microphone;
         *           <var>false</var> to turn mute off
         * return command completion status see AUDIO_STATUS_OK, see AUDIO_STATUS_ERROR
         */
        MuteMicrophone(
            [in] Boolean on,
            [out] Int32* result);

        /*
         * Checks whether the microphone mute is on or off.
         *
         * return true if microphone is muted, false if it's not
         */
        IsMicrophoneMuted(
            [out] Boolean* isMuted);

        /*
         * Sets the audio mode.
         *
         * param mode  the requested audio mode (NORMAL, RINGTONE, or IN_CALL).
         *              Informs the HAL about the current audio state so that
         *              it can route the audio appropriately.
         * return command completion status see AUDIO_STATUS_OK, see AUDIO_STATUS_ERROR
         */
        /** @deprecated use {@link #setPhoneState(int)} */
        SetMode(
            [in] Int32 mode,
            [out] Int32* result);

        /*
         * Returns the current audio mode.
         *
         * return      the current audio mode (NORMAL, RINGTONE, or IN_CALL).
         *              Returns the current current audio state from the HAL.
         *
         */
        /** @deprecated Do not use. */
        GetMode(
            [out] Int32* mode);

        /*
         * Sets the audio routing for a specified mode
         *
         * param mode   audio mode to change route. E.g., MODE_RINGTONE.
         * param routes bit vector of routes requested, created from one or
         *               more of ROUTE_xxx types. Set bits indicate that route should be on
         * param mask   bit vector of routes to change, created from one or more of
         * ROUTE_xxx types. Unset bits indicate the route should be left unchanged
         * return command completion status see AUDIO_STATUS_OK, see AUDIO_STATUS_ERROR
         */
        /** @deprecated use {@link #setDeviceConnectionState(int,int,String)} */
        SetRouting(
            [in] Int32 mode,
            [in] Int32 routes,
            [in] Int32 mask,
            [out] Int32* result);

        /*
         * Returns the current audio routing bit vector for a specified mode.
         *
         * param mode audio mode to change route (e.g., MODE_RINGTONE)
         * return an audio route bit vector that can be compared with ROUTE_xxx
         * bits
         */
        /** @deprecated use {@link #getDeviceConnectionState(int,String)} */
        GetRouting(
            [in] Int32 mode,
            [out] Int32* routing);

        /*
         * Checks whether the specified stream type is active.
         *
         * return true if any track playing on this stream is active.
         */
        IsStreamActive(
            [in] Int32 stream,
            [out] Boolean* isActivie);

        /*
         * Sets a group generic audio configuration parameters. The use of these parameters
         * are platform dependant, see libaudio
         *
         * param keyValuePairs  list of parameters key value pairs in the form:
         *    key1=value1;key2=value2;...
         */
        SetParameters(
            [in] String keyValuePairs,
            [out] Int32* result);

        /*
         * Gets a group generic audio configuration parameters. The use of these parameters
         * are platform dependant, see libaudio
         *
         * param keys  list of parameters
         * return value: list of parameters key value pairs in the form:
         *    key1=value1;key2=value2;...
         */
        GetParameters(
            [in] String keys,
            [out] String* value);

        /*
         * Registers a callback to be invoked when an error occurs.
         * param cb the callback to run
         */
        SetErrorCallback(
            [in] IAudioSystemErrorCallback* cb);

        SetDeviceConnectionState(
            [in] Int32 device,
            [in] Int32 state,
            [in] String device_address,
            [out] Int32* result);

        GetDeviceConnectionState(
            [in] Int32 device,
            [in] String device_address,
            [out] Int32* state);

        SetPhoneState(
            [in] Int32 state,
            [out] Int32* result);

        SetRingerMode(
            [in] Int32 mode,
            [in] Int32 mask,
            [out] Int32* result);

        SetForceUse(
            [in] Int32 usage,
            [in] Int32 config,
            [out] Int32* result);

        GetForceUse(
            [in] Int32 usage,
            [out] Int32* config);

        InitStreamVolume(
            [in] Int32 stream,
            [in] Int32 indexMin,
            [in] Int32 indexMax,
            [out] Int32* result);

        SetStreamVolumeIndex(
            [in] Int32 stream,
            [in] Int32 index,
            [out] Int32* result);

        GetStreamVolumeIndex(
            [in] Int32 stream,
            [out] Int32* index);
    }
}
