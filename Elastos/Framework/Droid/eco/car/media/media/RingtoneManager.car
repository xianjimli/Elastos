
module
{
    interface IRingtoneManager {
        /**
         * Sets which type(s) of ringtones will be listed by this.
         *
         * @param type The type(s), one or more of {@link #TYPE_RINGTONE},
         *            {@link #TYPE_NOTIFICATION}, {@link #TYPE_ALARM},
         *            {@link #TYPE_ALL}.
         * @see #EXTRA_RINGTONE_TYPE
         */
        SetType(
            [in] Int32 type);

        /**
         * Infers the playback stream type based on what type of ringtones this
         * manager is returning.
         *
         * @return The stream type.
         */
        InferStreamType(
            [out] Int32* type);

        /**
         * Whether retrieving another {@link Ringtone} will stop playing the
         * previously retrieved {@link Ringtone}.
         * <p>
         * If this is false, make sure to {@link Ringtone#stop()} any previous
         * ringtones to free resources.
         *
         * @param stopPreviousRingtone If TRUE, the previously retrieved
         *            {@link Ringtone} will be stopped.
         */
        SetStopPreviousRingtone(
            [in] Boolean stopPreviousRingtone);

        /**
         * @see #setStopPreviousRingtone(Boolean)
         */
        GetStopPreviousRingtone(
            [out] Boolean* stopPreviousRingtone);

        /**
         * Stops playing the last {@link Ringtone} retrieved from this.
         */
        StopPreviousRingtone();

        /**
         * Returns whether DRM ringtones will be included.
         *
         * @return Whether DRM ringtones will be included.
         * @see #setIncludeDrm(Boolean)
         */
        GetIncludeDrm(
            [out] Boolean* included);

        /**
         * Sets whether to include DRM ringtones.
         *
         * @param includeDrm Whether to include DRM ringtones.
         */
        SetIncludeDrm(
            [in] Boolean includeDrm);

        /**
         * Returns a {@link Cursor} of all the ringtones available. The returned
         * cursor will be the same cursor returned each time this method is called,
         * so do not {@link Cursor#close()} the cursor. The cursor can be
         * {@link Cursor#deactivate()} safely.
         * <p>
         * If {@link RingtoneManager#RingtoneManager(Activity)} was not used, the
         * caller should manage the returned cursor through its activity's life
         * cycle to prevent leaking the cursor.
         *
         * @return A {@link Cursor} of all the ringtones available.
         * @see #ID_COLUMN_INDEX
         * @see #TITLE_COLUMN_INDEX
         * @see #URI_COLUMN_INDEX
         */
        GetCursor(
            [out] ICursor** curse);

        /**
         * Gets a {@link Ringtone} for the ringtone at the given position in the
         * {@link Cursor}.
         *
         * @param position The position (in the {@link Cursor}) of the ringtone.
         * @return A {@link Ringtone} pointing to the ringtone.
         */
        GetRingtone(
            [in] Int32 position,
            [out] IRingtone** ringtone);

        /**
         * Gets a {@link Uri} for the ringtone at the given position in the {@link Cursor}.
         *
         * @param position The position (in the {@link Cursor}) of the ringtone.
         * @return A {@link Uri} pointing to the ringtone.
         */
        GetRingtoneUri(
            [in] Int32 position,
            [out] IUri** uri);

        /**
         * Gets the position of a {@link Uri} within this {@link RingtoneManager}.
         *
         * @param ringtoneUri The {@link Uri} to retreive the position of.
         * @return The position of the {@link Uri}, or -1 if it cannot be found.
         */
        GetRingtonePosition(
            [in] IUri* ringtoneUri,
            [out] Int32* pos);
    }

    interface IRingtoneManagerHelper {
        /**
         * Returns a valid ringtone URI. No guarantees on which it returns. If it
         * cannot find one, returns NULL.
         *
         * @param context The context to use for querying.
         * @return A ringtone URI, or NULL if one cannot be found.
         */
        GetValidRingtoneUri(
            [in] IContext* context,
            [out] IUri** uri);

        /**
         * Returns a {@link Ringtone} for a given sound URI.
         * <p>
         * If the given URI cannot be opened for any reason, this method will
         * attempt to fallback on another sound. If it cannot find any, it will
         * return null.
         *
         * @param context A context used to query.
         * @param ringtoneUri The {@link Uri} of a sound or ringtone.
         * @return A {@link Ringtone} for the given URI, or null.
         */
        GetRingtone(
            [in] IContext* context,
            [in] IUri* ringtoneUri,
            [out] IRingtone** ringtone);

        /**
         * Gets the current default sound's {@link Uri}. This will give the actual
         * sound {@link Uri}, instead of using this, most clients can use
         * {@link System#DEFAULT_RINGTONE_URI}.
         *
         * @param context A context used for querying.
         * @param type The type whose default sound should be returned. One of
         *            {@link #TYPE_RINGTONE}, {@link #TYPE_NOTIFICATION}, or
         *            {@link #TYPE_ALARM}.
         * @return A {@link Uri} pointing to the default sound for the sound type.
         * @see #setActualDefaultRingtoneUri(Context, Int32, Uri)
         */
        GetActualDefaultRingtoneUri(
            [in] IContext* context,
            [in] Int32 type,
            [out] IUri** uri);

        /**
         * Sets the {@link Uri} of the default sound for a given sound type.
         *
         * @param context A context used for querying.
         * @param type The type whose default sound should be set. One of
         *            {@link #TYPE_RINGTONE}, {@link #TYPE_NOTIFICATION}, or
         *            {@link #TYPE_ALARM}.
         * @param ringtoneUri A {@link Uri} pointing to the default sound to set.
         * @see #getActualDefaultRingtoneUri(Context, Int32)
         */
        SetActualDefaultRingtoneUri(
            [in] IContext* context,
            [in] Int32 type,
            [in] IUri* ringtoneUri);

        /**
         * Returns whether the given {@link Uri} is one of the default ringtones.
         *
         * @param ringtoneUri The ringtone {@link Uri} to be checked.
         * @return Whether the {@link Uri} is a default.
         */
        IsDefault(
            [in] IUri* ringtoneUri,
            [out] Boolean* default);

        /**
         * Returns the type of a default {@link Uri}.
         *
         * @param defaultRingtoneUri The default {@link Uri}. For example,
         *            {@link System#DEFAULT_RINGTONE_URI},
         *            {@link System#DEFAULT_NOTIFICATION_URI}, or
         *            {@link System#DEFAULT_ALARM_ALERT_URI}.
         * @return The type of the defaultRingtoneUri, or -1.
         */
        GetDefaultType(
            [in] IUri* defaultRingtoneUri,
            [out] Int32* type);

        /**
         * Returns the {@link Uri} for the default ringtone of a particular type.
         * Rather than returning the actual ringtone's sound {@link Uri}, this will
         * return the symbolic {@link Uri} which will resolved to the actual sound
         * when played.
         *
         * @param type The ringtone type whose default should be returned.
         * @return The {@link Uri} of the default ringtone for the given type.
         */
        GetDefaultUri(
            [in] Int32 type,
            [out] IUri** uri);
    }
}
