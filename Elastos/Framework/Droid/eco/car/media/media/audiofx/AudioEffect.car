module
{
    /**
     * The following UUIDs define effect types corresponding to standard audio
     * effects whose implementation and interface conform to the OpenSL ES
     * specification. The definitions match the corresponding interface IDs in
     * OpenSLES_IID.h
     */

    /**
     * UUID for environmental reverb effect
     * @hide
     */
    /*
    public static final UUID EFFECT_TYPE_ENV_REVERB = UUID
            .fromString("c2e5d5f0-94bd-4763-9cac-4e234d06839e");
    */
    const AudioEffect_EFFECT_TYPE_ENV_REVERB = 0;

    /**
     * UUID for preset reverb effect
     * @hide
     */
    /*
    public static final UUID EFFECT_TYPE_PRESET_REVERB = UUID
            .fromString("47382d60-ddd8-11db-bf3a-0002a5d5c51b");
    */
    const AudioEffect_EFFECT_TYPE_PRESET_REVERB = 1;

    /**
     * UUID for equalizer effect
     * @hide
     */
    /*
    /*
    public static final UUID EFFECT_TYPE_EQUALIZER = UUID
            .fromString("0bed4300-ddd6-11db-8f34-0002a5d5c51b");
    */
    const AudioEffect_EFFECT_TYPE_EQUALIZER = 2;

    /**
     * UUID for bass boost effect
     * @hide
     */
    /*
    public static final UUID EFFECT_TYPE_BASS_BOOST = UUID
            .fromString("0634f220-ddd4-11db-a0fc-0002a5d5c51b");
    */
    const AudioEffect_EFFECT_TYPE_BASS_BOOST = 3;

    /**
     * UUID for virtualizer effect
     * @hide
     */
    /*
    public static final UUID EFFECT_TYPE_VIRTUALIZER = UUID
            .fromString("37cc2c00-dddd-11db-8577-0002a5d5c51b");
    */
    const AudioEffect_EFFECT_TYPE_VIRTUALIZER = 4;

    /**
     * Null effect UUID. Used when the UUID for effect type of
     * @hide
     */
    /*
    public static final UUID EFFECT_TYPE_NULL = UUID
            .fromString("ec7178ec-e5e1-4432-a3f4-4657e6795210");
    */
    const AudioEffect_EFFECT_TYPE_NULL = 5;

    /**
     * State of an AudioEffect object that was not successfully initialized upon
     * creation
     * @hide
     */
    const AudioEffect_STATE_UNINITIALIZED = 0;

    /**
     * State of an AudioEffect object that is ready to be used.
     * @hide
     */
    const AudioEffect_STATE_INITIALIZED = 1;

    // to keep in sync with
    // frameworks/base/include/media/AudioEffect.h
    /**
     * Event id for engine control ownership change notification.
     * @hide
     */
    const AudioEffect_NATIVE_EVENT_CONTROL_STATUS = 0;
    /**
     * Event id for engine state change notification.
     * @hide
     */
    const AudioEffect_NATIVE_EVENT_ENABLED_STATUS = 1;
    /**
     * Event id for engine parameter change notification.
     * @hide
     */
    const AudioEffect_NATIVE_EVENT_PARAMETER_CHANGED = 2;

    /**
     * Successful operation.
     */
    const AudioEffect_SUCCESS = 0;
    /**
     * Unspecified error.
     */
    const AudioEffect_ERROR = -1;
    /**
     * Internal opreation status. Not returned by any method.
     */
    const AudioEffect_ALREADY_EXISTS = -2;
    /**
     * Operation failed due to bad object initialization.
     */
    const AudioEffect_ERROR_NO_INIT = -3;
    /**
     * Operation failed due to bad parameter value.
     */
    const AudioEffect_ERROR_BAD_VALUE = -4;
    /**
     * Operation failed because it was requested in wrong state.
     */
    const AudioEffect_ERROR_INVALID_OPERATION = -5;
    /**
     * Operation failed due to lack of memory.
     */
    const AudioEffect_ERROR_NO_MEMORY = -6;
    /**
     * Operation failed due to dead remote object.
     */
    const AudioEffect_ERROR_DEAD_OBJECT = -7;

    /**
     * Effect connection mode is insert. Specifying an audio session ID when creating the effect
     * will insert this effect after all players in the same audio session.
     */
    const AudioEffect_EFFECT_INSERT = "Insert";
    /**
     * Effect connection mode is auxiliary.
     * <p>Auxiliary effects must be created on session 0 (global output mix). In order for a
     * MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to
     * this effect and a send level must be specified.
     * <p>Use the effect ID returned by {@link #getId()} to designate this particular effect when
     * attaching it to the MediaPlayer or AudioTrack.
     */
    const AudioEffect_EFFECT_AUXILIARY = "Auxiliary";

    interface IAudioEffect;

    interface IAudioEffectDescriptor {

    }

    // ---------------------------------------------------------
    // Interface definitions
    // --------------------
    /**
     * The OnEnableStatusChangeListener interface defines a method called by the AudioEffect
     * when a the enabled state of the effect engine was changed by the controlling application.
     */
    interface IAudioEffectOnEnableStatusChangeListener
    {
           /**
            * Called on the listener to notify it that the effect engine has been
            * enabled or disabled.
            * @param effect the effect on which the interface is registered.
            * @param enabled new effect state.
            */
           OnEnableStatusChange(
            [in] IAudioEffect* effect,
            [in] Boolean enabled);
    }

    /**
     * The OnControlStatusChangeListener interface defines a method called by the AudioEffect
     * when a the control of the effect engine is gained or lost by the application
     */
    interface IAudioEffectOnControlStatusChangeListener {
        /**
         * Called on the listener to notify it that the effect engine control
         * has been taken or returned.
         * @param effect the effect on which the interface is registered.
         * @param controlGranted true if the application has been granted control of the effect
         * engine, false otherwise.
         */
        OnControlStatusChange(
            [in] IAudioEffect* effect,
            [in] Boolean controlGranted);
    }

    /**
     * The OnParameterChangeListener interface defines a method called by the AudioEffect
     * when a parameter is changed in the effect engine by the controlling application.
     * @hide
     */
    interface IAudioEffectOnParameterChangeListener {
        /**
         * Called on the listener to notify it that a parameter value has changed.
         * @param effect the effect on which the interface is registered.
         * @param status status of the set parameter operation.
         * @param param ID of the modified parameter.
         * @param value the new parameter value.
         */
        OnParameterChange(
            [in] IAudioEffect* effect,
            [in] Int32 status,
            [in] ArrayOf<Byte> param,
            [in] ArrayOf<Byte> value);
    }

    interface IAudioEffect {
        /**
         * Releases the native AudioEffect resources. It is a good practice to
         * release the effect engine when not in use as control can be returned to
         * other applications or the native resources released.
         */
        ReleaseIt();

        /**
         * Get the effect descriptor.
         *
         * @see android.media.audiofx.AudioEffect.Descriptor
         * @throws IllegalStateException
         */
        GetDescriptor(
            [out] IAudioEffectDescriptor** descriptor);

        // --------------------------------------------------------------------------
        // Effects Enumeration
        // --------------------

        /**
         * Query all effects available on the platform. Returns an array of
         * {@link android.media.audiofx.AudioEffect.Descriptor} objects
         *
         * @throws IllegalStateException
         */

        QueryEffects(
            [out,callee] ArrayOf<IAudioEffectDescriptor>* descriptor);

        // --------------------------------------------------------------------------
        // Control methods
        // --------------------

        /**
         * Enable or disable the effect.
         * Creating an audio effect does not automatically apply this effect on the audio source. It
         * creates the resources necessary to process this effect but the audio signal is still bypassed
         * through the effect engine. Calling this method will make that the effect is actually applied
         * or not to the audio content being played in the corresponding audio session.
         *
         * @param enabled the requested enable state
         * @return {@link #SUCCESS} in case of success, {@link #ERROR_INVALID_OPERATION}
         *         or {@link #ERROR_DEAD_OBJECT} in case of failure.
         * @throws IllegalStateException
         */
        SetEnabled(
            [in] Boolean enabled,
            [out] Int32* result);

        /**
         * Set effect parameter. The setParameter method is provided in several
         * forms addressing most common parameter formats. This form is the most
         * generic one where the parameter and its value are both specified as an
         * array of bytes. The parameter and value type and length are therefore
         * totally free. For standard effect defined by OpenSL ES, the parameter
         * format and values must match the definitions in the corresponding OpenSL
         * ES interface.
         *
         * @param param the identifier of the parameter to set
         * @param value the new value for the specified parameter
         * @return {@link #SUCCESS} in case of success, {@link #ERROR_BAD_VALUE},
         *         {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or
         *         {@link #ERROR_DEAD_OBJECT} in case of failure
         * @throws IllegalStateException
         * @hide
         */
        SetParameter(
            [in] ArrayOf<Byte> param,
            [in] ArrayOf<Byte> value);

        /**
         * Set effect parameter. The parameter and its value are integers.
         *
         * @see #setParameter(byte[], byte[])
         * @hide
         */
        SetParameterEx(
            [in] Int32 param,
            [in] Int32 value);

        /**
         * Set effect parameter. The parameter is an integer and the value is a
         * short integer.
         *
         * @see #setParameter(byte[], byte[])
         * @hide
         */
        SetParameterEx2(
            [in] Int32 param,
            [in] Int16 value);

        /**
         * Set effect parameter. The parameter is an integer and the value is an
         * array of bytes.
         *
         * @see #setParameter(byte[], byte[])
         * @hide
         */
        SetParameterEx3(
            [in] Int32 param,
            [in] ArrayOf<Byte> value);

        /**
         * Set effect parameter. The parameter is an array of 1 or 2 integers and
         * the value is also an array of 1 or 2 integers
         *
         * @see #setParameter(byte[], byte[])
         * @hide
         */
        SetParameterEx4(
            [in] ArrayOf<Int32> param,
            [in] ArrayOf<Int32> value);

        /**
         * Set effect parameter. The parameter is an array of 1 or 2 integers and
         * the value is an array of 1 or 2 short integers
         *
         * @see #setParameter(byte[], byte[])
         * @hide
         */
        SetParameterEx5(
            [in] ArrayOf<Int32> param,
            [in] ArrayOf<Int16> value);

        /**
         * Set effect parameter. The parameter is an array of 1 or 2 integers and
         * the value is an array of bytes
         *
         * @see #setParameter(byte[], byte[])
         * @hide
         */
        SetParameterEx6(
            [in] ArrayOf<Int32> param,
            [in] ArrayOf<Byte> value);

        /**
         * Get effect parameter. The getParameter method is provided in several
         * forms addressing most common parameter formats. This form is the most
         * generic one where the parameter and its value are both specified as an
         * array of bytes. The parameter and value type and length are therefore
         * totally free.
         *
         * @param param the identifier of the parameter to set
         * @param value the new value for the specified parameter
         * @return {@link #SUCCESS} in case of success, {@link #ERROR_BAD_VALUE},
         *         {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or
         *         {@link #ERROR_DEAD_OBJECT} in case of failure When called, value.length
         *         indicates the maximum size of the returned parameters value. When
         *         returning, value.length is updated with the actual size of the
         *         returned value.
         * @throws IllegalStateException
         * @hide
         */
        GetParameter(
            [in] ArrayOf<Byte> param,
            [out] ArrayOf<Byte> value,
            [out] Int32* status);

        /**
         * Get effect parameter. The parameter is an integer and the value is an
         * array of bytes.
         *
         * @see #getParameter(byte[], byte[])
         * @hide
         */
        GetParameterEx(
            [in] ArrayOf<Int32> param,
            [in] ArrayOf<Byte> value,
            [out] Int32* status);

        /**
         * Get effect parameter. The parameter is an integer and the value is an
         * array of 1 or 2 integers
         *
         * @see #getParameter(byte[], byte[])
         * @hide
         */
        GetParameterEx2(
            [in] Int32 param,
            [out] ArrayOf<Int32> value,
            [out] Int32* status);

        /**
         * Get effect parameter. The parameter is an integer and the value is an
         * array of 1 or 2 short integers
         *
         * @see #getParameter(byte[], byte[])
         * @hide
         */
        GetParameterEx3(
            [in] Int32 param,
            [out] ArrayOf<Int16> value,
            [out] Int32* status);

        /**
         * Get effect parameter. The parameter is an array of 1 or 2 integers and
         * the value is also an array of 1 or 2 integers
         *
         * @see #getParameter(byte[], byte[])
         * @hide
         */
        GetParameterEx4(
            [in] ArrayOf<Int32> param,
            [out] ArrayOf<Int32> value,
            [out] Int32* status);

        /**
         * Get effect parameter. The parameter is an array of 1 or 2 integers and
         * the value is an array of 1 or 2 short integers
         *
         * @see #getParameter(byte[], byte[])
         * @hide
         */
        GetParameterEx5(
            [in] ArrayOf<Int32> param,
            [out] ArrayOf<Int16> value,
            [out] Int32* status);

        /**
         * Get effect parameter. The parameter is an array of 1 or 2 integers and
         * the value is an array of bytes
         *
         * @see #getParameter(byte[], byte[])
         * @hide
         */
        GetParameterEx6(
            [in] ArrayOf<Int32> param,
            [in] ArrayOf<Byte> value);

        /**
         * Send a command to the effect engine. This method is intended to send
         * proprietary commands to a particular effect implementation.
         *
         * @hide
         */
        Command(
            [in] Int32 cmdCode,
            [in] ArrayOf<Byte> command,
            [out] ArrayOf<Byte> reply,
            [out] Int32* status);

        /**
         * Returns effect unique identifier. This system wide unique identifier can
         * be used to attach this effect to a MediaPlayer or an AudioTrack when the
         * effect is an auxiliary effect (Reverb)
         *
         * @return the effect identifier.
         * @throws IllegalStateException
         */
        GetId(
            [out] Int32* Id);

        /**
         * Returns effect enabled state
         *
         * @return true if the effect is enabled, false otherwise.
         * @throws IllegalStateException
         */
        GetEnabled(
            [out] Boolean* getenable);

        /**
         * Checks if this AudioEffect object is controlling the effect engine.
         *
         * @return true if this instance has control of effect engine, false
         *         otherwise.
         * @throws IllegalStateException
         */
        HasControl(
            [out] Boolean* control);

        // --------------------------------------------------------------------------
        // Initialization / configuration
        // --------------------
        /**
         * Sets the listener AudioEffect notifies when the effect engine is enabled
         * or disabled.
         *
         * @param listener
         */
        SetEnableStatusListener(
            [in] IAudioEffectOnEnableStatusChangeListener* listener);

         /**
         * Sets the listener AudioEffect notifies when the effect engine control is
         * taken or returned.
         *
         * @param listener
         */
        SetControlStatusListener(
            [in] IAudioEffectOnControlStatusChangeListener* listener);

        /**
         * Sets the listener AudioEffect notifies when a parameter is changed.
         *
         * @param listener
         * @hide
         */
        SetParameterListener(
            [in] IAudioEffectOnParameterChangeListener* listener);

        // ---------------------------------------------------------
        // Utility methods
        // ------------------

        /**
        * @hide
        */
        CheckState(
            [in] CString methodName);

        /**
         * @hide
         */
        CheckStatus(
            [in] Int32 status);

        /**
         * @hide
         */
        ByteArrayToInt32(
            [in] ArrayOf<Byte> valueBuf,
            [out] Int32* value);

        /**
         * @hide
         */
        ByteArrayToInt32Ex(
            [in] ArrayOf<Byte> valueBuf,
            [in] Int32 offset,
            [out] Int32* value);

        /**
         * @hide
         */
        Int32ToByteArray(
            [in] Int32 value);

        /**
         * @hide
         */
        ByteArrayToInt16(
            [in] ArrayOf<Byte> valueBuf);

        /**
         * @hide
         */
        ByteArrayToInt16Ex(
            [in] ArrayOf<Byte> valueBuf,
            [in] Int32 offset);

        /**
         * @hide
         */
        Int16ToByteArray(
            [in] Int16 value);

        /**
         * @hide
         */
        ConcatArrays(
            [in] ArrayOf<Byte> array1,
            [in] ArrayOf<Byte> array2,
            [out, callee] ArrayOf<Byte>* result);
    }
}