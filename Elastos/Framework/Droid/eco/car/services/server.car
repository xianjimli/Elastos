
module
{
    merge("server/connectivity/Tethering.car");
    merge("server/am.car");
    merge("server/LightsService.car");
    merge("server/InputMethodManagerService.car");
    merge("server/BatteryService.car");
    merge("server/ConnectivityService.car");

    class CWindowSession {
        constructor(
            [in] IWindowManager* wmService,
            [in] IInputMethodClient* client,
            [in] IInputContext* inputContext);

        interface IWindowSession;
    }

    class CWindowManagerService {
        interface IWindowManager;
    }

    class CCapsuleManagerService {
        constructor(
            [in] IContext* ctx,
            [in] Boolean factoryTest);

        interface ICapsuleManager;
    }

    class CNotificationManagerService {
        constructor(
            [in] IContext* ctx,
            [in] IStatusBarService* statusBar,
            [in] ILightsManager* lights);

        interface INotificationManager;
    }

    class CStatusBarManagerService {
        constructor(
            [in] IContext* ctx);

        interface IStatusBarService;
    }

    class CLightsService {
        constructor(
            [in] IContext* ctx);

        interface ILightsManager;
    }

    class CLocationManagerService {
        constructor(
            [in] IContext* ctx);

        interface ILocationManager;
        interface IRunnable;
    }

    class CInputMethodManagerService {
        constructor(
            [in] IContext* ctx,
            [in] IStatusBarService* statusBar);

        interface IInputMethodManagerService;
        interface IInputMethodManager;
        interface IServiceConnection;
    }

    class CInputMethodManagerServiceMethodCallback {
        constructor(
            [in] IInputMethod* method,
            [in] Handle32 host);

        interface IInputMethodCallback;
    }

    class CAccessibilityManagerService {
        /**
         * Creates a new instance.
         *
         * @param context A {@link Context} instance.
         */
        constructor(
            [in] IContext* context);

        interface IAccessibilityManager;
    }

    /**
     * This class represents an accessibility service. It stores all per service
     * data required for the service management, provides API for starting/stopping the
     * service and is responsible for adding/removing the service in the data structures
     * for service management. The class also exposes configuration interface that is
     * passed to the service it represents as soon it is bound. It also serves as the
     * connection for the service.
     */
    class CAccessibilityServiceConnection {
        constructor(
            [in] IAccessibilityManager* manager,
            [in] IComponentName* componentName);

        interface IAccessibilityServiceConnection;
        interface IServiceConnection;
    }

    class CAppWidgetService {
        constructor(
            [in] IContext* context);

        interface IAppWidgetService;
    }

    class CBackupManagerService {
        constructor(
            [in] IContext* ctx);

        interface IBackupManager;
    }

    class CBatteryService {
        constructor(
            [in] IContext* context);

        interface IBatteryService;
    }

    class CConnectivityService {
        constructor(
            [in] IContext* context);

        //interface IConnectivityManagerStub;
        interface IConnectivityService;
    }

    class CTethering {
        constructor(
            [in] IContext* context,
            [in] IApartment* looper);

        interface ITethering;
    }

}
