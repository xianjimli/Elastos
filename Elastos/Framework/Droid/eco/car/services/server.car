
module
{
    merge("server/LightsService.car");
    merge("server/InputMethodManagerService.car");
    merge("server/am.car");

    class CWindowSession {
        constructor(
            [in] IWindowManager* wmService,
            [in] IInputMethodClient* client,
            [in] IInputContext* inputContext);

        interface IWindowSession;
    }

    class CWindowManagerService {
        interface IWindowManager;
    }

    class CCapsuleManagerService {
        constructor();

        constructor(
            [in] IContext* ctx,
            [in] Boolean factoryTest);

        interface ICapsuleManager;
    }

    class CNotificationManagerService {
        constructor(
            [in] IContext* ctx,
            [in] IStatusBarService* statusBar,
            [in] ILightsManager* lights);

        interface INotificationManager;
    }

    class CStatusBarManagerService {
        constructor(
            [in] IContext* ctx);

        interface IStatusBarService;
    }

    class CLightsService {
        constructor(
            [in] IContext* ctx);

        interface ILightsManager;
    }

    class CLocationManagerService {
        constructor(
            [in] IContext* ctx);

        interface ILocationManager;
        interface IRunnable;
    }

    class CInputMethodManagerService {
        constructor(
            [in] IContext* context,
            [in] IStatusBarService* statusBar);

        interface IInputMethodManagerService;
        interface IInputMethodManager;
        interface IServiceConnection;
    }

    class CInputMethodManagerServiceMethodCallback {
        constructor(
            [in] IInputMethod* method,
            [in] Handle32 host);

        interface IInputMethodCallback;
    }
}
