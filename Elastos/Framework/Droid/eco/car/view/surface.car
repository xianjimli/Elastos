
module
{
    /* flags used in constructor (keep in sync with ISurfaceComposer.h) */

    /** Surface is created hidden */
    const Surface_HIDDEN = 0x00000004;

    /** The surface is to be used by hardware accelerators or DMA engines
     * @deprecated this is ignored, this value is set automatically when needed.
     */
    // @Deprecated
    const Surface_HARDWARE = 0x00000010;

    /** Implies "HARDWARE", the surface is to be used by the GPU
     * additionally the backbuffer is never preserved for these
     * surfaces.
     * @deprecated this is ignored, this value is set automatically when needed.
     */
    // @Deprecated
    const Surface_GPU = 0x00000028;

    /** The surface contains secure content, special measures will
     * be taken to disallow the surface's content to be copied from
     * another process. In particular, screenshots and VNC servers will
     * be disabled, but other measures can take place, for instance the
     * surface might not be hardware accelerated. */
    const Surface_SECURE = 0x00000080;

    /** Creates a surface where color components are interpreted as
     *  "non pre-multiplied" by their alpha channel. Of course this flag is
     *  meaningless for surfaces without an alpha channel. By default
     *  surfaces are pre-multiplied, which means that each color component is
     *  already multiplied by its alpha value. In this case the blending
     *  equation used is:
     *
     *    DEST = SRC + DEST * (1-SRC_ALPHA)
     *
     *  By contrast, non pre-multiplied surfaces use the following equation:
     *
     *    DEST = SRC * SRC_ALPHA * DEST * (1-SRC_ALPHA)
     *
     *  pre-multiplied surfaces must always be used if transparent pixels are
     *  composited on top of each-other into the surface. A pre-multiplied
     *  surface can never lower the value of the alpha component of a given
     *  pixel.
     *
     *  In some rare situations, a non pre-multiplied surface is preferable.
     *
     */
    const Surface_NON_PREMULTIPLIED = 0x00000100;

    /**
     * Creates a surface without a rendering buffer. Instead, the content
     * of the surface must be pushed by an external entity. This is type
     * of surface can be used for efficient camera preview or movie
     * play back.
     */
    const Surface_PUSH_BUFFERS = 0x00000200;

    /** Creates a normal surface. This is the default */
    const Surface_FX_SURFACE_NORMAL = 0x00000000;

    /** Creates a Blur surface. Everything behind this surface is blurred
     * by some amount. The quality and refresh speed of the blur effect
     * is not settable or guaranteed.
     * It is an error to lock a Blur surface, since it doesn't have
     * a backing store.
     */
    const Surface_FX_SURFACE_BLUR = 0x00010000;

    /** Creates a Dim surface. Everything behind this surface is dimmed
     * by the amount specified in setAlpha().
     * It is an error to lock a Dim surface, since it doesn't have
     * a backing store.
     */
    const Surface_FX_SURFACE_DIM = 0x00020000;

    /** Mask used for FX values above */
    const Surface_FX_SURFACE_MASK = 0x000F0000;

    /* flags used with setFlags() (keep in sync with ISurfaceComposer.h) */

    /** Hide the surface. Equivalent to calling hide() */
    const Surface_SURFACE_HIDDEN = 0x01;

    /** Freeze the surface. Equivalent to calling freeze() */
    const Surface_SURFACE_FROZEN = 0x02;

    /**
     * @deprecated use {@link #SURFACE_FROZEN} instead.
     */
    // @Deprecated
    const Surface_SURACE_FROZEN = 0x02;

    /** Enable dithering when compositing this surface */
    const Surface_SURFACE_DITHER = 0x04;

    const Surface_SURFACE_BLUR_FREEZE = 0x10;

    /* orientations for setOrientation() */
    const Surface_ROTATION_0       = 0;
    const Surface_ROTATION_90      = 1;
    const Surface_ROTATION_180     = 2;
    const Surface_ROTATION_270     = 3;

    /**
     * Disable the orientation animation
     * {@hide}
     */
    const Surface_FLAGS_ORIENTATION_ANIMATION_DISABLE = 0x000000001;

    interface IDisplayMetrics;
    interface ITranslator;
    interface IRect;
    interface ICanvas;
    interface IRegion;

    interface ISurface {
        /**
         * Sets the display metrics used to provide canva's width/height in compatibility mode.
         */
        SetCompatibleDisplayMetrics(
            [in] IDisplayMetrics * metrics,
            [in] ITranslator * translator);

        /**
         * Copy another surface to this one.  This surface now holds a reference
         * to the same data as the original surface, and is -not- the owner.
         * {@hide}
         */
        CopyFrom(
            [in] ISurface * o);

        /**
         * Does this object hold a valid surface?  Returns true if it holds
         * a physical surface, so lockCanvas() will succeed.  Otherwise
         * returns false.
         */
        IsValid(
            [out] Boolean * isValid);

        /** Free all server-side state associated with this surface and
         * release this object's reference. {@hide} */
        Destroy();

        /** Release the local reference to the server-side surface. @hide */
        ReleaseSurface();   // primitive name is Release() in android

        /** draw into a surface */
        LockCanvas(
            [in] IRect * dirty,
            [out] ICanvas ** canvas);

        LockCanvasNative(
            [in] IRect * dirty,
            [out] ICanvas ** canvas);

        /** unlock the surface and asks a page flip */
        UnlockCanvasAndPost(
            [in] ICanvas * canvas);

        /**
         * unlock the surface. the screen won't be updated until
         * post() or postAll() is called
         */
        UnlockCanvas(
            [in] ICanvas * canvas);

        /**
         * Freezes the specified display, No updating of the screen will occur
         * until unfreezeDisplay() is called. Everything else works as usual though,
         * in particular transactions.
         * @param display
         * {@hide}
         */
        FreezeDisplay(
            [in] Int32 display);

        /**
         * resume updating the specified display.
         * @param display
         * {@hide}
         */
        UnfreezeDisplay(
            [in] Int32 display);

        /**
         * set the orientation of the given display.
         * @param display
         * @param orientation
         * @param flags
         * {@hide}
         */
        SetOrientationEx(
            [in] Int32 display,
            [in] Int32 orientation,
            [in] Int32 flags);

        /**
         * set the orientation of the given display.
         * @param display
         * @param orientation
         */
        SetOrientation(
            [in] Int32 display,
            [in] Int32 orientation);

        /**
         * set surface parameters.
         * needs to be inside open/closeTransaction block
         */
        SetLayer(
            [in] Int32 zorder);

        SetPosition(
            [in] Int32 x,
            [in] Int32 y);

        SetSize(
            [in] Int32 w,
            [in] Int32 h);

        Hide();

        Show();

        SetTransparentRegionHint(
            [in] IRegion * region);

        SetAlpha(
            [in] Float alpha);

        SetMatrix(
            [in] Float dsdx,
            [in] Float dtdx,
            [in] Float dsdy,
            [in] Float dtdy);

        Freeze();

        Unfreeze();

        SetFreezeTint(
            [in] Int32 tint);

        SetFlags(
            [in] Int32 flags,
            [in] Int32 mask);
    }
}
