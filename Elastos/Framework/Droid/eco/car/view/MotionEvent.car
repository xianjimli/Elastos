
module
{
    /**
     * Bit mask of the parts of the action code that are the action itself.
     */
    const MotionEvent_ACTION_MASK             = 0xff;

    /**
     * Constant for {@link #getAction}: A pressed gesture has started, the
     * motion contains the initial starting location.
     */
    const MotionEvent_ACTION_DOWN             = 0;

    /**
     * Constant for {@link #getAction}: A pressed gesture has finished, the
     * motion contains the const release location as well as any intermediate
     * points since the last down or move event.
     */
    const MotionEvent_ACTION_UP               = 1;

    /**
     * Constant for {@link #getAction}: A change has happened during a
     * press gesture (between {@link #ACTION_DOWN} and {@link #ACTION_UP}).
     * The motion contains the most recent point, as well as any intermediate
     * points since the last down or move event.
     */
    const MotionEvent_ACTION_MOVE             = 2;

    /**
     * Constant for {@link #getAction}: The current gesture has been aborted.
     * You will not receive any more points in it.  You should treat this as
     * an up event, but not perform any action that you normally would.
     */
    const MotionEvent_ACTION_CANCEL           = 3;

    /**
     * Constant for {@link #getAction}: A movement has happened outside of the
     * normal bounds of the UI element.  This does not provide a full gesture,
     * but only the initial location of the movement/touch.
     */
    const MotionEvent_ACTION_OUTSIDE          = 4;

    /**
     * A non-primary pointer has gone down.  The bits in
     * {@link #ACTION_POINTER_ID_MASK} indicate which pointer changed.
     */
    const MotionEvent_ACTION_POINTER_DOWN     = 5;

    /**
     * A non-primary pointer has gone up.  The bits in
     * {@link #ACTION_POINTER_ID_MASK} indicate which pointer changed.
     */
    const MotionEvent_ACTION_POINTER_UP       = 6;

    /**
     * Bits in the action code that represent a pointer index, used with
     * {@link #ACTION_POINTER_DOWN} and {@link #ACTION_POINTER_UP}.  Shifting
     * down by {@link #ACTION_POINTER_INDEX_SHIFT} provides the actual pointer
     * index where the data for the pointer going up or down can be found; you can
     * get its identifier with {@link #getPointerId(Int32)} and the actual
     * data with {@link #getX(Int32)} etc.
     */
    const MotionEvent_ACTION_POINTER_INDEX_MASK  = 0xff00;

    /**
     * Bit shift for the action bits holding the pointer index as
     * defined by {@link #ACTION_POINTER_INDEX_MASK}.
     */
    const MotionEvent_ACTION_POINTER_INDEX_SHIFT = 8;

    /**
     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
     * data index associated with {@link #ACTION_POINTER_DOWN}.
     */
    //@Deprecated
    const MotionEvent_ACTION_POINTER_1_DOWN   = 0x0005;//MotionEvent_ACTION_POINTER_DOWN | 0x0000;

    /**
     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
     * data index associated with {@link #ACTION_POINTER_DOWN}.
     */
    //@Deprecated
    const MotionEvent_ACTION_POINTER_2_DOWN   = 0x0105;//MotionEvent_ACTION_POINTER_DOWN | 0x0100;

    /**
     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
     * data index associated with {@link #ACTION_POINTER_DOWN}.
     */
    //@Deprecated
    const MotionEvent_ACTION_POINTER_3_DOWN   = 0x0205;//MotionEvent_ACTION_POINTER_DOWN | 0x0200;

    /**
     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
     * data index associated with {@link #ACTION_POINTER_UP}.
     */
    //@Deprecated
    const MotionEvent_ACTION_POINTER_1_UP     = 0x0006;//MotionEvent_ACTION_POINTER_UP | 0x0000;

    /**
     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
     * data index associated with {@link #ACTION_POINTER_UP}.
     */
    //@Deprecated
    const MotionEvent_ACTION_POINTER_2_UP     = 0x0106;//MotionEvent_ACTION_POINTER_UP | 0x0100;

    /**
     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
     * data index associated with {@link #ACTION_POINTER_UP}.
     */
    //@Deprecated
    const MotionEvent_ACTION_POINTER_3_UP     = 0x0206;//MotionEvent_ACTION_POINTER_UP | 0x0200;

    /**
     * @deprecated Renamed to {@link #ACTION_POINTER_INDEX_MASK} to match
     * the actual data contained in these bits.
     */
    //@Deprecated
    const MotionEvent_ACTION_POINTER_ID_MASK  = 0xff00;

    /**
     * @deprecated Renamed to {@link #ACTION_POINTER_INDEX_SHIFT} to match
     * the actual data contained in these bits.
     */
    //@Deprecated
    const MotionEvent_ACTION_POINTER_ID_SHIFT = 8;

    /**
     * This flag indicates that the window that received this motion event is partly
     * or wholly obscured by another visible window above it.  This flag is set to true
     * even if the event did not directly pass through the obscured area.
     * A security sensitive application can check this flag to identify situations in which
     * a malicious application may have covered up part of its content for the purpose
     * of misleading the user or hijacking touches.  An appropriate response might be
     * to drop the suspect touches or to take additional precautions to confirm the user's
     * actual intent.
     */
    const MotionEvent_FLAG_WINDOW_IS_OBSCURED = 0x1;

    /**
     * Flag indicating the motion event intersected the top edge of the screen.
     */
    const MotionEvent_EDGE_TOP = 0x00000001;

    /**
     * Flag indicating the motion event intersected the bottom edge of the screen.
     */
    const MotionEvent_EDGE_BOTTOM = 0x00000002;

    /**
     * Flag indicating the motion event intersected the left edge of the screen.
     */
    const MotionEvent_EDGE_LEFT = 0x00000004;

    /**
     * Flag indicating the motion event intersected the right edge of the screen.
     */
    const MotionEvent_EDGE_RIGHT = 0x00000008;


    interface IMotionEvent extends IInputEvent {
        /**
         * Recycle the MotionEvent, to be re-used by a later caller.  After calling
         * this function you must not ever touch the event again.
         */
        Recycle();

        /**
         * Scales down the coordination of this event by the given scale.
         *
         * @hide
         */
        Scale(
            [in] Float scale);

        /**
         * Return the kind of action being performed -- one of either
         * {@link #ACTION_DOWN}, {@link #ACTION_MOVE}, {@link #ACTION_UP}, or
         * {@link #ACTION_CANCEL}.  Consider using {@link #getActionMasked}
         * and {@link #getActionIndex} to retrieve the separate masked action
         * and pointer index.
         */
        GetAction(
            [out] Int32* action);

        /**
         * Return the masked action being performed, without pointer index
         * information.  May be any of the actions: {@link #ACTION_DOWN},
         * {@link #ACTION_MOVE}, {@link #ACTION_UP}, {@link #ACTION_CANCEL},
         * {@link #ACTION_POINTER_DOWN}, or {@link #ACTION_POINTER_UP}.
         * Use {@link #getActionIndex} to return the index associated with
         * pointer actions.
         */
        GetActionMasked(
            [out] Int32* actionMasked);

        /**
         * For {@link #ACTION_POINTER_DOWN} or {@link #ACTION_POINTER_UP}
         * as returned by {@link #getActionMasked}, this returns the associated
         * pointer index.  The index may be used with {@link #getPointerId(Int32)},
         * {@link #getX(Int32)}, {@link #getY(Int32)}, {@link #getPressure(Int32)},
         * and {@link #getSize(Int32)} to get information about the pointer that has
         * gone down or up.
         */
        GetActionIndex(
            [out] Int32* actionIndex);

        /**
         * Gets the motion event flags.
         *
         * @see #FLAG_WINDOW_IS_OBSCURED
         */
        GetFlags(
            [out] Int32* flags);

        /**
         * Returns the time (in ms) when the user originally pressed down to start
         * a stream of position events.
         */
        GetDownTime(
            [out] Int64* downTime);

        /**
         * Returns the time (in ms) when this specific event was generated.
         */
        GetEventTime(
            [out] Int64* eventTime);

        /**
         * Returns the time (in ns) when this specific event was generated.
         * The value is in nanosecond precision but it may not have nanosecond accuracy.
         *
         * @hide
         */
        GetEventTimeNano(
            [out] Int64* eventTimeNano);

        /**
         * {@link #getX(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetX(
            [out] Float* x);

        /**
         * {@link #getY(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetY(
            [out] Float* y);

        /**
         * {@link #getPressure(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetPressure(
            [out] Float* pressure);

        /**
         * {@link #getSize(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetSize(
            [out] Float* size);

        /**
         * {@link #getTouchMajor(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetTouchMajor(
            [out] Float* touchMajor);

        /**
         * {@link #getTouchMinor(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetTouchMinor(
            [out] Float* touchMinor);

        /**
         * {@link #getToolMajor(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetToolMajor(
            [out] Float* toolMajor);

        /**
         * {@link #getToolMinor(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetToolMinor(
            [out] Float* toolMinor);

        /**
         * {@link #getOrientation(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetOrientation(
            [out] Float* orientation);

        /**
         * The number of pointers of data contained in this event.  Always
         * >= 1.
         */
        GetPointerCount(
            [out] Int32* count);

        /**
         * Return the pointer identifier associated with a particular pointer
         * data index is this event.  The identifier tells you the actual pointer
         * number associated with the data, accounting for individual pointers
         * going up and down since the start of the current gesture.
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         */
        GetPointerId(
            [in] Int32 pointerIndex,
            [out] Int32* pointerId);

        /**
         * Given a pointer identifier, find the index of its data in the event.
         *
         * @param pointerId The identifier of the pointer to be found.
         * @return Returns either the index of the pointer (for use with
         * {@link #getX(Int32)} et al.), or -1 if there is no data available for
         * that pointer identifier.
         */
        FindPointerIndex(
            [in] Int32 pointerId,
            [out] Int32* pointerIndex);

        /**
         * Returns the X coordinate of this event for the given pointer
         * <em>index</em> (use {@link #getPointerId(Int32)} to find the pointer
         * identifier for this index).
         * Whole numbers are pixels; the
         * value may have a fraction for input devices that are sub-pixel precise.
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         */
        GetXEx(
            [in] Int32 pointerIndex,
            [out] Float* x);

        /**
         * Returns the Y coordinate of this event for the given pointer
         * <em>index</em> (use {@link #getPointerId(Int32)} to find the pointer
         * identifier for this index).
         * Whole numbers are pixels; the
         * value may have a fraction for input devices that are sub-pixel precise.
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         */
        GetYEx(
            [in] Int32 pointerIndex,
            [out] Float* y);

        /**
         * Returns the current pressure of this event for the given pointer
         * <em>index</em> (use {@link #getPointerId(Int32)} to find the pointer
         * identifier for this index).
         * The pressure generally
         * ranges from 0 (no pressure at all) to 1 (normal pressure), however
         * values higher than 1 may be generated depending on the calibration of
         * the input device.
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         */
        GetPressureEx(
            [in] Int32 pointerIndex,
            [out] Float* pressure);

        /**
         * Returns a scaled value of the approximate size for the given pointer
         * <em>index</em> (use {@link #getPointerId(Int32)} to find the pointer
         * identifier for this index).
         * This represents some approximation of the area of the screen being
         * pressed; the actual value in pixels corresponding to the
         * touch is normalized with the device specific range of values
         * and scaled to a value between 0 and 1. The value of size can be used to
         * determine fat touch events.
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         */
        GetSizeEx(
            [in] Int32 pointerIndex,
            [out] Float* size);

        /**
         * Returns the length of the major axis of an ellipse that describes the touch
         * area at the point of contact for the given pointer
         * <em>index</em> (use {@link #getPointerId(Int32)} to find the pointer
         * identifier for this index).
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         */
        GetTouchMajorEx(
            [in] Int32 pointerIndex,
            [out] Float* touchMajor);

        /**
         * Returns the length of the minor axis of an ellipse that describes the touch
         * area at the point of contact for the given pointer
         * <em>index</em> (use {@link #getPointerId(Int32)} to find the pointer
         * identifier for this index).
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         */
        GetTouchMinorEx(
            [in] Int32 pointerIndex,
            [out] Float* touchMinor);

        /**
         * Returns the length of the major axis of an ellipse that describes the size of
         * the approaching tool for the given pointer
         * <em>index</em> (use {@link #getPointerId(Int32)} to find the pointer
         * identifier for this index).
         * The tool area represents the estimated size of the finger or pen that is
         * touching the device independent of its actual touch area at the point of contact.
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         */
        GetToolMajorEx(
            [in] Int32 pointerIndex,
            [out] Float* toolMajor);

        /**
         * Returns the length of the minor axis of an ellipse that describes the size of
         * the approaching tool for the given pointer
         * <em>index</em> (use {@link #getPointerId(Int32)} to find the pointer
         * identifier for this index).
         * The tool area represents the estimated size of the finger or pen that is
         * touching the device independent of its actual touch area at the point of contact.
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         */
        GetToolMinorEx(
            [in] Int32 pointerIndex,
            [out] Float* toolMinor);

        /**
         * Returns the orientation of the touch area and tool area in radians clockwise from vertical
         * for the given pointer <em>index</em> (use {@link #getPointerId(Int32)} to find the pointer
         * identifier for this index).
         * An angle of 0 degrees indicates that the major axis of contact is oriented
         * upwards, is perfectly circular or is of unknown orientation.  A positive angle
         * indicates that the major axis of contact is oriented to the right.  A negative angle
         * indicates that the major axis of contact is oriented to the left.
         * The full range is from -PI/2 radians (finger pointing fully left) to PI/2 radians
         * (finger pointing fully right).
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         */
        GetOrientationEx(
            [in] Int32 pointerIndex,
            [out] Float* orientation);

        /**
         * Populates a {@link PointerCoords} object with pointer coordinate data for
         * the specified pointer index.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param outPointerCoords The pointer coordinate object to populate.
         * Handle32 = PointerCoords*
         */
        GetPointerCoords(
            [in] Int32 pointerIndex,
            [in] Handle32 outPointerCoords);

        /**
         * Returns the state of any meta / modifier keys that were in effect when
         * the event was generated.  This is the same values as those
         * returned by {@link KeyEvent#getMetaState() KeyEvent.getMetaState}.
         *
         * @return an integer in which each bit set to 1 represents a pressed
         *         meta key
         *
         * @see KeyEvent#getMetaState()
         */
        GetMetaState(
            [out] Int32* metaState);

        /**
         * Returns the original raw X coordinate of this event.  For touch
         * events on the screen, this is the original location of the event
         * on the screen, before it had been adjusted for the containing window
         * and views.
         */
        GetRawX(
            [out] Float* rawX);

        /**
         * Returns the original raw Y coordinate of this event.  For touch
         * events on the screen, this is the original location of the event
         * on the screen, before it had been adjusted for the containing window
         * and views.
         */
        GetRawY(
            [out] Float* rawY);

        /**
         * Return the precision of the X coordinates being reported.  You can
         * multiple this number with {@link #getX} to find the actual hardware
         * value of the X coordinate.
         * @return Returns the precision of X coordinates being reported.
         */
        GetXPrecision(
            [out] Float* xPrecision);
        /**
         * Return the precision of the Y coordinates being reported.  You can
         * multiple this number with {@link #getY} to find the actual hardware
         * value of the Y coordinate.
         * @return Returns the precision of Y coordinates being reported.
         */
        GetYPrecision(
            [out] Float* yPrecision);

        /**
         * Returns the number of historical points in this event.  These are
         * movements that have occurred between this event and the previous event.
         * This only applies to ACTION_MOVE events -- all other actions will have
         * a size of 0.
         *
         * @return Returns the number of historical points in the event.
         */
        GetHistorySize(
            [out] Int32* historySize);

        /**
         * Returns the time that a historical movement occurred between this event
         * and the previous event.  Only applies to ACTION_MOVE events.
         *
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         *
         * @see #getHistorySize
         * @see #getEventTime
         */
        GetHistoricalEventTime(
            [in] Int32 pos,
            [out] Int64* hEventTime);

        /**
         * {@link #getHistoricalX(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetHistoricalX(
            [in] Int32 pos,
            [out] Float* hX);

        /**
         * {@link #getHistoricalY(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetHistoricalY(
            [in] Int32 pos,
            [out] Float* hY);

        /**
         * {@link #getHistoricalPressure(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetHistoricalPressure(
            [in] Int32 pos,
            [out] Float* hPressure);

        /**
         * {@link #getHistoricalSize(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetHistoricalSize(
            [in] Int32 pos,
            [out] Float* hSize);

        /**
         * {@link #getHistoricalTouchMajor(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetHistoricalTouchMajor(
            [in] Int32 pos,
            [out] Float* hTouchMajor);

        /**
         * {@link #getHistoricalTouchMinor(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetHistoricalTouchMinor(
            [in] Int32 pos,
            [out] Float* hTouchMinor);

        /**
         * {@link #getHistoricalToolMajor(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetHistoricalToolMajor(
            [in] Int32 pos,
            [out] Float* hToolMajor);

        /**
         * {@link #getHistoricalToolMinor(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetHistoricalToolMinor(
            [in] Int32 pos,
            [out] Float* hToolMinor);

        /**
         * {@link #getHistoricalOrientation(Int32)} for the first pointer index (may be an
         * arbitrary pointer identifier).
         */
        GetHistoricalOrientation(
            [in] Int32 pos,
            [out] Float* hOrientation);

        /**
         * Returns a historical X coordinate, as per {@link #getX(Int32)}, that
         * occurred between this event and the previous event for the given pointer.
         * Only applies to ACTION_MOVE events.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         *
         * @see #getHistorySize
         * @see #getX
         */
        GetHistoricalXEx(
            [in] Int32 pointerIndex,
            [in] Int32 pos,
            [out] Float* hX);

        /**
         * Returns a historical Y coordinate, as per {@link #getY(Int32)}, that
         * occurred between this event and the previous event for the given pointer.
         * Only applies to ACTION_MOVE events.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         *
         * @see #getHistorySize
         * @see #getY
         */
        GetHistoricalYEx(
            [in] Int32 pointerIndex,
            [in] Int32 pos,
            [out] Float* hY);

        /**
         * Returns a historical pressure coordinate, as per {@link #getPressure(Int32)},
         * that occurred between this event and the previous event for the given
         * pointer.  Only applies to ACTION_MOVE events.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         *
         * @see #getHistorySize
         * @see #getPressure
         */
        GetHistoricalPressureEx(
            [in] Int32 pointerIndex,
            [in] Int32 pos,
            [out] Float* hPressure);

        /**
         * Returns a historical size coordinate, as per {@link #getSize(Int32)}, that
         * occurred between this event and the previous event for the given pointer.
         * Only applies to ACTION_MOVE events.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         *
         * @see #getHistorySize
         * @see #getSize
         */
        GetHistoricalSizeEx(
            [in] Int32 pointerIndex,
            [in] Int32 pos,
            [out] Float* hSize);

        /**
         * Returns a historical touch major axis coordinate, as per {@link #getTouchMajor(Int32)}, that
         * occurred between this event and the previous event for the given pointer.
         * Only applies to ACTION_MOVE events.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         *
         * @see #getHistorySize
         * @see #getTouchMajor
         */
        GetHistoricalTouchMajorEx(
            [in] Int32 pointerIndex,
            [in] Int32 pos,
            [out] Float* hTouchMajor);

        /**
         * Returns a historical touch minor axis coordinate, as per {@link #getTouchMinor(Int32)}, that
         * occurred between this event and the previous event for the given pointer.
         * Only applies to ACTION_MOVE events.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         *
         * @see #getHistorySize
         * @see #getTouchMinor
         */
        GetHistoricalTouchMinorEx(
            [in] Int32 pointerIndex,
            [in] Int32 pos,
            [out] Float* hTouchMinor);

        /**
         * Returns a historical tool major axis coordinate, as per {@link #getToolMajor(Int32)}, that
         * occurred between this event and the previous event for the given pointer.
         * Only applies to ACTION_MOVE events.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         *
         * @see #getHistorySize
         * @see #getToolMajor
         */
        GetHistoricalToolMajorEx(
            [in] Int32 pointerIndex,
            [in] Int32 pos,
            [out] Float* hToolMajor);

        /**
         * Returns a historical tool minor axis coordinate, as per {@link #getToolMinor(Int32)}, that
         * occurred between this event and the previous event for the given pointer.
         * Only applies to ACTION_MOVE events.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         *
         * @see #getHistorySize
         * @see #getToolMinor
         */
        GetHistoricalToolMinorEx(
            [in] Int32 pointerIndex,
            [in] Int32 pos,
            [out] Float* hToolMinorEx);

        /**
         * Returns a historical orientation coordinate, as per {@link #getOrientation(Int32)}, that
         * occurred between this event and the previous event for the given pointer.
         * Only applies to ACTION_MOVE events.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         *
         * @see #getHistorySize
         * @see #getOrientation
         */
        GetHistoricalOrientationEx(
            [in] Int32 pointerIndex,
            [in] Int32 pos,
            [out] Float* hOrientation);

        /**
         * Populates a {@link PointerCoords} object with historical pointer coordinate data,
         * as per {@link #getPointerCoords}, that occurred between this event and the previous
         * event for the given pointer.
         * Only applies to ACTION_MOVE events.
         *
         * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
         * (the first pointer that is down) to {@link #getPointerCount()}-1.
         * @param pos Which historical value to return; must be less than
         * {@link #getHistorySize}
         * @param outPointerCoords The pointer coordinate object to populate.
         * Handle32 = PointerCoords*
         *
         * @see #getHistorySize
         * @see #getPointerCoords
         */
        GetHistoricalPointerCoords(
            [in] Int32 pointerIndex,
            [in] Int32 pos,
            [in] Handle32 outPointerCoords);

        /**
         * Returns a bitfield indicating which edges, if any, were touched by this
         * MotionEvent. For touch events, clients can use this to determine if the
         * user's finger was touching the edge of the display.
         *
         * @see #EDGE_LEFT
         * @see #EDGE_TOP
         * @see #EDGE_RIGHT
         * @see #EDGE_BOTTOM
         */
        GetEdgeFlags(
            [out] Int32* edgeFlags);

        /**
         * Sets the bitfield indicating which edges, if any, were touched by this
         * MotionEvent.
         *
         * @see #getEdgeFlags()
         */
        SetEdgeFlags(
            [in] Int32 flags);

        /**
         * Sets this event's action.
         */
        SetAction(
            [in] Int32 action);

        /**
         * Adjust this event's location.
         * @param deltaX Amount to add to the current X coordinate of the event.
         * @param deltaY Amount to add to the current Y coordinate of the event.
         */
        OffsetLocation(
            [in] Float deltaX,
            [in] Float deltaY);

        /**
         * Set this event's location.  Applies {@link #offsetLocation} with a
         * delta from the current location to the given new location.
         *
         * @param x New absolute X location.
         * @param y New absolute Y location.
         */
        SetLocation(
            [in] Float x,
            [in] Float y);
    }
}
