
module
{
    /**
     * Indicates a transformation that has no effect (alpha = 1 and identity matrix.)
     */
    const Transformation_TYPE_IDENTITY = 0x0;
    /**
     * Indicates a transformation that applies an alpha only (uses an identity matrix.)
     */
    const Transformation_TYPE_ALPHA = 0x1;
    /**
     * Indicates a transformation that applies a matrix only (alpha = 1.)
     */
    const Transformation_TYPE_MATRIX = 0x2;
    /**
     * Indicates a transformation that applies an alpha and a matrix.
     */
    const Transformation_TYPE_BOTH = 0x3/*TYPE_ALPHA | TYPE_MATRIX*/;

    interface ITransformation {
        /**
         * Reset the transformation to a state that leaves the object
         * being animated in an unmodified state. The transformation type is
         * {@link #TYPE_BOTH} by default.
         */
        Clear();

        /**
         * Indicates the nature of this transformation.
         *
         * @return {@link #TYPE_ALPHA}, {@link #TYPE_MATRIX},
         *         {@link #TYPE_BOTH} or {@link #TYPE_IDENTITY}.
         */
        GetTransformationType(
            [out] Int32* type);

        /**
         * Sets the transformation type.
         *
         * @param transformationType One of {@link #TYPE_ALPHA},
         *        {@link #TYPE_MATRIX}, {@link #TYPE_BOTH} or
         *        {@link #TYPE_IDENTITY}.
         */
        SetTransformationType(
            [in] Int32 transformationType);

        /**
         * Clones the specified transformation.
         *
         * @param t The transformation to clone.
         */
        Set(
            [in] ITransformation* t);

        /**
         * Apply this Transformation to an existing Transformation, e.g. apply
         * a scale effect to something that has already been rotated.
         * @param t
         */
        Compose(
            [in] ITransformation* t);

        /**
         * @return The 3x3 Matrix representing the trnasformation to apply to the
         * coordinates of the object being animated
         */
        GetMatrix(
            [out] IMatrix** matrix);

        /**
         * Sets the degree of transparency
         * @param alpha 1.0 means fully opaqe and 0.0 means fully transparent
         */
        SetAlpha(
            [in] Float alpha);

        /**
         * @return The degree of transparency
         */
        GetAlpha(
            [out] Float* alpha);
    }
}
