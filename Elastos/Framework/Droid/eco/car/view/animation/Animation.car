
module
{
    /**
     * Repeat the animation indefinitely.
     */
    const Animation_INFINITE = -1;

    /**
     * When the animation reaches the end and the repeat count is INFINTE_REPEAT
     * or a positive value, the animation restarts from the beginning.
     */
    const Animation_RESTART = 1;

    /**
     * When the animation reaches the end and the repeat count is INFINTE_REPEAT
     * or a positive value, the animation plays backward (and then forward again).
     */
    const Animation_REVERSE = 2;

    /**
     * Can be used as the start time to indicate the start time should be the current
     * time when {@link #getTransformation(long, Transformation)} is invoked for the
     * first animation frame. This can is useful for short animations.
     */
    const Animation_START_ON_FIRST_FRAME = -1;

    /**
     * The specified dimension is an absolute number of pixels.
     */
    const Animation_ABSOLUTE = 0;

    /**
     * The specified dimension holds a float and should be multiplied by the
     * height or width of the object being animated.
     */
    const Animation_RELATIVE_TO_SELF = 1;

    /**
     * The specified dimension holds a float and should be multiplied by the
     * height or width of the parent of the object being animated.
     */
    const Animation_RELATIVE_TO_PARENT = 2;

    /**
     * Requests that the content being animated be kept in its current Z
     * order.
     */
    const Animation_ZORDER_NORMAL = 0;

    /**
     * Requests that the content being animated be forced on top of all other
     * content for the duration of the animation.
     */
    const Animation_ZORDER_TOP = 1;

    /**
     * Requests that the content being animated be forced under all other
     * content for the duration of the animation.
     */
    const Animation_ZORDER_BOTTOM = -1;


    interface ITransformation;
    interface IAnimation;

    /**
     * <p>An animation listener receives notifications from an animation.
     * Notifications indicate animation related events, such as the end or the
     * repetition of the animation.</p>
     */
    interface IAnimationListener {
        /**
         * <p>Notifies the start of the animation.</p>
         *
         * @param animation The started animation.
         */
        OnAnimationStart(
            [in] IAnimation* animation);

        /**
         * <p>Notifies the end of the animation. This callback is not invoked
         * for animations with repeat count set to INFINITE.</p>
         *
         * @param animation The animation which reached its end.
         */
        OnAnimationEnd(
            [in] IAnimation* animation);

        /**
         * <p>Notifies the repetition of the animation.</p>
         *
         * @param animation The animation which was repeated.
         */
        OnAnimationRepeat(
            [in] IAnimation* animation);
    }

    interface IAnimation {
        /**
         * Reset the initialization state of this animation.
         *
         * @see #initialize(int, int, int, int)
         */
        Reset();

        /**
         * Cancel the animation. Cancelling an animation invokes the animation
         * listener, if set, to notify the end of the animation.
         *
         * If you cancel an animation manually, you must call {@link #reset()}
         * before starting the animation again.
         *
         * @see #reset()
         * @see #start()
         * @see #startNow()
         */
        Cancel();

        /**
         * Whether or not the animation has been initialized.
         *
         * @return Has this animation been initialized.
         * @see #initialize(int, int, int, int)
         */
        IsInitialized(
            [out] Boolean* isInitialized);

        /**
         * Initialize this animation with the dimensions of the object being
         * animated as well as the objects parents. (This is to support animation
         * sizes being specifed relative to these dimensions.)
         *
         * <p>Objects that interpret a Animations should call this method when
         * the sizes of the object being animated and its parent are known, and
         * before calling {@link #getTransformation}.
         *
         *
         * @param width Width of the object being animated
         * @param height Height of the object being animated
         * @param parentWidth Width of the animated object's parent
         * @param parentHeight Height of the animated object's parent
         */
        Initialize(
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 parentWidth,
            [in] Int32 parentHeight);

        /**
         * Sets the acceleration curve for this animation. The interpolator is loaded as
         * a resource from the specified context.
         *
         * @param context The application environment
         * @param resID The resource identifier of the interpolator to load
         * @attr ref android.R.styleable#Animation_interpolator
         */
        SetInterpolator(
            [in] IContext* context,
            [in] Int32 resID);

        /**
         * Sets the acceleration curve for this animation. Defaults to a linear
         * interpolation.
         *
         * @param i The interpolator which defines the acceleration curve
         * @attr ref android.R.styleable#Animation_interpolator
         */
        SetInterpolatorEx(
            [in] IInterpolator* i);

        /**
         * When this animation should start relative to the start time. This is most
         * useful when composing complex animations using an {@link AnimationSet }
         * where some of the animations components start at different times.
         *
         * @param startOffset When this Animation should start, in milliseconds from
         *                    the start time of the root AnimationSet.
         * @attr ref android.R.styleable#Animation_startOffset
         */
        SetStartOffset(
            [in] Int64 startOffset);

        /**
         * How long this animation should last. The duration cannot be negative.
         *
         * @param durationMillis Duration in milliseconds
         *
         * @throws java.lang.IllegalArgumentException if the duration is < 0
         *
         * @attr ref android.R.styleable#Animation_duration
         */
        SetDuration(
            [in] Int64 durationMillis);

        /**
         * Ensure that the duration that this animation will run is not longer
         * than <var>durationMillis</var>.  In addition to adjusting the duration
         * itself, this ensures that the repeat count also will not make it run
         * longer than the given time.
         *
         * @param durationMillis The maximum duration the animation is allowed
         * to run.
         */
        RestrictDuration(
            [in] Int64 durationMillis);

        /**
         * How much to scale the duration by.
         *
         * @param scale The amount to scale the duration.
         */
        ScaleCurrentDuration(
            [in] Float scale);

        /**
         * When this animation should start. When the start time is set to
         * {@link #START_ON_FIRST_FRAME}, the animation will start the first time
         * {@link #getTransformation(long, Transformation)} is invoked. The time passed
         * to this method should be obtained by calling
         * {@link AnimationUtils#currentAnimationTimeMillis()} instead of
         * {@link System#currentTimeMillis()}.
         *
         * @param startTimeMillis the start time in milliseconds
         */
        SetStartTime(
            [in] Int64 startTimeMillis);

        /**
         * Convenience method to start the animation the first time
         * {@link #getTransformation(long, Transformation)} is invoked.
         */
        Start();

        /**
         * Convenience method to start the animation at the current time in
         * milliseconds.
         */
        StartNow();

        /**
         * Defines what this animation should do when it reaches the end. This
         * setting is applied only when the repeat count is either greater than
         * 0 or {@link #INFINITE}. Defaults to {@link #RESTART}.
         *
         * @param repeatMode {@link #RESTART} or {@link #REVERSE}
         * @attr ref android.R.styleable#Animation_repeatMode
         */
        SetRepeatMode(
            [in] Int32 repeatMode);

        /**
         * Sets how many times the animation should be repeated. If the repeat
         * count is 0, the animation is never repeated. If the repeat count is
         * greater than 0 or {@link #INFINITE}, the repeat mode will be taken
         * into account. The repeat count is 0 by default.
         *
         * @param repeatCount the number of times the animation should be repeated
         * @attr ref android.R.styleable#Animation_repeatCount
         */
        SetRepeatCount(
            [in] Int32 repeatCount);

        /**
         * If fillEnabled is true, this animation will apply fillBefore and fillAfter.
         *
         * @return true if the animation will take fillBefore and fillAfter into account
         * @attr ref android.R.styleable#Animation_fillEnabled
         */
        IsFillEnabled(
            [out] Boolean* isFillEnabled);

        /**
         * If fillEnabled is true, the animation will apply the value of fillBefore and
         * fillAfter. Otherwise, fillBefore and fillAfter are ignored and the animation
         * transformation is always applied.
         *
         * @param fillEnabled true if the animation should take fillBefore and fillAfter into account
         * @attr ref android.R.styleable#Animation_fillEnabled
         *
         * @see #setFillBefore(boolean)
         * @see #setFillAfter(boolean)
         */
        SetFillEnabled(
            [in] Boolean fillEnabled);

        /**
         * If fillBefore is true, this animation will apply its transformation
         * before the start time of the animation. Defaults to true if not set.
         * Note that this applies when using an {@link
         * android.view.animation.AnimationSet AnimationSet} to chain
         * animations. The transformation is not applied before the AnimationSet
         * itself starts.
         *
         * @param fillBefore true if the animation should apply its transformation before it starts
         * @attr ref android.R.styleable#Animation_fillBefore
         *
         * @see #setFillEnabled(boolean)
         */
        SetFillBefore(
            [in] Boolean fillBefore);

        /**
         * If fillAfter is true, the transformation that this animation performed
         * will persist when it is finished. Defaults to false if not set.
         * Note that this applies when using an {@link
         * android.view.animation.AnimationSet AnimationSet} to chain
         * animations. The transformation is not applied before the AnimationSet
         * itself starts.
         *
         * @param fillAfter true if the animation should apply its transformation after it ends
         * @attr ref android.R.styleable#Animation_fillAfter
         *
         * @see #setFillEnabled(boolean)
         */
        SetFillAfter(
            [in] Boolean fillAfter);

        /**
         * Set the Z ordering mode to use while running the animation.
         *
         * @param zAdjustment The desired mode, one of {@link #ZORDER_NORMAL},
         * {@link #ZORDER_TOP}, or {@link #ZORDER_BOTTOM}.
         * @attr ref android.R.styleable#Animation_zAdjustment
         */
        SetZAdjustment(
            [in] Int32 zAdjustment);

        /**
         * If detachWallpaper is true, and this is a window animation of a window
         * that has a wallpaper background, then the window will be detached from
         * the wallpaper while it runs.  That is, the animation will only be applied
         * to the window, and the wallpaper behind it will remain static.
         *
         * @param detachWallpaper true if the wallpaper should be detached from the animation
         * @attr ref android.R.styleable#Animation_detachWallpaper
         */
        SetDetachWallpaper(
            [in] Boolean detachWallpaper);

        /**
         * Gets the acceleration curve type for this animation.
         *
         * @return the {@link Interpolator} associated to this animation
         * @attr ref android.R.styleable#Animation_interpolator
         */
        GetInterpolator(
            [out] IInterpolator** interpolator);

        /**
         * When this animation should start. If the animation has not startet yet,
         * this method might return {@link #START_ON_FIRST_FRAME}.
         *
         * @return the time in milliseconds when the animation should start or
         *         {@link #START_ON_FIRST_FRAME}
         */
        GetStartTime(
            [out] Int64* time);

        /**
         * How long this animation should last
         *
         * @return the duration in milliseconds of the animation
         * @attr ref android.R.styleable#Animation_duration
         */
        GetDuration(
            [out] Int64* time);

        /**
         * When this animation should start, relative to StartTime
         *
         * @return the start offset in milliseconds
         * @attr ref android.R.styleable#Animation_startOffset
         */
        GetStartOffset(
            [out] Int64* startOffset);

        /**
         * Defines what this animation should do when it reaches the end.
         *
         * @return either one of {@link #REVERSE} or {@link #RESTART}
         * @attr ref android.R.styleable#Animation_repeatMode
         */
        GetRepeatMode(
            [out] Int32* mode);

        /**
         * Defines how many times the animation should repeat. The default value
         * is 0.
         *
         * @return the number of times the animation should repeat, or {@link #INFINITE}
         * @attr ref android.R.styleable#Animation_repeatCount
         */
        GetRepeatCount(
            [out] Int32* count);

        /**
         * If fillBefore is true, this animation will apply its transformation
         * before the start time of the animation.
         *
         * @return true if the animation applies its transformation before it starts
         * @attr ref android.R.styleable#Animation_fillBefore
         */
        GetFillBefore(
            [out] Boolean* result);

        /**
         * If fillAfter is true, this animation will apply its transformation
         * after the end time of the animation.
         *
         * @return true if the animation applies its transformation after it ends
         * @attr ref android.R.styleable#Animation_fillAfter
         */
        GetFillAfter(
            [out] Boolean* result);

        /**
         * Returns the Z ordering mode to use while running the animation as
         * previously set by {@link #setZAdjustment}.
         *
         * @return Returns one of {@link #ZORDER_NORMAL},
         * {@link #ZORDER_TOP}, or {@link #ZORDER_BOTTOM}.
         * @attr ref android.R.styleable#Animation_zAdjustment
         */
        GetZAdjustment(
            [out] Int32* zAdjustment);

        /**
         * Return value of {@link #setDetachWallpaper(boolean)}.
         * @attr ref android.R.styleable#Animation_detachWallpaper
         */
        GetDetachWallpaper(
            [out] Boolean* result);

        /**
         * <p>Indicates whether or not this animation will affect the transformation
         * matrix. For instance, a fade animation will not affect the matrix whereas
         * a scale animation will.</p>
         *
         * @return true if this animation will change the transformation matrix
         */
        WillChangeTransformationMatrix(
            [out] Boolean* result);

        /**
         * <p>Indicates whether or not this animation will affect the bounds of the
         * animated view. For instance, a fade animation will not affect the bounds
         * whereas a 200% scale animation will.</p>
         *
         * @return true if this animation will change the view's bounds
         */
        WillChangeBounds(
            [out] Boolean* result);

        /**
         * <p>Binds an animation listener to this animation. The animation listener
         * is notified of animation events such as the end of the animation or the
         * repetition of the animation.</p>
         *
         * @param listener the animation listener to be notified
         */
        SetAnimationListener(
            [in] IAnimationListener* listener);

        /**
         * Compute a hint at how long the entire animation may last, in milliseconds.
         * Animations can be written to cause themselves to run for a different
         * duration than what is computed here, but generally this should be
         * accurate.
         */
        ComputeDurationHint(
            [out] Int64* hint);

        /**
         * Gets the transformation to apply at a specified point in time. Implementations of this
         * method should always replace the specified Transformation or document they are doing
         * otherwise.
         *
         * @param currentTime Where we are in the animation. This is wall clock time.
         * @param outTransformation A tranformation object that is provided by the
         *        caller and will be filled in by the animation.
         * @return True if the animation is still running
         */
        GetTransformation(
            [in] Int64 currentTime,
            [in/*, out*/] ITransformation* outTransformation,
            [out] Boolean* result);

        /**
         * <p>Indicates whether this animation has started or not.</p>
         *
         * @return true if the animation has started, false otherwise
         */
        HasStarted(
            [out] Boolean* result);

        /**
         * <p>Indicates whether this animation has ended or not.</p>
         *
         * @return true if the animation has ended, false otherwise
         */
        HasEnded(
            [out] Boolean* result);
    }
}

