
module
{
    interface IMenuBuilder;
    interface IView;

    /**
     * Minimal interface for a menu view.  {@link #initialize(MenuBuilder, int)} must be called for the
     * menu to be functional.
     *
     * @hide
     */
    interface IMenuView extends IView {
        /**
         * Initializes the menu to the given menu. This should be called after the
         * view is inflated.
         *
         * @param menu The menu that this MenuView should display.
         * @param menuType The type of this menu, one of
         *            {@link MenuBuilder#TYPE_ICON}, {@link MenuBuilder#TYPE_EXPANDED},
         *            {@link MenuBuilder#TYPE_DIALOG}).
         */
        Initialize(
            [in] IMenuBuilder* menu,
            [in] Int32 menuType);

        /**
         * Forces the menu view to update its view to reflect the new state of the menu.
         *
         * @param cleared Whether the menu was cleared or just modified.
         */
        UpdateChildren(
            [in] Boolean cleared);

        /**
         * Returns the default animations to be used for this menu when entering/exiting.
         * @return A resource ID for the default animations to be used for this menu.
         */
        GetWindowAnimations(
            [out] Int32* animations);
    }

    /**
     * Minimal interface for a menu item view.  {@link #initialize(MenuItemImpl, int)} must be called
     * for the item to be functional.
     */
    interface IMenuItemView extends IView {
        /**
         * Initializes with the provided MenuItemData.  This should be called after the view is
         * inflated.
         * @param itemData The item that this ItemView should display.
         * @param menuType The type of this menu, one of
         *            {@link MenuBuilder#TYPE_ICON}, {@link MenuBuilder#TYPE_EXPANDED},
         *            {@link MenuBuilder#TYPE_DIALOG}).
         */
        Initialize(
            [in] IMenuItem* itemData,
            [in] Int32 menuType);

        /**
         * Gets the item data that this view is displaying.
         * @return the item data, or null if there is not one
         */
        GetItemData(
            [out] IMenuItem** itemData);

        /**
         * Sets the title of the item view.
         * @param title The title to set.
         */
        SetTitle(
            [in] String title);

        /**
         * Sets the enabled state of the item view.
         * @param enabled Whether the item view should be enabled.

        SetEnabled(
            [in] Boolean enabled);
        */

        /**
         * Displays the checkbox for the item view.  This does not ensure the item view will be
         * checked, for that use {@link #setChecked}.
         * @param checkable Whether to display the checkbox or to hide it
         */
        SetCheckable(
            [in] Boolean checkable);

        /**
         * Checks the checkbox for the item view.  If the checkbox is hidden, it will NOT be
         * made visible, call {@link #setCheckable(boolean)} for that.
         * @param checked Whether the checkbox should be checked
         */
        SetChecked(
            [in] Boolean checked);

        /**
         * Sets the shortcut for the item.
         * @param showShortcut Whether a shortcut should be shown(if false, the value of
         * shortcutKey should be ignored).
         * @param shortcutKey The shortcut key that should be shown on the ItemView.
         */
        SetShortcut(
            [in] Boolean showShortcut,
            [in] Char16 shortcutKey);

        /**
         * Set the icon of this item view.
         * @param icon The icon of this item. null to hide the icon.
         */
        SetIcon(
            [in] IDrawable* icon);

        /**
         * Whether this item view prefers displaying the condensed title rather
         * than the normal title. If a condensed title is not available, the
         * normal title will be used.
         *
         * @return Whether this item view prefers displaying the condensed
         *         title.
         */
        PrefersCondensedTitle(
            [out] Boolean* supported);

        /**
         * Whether this item view shows an icon.
         *
         * @return Whether this item view shows an icon.
         */
        ShowsIcon(
            [out] Boolean* show);
    }
}
