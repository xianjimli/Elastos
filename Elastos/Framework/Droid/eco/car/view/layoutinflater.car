
module
{
    interface IContext;
    interface IAttributeSet;
    interface IView;
    interface IContext;
    interface IViewGroup;
    interface IXmlPullParser;

    /**
     * Hook to allow clients of the LayoutInflater to restrict the set of Views that are allowed
     * to be inflated.
     *
     */
    interface ILayoutInflaterFilter {
        /**
         * Hook to allow clients of the LayoutInflater to restrict the set of Views
         * that are allowed to be inflated.
         *
         * @param clazz The class object for the View that is about to be inflated
         *
         * @return True if this class is allowed to be inflated, or false otherwise
         */
        OnLoadClass(
            [in] Handle32 clazz,
            [out] Boolean* allowed);
    }

    interface ILayoutInflaterFactory {
        /**
         * Hook you can supply that is called when inflating from a LayoutInflater.
         * You can use this to customize the tag names available in your XML
         * layout files.
         *
         * <p>
         * Note that it is good practice to prefix these custom names with your
         * package (i.e., com.coolcompany.apps) to avoid conflicts with system
         * names.
         *
         * @param name Tag name to be inflated.
         * @param context The context the view is being created in.
         * @param attrs Inflation attributes as specified in XML file.
         *
         * @return View Newly created view. Return null for the default
         *         behavior.
         */
        OnCreateView(
            [in] String name,
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [out] IView** view);
    }

    interface ILayoutInflater {
        /**
         * Create a copy of the existing LayoutInflater object, with the copy
         * pointing to a different Context than the original.  This is used by
         * {@link ContextThemeWrapper} to create a new LayoutInflater to go along
         * with the new Context theme.
         * 
         * @param newContext The new Context to associate with the new LayoutInflater.
         * May be the same as the original Context if desired.
         * 
         * @return Returns a brand spanking new LayoutInflater object associated with
         * the given Context.
         */
        CloneInContext(
            [in] IContext* newContext,
            [out] ILayoutInflater** newInflater);

        /**
         * Return the context we are running in, for access to resources, class
         * loader, etc.
         */
        GetContext(
            [out] IContext** ctx);

        /**
         * Return the current factory (or null). This is called on each element
         * name. If the factory returns a View, add that to the hierarchy. If it
         * returns null, proceed to call onCreateView(name).
         */
        GetFactory(
            [out] ILayoutInflaterFactory** factory);

        /**
         * Attach a custom Factory interface for creating views while using
         * this LayoutInflater.  This must not be null, and can only be set once;
         * after setting, you can not change the factory.  This is
         * called on each element name as the xml is parsed. If the factory returns
         * a View, that is added to the hierarchy. If it returns null, the next
         * factory default {@link #onCreateView} method is called.
         *
         * <p>If you have an existing
         * LayoutInflater and want to add your own factory to it, use
         * {@link #cloneInContext} to clone the existing instance and then you
         * can use this function (once) on the returned new instance.  This will
         * merge your own factory with whatever factory the original instance is
         * using.
         */
        SetFactory(
            [in] ILayoutInflaterFactory* factory);

        /**
         * @return The {@link Filter} currently used by this LayoutInflater to restrict the set of Views
         * that are allowed to be inflated.
         */
        GetFilter(
            [out] ILayoutInflaterFilter** filter);

        /**
         * Sets the {@link Filter} to by this LayoutInflater. If a view is attempted to be inflated
         * which is not allowed by the {@link Filter}, the {@link #inflate(int, ViewGroup)} call will
         * throw an {@link InflateException}. This filter will replace any previous filter set on this
         * LayoutInflater.
         *
         * @param filter The Filter which restricts the set of Views that are allowed to be inflated.
         *        This filter will replace any previous filter set on this LayoutInflater.
         */
        SetFilter(
            [in] ILayoutInflaterFilter* filter);

        /**
         * Inflate a new view hierarchy from the specified xml resource. Throws
         * {@link InflateException} if there is an error.
         *
         * @param resource ID for an XML layout resource to load (e.g.,
         *        <code>R.layout.main_page</code>)
         * @param root Optional view to be the parent of the generated hierarchy.
         * @return The root View of the inflated hierarchy. If root was supplied,
         *         this is the root View; otherwise it is the root of the inflated
         *         XML file.
         */
        Inflate(
            [in] Int32 resource,
            [in] IViewGroup* root,
            [out] IView** view);

        /**
         * Inflate a new view hierarchy from the specified xml node. Throws
         * {@link InflateException} if there is an error. *
         * <p>
         * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance
         * reasons, view inflation relies heavily on pre-processing of XML files
         * that is done at build time. Therefore, it is not currently possible to
         * use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
         *
         * @param parser XML dom node containing the description of the view
         *        hierarchy.
         * @param root Optional view to be the parent of the generated hierarchy.
         * @return The root View of the inflated hierarchy. If root was supplied,
         *         this is the root View; otherwise it is the root of the inflated
         *         XML file.
         */
        InflateEx(
            [in] IXmlPullParser* parser,
            [in] IViewGroup* root,
            [out] IView** view);

        /**
         * Inflate a new view hierarchy from the specified xml resource. Throws
         * {@link InflateException} if there is an error.
         *
         * @param resource ID for an XML layout resource to load (e.g.,
         *        <code>R.layout.main_page</code>)
         * @param root Optional view to be the parent of the generated hierarchy (if
         *        <em>attachToRoot</em> is true), or else simply an object that
         *        provides a set of LayoutParams values for root of the returned
         *        hierarchy (if <em>attachToRoot</em> is false.)
         * @param attachToRoot Whether the inflated hierarchy should be attached to
         *        the root parameter? If false, root is only used to create the
         *        correct subclass of LayoutParams for the root view in the XML.
         * @return The root View of the inflated hierarchy. If root was supplied and
         *         attachToRoot is true, this is root; otherwise it is the root of
         *         the inflated XML file.
         */
        InflateEx2(
            [in] Int32 resource,
            [in] IViewGroup* root,
            [in] Boolean attachToRoot,
            [out] IView** view);

        /**
         * Inflate a new view hierarchy from the specified XML node. Throws
         * {@link InflateException} if there is an error.
         * <p>
         * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance
         * reasons, view inflation relies heavily on pre-processing of XML files
         * that is done at build time. Therefore, it is not currently possible to
         * use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
         *
         * @param parser XML dom node containing the description of the view
         *        hierarchy.
         * @param root Optional view to be the parent of the generated hierarchy (if
         *        <em>attachToRoot</em> is true), or else simply an object that
         *        provides a set of LayoutParams values for root of the returned
         *        hierarchy (if <em>attachToRoot</em> is false.)
         * @param attachToRoot Whether the inflated hierarchy should be attached to
         *        the root parameter? If false, root is only used to create the
         *        correct subclass of LayoutParams for the root view in the XML.
         * @return The root View of the inflated hierarchy. If root was supplied and
         *         attachToRoot is true, this is root; otherwise it is the root of
         *         the inflated XML file.
         */
        InflateEx3(
            [in] IXmlPullParser* parser,
            [in] IViewGroup* root,
            [in] Boolean attachToRoot,
            [out] IView** view);
    }
}
