
module
{
    /**
     * This is the part of an order integer that the user can provide.
     * @hide
     */
    const USER_MASK = 0x0000ffff;
    /**
     * Bit shift of the user portion of the order integer.
     * @hide
     */
    const USER_SHIFT = 0;

    /**
     * This is the part of an order integer that supplies the category of the
     * item.
     * @hide
     */
    const CATEGORY_MASK = 0xffff0000;
    /**
     * Bit shift of the category portion of the order integer.
     * @hide
     */
    const CATEGORY_SHIFT = 16;

    /**
     * Value to use for group and item identifier integers when you don't care
     * about them.
     */
    const NONE = 0;

    /**
     * First value for group and item identifier integers.
     */
    const FIRST = 1;

    // Implementation note: Keep these CATEGORY_* in sync with the category enum
    // in attrs.xml

    /**
     * Category code for the order integer for items/groups that are part of a
     * container -- or/add this with your base value.
     */
    const CATEGORY_CONTAINER = 0x00010000;

    /**
     * Category code for the order integer for items/groups that are provided by
     * the system -- or/add this with your base value.
     */
    const CATEGORY_SYSTEM = 0x00020000;

    /**
     * Category code for the order integer for items/groups that are
     * user-supplied secondary (infrequently used) options -- or/add this with
     * your base value.
     */
    const CATEGORY_SECONDARY = 0x00030000;

    /**
     * Category code for the order integer for items/groups that are
     * alternative actions on the data that is currently displayed -- or/add
     * this with your base value.
     */
    const CATEGORY_ALTERNATIVE = 0x00040000;

    /**
     * Flag for {@link #addIntentOptions}: if set, do not automatically remove
     * any existing menu items in the same group.
     */
    const FLAG_APPEND_TO_GROUP = 0x0001;

    /**
     * Flag for {@link #performShortcut}: if set, do not close the menu after
     * executing the shortcut.
     */
    const FLAG_PERFORM_NO_CLOSE = 0x0001;

    /**
     * Flag for {@link #performShortcut(int, KeyEvent, int)}: if set, always
     * close the menu after executing the shortcut. Closing the menu also resets
     * the prepared state.
     */
    const FLAG_ALWAYS_PERFORM_CLOSE = 0x0002;

    interface IMenuItem;
    interface ISubMenu;
    interface IComponentName;
    interface IIntent;
    interface IKeyEvent;
    interface ICallback;
    interface IMenuAdapter;
    interface IContextMenuInfo;
    interface ILayoutInflater;
    interface IView;
    interface IViewGroup;
    interface IMenuView;
    interface IMenuType;

    interface IMenu {
        /**
         * Add a new item to the menu. This item displays the given title for its
         * label.
         *
         * @param title The text to display for the item.
         * @return The newly added menu item.
         */
        Add(
            [in] String title,
            [out] IMenuItem** item);

        /**
         * Add a new item to the menu. This item displays the given title for its
         * label.
         *
         * @param titleRes Resource identifier of title string.
         * @return The newly added menu item.
         */
        AddEx(
            [in] Int32 titleRes,
            [out] IMenuItem** item);

        /**
         * Add a new item to the menu. This item displays the given title for its
         * label.
         *
         * @param groupId The group identifier that this item should be part of.
         *        This can be used to define groups of items for batch state
         *        changes. Normally use {@link #NONE} if an item should not be in a
         *        group.
         * @param itemId Unique item ID. Use {@link #NONE} if you do not need a
         *        unique ID.
         * @param order The order for the item. Use {@link #NONE} if you do not care
         *        about the order. See {@link MenuItem#getOrder()}.
         * @param title The text to display for the item.
         * @return The newly added menu item.
         */
        AddEx2(
            [in] Int32 groupId,
            [in] Int32 itemId,
            [in] Int32 order,
            [in] String title,
            [out] IMenuItem** item);

        /**
         * Variation on {@link #add(int, int, int, CharSequence)} that takes a
         * string resource identifier instead of the string itself.
         *
         * @param groupId The group identifier that this item should be part of.
         *        This can also be used to define groups of items for batch state
         *        changes. Normally use {@link #NONE} if an item should not be in a
         *        group.
         * @param itemId Unique item ID. Use {@link #NONE} if you do not need a
         *        unique ID.
         * @param order The order for the item. Use {@link #NONE} if you do not care
         *        about the order. See {@link MenuItem#getOrder()}.
         * @param titleRes Resource identifier of title string.
         * @return The newly added menu item.
         */
        AddEx3(
            [in] Int32 groupId,
            [in] Int32 itemId,
            [in] Int32 order,
            [in] Int32 titleRes,
            [out] IMenuItem** item);

        /**
         * Add a new sub-menu to the menu. This item displays the given title for
         * its label. To modify other attributes on the submenu's menu item, use
         * {@link SubMenu#getItem()}.
         *
         * @param title The text to display for the item.
         * @return The newly added sub-menu
         */
        AddSubMenu(
            [in] String title,
            [out] ISubMenu** subMenu);

        /**
         * Add a new sub-menu to the menu. This item displays the given title for
         * its label. To modify other attributes on the submenu's menu item, use
         * {@link SubMenu#getItem()}.
         *
         * @param titleRes Resource identifier of title string.
         * @return The newly added sub-menu
         */
        AddSubMenuEx(
            [in] Int32 titleRes,
            [out] ISubMenu** subMenu);

        /**
         * Add a new sub-menu to the menu. This item displays the given
         * <var>title</var> for its label. To modify other attributes on the
         * submenu's menu item, use {@link SubMenu#getItem()}.
         *<p>
         * Note that you can only have one level of sub-menus, i.e. you cannnot add
         * a subMenu to a subMenu: An {@link UnsupportedOperationException} will be
         * thrown if you try.
         *
         * @param groupId The group identifier that this item should be part of.
         *        This can also be used to define groups of items for batch state
         *        changes. Normally use {@link #NONE} if an item should not be in a
         *        group.
         * @param itemId Unique item ID. Use {@link #NONE} if you do not need a
         *        unique ID.
         * @param order The order for the item. Use {@link #NONE} if you do not care
         *        about the order. See {@link MenuItem#getOrder()}.
         * @param title The text to display for the item.
         * @return The newly added sub-menu
         */
        AddSubMenuEx2(
            [in] Int32 groupId,
            [in] Int32 itemId,
            [in] Int32 order,
            [in] String title,
            [out] ISubMenu** subMenu);

        /**
         * Variation on {@link #addSubMenu(int, int, int, CharSequence)} that takes
         * a string resource identifier for the title instead of the string itself.
         *
         * @param groupId The group identifier that this item should be part of.
         *        This can also be used to define groups of items for batch state
         *        changes. Normally use {@link #NONE} if an item should not be in a group.
         * @param itemId Unique item ID. Use {@link #NONE} if you do not need a unique ID.
         * @param order The order for the item. Use {@link #NONE} if you do not care about the
         *        order. See {@link MenuItem#getOrder()}.
         * @param titleRes Resource identifier of title string.
         * @return The newly added sub-menu
         */
        AddSubMenuEx3(
            [in] Int32 groupId,
            [in] Int32 itemId,
            [in] Int32 order,
            [in] Int32 titleRes,
            [out] ISubMenu** subMenu);

        /**
         * Add a group of menu items corresponding to actions that can be performed
         * for a particular Intent. The Intent is most often configured with a null
         * action, the data that the current activity is working with, and includes
         * either the {@link Intent#CATEGORY_ALTERNATIVE} or
         * {@link Intent#CATEGORY_SELECTED_ALTERNATIVE} to find activities that have
         * said they would like to be included as optional action. You can, however,
         * use any Intent you want.
         *
         * <p>
         * See {@link android.content.pm.PackageManager#queryIntentActivityOptions}
         * for more * details on the <var>caller</var>, <var>specifics</var>, and
         * <var>intent</var> arguments. The list returned by that function is used
         * to populate the resulting menu items.
         *
         * <p>
         * All of the menu items of possible options for the intent will be added
         * with the given group and id. You can use the group to control ordering of
         * the items in relation to other items in the menu. Normally this function
         * will automatically remove any existing items in the menu in the same
         * group and place a divider above and below the added items; this behavior
         * can be modified with the <var>flags</var> parameter. For each of the
         * generated items {@link MenuItem#setIntent} is called to associate the
         * appropriate Intent with the item; this means the activity will
         * automatically be started for you without having to do anything else.
         *
         * @param groupId The group identifier that the items should be part of.
         *        This can also be used to define groups of items for batch state
         *        changes. Normally use {@link #NONE} if the items should not be in
         *        a group.
         * @param itemId Unique item ID. Use {@link #NONE} if you do not need a
         *        unique ID.
         * @param order The order for the items. Use {@link #NONE} if you do not
         *        care about the order. See {@link MenuItem#getOrder()}.
         * @param caller The current activity component name as defined by
         *        queryIntentActivityOptions().
         * @param specifics Specific items to place first as defined by
         *        queryIntentActivityOptions().
         * @param intent Intent describing the kinds of items to populate in the
         *        list as defined by queryIntentActivityOptions().
         * @param flags Additional options controlling how the items are added.
         * @param outSpecificItems Optional array in which to place the menu items
         *        that were generated for each of the <var>specifics</var> that were
         *        requested. Entries may be null if no activity was found for that
         *        specific action.
         * @return The number of menu items that were added.
         *
         * @see #FLAG_APPEND_TO_GROUP
         * @see MenuItem#setIntent
         * @see android.content.pm.PackageManager#queryIntentActivityOptions
         */
        AddIntentOptions(
            [in] Int32 groupId,
            [in] Int32 itemId,
            [in] Int32 order,
            [in] IComponentName* caller,
            [in] ArrayOf<IIntent*> specifics,
            [in] IIntent* intent,
            [in] Int32 flags,
            [in] ArrayOf<IMenuItem*> outSpecificItems,
            [out] Int32* count);

        /**
         * Remove the item with the given identifier.
         *
         * @param id The item to be removed.  If there is no item with this
         *           identifier, nothing happens.
         */
        RemoveItem(
            [in] Int32 id);

        /**
         * Remove all items in the given group.
         *
         * @param groupId The group to be removed.  If there are no items in this
         *           group, nothing happens.
         */
        RemoveGroup(
            [in] Int32 groupId);

        /**
         * Remove all existing items from the menu, leaving it empty as if it had
         * just been created.
         */
        Clear();

        /**
         * Control whether a particular group of items can show a check mark.  This
         * is similar to calling {@link MenuItem#setCheckable} on all of the menu items
         * with the given group identifier, but in addition you can control whether
         * this group contains a mutually-exclusive set items.  This should be called
         * after the items of the group have been added to the menu.
         *
         * @param group The group of items to operate on.
         * @param checkable Set to true to allow a check mark, false to
         *                  disallow.  The default is false.
         * @param exclusive If set to true, only one item in this group can be
         *                  checked at a time; checking an item will automatically
         *                  uncheck all others in the group.  If set to false, each
         *                  item can be checked independently of the others.
         *
         * @see MenuItem#setCheckable
         * @see MenuItem#setChecked
         */
        SetGroupCheckable(
            [in] Int32 group,
            [in] Boolean checkable,
            [in] Boolean exclusive);

        /**
         * Show or hide all menu items that are in the given group.
         *
         * @param group The group of items to operate on.
         * @param visible If true the items are visible, else they are hidden.
         *
         * @see MenuItem#setVisible
         */
        SetGroupVisible(
            [in] Int32 group,
            [in] Boolean visible);

        /**
         * Enable or disable all menu items that are in the given group.
         *
         * @param group The group of items to operate on.
         * @param enabled If true the items will be enabled, else they will be disabled.
         *
         * @see MenuItem#setEnabled
         */
        SetGroupEnabled(
            [in] Int32 group,
            [in] Boolean enabled);

        /**
         * Return whether the menu currently has item items that are visible.
         *
         * @return True if there is one or more item visible,
         *         else false.
         */
        HasVisibleItems(
            [out] Boolean* result);

        /**
         * Return the menu item with a particular identifier.
         *
         * @param id The identifier to find.
         *
         * @return The menu item object, or null if there is no item with
         *         this identifier.
         */
        FindItem(
            [in] Int32 id,
            [out] IMenuItem** item);

        /**
         * Get the number of items in the menu.  Note that this will change any
         * times items are added or removed from the menu.
         *
         * @return The item count.
         */
        Size(
            [out] Int32* size);

        /**
         * Gets the menu item at the given index.
         *
         * @param index The index of the menu item to return.
         * @return The menu item.
         * @exception IndexOutOfBoundsException
         *                when {@code index < 0 || >= size()}
         */
        GetItem(
            [in] Int32 index,
            [out] IMenuItem** item);

        /**
         * Closes the menu, if open.
         */
        Close();

        /**
         * Execute the menu item action associated with the given shortcut
         * character.
         *
         * @param keyCode The keycode of the shortcut key.
         * @param event Key event message.
         * @param flags Additional option flags or 0.
         *
         * @return If the given shortcut exists and is shown, returns
         *         true; else returns false.
         *
         * @see #FLAG_PERFORM_NO_CLOSE
         */
        PerformShortcut(
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [in] Int32 flags,
            [out] Boolean* isShown);

        /**
         * Is a keypress one of the defined shortcut keys for this window.
         * @param keyCode the key code from {@link KeyEvent} to check.
         * @param event the {@link KeyEvent} to use to help check.
         */
        IsShortcutKey(
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* isShortcutKey);

        /**
         * Execute the menu item action associated with the given menu identifier.
         *
         * @param id Identifier associated with the menu item.
         * @param flags Additional option flags or 0.
         *
         * @return If the given identifier exists and is shown, returns
         *         true; else returns false.
         *
         * @see #FLAG_PERFORM_NO_CLOSE
         */
        PerformIdentifierAction(
            [in] Int32 id,
            [in] Int32 flags,
            [out] Boolean* isShown);


        /**
         * Control whether the menu should be running in qwerty mode (alphabetic
         * shortcuts) or 12-key mode (numeric shortcuts).
         *
         * @param isQwerty If true the menu will use alphabetic shortcuts; else it
         *                 will use numeric shortcuts.
         */
        SetQwertyMode(
            [in] Boolean isQwerty);

        IsQwertyMode(
            [out]Boolean* qwertyMode);

        SetShortcutsVisible(
            [in] Boolean shortcutsVisible);

        IsShortcutsVisible(
            [out] Boolean* qwertyMode);

        GetContext(
            [out] IContext** context);

        GetResources(
            [out] IResources** resource);

        SetExclusiveItemChecked(
            [in] IMenuItem* item);

        GetCallback(
            [out] ICallback** MenuCallback);

        GetRootMenu(
            [out] IMenu** menu);

        OnItemVisibleChanged(
            [in] IMenuItem* item);

        SetCurrentMenuInfo(
            [in] IContextMenuInfo* menuInfo);

        SetOptionalIconsVisible(
            [in] Boolean visible);

        GetOptionalIconsVisible(
            [out] Boolean* visible);

        SaveHierarchyState(
            [in] IBundle* outState);

        RestoreHierarchyState(
            [in] IBundle* inState);

        GetMenuAdapter(
            [in] Int32 menuType,
            [out] IMenuAdapter** menuAdapter);

        GetMenuType(
            [in] Int32 menuType,
            [out] IMenuType** type);

        GetMenuView(
            [in] Int32 menuType,
            [in] IViewGroup* parent,
            [out] IMenuView** menuView);

        ClearMenuViews();

        RefreshShortcuts(
            [in] Boolean shortcutsVisible,
            [in] Boolean qwertyMode);

        FindItemsWithShortcutForKey(
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] IObjectContainer** list);

        FindItemWithShortcutForKey(
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] IMenuItem** menuItem);

        PerformItemAction(
            [in] IMenuItem* item,
            [in] Int32 flags,
            [out] Boolean* state);

        SetCallback(
            [in] ICallback* menuCallback);

        SetHeaderTitleInt(
            [in] String title,
            [out] IMenu** menu);

        SetHeaderTitleIntEx(
            [in] Int32 titleRes,
            [out] IMenu** menu);

        SetHeaderIconInt(
            [in] IDrawable* icon,
            [out] IMenu** menu);

        SetHeaderIconIntEx(
            [in] Int32 iconRes,
            [out] IMenu** menu);

        SetHeaderViewInt(
            [in] IView* view,
            [out] IMenu** menu);

        GetVisibleItems(
            [out] IObjectContainer** list);

        GetNumIconMenuItemsShown(
            [out] Int32* state);

        SetHeaderInternal(
            [in] Int32 titleRes,
            [in] String title,
            [in] Int32 iconRes,
            [in] IDrawable* icon,
            [in] IView* view);

        FindItemIndex(
            [in] Int32 id,
            [out] Int32* index);

        FindGroupIndex(
            [in] Int32 group,
            [out] Int32* index);

        FindGroupIndexEx(
            [in] Int32 group,
            [in] Int32 start,
            [out] Int32* index);
    }

    interface ICallback {
        OnMenuItemSelected(
            [in] IMenu* menu,
            [in] IMenuItem* item,
            [out] Boolean* state);

        OnCloseMenu(
            [in] IMenu* menu,
            [in] Boolean allMenusAreClosing);

        OnSubMenuSelected(
            [in] ISubMenu* subMenu,
            [out] Boolean* state);

        OnCloseSubMenu(
            [in] ISubMenu* menu);

        OnMenuModeChange(
            [in] IMenu* menu);

        GetHeaderIcon(
            [out] IDrawable** drawable);

        GetHeaderView(
            [out] IView** headerView);

        GetHeaderTitle(
            [out] String* title);
    }

    interface IMenuType {
        GetInflater(
            [out] ILayoutInflater** layoutInflater);

        GetMenuView(
            [in] IViewGroup* parent,
            [out] IMenuView** menuView);

        GetMenuViewEx(
            [out] IMenuView** menuView);

        SetMenuView(
            [in] IMenuView* menuView);

        HasMenuView(
            [out] Boolean* hasMenu);
    }

    class CMenuBuilder {
    	interface IMenu;
    }

    class CMenuType {
        interface IMenuType;

        constructor(
            [in] Int32 menuType,
            [in] IMenu* cmb);
    }
}
