/** @addtogroup SystemRef
  *   @{
  */


//==========================================================================
// Copyright (c) 2000-2009,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

library Elastos:System:elastos.dll
{
    interface IObjectEnumerator;

    /**
     * Specifies the event that causes the end of waiting for synchronous object.
     */
    enum WaitResult {
        WaitResult_OK           = 0x00, /**< Successful waiting. */
        WaitResult_Interrupted  = 0x01, /**< The waiting has been interrupted, and the synchronous object is not signaled. */
        WaitResult_TimedOut     = 0x02  /**< The time-out interval elapsed, and the synchronous object is not signaled. */
    }

    merge("stdobjs.car");

    enum ThreadEvent {
        ThreadEvent_RequestToQuit   = 0x00000001,
        ThreadEvent_ForceToQuit     = 0x00000002,
        ThreadEvent_RequestToCancelOperation = 0x00000003,
        ThreadEvent_RequestToInterrupt = 0x00000004,

        ThreadEvent_NewArrival      = 0xffffffff,
        ThreadEvent_Interrupt       = 0xfffffffe,
    }

    enum CallbackPriority {
        CallbackPriority_Highest     = 0x00,
        CallbackPriority_AboveNormal = 0x07,
        CallbackPriority_Normal      = 0x10,
        CallbackPriority_BelowNormal = 0x17,
        CallbackPriority_Lowest      = 0x1F,
    }

    enum CallbackContextStatus {
    	CallbackContextStatus_Created = 0x01,
    	CallbackContextStatus_Idling,
    	CallbackContextStatus_Working,
    	CallbackContextStatus_Finishing,
    }

    enum CallbackContextFinish {
        CallbackContextFinish_Nice   = 0x01,
        CallbackContextFinish_ASAP,
    }

    /**
     * The IObjectEnumerator interface used to manage every object in the objects enumerator.
     * To retrives the object by the IObjectEnumerator interface, you must move the object cursor
     * and get the current object by means of the cursor.
     */
    interface IObjectEnumerator {
        /**
         * Retrives the current object interface from the object enumerator.
         *
         * @param[out] object The pointer to a IInterface variable that receives the object interface.
         * @return If the function succeeds, the return value is ::NOERROR.
         * @return If the function fails and the return value is ::E_INVALID_ARGUMENT,
         * it indicats that the object pointer is NULL.
         * @return If the function fails and the return value is ::E_INVALID_OPERATION,
         * it indicats that the object emulator is NULL or the cursor of the enumerator does not point to an object.
         */
        Current(
            [out] IInterface** object);

        /**
         * Moves the object cursor to the next object in the object enumerator.
         *
         * @param[out] succeeded The pointer to a Boolean variable that Indicates whether the move operation succeed.
         * @return If the function succeeds, the return value is ::NOERROR.
         * @return If the function fails and the return value is ::E_INVALID_ARGUMENT,
         * it indicats that the succeeded pointer is NULL.
         * @return If the function fails and the return value is ::E_INVALID_OPERATION,
         * it indicats that the object emulator is NULL or the cursor of the enumerator does not point to an object.
         */
        MoveNext(
            [out] Boolean* succeeded);

        /**
         * Resets the object cursor to the initial state in the object enumerator.
         *
         * @return The function always return ::NOERROR.
         */
        Reset();
    }

    interface IStringEnumerator {
        Current(
            [out] StringBuf<> string);

        MoveNext(
            [out] Boolean* succeeded);

        Reset();
    }

    merge("ElGrafixSys.car");
    merge("ElReflection.car");
    merge("ElMarshal.car");
}

/** @} */


