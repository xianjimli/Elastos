//==========================================================================
//==========================================================================
// Copyright (c) 2000-2008,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

library
{
    interface IObjectEx {
        Equals([in] IInterface* object);

        GetHashCode([out] Int32* hashCode);

        GetClassID([out] ClassID* clsid);

        ToString([out] StringBuf<> string);
    }

    interface IObjectContainer {
        Add([in] IInterface* object);

        Remove([in] IInterface* object);

        GetObjectEnumerator([out] IObjectEnumerator** objects);

        GetObjectCount([out] Int32* count);

        Dispose();
    }

    interface IParcel {
        ReadByte(
            [out] Byte *value);

        WriteByte(
            [in] Byte value);

        ReadBoolean(
            [out] Boolean *value);

        WriteBoolean(
            [in] Boolean value);

        ReadChar8(
            [out] Char8 *value);

        WriteChar8(
            [in] Char8 value);

        ReadChar16(
            [out] Char16 *value);

        WriteChar16(
            [in] Char16 value);

        ReadInt16(
            [out] Int16 *value);

        WriteInt16(
            [in] Int16 value);

        ReadInt32(
            [out] Int32 *value);

        WriteInt32(
            [in] Int32 value);

        ReadInt64(
            [out] Int64 *value);

        WriteInt64(
            [in] Int64 value);

        ReadFloat(
            [out] Float *value);

        WriteFloat(
            [in] Float value);

        ReadDouble(
            [out] Double *value);

        WriteDouble(
            [in] Double value);

        ReadString(
            [out] String *str);

        WriteString(
            [in] String str);

        ReadStruct(
            [out] Handle32 *address);

        WriteStruct(
            [in] Handle32 value,
            [in] Int32 size);

        ReadEMuid(
            [out] EMuid *id);

        WriteEMuid(
            [in] EMuid id);

        ReadEGuid(
            [out] EGuid *id);

        WriteEGuid(
            [in] EGuid id);

        ReadArrayOf(
            [out] Handle32 *array);

        WriteArrayOf(
            [in] Handle32 array);

        ReadArrayOfString(
            [out] Handle32 *array);

        WriteArrayOfString(
            [in] ArrayOf<String> array);

        ReadBufferOf(
            [out] Handle32 *buffer);

        WriteBufferOf(
            [in] Handle32 buffer);

        ReadBufferOfString(
            [out] Handle32 *buffer);

        WriteBufferOfString(
            [in] BufferOf<String> buffer);

        ReadStringBuf(
            [out] Handle32 *buffer);

        WriteStringBuf(
            [in] Handle32 buffer);

        ReadMemoryBuf(
            [out] Handle32 *buffer);

        WriteMemoryBuf(
            [in] Handle32 buffer);

        ReadInterfacePtr(
            [out] Handle32 *itfpp);

        WriteInterfacePtr(
            [in] IInterface* value);

        ReadBytePtr(
            [out] Handle32 *bypp);

        WriteBytePtr(
            [in] Handle32 address);

        ReadBooleanPtr(
            [out] Handle32 *bopp);

        WriteBooleanPtr(
            [in] Handle32 address);

        ReadChar8Ptr(
            [out] Handle32 *c8pp);

        WriteChar8Ptr(
            [in] Handle32 address);

        ReadChar16Ptr(
            [out] Handle32 *c16pp);

        WriteChar16Ptr(
            [in] Handle32 address);

        ReadInt16Ptr(
            [out] Handle32 *i16pp);

        WriteInt16Ptr(
            [in] Handle32 address);

        ReadInt32Ptr(
            [out] Handle32 *i32pp);

        WriteInt32Ptr(
            [in] Handle32 address);

        ReadInt64Ptr(
            [out] Handle32 *i64pp);

        WriteInt64Ptr(
            [in] Handle32 address);

        ReadFloatPtr(
            [out] Handle32 *fpp);

        WriteFloatPtr(
            [in] Handle32 address);

        ReadDoublePtr(
            [out] Handle32 *dpp);

        WriteDoublePtr(
            [in] Handle32 address);

        ReadStringPtr(
            [out] Handle32 *address);

        WriteStringPtr(
            [in] Handle32 address);

        ReadStructPtr(
            [out] Handle32 *address);

        ReadEMuidPtr(
            [out] Handle32 *idpp);

        WriteEMuidPtr(
            [in] Handle32 idPtr);

        ReadEGuidPtr(
            [out] Handle32 *idpp);

        WriteEGuidPtr(
            [in] Handle32 idPtr);

        ReadInterfacePtrPtr(
            [out] Handle32 *itfpp);

        WriteInterfacePtrPtr(
            [in] Handle32 address);

        ReadBufferOfPtr(
            [out] Handle32 *buffer);

        // Place a file descriptor into the parcel.  The given fd must remain
        // valid for the lifetime of the parcel.
        WriteFileDescriptor(
            [in] Int32 fd);

        // Place a file descriptor into the parcel.  A dup of the fd is made, which
        // will be closed once the parcel is destroyed.
        WriteDupFileDescriptor(
            [in] Int32 fd);

        // Retrieve a file descriptor from the parcel.  This returns the raw fd
        // in the parcel, which you do not own -- use dup() to get your own copy.
        ReadFileDescriptor(
            [out] Int32* fd);

        Clone(
            [in] IParcel* srcParcel);

        GetElementPayload(
            [out] Handle32* buffer);

        GetElementSize(
            [out] Int32* size);
    }

    interface ICallbackRendezvous {
        Wait(
            [in] Millisecond32 timeout,
            [out] WaitResult* result);
    }

    interface ICallbackSink {
        AddCallback(
            [in] Int32 event,
            [in] EventHandler handler);

        RemoveCallback(
            [in] Int32 event,
            [in] EventHandler handler);

        AcquireCallbackRendezvous(
            [in] Int32 event,
            [out] ICallbackRendezvous** rendezvous);

        RemoveAllCallbacks();

        CancelPendingCallback([in] Int32 event);

        CancelAllPendingCallbacks();
    }

    interface IRegime {
        ObjectEnter(
            [in] PInterface object);

        ObjectLeave(
            [in] PInterface object);

        CreateObject(
            [in] ClassID clsid,
            [in] InterfaceID iid,
            [out] IInterface** object);
    }

    aspect AObjectEx {
        interface IObjectEx;
    }

    aspect AObjectContainer {
        constructor();
        interface IObjectContainer;
    }
}
