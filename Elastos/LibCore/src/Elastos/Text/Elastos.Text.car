module
{
    importlib("Elastos.Core.eco");
    importlib("Elastos.Utility.eco");
    importlib("Elastos.Math.eco");

    merge("../../../car/Elastos/Text/Exceptions.car");
    merge("../../../car/Elastos/Text/ICharacterIterator.car");
    merge("../../../car/Elastos/Text/IAttributedCharacterIterator.car");
    merge("../../../car/Elastos/Text/IParsePosition.car");
    merge("../../../car/Elastos/Text/IFormat.car");
    merge("../../../car/Elastos/Text/IFieldPosition.car");
    merge("../../../car/Elastos/Text/IDateFormat.car");
    merge("../../../car/Elastos/Text/IDateFormatSymbols.car");
    merge("../../../car/Elastos/Text/INumberFormat.car");
    merge("../../../car/Elastos/Text/IMessageFormat.car");
    merge("../../../car/Elastos/Text/IChoiceFormat.car");
    merge("../../../car/Elastos/Text/IDecimalFormatSymbols.car");
    merge("../../../car/Elastos/Text/INativeDecimalFormat.car");
    merge("../../../car/Elastos/Text/ICollationAttribute.car");
    merge("../../../car/Elastos/Text/IICUCollationElementIterator.car");
    merge("../../../car/Elastos/Text/IDecimalFormat.car");
    merge("../../../car/Elastos/Text/ISimpleDateFormat.car");
    merge("../../../car/Elastos/Text/IBreakIterator.car");
    merge("../../../car/Elastos/Text/ICollationKey.car");
    merge("../../../car/Elastos/Text/ICollator.car");
    merge("../../../car/Elastos/Text/IAnnotation.car");
    merge("../../../car/Elastos/Text/IStringCharacterIterator.car");
    merge("../../../car/Elastos/Text/IICUCollationKey.car");
    merge("../../../car/Elastos/Text/IICUCollator.car");
    merge("../../../car/Elastos/Text/IICURuleBasedCollator.car");
    merge("../../../car/Elastos/Text/ICollationElementIterator.car");
    merge("../../../car/Elastos/Text/IRuleBasedCollator.car");
    merge("../../../car/Elastos/Text/ITextAttribute.car");
    merge("../../../car/Elastos/Text/INumericShaper.car");
    merge("../../../car/Elastos/Text/IBidi.car");
    merge("../../../car/Elastos/Text/IAttributedString.car");

    class CAttributedCharacterIteratorAttribute {
        constructor(
            [in] String name);

        interface IAttributedCharacterIteratorAttribute;
    }

    class CParsePosition {
        constructor(
            [in] Int32 index);

        interface IParsePosition;
    }

    class CFieldPosition {
        constructor(
            [in] Int32 field);

        constructor(
            [in] IFormatField* attribute);

        constructor(
            [in] IFormatField* attribute,
            [in] Int32 field);

        interface IFieldPosition;
    }

    class CMessageFormat {

        constructor(
            [in] String tem,
            [in] ILocale* locale);

        constructor(
            [in] String tem);

        interface IMessageFormat;
    }

    [deprecated]
    class CChoiceFormat {
        constructor(
            [in] ArrayOf<Double> limits,
            [in] ArrayOf<String> formats);

        constructor(
            [in] String tem);

        interface IChoiceFormat;
    }

    singleton class CChoiceFormatHelper {
        interface IChoiceFormatHelper;
    }

    class CDateFormatField {
        /**
         * Constructs a new instance of {@code DateFormat.Field} with the given
         * fieldName and calendar field.
         *
         * @param fieldName
         *            the field name.
         * @param calendarField
         *            the calendar field type of the field.
         */
        constructor(
            [in] String fieldName,
            [in] Int32 calendarField);

        interface IDateFormatField;
    }

    class CDateFormatSymbols {
        constructor();

        constructor(
            [in] ILocale* locale);

        interface IDateFormatSymbols;
    }

    class CDecimalFormatSymbols {
        constructor();

        constructor(
            [in] ILocale* locale);

        interface IDecimalFormatSymbols;
    }

    class CNativeDecimalFormat {
        constructor(
            [in] String pattern,
            [in] IDecimalFormatSymbols* dfs);

        // Used so java.util.Formatter doesn't need to allocate DecimalFormatSymbols instances.
        constructor(
            [in] String pattern,
            [in] ILocaleData * data);

        interface INativeDecimalFormat;
    }

    class CDecimalFormat {
        constructor();

        constructor(
            [in] String pattern);

        constructor(
            [in] String pattern,
            [in] IDecimalFormatSymbols* value);

        constructor(
            [in] String pattern,
            [in] ILocale* locale);

        interface IDecimalFormat;
    }

    class CSimpleDateFormat {
        constructor();

        constructor(
            [in] String pattern);

        constructor(
            [in] String template,
            [in] IDateFormatSymbols* value);

        constructor(
            [in] String template,
            [in] ILocale* locale);

        interface ISimpleDateFormat;
    }

    class CAnnotation {
        constructor(
            [in] IInterface* attribute);

        interface IAnnotation;
    }

    class CStringCharacterIterator {
        constructor(
            [in] String value);

        constructor(
            [in] String value,
            [in] Int32 location);

        constructor(
            [in] String value,
            [in] Int32 start,
            [in] Int32 end,
            [in] Int32 location);

        interface ICharacterIterator;

        interface IStringCharacterIterator;
    }

    class CICUCollationElementIterator {
        constructor(
            [in] Int32 collelemiteratoraddress);

        interface IICUCollationElementIterator;
    }

    [deprecated]
    class CICUCollationKey {
        constructor(
            [in] String source,
            [in] ArrayOf<Byte>* bytes);

        interface IICUCollationKey;
    }

    class CICURuleBasedCollator {
        constructor(
            [in] String rules);

        constructor(
            [in] String rules,
            [in] Int32 strength);

        constructor(
            [in] String rules,
            [in] Int32 normalizationMode,
            [in] Int32 strength);

        constructor(
            [in] ILocale* locale);

        interface IICURuleBasedCollator;
    }

    class CCollationElementIterator {
        constructor(
            [in] IICUCollationElementIterator* iterator);

        interface ICollationElementIterator;
    }

    class CRuleBasedCollator {
        constructor(
            [in] IICUCollator* wrapper);

        constructor(
            [in] String rules);

        interface IRuleBasedCollator;
    }

    class CTextAttribute {
        constructor(
            [in] String name);

        interface ITextAttribute;
    }

    class CNumericShaper {
        interface INumericShaper;
    }

    [deprecated]
    class CBidi {
        constructor(
            [in] IAttributedCharacterIterator* paragraph);

        constructor(
            [in] ArrayOf<Char32>* text,
            [in] Int32 textStart,
            [in] ArrayOf<Byte>* embeddings,
            [in] Int32 embStart,
            [in] Int32 paragraphLength,
            [in] Int32 flags);

        constructor(
            [in] String paragraph,
            [in] Int32 flags);

        constructor(
            [in] Int64 pBidi);

        interface IBidi;
    }

    singleton class CBidiHelper {
        interface IBidiHelper;
    }

    [deprecated]
    class CAttributedString {
        constructor(
            [in] IAttributedCharacterIterator* iterator);

        constructor(
            [in] IAttributedCharacterIterator* iterator,
            [in] Int32 start,
            [in] Int32 end);

        constructor(
            [in] IAttributedCharacterIterator* iterator,
            [in] Int32 start,
            [in] Int32 end,
            [in] ArrayOf<IAttributedCharacterIteratorAttribute*>* attributes);

        constructor(
            [in] String value);

        //constructor(String value,
        //    Map<? extends AttributedCharacterIterator.Attribute, ?> attributes);

        interface IAttributedString;
    }

    singleton class CCollatorHelper {
        interface ICollatorHelper;
    }

    class CMessageFormatField {
        constructor(
            [in] String name);

        interface IMessageFormatField;
    }

    class CNumberFormatField {
        constructor(
            [in] String fieldName);

        interface INumberFormatField;
    }

    singleton class CNumberFormatHelper {
        interface INumberFormatHelper;
    }

    singleton class CDecimalFormatSymbolsHelper {
        interface IDecimalFormatSymbolsHelper;
    }

    singleton class CDateFormatSymbolsHelper {
        interface IDateFormatSymbolsHelper;
    }

    singleton class CDateFormatHelper {
        interface IDateFormatHelper;
    }
}