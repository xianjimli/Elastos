module Elastos.Net.eco
{
    importlib("Elastos.IO.eco");
    importlib("Elastos.Security.eco");
    importlib("Elastos.Utility.eco");

    interface IDatagramChannel;
    interface ISocketChannel;
    interface IServerSocketChannel;
    interface IURI;
    interface IHttpCookie;
    interface ICookiePolicy;
    interface ICookiePolicyHelper;
    interface ICookieStore;
    interface IInetAddress;
    interface ISocketAddress;
    interface IDatagramPacket;
    interface IDatagramSocket;
    interface IURL;
    interface IURLConnection;
    interface IHttpURLConnection;
    interface INetworkInterface;
    interface IInet4Address;
    interface IInet6Address;
    interface IInetSocketAddress;
    interface IInterfaceAddress;
    interface IMulticastSocket;
    interface IProxy;
    interface ISocket;
    interface IServerSocket;
    interface ISocketOptions;
    interface IURLStreamHandler;
    interface IURLStreamHandlerFactory;
    interface ISocketImpl;
    interface ISocketImplFactory;
    interface IContentHandler;
    interface IContentHandlerFactory;
    interface IFileNameMap;
    interface IDatagramSocketImpl;
    interface IDatagramSocketImplFactory;
    interface ISocketPermission;
    interface IPasswordAuthentication;
    interface IAuthenticator;
    interface IAuthenticatorHelper;
    interface INetPermission;
    interface IProxySelector;
    interface IProxySelectorHelper;
    interface ICookieHandler;
    interface ICookieHandlerHelper;
    interface ICookieManager;
    interface ICacheResponse;
    interface ICacheRequest;
    interface IResponseCache;
    interface IResponseCacheHelper;
    interface IIDNHelper;
    interface ISecureCacheResponse;
    interface ISocketInputStream;
    interface ISocketOutputStream;
    interface IPlainSocketImpl;
    interface IPlainServerSocketImpl;
    interface INetGlobalInit;

    enum CookiePolicyKind {
        CookiePolicyKind_ACCEPT_ALL = 0,
        CookiePolicyKind_ACCEPT_NONE = 1,
        CookiePolicyKind_ACCEPT_ORIGINAL_SERVER = 2,
    }

    enum ProxyType {
        ProxyType_DIRECT = 0,
        ProxyType_HTTP = 1,
        ProxyType_SOCKS = 2,
    }

    enum AuthenticatorRequestorType {
        AuthenticatorRequestorType_PROXY = 0,
        AuthenticatorRequestorType_SERVER = 1,
    }

    const E_BIND_EXCEPTION = 0xab010000;

    const E_CONNNECT_EXCEPTION = 0xab020000;

    const E_HTTP_RETRY_EXCEPTION = 0xab030000;

    const E_MALFORMED_URL_EXCEPTION = 0xab040000;

    const E_NO_ROUTE_TO_HOST_EXCEPTION = 0xab050000;

    const E_PORT_UNREACHABLE_EXCEPTION = 0xab060000;

    const E_PROTOCOL_EXCEPTION = 0xab070000;

    const E_SOCKET_EXCEPTION = 0xab080000;

    const E_SOCKET_TIMEOUT_EXCEPTION = 0xab090000;

    const E_UNKNOWN_HOST_EXCEPTION = 0xab0a0000;

    const E_UNKNOWN_SERVICE_EXCEPTION = 0xab0b0000;

    const E_URI_SYNTAX_EXCEPTION = 0xab0c0000;

    const E_SOCKET_CLOSE_EXCEPTION = 0xab0d0000;

    const E_MALFORMED_REPLY_EXCEPTION = 0xab0e0000;

    const E_INVALID_SOCKET_EXCEPTION = 0xab0f0000;

    const HTTP_ACCEPTED = 202;

    const HTTP_BAD_GATEWAY = 502;

    const HTTP_BAD_METHOD = 405;

    const HTTP_BAD_REQUEST = 400;

    const HTTP_CLIENT_TIMEOUT = 408;

    const HTTP_CONFLICT = 409;

    const HTTP_CREATED = 201;

    const HTTP_ENTITY_TOO_LARGE = 413;

    const HTTP_FORBIDDEN = 403;

    const HTTP_GATEWAY_TIMEOUT = 504;

    const HTTP_GONE = 410;

    const HTTP_INTERNAL_ERROR = 500;

    const HTTP_LENGTH_REQUIRED = 411;

    const HTTP_MOVED_PERM = 301;

    const HTTP_MOVED_TEMP = 302;

    const HTTP_MULT_CHOICE = 300;

    const HTTP_NO_CONTENT = 204;

    const HTTP_NOT_ACCEPTABLE = 406;

    const HTTP_NOT_AUTHORITATIVE = 203;

    const HTTP_NOT_FOUND = 404;

    const HTTP_NOT_IMPLEMENTED = 501;

    const HTTP_NOT_MODIFIED = 304;

    const HTTP_OK = 200;

    const HTTP_PARTIAL = 206;

    const HTTP_PAYMENT_REQUIRED = 402;

    const HTTP_PRECON_FAILED = 412;

    const HTTP_PROXY_AUTH = 407;

    const HTTP_REQ_TOO_LONG = 414;

    const HTTP_RESET = 205;

    const HTTP_SEE_OTHER = 303;

    const HTTP_SERVER_ERROR = 500;

    const HTTP_USE_PROXY = 305;

    const HTTP_UNAUTHORIZED = 401;

    const HTTP_UNSUPPORTED_TYPE = 415;

    const HTTP_UNAVAILABLE = 503;

    const HTTP_VERSION = 505;

    const SocketOption_SO_LINGER = 128;

    const SocketOption_SO_TIMEOUT = 4102;

    const SocketOption_TCP_NODELAY = 1;

    const SocketOption_IP_MULTICAST_IF = 16;

    const SocketOption_SO_BINDADDR = 15;

    const SocketOption_SO_REUSEADDR = 4;

    const SocketOption_SO_SNDBUF = 4097;

    const SocketOption_SO_RCVBUF = 4098;

    const SocketOption_SO_KEEPALIVE = 8;

    const SocketOption_IP_TOS = 3;

    const SocketOption_IP_MULTICAST_LOOP = 18;

    const SocketOption_SO_BROADCAST = 32;

    const SocketOption_SO_OOBINLINE = 4099;

    const SocketOption_IP_MULTICAST_IF2 = 31;

    const IDN_ALLOW_UNASSIGNED = 1;

    const IDN_USE_STD3_ASCII_RULES = 2;

    interface IDatagramChannel {
    }

    interface ISocketChannel {
    }

    interface IServerSocketChannel {
    }

    interface IURI {
        CompareTo(
            [in] IURI * uri, 
            [out] Int32 * result);

        GetAuthority(
            [out] String * authority);

        GetFragment(
            [out] String * fragment);

        GetHost(
            [out] String * host);

        GetPath(
            [out] String * path);

        GetPort(
            [out] Int32 * port);

        GetEffectivePort(
            [out] Int32 * port);

        GetQuery(
            [out] String * query);

        GetRawAuthority(
            [out] String * authority);

        GetRawFragment(
            [out] String * fragment);

        GetRawPath(
            [out] String * path);

        GetRawQuery(
            [out] String * query);

        GetRawSchemeSpecificPart(
            [out] String * schemeSpecific);

        GetRawUserInfo(
            [out] String * userInfo);

        GetScheme(
            [out] String * scheme);

        GetSchemeSpecificPart(
            [out] String * schemeSpecific);

        GetUserInfo(
            [out] String * userInfo);

        IsAbsolute(
            [out] Boolean * isAbsolute);

        IsOpaque(
            [out] Boolean * isOpaque);

        Normalize(
            [out] IURI ** uri);

        ParseServerAuthority();

        Relativize(
            [in] IURI * relative, 
            [out] IURI ** uri);

        Resolve(
            [in] IURI * relative, 
            [out] IURI ** uri);

        ResolveEx(
            [in] const String& relative, 
            [out] IURI ** uri);

        ToASCIIString(
            [out] String * str);

        ToURL(
            [out] IURL ** url);
    }

    interface IHttpCookie {
        GetComment(
            [out] String * comment);

        GetCommentURL(
            [out] String * url);

        GetDiscard(
            [out] Boolean * discard);

        GetDomainAttr(
            [out] String * theDomain);

        GetMaxAge(
            [out] Int64 * maxAge);

        GetName(
            [out] String * name);

        GetPath(
            [out] String * path);

        GetPortList(
            [out] String * portList);

        GetSecure(
            [out] Boolean * secure);

        GetValue(
            [out] String * value);

        GetVersion(
            [out] Int32 * theVersion);

        HasExpired(
            [out] Boolean * expired);

        SetComment(
            [in] const String& comment);

        SetCommentURL(
            [in] const String& commentURL);

        SetDiscard(
            [in] Boolean discard);

        SetDomain(
            [in] const String& pattern);

        SetMaxAge(
            [in] Int64 deltaSeconds);

        SetPath(
            [in] const String& path);

        SetPortList(
            [in] const String& portList);

        SetSecure(
            [in] Boolean secure);

        SetValue(
            [in] const String& value);

        SetVersion(
            [in] Int32 v);
    }

    interface ICookiePolicy {
        ShouldAccept(
            [in] IURI * uri, 
            [in] IHttpCookie * cookie, 
            [out] Boolean * result);
    }

    interface ICookiePolicyHelper {
        GetCookiePolicy(
            [in] CookiePolicyKind kind, 
            [out] ICookiePolicy ** policy);
    }

    interface ICookieStore {
        Add(
            [in] IURI * uri, 
            [in] IHttpCookie * cookie);

        Get(
            [in] IURI * uri, 
            [out] IObjectContainer ** httpCookies);

        GetCookies(
            [out] IObjectContainer ** httpCookies);

        GetURIs(
            [out] IObjectContainer ** URIs);

        Remove(
            [in] IURI * uri, 
            [in] IHttpCookie * cookie, 
            [out] Boolean * succeeded);

        RemoveAll(
            [out] Boolean * succeeded);
    }

    interface IInetAddress {
        GetAddress(
            [out, callee] ArrayOf<Byte> * address);

        GetHostAddress(
            [out] String * hostAddress);

        GetHostName(
            [out] String * hostName);

        GetCanonicalHostName(
            [out] String * hostName);

        IsMulticastAddress(
            [out] Boolean * isMulticastAddress);

        IsLoopbackAddress(
            [out] Boolean * isLoopbackAddress);

        IsLinkLocalAddress(
            [out] Boolean * isLinkLocalAddress);

        IsSiteLocalAddress(
            [out] Boolean * isSiteLocalAddress);

        IsMCGlobal(
            [out] Boolean * isMCGlobal);

        IsMCNodeLocal(
            [out] Boolean * isMCNodeLocal);

        IsMCLinkLocal(
            [out] Boolean * isMCLinkLocal);

        IsMCSiteLocal(
            [out] Boolean * isMCSiteLocal);

        IsMCOrgLocal(
            [out] Boolean * isMCOrgLocal);

        IsAnyLocalAddress(
            [out] Boolean * isAnyLocalAddress);

        IsReachable(
            [in] Int32 timeout, 
            [out] Boolean * isReachable);

        IsReachableEx(
            [in] INetworkInterface * networkInterface, 
            [in] Int32 ttl, 
            [in] Int32 timeout, 
            [out] Boolean * isReachable);
    }

    interface ISocketAddress {
    }

    interface IDatagramPacket {
        GetAddress(
            [out] IInetAddress ** address);

        GetData(
            [out, callee] ArrayOf<Byte> * data);

        GetLength(
            [out] Int32 * length);

        GetOffset(
            [out] Int32 * offset);

        GetPort(
            [out] Int32 * port);

        SetAddress(
            [in] IInetAddress * addr);

        SetData(
            [in] ArrayOf<Byte> * buf);

        SetDataEx(
            [in] ArrayOf<Byte> * buf, 
            [in] Int32 anOffset, 
            [in] Int32 aLength);

        SetLength(
            [in] Int32 len);

        SetPort(
            [in] Int32 aPort);

        GetSocketAddress(
            [out] ISocketAddress ** sockAddr);

        SetSocketAddress(
            [in] ISocketAddress * sockAddr);
    }

    interface IDatagramSocket {
        Close();

        Connect(
            [in] IInetAddress * address, 
            [in] Int32 aPort);

        Disconnect();

        GetInetAddress(
            [out] IInetAddress ** address);

        GetLocalAddress(
            [out] IInetAddress ** address);

        GetLocalPort(
            [out] Int32 * port);

        GetPort(
            [out] Int32 * port);

        GetReceiveBufferSize(
            [out] Int32 * size);

        GetSendBufferSize(
            [out] Int32 * size);

        GetSoTimeout(
            [out] Int32 * timeout);

        Receive(
            [in] IDatagramPacket * pack);

        Send(
            [in] IDatagramPacket * pack);

        SetSendBufferSize(
            [in] Int32 size);

        SetReceiveBufferSize(
            [in] Int32 size);

        SetSoTimeout(
            [in] Int32 timeout);

        Bind(
            [in] ISocketAddress * localAddr);

        ConnectEx(
            [in] ISocketAddress * remoteAddr);

        IsBound(
            [out] Boolean * isBound);

        IsConnected(
            [out] Boolean * isConnected);

        GetRemoteSocketAddress(
            [out] ISocketAddress ** address);

        GetLocalSocketAddress(
            [out] ISocketAddress ** address);

        SetReuseAddress(
            [in] Boolean reuse);

        GetReuseAddress(
            [out] Boolean * reuse);

        SetBroadcast(
            [in] Boolean broadcast);

        GetBroadcast(
            [out] Boolean * broadcast);

        SetTrafficClass(
            [in] Int32 value);

        GetTrafficClass(
            [out] Int32 * value);

        IsClosed(
            [out] Boolean * isClosed);

        GetChannel(
            [out] IDatagramChannel ** channel);
    }

    interface IURL {
        IsSameFile(
            [in] IURL * otherURL, 
            [out] Boolean * isSame);

        GetContent(
            [out] IInterface ** content);

        OpenStream(
            [out] IInputStream ** is);

        OpenConnection(
            [out] IURLConnection ** connection);

        OpenConnectionEx(
            [in] IProxy * proxy, 
            [out] IURLConnection ** connection);

        ToURI(
            [out] IURI ** uri);

        ToExternalForm(
            [out] String * url);

        GetFile(
            [out] String * fileName);

        GetHost(
            [out] String * hostName);

        GetPort(
            [out] Int32 * port);

        GetEffectivePort(
            [out] Int32 * port);

        GetProtocol(
            [out] String * protocol);

        GetRef(
            [out] String * ref);

        GetQuery(
            [out] String * query);

        GetPath(
            [out] String * path);

        GetUserInfo(
            [out] String * userInfo);

        GetAuthority(
            [out] String * authority);

        GetDefaultPort(
            [out] Int32 * port);
    }

    interface IURLConnection {
        Connect();

        GetAllowUserInteraction(
            [out] Boolean * value);

        GetContent(
            [out] IInterface ** content);

        GetContentEncoding(
            [out] String * encoding);

        GetContentLength(
            [out] Int32 * length);

        GetContentType(
            [out] String * type);

        GetDate(
            [out] Int64 * date);

        GetDefaultUseCaches(
            [out] Boolean * value);

        GetDoInput(
            [out] Boolean * allowed);

        GetDoOutput(
            [out] Boolean * allowed);

        GetExpiration(
            [out] Int64 * expiration);

        GetHeaderFieldByPosition(
            [in] Int32 pos, 
            [out] String * value);

        AddRequestProperty(
            [in] const String& field, 
            [in] const String& newValue);

        GetHeaderFieldByKey(
            [in] const String& key, 
            [out] String * value);

        GetHeaderFieldDate(
            [in] const String& field, 
            [in] Int64 defaultValue, 
            [out] Int64 * value);

        GetHeaderFieldInt32(
            [in] const String& field, 
            [in] Int32 defaultValue, 
            [out] Int32 * value);

        GetHeaderFieldKey(
            [in] Int32 posn, 
            [out] String * key);

        GetIfModifiedSince(
            [out] Int64 * time);

        GetInputStream(
            [out] IInputStream ** is);

        GetLastModified(
            [out] Int64 * value);

        GetOutputStream(
            [out] IOutputStream ** os);

        GetRequestProperty(
            [in] const String& field, 
            [out] String * property);

        GetURL(
            [out] IURL ** url);

        GetUseCaches(
            [out] Boolean * allowed);

        SetAllowUserInteraction(
            [in] Boolean newValue);

        SetDefaultUseCaches(
            [in] Boolean newValue);

        SetDoInput(
            [in] Boolean newValue);

        SetDoOutput(
            [in] Boolean newValue);

        SetIfModifiedSince(
            [in] Int64 newValue);

        SetRequestProperty(
            [in] const String& field, 
            [in] const String& newValue);

        SetUseCaches(
            [in] Boolean newValue);

        SetConnectTimeout(
            [in] Int32 timeout);

        GetConnectTimeout(
            [out] Int32 * timeout);

        SetReadTimeout(
            [in] Int32 timeout);

        GetReadTimeout(
            [out] Int32 * timeout);
    }

    interface IHttpURLConnection : IURLConnection {
        Disconnect();

        GetErrorStream(
            [out] IInputStream ** stream);

        GetRequestMethod(
            [out] String * method);

        GetResponseCode(
            [out] Int32 * responseCode);

        GetResponseMessage(
            [out] String * message);

        SetRequestMethod(
            [in] const String& method);

        UsingProxy(
            [out] Boolean * usingProxy);

        GetInstanceFollowRedirects(
            [out] Boolean * followRedirects);

        SetInstanceFollowRedirects(
            [in] Boolean followRedirects);

        SetFixedLengthStreamingMode(
            [in] Int32 contentLength);

        SetChunkedStreamingMode(
            [in] Int32 chunkLength);
    }

    interface INetworkInterface {
        GetName(
            [out] String * name);

        GetInetAddresses(
            [out] IObjectContainer ** addresses);

        GetDisplayName(
            [out] String * name);

        GetInterfaceAddresses(
            [out] IObjectContainer ** addresses);

        GetSubInterfaces(
            [out] IObjectContainer ** subInterfaces);

        GetParent(
            [out] INetworkInterface ** parent);

        IsUp(
            [out] Boolean * isUp);

        IsLoopback(
            [out] Boolean * isLoopback);

        IsPointToPoint(
            [out] Boolean * isPointToPoint);

        SupportsMulticast(
            [out] Boolean * multicast);

        GetHardwareAddress(
            [out, callee] ArrayOf<Byte> * address);

        GetMTU(
            [out] Int32 * mtu);

        IsVirtual(
            [out] Boolean * isVirtual);
    }

    interface IInet4Address : IInetAddress {
    }

    interface IInet6Address : IInetAddress {
        GetScopeId(
            [out] Int32 * scopeId);

        GetScopedInterface(
            [out] INetworkInterface ** scopedInterface);

        IsIPv4CompatibleAddress(
            [out] Boolean * IPv4Compatible);
    }

    interface IInetSocketAddress : ISocketAddress {
        GetPort(
            [out] Int32 * port);

        GetAddress(
            [out] IInetAddress ** address);

        GetHostName(
            [out] String * hostname);

        IsUnresolved(
            [out] Boolean * isUnresolved);
    }

    interface IInterfaceAddress {
        GetAddress(
            [out] IInetAddress ** address);

        GetBroadcast(
            [out] IInetAddress ** broadcast);

        GetNetworkPrefixLength(
            [out] Int16 * length);
    }

    interface IMulticastSocket : IDatagramSocket {
        GetInterface(
            [out] IInetAddress ** address);

        GetNetworkInterface(
            [out] INetworkInterface ** networkInterface);

        GetTimeToLive(
            [out] Int32 * ttl);

        GetTTL(
            [out] Byte * ttl);

        JoinGroup(
            [in] IInetAddress * groupAddr);

        JoinGroupEx(
            [in] ISocketAddress * groupAddress, 
            [in] INetworkInterface * netInterface);

        LeaveGroup(
            [in] IInetAddress * groupAddr);

        LeaveGroupEx(
            [in] ISocketAddress * groupAddress, 
            [in] INetworkInterface * netInterface);

        SendEx(
            [in] IDatagramPacket * pack, 
            [in] Byte ttl);

        SetInterface(
            [in] IInetAddress * addr);

        SetNetworkInterface(
            [in] INetworkInterface * netInterface);

        SetTimeToLive(
            [in] Int32 ttl);

        SetTTL(
            [in] Byte ttl);

        GetLoopbackMode(
            [out] Boolean * isDisabled);

        SetLoopbackMode(
            [in] Boolean isDisabled);
    }

    interface IProxy {
        GetType(
            [out] ProxyType * type);

        GetAddress(
            [out] ISocketAddress ** address);
    }

    interface ISocket {
        Close();

        GetInetAddress(
            [out] IInetAddress ** address);

        GetInputStream(
            [out] IInputStream ** is);

        GetKeepAlive(
            [out] Boolean * keepAlive);

        GetLocalAddress(
            [out] IInetAddress ** address);

        GetLocalPort(
            [out] Int32 * localPort);

        GetOutputStream(
            [out] IOutputStream ** os);

        GetPort(
            [out] Int32 * port);

        GetSoLinger(
            [out] Int32 * value);

        GetReceiveBufferSize(
            [out] Int32 * size);

        GetSendBufferSize(
            [out] Int32 * size);

        GetSoTimeout(
            [out] Int32 * timeout);

        GetTcpNoDelay(
            [out] Boolean * noDelay);

        SetKeepAlive(
            [in] Boolean keepAlive);

        SetSendBufferSize(
            [in] Int32 size);

        SetReceiveBufferSize(
            [in] Int32 size);

        SetSoLinger(
            [in] Boolean on, 
            [in] Int32 timeout);

        SetSoTimeout(
            [in] Int32 timeout);

        SetTcpNoDelay(
            [in] Boolean on);

        ShutdownInput();

        ShutdownOutput();

        GetLocalSocketAddress(
            [out] ISocketAddress ** address);

        GetRemoteSocketAddress(
            [out] ISocketAddress ** address);

        IsBound(
            [out] Boolean * isBound);

        IsConnected(
            [out] Boolean * isConnected);

        IsClosed(
            [out] Boolean * isClosed);

        Bind(
            [in] ISocketAddress * localAddr);

        Connect(
            [in] ISocketAddress * remoteAddr);

        ConnectEx(
            [in] ISocketAddress * remoteAddr, 
            [in] Int32 timeout);

        IsInputShutdown(
            [out] Boolean * isInputShutdown);

        IsOutputShutdown(
            [out] Boolean * isOutputShutdown);

        SetReuseAddress(
            [in] Boolean reuse);

        GetReuseAddress(
            [out] Boolean * reuse);

        SetOOBInline(
            [in] Boolean oobinline);

        GetOOBInline(
            [out] Boolean * oobinline);

        SetTrafficClass(
            [in] Int32 value);

        GetTrafficClass(
            [out] Int32 * value);

        SendUrgentData(
            [in] Int32 value);

        GetChannel(
            [out] ISocketChannel ** channel);

        SetPerformancePreferences(
            [in] Int32 connectionTime, 
            [in] Int32 latency, 
            [in] Int32 bandwidth);
    }

    interface IServerSocket {
        Accept(
            [out] ISocket ** socket);

        Close();

        GetInetAddress(
            [out] IInetAddress ** address);

        GetLocalPort(
            [out] Int32 * port);

        GetSoTimeout(
            [out] Int32 * timeout);

        SetSoTimeout(
            [in] Int32 timeout);

        Bind(
            [in] ISocketAddress * localAddr);

        BindEx(
            [in] ISocketAddress * localAddr, 
            [in] Int32 backlog);

        GetLocalSocketAddress(
            [out] ISocketAddress ** address);

        IsBound(
            [out] Boolean * isBound);

        IsClosed(
            [out] Boolean * isClosed);

        SetReuseAddress(
            [in] Boolean reuse);

        GetReuseAddress(
            [out] Boolean * reuse);

        SetReceiveBufferSize(
            [in] Int32 size);

        GetReceiveBufferSize(
            [out] Int32 * size);

        GetChannel(
            [out] IServerSocketChannel ** channel);

        SetPerformancePreferences(
            [in] Int32 connectionTime, 
            [in] Int32 latency, 
            [in] Int32 bandwidth);
    }

    interface ISocketOptions {
        GetOption(
            [in] Int32 optID, 
            [out] IInterface ** optVal);

        SetOption(
            [in] Int32 optID, 
            [in] IInterface * optVal);
    }

    interface IURLStreamHandler {
        OpenConnection(
            [in] IURL * u, 
            [out] IURLConnection ** urlConnection);

        OpenConnectionEx(
            [in] IURL * u, 
            [in] IProxy * proxy, 
            [out] IURLConnection ** urlConnection);

        ParseURL(
            [in] IURL * u, 
            [in] const String& str, 
            [in] Int32 start, 
            [in] Int32 end);

        SetURL(
            [in] IURL * u, 
            [in] const String& protocol, 
            [in] const String& host, 
            [in] Int32 port, 
            [in] const String& file, 
            [in] const String& ref);

        SetURLEx(
            [in] IURL * u, 
            [in] const String& protocol, 
            [in] const String& host, 
            [in] Int32 port, 
            [in] const String& authority, 
            [in] const String& userInfo, 
            [in] const String& file, 
            [in] const String& query, 
            [in] const String& ref);

        ToExternalForm(
            [in] IURL * url, 
            [out] String * s);

        Equals(
            [in] IURL * url1, 
            [in] IURL * url2, 
            [out] Boolean * isEquals);

        GetDefaultPort(
            [out] Int32 * portNum);

        GetHostAddress(
            [in] IURL * url, 
            [out] IInetAddress ** hostAddress);

        GetHashCode(
            [in] IURL * url, 
            [out] Int32 * code);

        HostsEqual(
            [in] IURL * a, 
            [in] IURL * b, 
            [out] Boolean * isEqual);

        IsSameFile(
            [in] IURL * url1, 
            [in] IURL * url2, 
            [out] Boolean * isSame);
    }

    interface IURLStreamHandlerFactory {
        CreateURLStreamHandler(
            [in] const String& protocol, 
            [out] IURLStreamHandler ** handler);
    }

    interface ISocketImpl : ISocketOptions {
        Accept(
            [in] ISocketImpl * newSocket);

        Available(
            [out] Int32 * num);

        Bind(
            [in] IInetAddress * address, 
            [in] Int32 port);

        Close();

        Connect(
            [in] const String& host, 
            [in] Int32 port);

        ConnectEx(
            [in] IInetAddress * address, 
            [in] Int32 port);

        Create(
            [in] Boolean isStreaming);

        GetFileDescriptor(
            [out] IFileDescriptor ** fileDescriptor);

        GetInetAddress(
            [out] IInetAddress ** netAddress);

        GetInputStream(
            [out] IInputStream ** inputStream);

        GetLocalPort(
            [out] Int32 * num);

        GetOutputStream(
            [out] IOutputStream ** outputStream);

        GetPort(
            [out] Int32 * port);

        Listen(
            [in] Int32 backlog);

        ShutdownInput();

        ShutdownOutput();

        ConnectEx2(
            [in] ISocketAddress * remoteAddr, 
            [in] Int32 timeout);

        SupportsUrgentData(
            [out] Boolean * isSupports);

        SendUrgentData(
            [in] Int32 value);

        SetPerformancePreferences(
            [in] Int32 connectionTime, 
            [in] Int32 latency, 
            [in] Int32 bandwidth);
    }

    interface ISocketImplFactory {
        CreateSocketImpl(
            [out] ISocketImpl ** createdInstance);
    }

    interface IContentHandler {
        GetContent(
            [in] IURLConnection * uConn, 
            [out] IInterface ** obj);

        GetContentEx(
            [in] IURLConnection * uConn, 
            [in] ArrayOf<InterfaceID> types, 
            [out] IInterface ** obj);
    }

    interface IContentHandlerFactory {
        CreateContentHandler(
            [in] const String& contentType, 
            [out] IContentHandler ** handler);
    }

    interface IFileNameMap {
        GetContentTypeFor(
            [in] const String& filename, 
            [out] String * type);
    }

    interface IDatagramSocketImpl : ISocketOptions {
        Bind(
            [in] Int32 port, 
            [in] IInetAddress * addr);

        Close();

        Create();

        GetFileDescriptor(
            [out] IFileDescriptor ** fileDescriptor);

        GetLocalAddress(
            [out] IInetAddress ** address);

        GetLocalPort(
            [out] Int32 * port);

        GetTTL(
            [out] Byte * ttl);

        GetTimeToLive(
            [out] Int32 * option);

        Join(
            [in] IInetAddress * addr);

        JoinGroup(
            [in] ISocketAddress * addr, 
            [in] INetworkInterface * netInterface);

        Leave(
            [in] IInetAddress * addr);

        LeaveGroup(
            [in] ISocketAddress * addr, 
            [in] INetworkInterface * netInterface);

        Peek(
            [in] IInetAddress * sender, 
            [out] Int32 * addr);

        Receive(
            [in] IDatagramPacket * pack);

        Send(
            [in] IDatagramPacket * pack);

        SetTimeToLive(
            [in] Int32 ttl);

        SetTTL(
            [in] Byte ttl);

        Connect(
            [in] IInetAddress * inetAddr, 
            [in] Int32 port);

        Disconnect();

        PeekData(
            [in] IDatagramPacket * pack, 
            [out] Int32 * port);
    }

    interface IDatagramSocketImplFactory {
        CreateDatagramSocketImpl(
            [out] IDatagramSocketImpl ** impl);
    }

    interface ISocketPermission : IPermission {
    }

    interface IPasswordAuthentication {
        GetPassword(
            [out, callee] ArrayOf<Char32> * password);

        GetUserName(
            [out] String * userName);
    }

    interface IAuthenticator {
        GetPasswordAuthentication(
            [out] IPasswordAuthentication ** passwordAuthentication);

        GetRequestingPort(
            [out] Int32 * port);

        GetRequestingSite(
            [out] IInetAddress ** address);

        GetRequestingPrompt(
            [out] String * prompt);

        GetRequestingProtocol(
            [out] String * protocol);

        GetRequestingScheme(
            [out] String * scheme);

        GetRequestingHost(
            [out] String * hostName);

        GetRequestingURL(
            [out] IURL ** url);

        GetRequestorType(
            [out] AuthenticatorRequestorType * requestorType);
    }

    interface IAuthenticatorHelper {
        RequestPasswordAuthentication(
            [in] IInetAddress * rAddr, 
            [in] Int32 rPort, 
            [in] const String& rProtocol, 
            [in] const String& rPrompt, 
            [in] const String& rScheme, 
            [out] IPasswordAuthentication ** passwordAuthentication);

        RequestPasswordAuthenticationEx(
            [in] const String& rHost, 
            [in] IInetAddress * rAddr, 
            [in] Int32 rPort, 
            [in] const String& rProtocol, 
            [in] const String& rPrompt, 
            [in] const String& rScheme, 
            [out] IPasswordAuthentication ** passwordAuthentication);

        RequestPasswordAuthenticationEx2(
            [in] const String& rHost, 
            [in] IInetAddress * rAddr, 
            [in] Int32 rPort, 
            [in] const String& rProtocol, 
            [in] const String& rPrompt, 
            [in] const String& rScheme, 
            [in] IURL * rURL, 
            [in] AuthenticatorRequestorType reqType, 
            [out] IPasswordAuthentication ** passwordAuthentication);

        SetDefault(
            [in] IAuthenticator * a);
    }

    interface INetPermission : IBasicPermission {
    }

    interface IProxySelector {
        Select(
            [in] IURI * uri, 
            [out] IObjectContainer ** container);

        ConnectFailed(
            [in] IURI * uri, 
            [in] ISocketAddress * sa, 
            [in] ECode ioe);
    }

    interface IProxySelectorHelper {
        GetDefault(
            [out] IProxySelector ** selector);

        SetDefault(
            [in] IProxySelector * selector);
    }

    interface ICookieHandler {
        Get(
            [in] IURI * uri, 
            [in] IObjectStringMap * requestHeaders, 
            [out] IObjectStringMap ** cookiesMap);

        Put(
            [in] IURI * uri, 
            [in] IObjectStringMap * requestHeaders);
    }

    interface ICookieHandlerHelper {
        GetDefault(
            [out] ICookieHandler ** handler);

        SetDefault(
            [in] ICookieHandler * handler);
    }

    interface ICookieManager : ICookieHandler {
        SetCookiePolicy(
            [in] ICookiePolicy * cookiePolicy);

        GetCookieStore(
            [out] ICookieStore ** cookieStore);
    }

    interface ICacheResponse {
        GetBody(
            [out] IInputStream ** is);

        GetHeaders(
            [out] IObjectStringMap ** headers);
    }

    interface ICacheRequest {
        Abort();

        GetBody(
            [out] IOutputStream ** os);
    }

    interface IResponseCache {
        Get(
            [in] IURI * uri, 
            [in] const String& requestMethod, 
            [in] IObjectStringMap * requestHeaders, 
            [out] ICacheResponse ** cache);

        Put(
            [in] IURI * uri, 
            [in] IURLConnection * conn, 
            [out] ICacheRequest ** cache);
    }

    interface IResponseCacheHelper {
        GetDefault(
            [out] IResponseCache ** responseCache);

        SetDefault(
            [in] IResponseCache * responseCache);
    }

    interface IIDNHelper {
        ToASCII(
            [in] const String& input, 
            [out] String * name);

        ToASCIIEx(
            [in] const String& input, 
            [in] Int32 flags, 
            [out] String * name);

        ToUnicode(
            [in] const String& input, 
            [out] String * name);

        ToUnicodeEx(
            [in] const String& input, 
            [in] Int32 flags, 
            [out] String * name);
    }

    interface ISecureCacheResponse : ICacheResponse {
        GetCipherSuite(
            [out] String * clipherSuite);

        GetLocalCertificateChain(
            [out] IObjectContainer ** certificateChain);

        GetServerCertificateChain(
            [out] IObjectContainer ** certificateChain);

        GetPeerPrincipal(
            [out] IPrincipal ** principal);

        GetLocalPrincipal(
            [out] IPrincipal ** principal);
    }

    interface ISocketInputStream : IInputStream {
    }

    interface ISocketOutputStream : IOutputStream {
    }

    interface IPlainSocketImpl : ISocketImpl {
    }

    interface IPlainServerSocketImpl : IPlainSocketImpl {
    }

    interface INetGlobalInit {
        Initialize();
    }

    [

    ]
    class CInet4Address {
        interface IInet4Address;
    }

    [

    ]
    class CInet6Address {
        interface IInet6Address;
    }

    [

    ]
    class CURI {
        interface IURI;
    }

    [

    ]
    class CURL {
        interface IURL;
    }

    [

    ]
    class CSocket {
        interface ISocket;
    }

    [

    ]
    class CInetSocketAddress {
        interface IInetSocketAddress;
    }

    [

    ]
    class CDatagramSocket {
        interface IDatagramSocket;
    }

    [

    ]
    class CDatagramPacket {
        interface IDatagramPacket;
    }

    [

    ]
    class CHttpCookie {
        interface IHttpCookie;
    }

    [

    ]
    class CSocketPermission {
        interface ISocketPermission;
    }

    [

    ]
    class CMulticastSocket {
        interface IMulticastSocket;
    }

    [

    ]
    class CServerSocket {
        interface IServerSocket;
    }

    [

    ]
    class CNetPermission {
        interface INetPermission;
    }

    [

    ]
    class CProxy {
        interface IProxy;
    }

    [

    ]
    class CCookieManager {
        interface ICookieManager;
    }

    [
        singleton
    ]
    class CCookiePolicyHelper {
        interface ICookiePolicyHelper;
    }

    [
        singleton
    ]
    class CIDNHelper {
        interface IIDNHelper;
    }

    [

    ]
    class CPasswordAuthentication {
        interface IPasswordAuthentication;
    }

    [

    ]
    class CSocketInputStream {
        interface ISocketInputStream;
    }

    [

    ]
    class CSocketOutputStream {
        interface ISocketOutputStream;
    }

    [

    ]
    class CPlainServerSocketImpl {
        interface IPlainServerSocketImpl;
    }

    [

    ]
    class CPlainSocketImpl {
        interface IPlainSocketImpl;
    }

    [

    ]
    class CNetGlobalInit {
        interface INetGlobalInit;
    }
}
