module
{
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLParametersImpl.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLServerSocketImpl.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/IAbstractSessionContext.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/IServerSessionContext.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLContextImpl.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLClientSessionCache.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLServerSessionCache.car");
	merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLInputStream.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLSessionImpl.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLSocketImpl.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLSocketInputStream.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLSocketOutputStream.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLEngineImpl.car");
    merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLStreamedInput.car");
	merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLSocketFactoryImpl.car");
//	merge("../../../../../car/Elastos/Net/Apache/XNet/IOpenSSLContextImpl.car");
//	merge("../../../../../car/Elastos/Net/Apache/XNet/IDefaultSSLContextImpl.car");
	merge("../../../../../car/Elastos/Net/Apache/XNet/ICipherSuite.car");
	merge("../../../../../car/Elastos/Net/Apache/XNet/IAppendable.car");
	merge("../../../../../car/Elastos/Net/Apache/XNet/IDataStream.car");
	merge("../../../../../car/Elastos/Net/Apache/XNet/IHandshakeIODataStream.car");
	merge("../../../../../car/Elastos/Net/Apache/XNet/IMessage.car");
	merge("../../../../../car/Elastos/Net/Apache/XNet/ISSLRecordProtocol.car");	
	merge("../../../../../car/Elastos/Net/Apache/XNet/IHandshakeProtocol.car");
	merge("../../../../../car/Elastos/Net/Apache/XNet/IAlertProtocol.car");
	merge("../../../../../car/Elastos/Net/Apache/XNet/IHandshake.car");
	

    class CSSLServerSocketImpl {
        constructor(
			[in] ISSLParametersImpl* sslParameters);
			
		constructor(
			[in] Int32 port, 
			[in] ISSLParametersImpl* sslParameters);
		
		constructor(
			[in] Int32 port, 
			[in] Int32 backlog,
            [in] ISSLParametersImpl* sslParameters);
            		
        constructor(
        	[in] Int32 port, 
        	[in] Int32 backlog,
            [in] IInetAddress* iAddress,
            [in] ISSLParametersImpl* sslParameters);
            
        interface ISSLServerSocketImpl;
    }
    
    
    class CSSLParametersImpl {
    	interface ISSLParametersImpl;
    }

	class CServerSessionContext {
		constructor();
		
		interface IServerSessionContext;
	}
	
	class CSSLSocketInputStream {
		constructor(
			[in] ISSLSocketImpl* owner);
		
		interface ISSLSocketInputStream;
	}
	
	class CSSLSocketOutputStream {
		constructor(
			[in] ISSLSocketImpl* owner);
		
		interface ISSLSocketOutputStream;
	}
	
	class CSSLEngineImpl {
		constructor(
			[in] ISSLParametersImpl* sslParameters);
	
		constructor(
			[in] String host, 
			[in] Int32 port, 
			[in] ISSLParametersImpl* sslParameters);
		
		interface ISSLEngineImpl;
	}
	
	class CSSLContextImpl {
		constructor();
		
		//constructor(
		//	[in] IDefaultSSLContextImpl* dummy);

		interface ISSLContextImpl;
	}
	
	class CSSLSocketImpl {
		constructor(
			[in] ISSLParametersImpl* sslParameters);
	
		constructor(
			[in] String host, 
			[in] Int32 port, 
			[in] ISSLParametersImpl* sslParameters);
			
		constructor(
			[in] String host, 
			[in] Int32 port,
            [in] IInetAddress* localHost, 
            [in] Int32 localPort,
            [in] ISSLParametersImpl* sslParameters);
            
		constructor(
			[in] IInetAddress* host, 
			[in] Int32 port,
            [in] ISSLParametersImpl* sslParameters); 
            
        constructor(
        	[in] IInetAddress* address, 
        	[in] Int32 port,
            [in] IInetAddress* localAddress, 
            [in] Int32 localPort,
            [in] ISSLParametersImpl* sslParameters);
        
        interface ISSLSocketImpl;         			
	}
	
	class CSSLSocketFactoryImpl {
		constructor();
		
		constructor(
			[in] ISSLParametersImpl* sslParameters);
		
		interface ISSLSocketFactoryImpl;
	}
	
	class CSSLSessionImpl {
		//constructor(
		//	[in] ISecureRandom* sr);
		
		//constructor(
		//	[in] ICipherSuite cipher_suite;
		//	[in] ISecureRandom* sr);
			
		interface ISSLSessionImpl;
	}
	
	
	class CCipherSuite {
		constructor(
			[in] String name, 
			[in] Boolean isExportable, 
			[in] Int32 keyExchange,
            [in] String authType, 
            [in] String cipherName, 
            [in] String hash, 
            [in] ArrayOf<Byte> code);
            
		interface ICipherSuite;
	}
	
	class CSSLRecordProtocol {
		constructor(
			[in] IHandshakeProtocol* handshakeProtocol,
            [in] IAlertProtocol* alertProtocol,
            [in] ISSLInputStream* stream,
            [in] IAppendable* appData);
		
		interface ISSLRecordProtocol;
	}
	
	class CAlertProtocol {
		constructor();
		
		interface IAlertProtocol;
	}
	
	class CHandshakeIODataStream {
		constructor();
		
		interface IHandshakeIODataStream;
		interface IAppendable;
		interface IDataStream;
	}
}
