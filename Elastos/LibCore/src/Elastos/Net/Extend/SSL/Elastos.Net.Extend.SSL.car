module
{
    merge("../../../../../car/Elastos/Net/Extend/ISocketFactory.car");
    merge("../../../../../car/Elastos/Net/Extend/IServerSocketFactory.car");
    merge("../../../../../car/Elastos/Net/Extend/IDefaultSocketFactory.car");
    merge("../../../../../car/Elastos/Net/Extend/IDefaultServerSocketFactory.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLEngine.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLEngineResult.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLParameters.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLSessionContext.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLSession.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLContext.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/IHostnameVerifier.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLServerSocket.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLSocket.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLSocketFactory.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLServerSocketFactory.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/IDefaultSSLSocketFactory.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/IDefaultSSLServerSocketFactory.car");
    merge("../../../../../car/Elastos/Net/Extend/SSL/IHttpsURLConnection.car");
	merge("../../../../../car/Elastos/Net/Extend/SSL/ISSLContextSpi.car");
	merge("../../../../../car/Elastos/Net/Extend/SSL/IHandshakeCompletedEvent.car");
	merge("../../../../../car/Elastos/Net/Extend/SSL/IHandshakeCompletedListener.car");
	
    class CSSLContext {
        constructor();

        interface ISSLContext;
    }
    
    class CSSLParameters {
    	constructor();
    	
    	constructor(
    		[in] ArrayOf<String> cipherSuites);
    	
    	constructor(
    		[in] ArrayOf<String> cipherSuites,
            [in] ArrayOf<String> protocols);
                         
    	interface ISSLParameters;
    }
    
    class CSSLEngineResult {
    	constructor(
    		[in] Status status,
            [in] HandshakeStatus handshakeStatus, 
            [in] Int32 bytesConsumed, 
            [in] Int32 bytesProduced);
        
        interface ISSLEngineResult;
    }

    class CDefaultSSLSocketFactory {
        constructor(
            [in] String mes);

        interface IDefaultSSLSocketFactory;
    }

    class CDefaultSSLServerSocketFactory {
        constructor(
            [in] String mes);

        interface IDefaultSSLServerSocketFactory;
    }

    class CDefaultSocketFactory {
        constructor();

        interface IDefaultSocketFactory;
    }

    class CDefaultServerSocketFactory {
        constructor();

        interface IDefaultServerSocketFactory;
    }

	class CHandshakeCompletedEvent {
		constructor(
			[in] ISSLSocket* sock, 
			[in] ISSLSession* s);
		
		interface IHandshakeCompletedEvent;
	}
}
