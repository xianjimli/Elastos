
module
{
    importlib("Elastos.IO.eco");


    merge("../../../../../car/Elastos/Utility/Zip/Exceptions.car");
    merge("../../../../../car/Elastos/Utility/Zip/Errors.car");
    merge("../../../../../car/Elastos/Utility/Zip/ZipConstants.car");
    merge("../../../../../car/Elastos/Utility/Zip/IChecksum.car");
    merge("../../../../../car/Elastos/Utility/Zip/IInflater.car");
    merge("../../../../../car/Elastos/Utility/Zip/IDeflater.car");
    merge("../../../../../car/Elastos/Utility/Zip/IZipEntry.car");
    merge("../../../../../car/Elastos/Utility/Zip/IInflaterInputStream.car");
    merge("../../../../../car/Elastos/Utility/Zip/IInflaterOutputStream.car");
    merge("../../../../../car/Elastos/Utility/Zip/IDeflaterInputStream.car");
    merge("../../../../../car/Elastos/Utility/Zip/IDeflaterOutputStream.car");
    merge("../../../../../car/Elastos/Utility/Zip/IZipInputStream.car");
    merge("../../../../../car/Elastos/Utility/Zip/IZipOutputStream.car");
    merge("../../../../../car/Elastos/Utility/Zip/ICheckedInputStream.car");
    merge("../../../../../car/Elastos/Utility/Zip/ICheckedOutputStream.car");
    merge("../../../../../car/Elastos/Utility/Zip/IGZIPInputStream.car");
    merge("../../../../../car/Elastos/Utility/Zip/IGZIPOutputStream.car");
    merge("../../../../../car/Elastos/Utility/Zip/IZipFile.car");


    /**
     * The Adler-32 class is used to compute the {@code Adler32} checksum from a set
     * of data. Compared to {@link CRC32} it trades reliability for speed.
     * Refer to RFC 1950 for the specification.
     */
    class CAdler32 {
        interface IChecksum;
    }

    /**
     * The CRC32 class is used to compute a CRC32 checksum from data provided as
     * input value.
     */
    class CCRC32 {
        interface IChecksum;
    }

    class CInflater {
        /**
         * This constructor creates an inflater that expects a header from the input
         * stream. Use {@code Inflater(boolean)} if the input comes without a ZLIB
         * header.
         */
        constructor();

        /**
         * This constructor allows to create an inflater that expects no header from
         * the input stream.
         *
         * @param noHeader
         *            {@code true} indicates that no ZLIB header comes with the
         *            input.
         */
        constructor(
            [in] Boolean noHeader);

        interface IInflater;
    }

    class CDeflater {
        /**
         * Constructs a new {@code Deflater} instance with default compression
         * level. The strategy can be specified with {@link #setStrategy}, only. A
         * header is added to the output by default; use constructor {@code
         * Deflater(level, boolean)} if you need to omit the header.
         */
        constructor();

        /**
         * Constructs a new {@code Deflater} instance with a specific compression
         * level. The strategy can be specified with {@code setStrategy}, only. A
         * header is added to the output by default; use
         * {@code Deflater(level, boolean)} if you need to omit the header.
         *
         * @param level
         *            the compression level in the range between 0 and 9.
         */
        constructor(
            [in] Int32 level);

        /**
         * Constructs a new {@code Deflater} instance with a specific compression
         * level. If noHeader is passed as true no ZLib header is added to the
         * output. In a ZIP archive every entry (compressed file) comes with such a
         * header. The strategy can be specified with the setStrategy method, only.
         *
         * @param level
         *            the compression level in the range between 0 and 9.
         * @param noHeader
         *            {@code true} indicates that no ZLIB header should be written.
         */
        constructor(
            [in] Int32 level,
            [in] Boolean noHeader);

        interface IDeflater;
    }

    class CInflaterInputStream {
        /**
         * This is the most basic constructor. You only need to pass the {@code
         * InputStream} from which the compressed data is to be read from. Default
         * settings for the {@code Inflater} and internal buffer are be used. In
         * particular the Inflater expects a ZLIB header from the input stream.
         *
         * @param is
         *            the {@code InputStream} to read data from.
         */
        constructor(
            [in] IInputStream* is);

        /**
         * This constructor lets you pass a specifically initialized Inflater,
         * for example one that expects no ZLIB header.
         *
         * @param is
         *            the {@code InputStream} to read data from.
         * @param inflater
         *            the specific {@code Inflater} for uncompressing data.
         */
        constructor(
            [in] IInputStream* is,
            [in] IInflater* inflater);

        /**
         * This constructor lets you specify both the {@code Inflater} as well as
         * the internal buffer size to be used.
         *
         * @param is
         *            the {@code InputStream} to read data from.
         * @param inflater
         *            the specific {@code Inflater} for uncompressing data.
         * @param bsize
         *            the size to be used for the internal buffer.
         */
        constructor(
            [in] IInputStream* is,
            [in] IInflater* inflater,
            [in] Int32 bsize);

        interface IInflaterInputStream;
    }

    class CInflaterOutputStream {
        /**
         * Constructs an {@code InflaterOutputStream} with a new {@code Inflater} and an
         * implementation-defined default internal buffer size. {@code out} is a destination
         * for uncompressed data, and compressed data will be written to this stream.
         *
         * @param out the destination {@code OutputStream}
         */
        constructor(
            [in] IOutputStream* os);

        /**
         * Constructs an {@code InflaterOutputStream} with the given {@code Inflater} and an
         * implementation-defined default internal buffer size. {@code out} is a destination
         * for uncompressed data, and compressed data will be written to this stream.
         *
         * @param out the destination {@code OutputStream}
         * @param inf the {@code Inflater} to be used for decompression
         */
        constructor(
            [in] IOutputStream* os,
            [in] IInflater* inf);

        /**
         * Constructs an {@code InflaterOutputStream} with the given {@code Inflater} and
         * given internal buffer size. {@code out} is a destination
         * for uncompressed data, and compressed data will be written to this stream.
         *
         * @param out the destination {@code OutputStream}
         * @param inf the {@code Inflater} to be used for decompression
         * @param bufferSize the length in bytes of the internal buffer
         */
        constructor(
            [in] IOutputStream* os,
            [in] IInflater* inf,
            [in] Int32 bufferSize);

        interface IInflaterOutputStream;
    }

    class CDeflaterInputStream {
        /**
         * Constructs a {@code DeflaterInputStream} with a new {@code Deflater} and an
         * implementation-defined default internal buffer size. {@code in} is a source of
         * uncompressed data, and this stream will be a source of compressed data.
         *
         * @param in the source {@code InputStream}
         */
        constructor(
            [in] IInputStream* is);

        /**
         * Constructs a {@code DeflaterInputStream} with the given {@code Deflater} and an
         * implementation-defined default internal buffer size. {@code in} is a source of
         * uncompressed data, and this stream will be a source of compressed data.
         *
         * @param in the source {@code InputStream}
         * @param deflater the {@code Deflater} to be used for compression
         */
        constructor(
            [in] IInputStream* is,
            [in] IDeflater* deflater);

        /**
         * Constructs a {@code DeflaterInputStream} with the given {@code Deflater} and
         * given internal buffer size. {@code in} is a source of
         * uncompressed data, and this stream will be a source of compressed data.
         *
         * @param in the source {@code InputStream}
         * @param deflater the {@code Deflater} to be used for compression
         * @param bufferSize the length in bytes of the internal buffer
         */
        constructor(
            [in] IInputStream* is,
            [in] IDeflater* deflater,
            [in] Int32 bufferSize);

        interface IDeflaterInputStream;
    }

    class CDeflaterOutputStream {
        /**
         * This is the most basic constructor. You only need to pass the {@code
         * OutputStream} to which the compressed data shall be written to. The
         * default settings for the {@code Deflater} and internal buffer are used.
         * In particular the {@code Deflater} produces a ZLIB header in the output
         * stream.
         *
         * @param os
         *            is the OutputStream where to write the compressed data to.
         */
        constructor(
            [in] IOutputStream* os);

        /**
         * This constructor lets you pass the {@code Deflater} specifying the
         * compression algorithm.
         *
         * @param os
         *            is the {@code OutputStream} where to write the compressed data
         *            to.
         * @param def
         *            is the specific {@code Deflater} that is used to compress
         *            data.
         */
        constructor(
            [in] IOutputStream* os,
            [in] IDeflater* def);

        /**
         * This constructor lets you specify both the compression algorithm as well
         * as the internal buffer size to be used.
         *
         * @param os
         *            is the {@code OutputStream} where to write the compressed data
         *            to.
         * @param def
         *            is the specific {@code Deflater} that will be used to compress
         *            data.
         * @param bsize
         *            is the size to be used for the internal buffer.
         */
        constructor(
            [in] IOutputStream* os,
            [in] IDeflater* def,
            [in] Int32 bsize);

        interface IDeflaterOutputStream;
    }

    class CCheckedInputStream {
        /**
         * Constructs a new {@code CheckedInputStream} on {@code InputStream}
         * {@code is}. The checksum will be calculated using the algorithm
         * implemented by {@code csum}.
         *
         * <p><strong>Warning:</strong> passing a null source creates an invalid
         * {@code CheckedInputStream}. All operations on such a stream will fail.
         *
         * @param is
         *            the input stream to calculate checksum from.
         * @param csum
         *            an entity implementing the checksum algorithm.
         */
        constructor(
            [in] IInputStream* is,
            [in] IChecksum* csum);

        interface ICheckedInputStream;
    }

    class CCheckedOutputStream {
        /**
         * Constructs a new {@code CheckedOutputStream} on {@code OutputStream}
         * {@code os}. The checksum is calculated using the algorithm implemented
         * by {@code csum}.
         *
         * @param os
         *            the output stream to calculate checksum for.
         * @param cs
         *            an entity implementing the checksum algorithm.
         */
        constructor(
            [in] IOutputStream* os,
            [in] IChecksum* cs);

        interface ICheckedOutputStream;
    }

    class CGZIPInputStream {
        /**
         * Construct a {@code GZIPInputStream} to read from GZIP data from the
         * underlying stream.
         *
         * @param is
         *            the {@code InputStream} to read data from.
         * @throws IOException
         *             if an {@code IOException} occurs.
         */
        constructor(
            [in] IInputStream* is);

        /**
         * Construct a {@code GZIPInputStream} to read from GZIP data from the
         * underlying stream. Set the internal buffer size to {@code size}.
         *
         * @param is
         *            the {@code InputStream} to read data from.
         * @param size
         *            the internal read buffer size.
         * @throws IOException
         *             if an {@code IOException} occurs.
         */
        constructor(
            [in] IInputStream* is,
            [in] Int32 size);

        interface IGZIPInputStream;
    }

    class CGZIPOutputStream {
        /**
         * Construct a new {@code GZIPOutputStream} to write data in GZIP format to
         * the underlying stream.
         *
         * @param os
         *            the {@code OutputStream} to write data to.
         * @throws IOException
         *             if an {@code IOException} occurs.
         */
        constructor(
            [in] IOutputStream* os);

        /**
         * Construct a new {@code GZIPOutputStream} to write data in GZIP format to
         * the underlying stream. Set the internal compression buffer to size
         * {@code size}.
         *
         * @param os
         *            the {@code OutputStream} to write to.
         * @param size
         *            the internal buffer size.
         * @throws IOException
         *             if an {@code IOException} occurs.
         */
        constructor(
            [in] IOutputStream* os,
            [in] Int32 size);

        interface IGZIPOutputStream;
    }

    class CZipInputStream {
        /**
         * Constructs a new {@code ZipInputStream} from the specified input stream.
         *
         * @param stream
         *            the input stream to representing a ZIP archive.
         */
        constructor(
            [in] IInputStream* stream);

        interface IZipInputStream;
    }

    class CZipOutputStream {
        /**
         * Constructs a new {@code ZipOutputStream} with the specified output
         * stream.
         *
         * @param os
         *            the {@code OutputStream} to write the data to.
         */
        constructor(
            [in] IOutputStream* os);

        interface IZipOutputStream;
    }

    class CZipEntry {
        /**
         * Constructs a new {@code ZipEntry} with the specified name.
         *
         * @param name
         *            the name of the ZIP entry.
         * @throws IllegalArgumentException
         *             if the name length is outside the range (> 0xFFFF).
         */
        constructor(
            [in] String name);

        /**
         * Constructs a new {@code ZipEntry} using the values obtained from {@code
         * ze}.
         *
         * @param ze
         *            the {@code ZipEntry} from which to obtain values.
         */
        constructor(
            [in] IZipEntry* ze);

        /* jianfeng add */

        constructor(
            [in] Int32 little,
            [in] IInputStream *is);

        interface IZipEntry;
    }

    class CZipFile {
        /**
         * Constructs a new {@code ZipFile} with the specified file.
         *
         * @param file
         *            the file to read from.
         * @throws ZipException
         *             if a ZIP error occurs.
         * @throws IOException
         *             if an {@code IOException} occurs.
         */
        constructor(
            [in] IFile* file);

        /**
         * Opens a file as <i>ZIP-archive</i>. "mode" must be {@code OPEN_READ} or
         * {@code OPEN_DELETE} . The latter sets the "delete on exit" flag through a
         * file.
         *
         * @param file
         *            the ZIP file to read.
         * @param mode
         *            the mode of the file open operation.
         * @throws IOException
         *             if an {@code IOException} occurs.
         */
        constructor(
            [in] IFile* file,
            [in] Int32 mode);

        /**
         * Opens a ZIP archived file.
         *
         * @param name
         *            the name of the ZIP file.
         * @throws IOException
         *             if an IOException occurs.
         */
        constructor(
            [in] String name);

        interface IZipFile;
    }
}
