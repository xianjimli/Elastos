
module
{

    merge("../../../../car/Elastos/Utility/IComparator.car");
    merge("../../../../car/Elastos/Utility/IDate.car");
    merge("../../../../car/Elastos/Utility/ILocale.car");
    merge("../../../../car/Elastos/Utility/ICalendar.car");
    merge("../../../../car/Elastos/Utility/IGregorianCalendar.car");
    merge("../../../../car/Elastos/Utility/IICUHelper.car");
    merge("../../../../car/Elastos/Utility/IObjectStringMap.car");
    merge("../../../../car/Elastos/Utility/ITimeZone.car");
    merge("../../../../car/Elastos/Utility/ISimpleTimeZone.car");
    merge("../../../../car/Elastos/Utility/ITimerTask.car");
    merge("../../../../car/Elastos/Utility/ITimer.car");
    merge("../../../../car/Elastos/Utility/ICurrency.car");

    class CObjectContainer {
        interface IObjectContainer;
    }

    class CLocale {
        constructor();

        /**
	     * Constructs a new {@code Locale} using the specified language.
	     */
        constructor(
            [in] String language);

        /**
	     * Constructs a new {@code Locale} using the specified language and country codes.
	     */
        constructor(
            [in] String language,
            [in] String country);

        /**
	     * Constructs a new {@code Locale} using the specified language, country,
	     * and variant codes.
	     */
        constructor(
            [in] String language,
            [in] String country,
            [in] String variant);

        interface ILocale;
    }

    singleton class CLocaleHelper {
        interface ILocaleHelper;
    }

    singleton class CICUHelper {
        interface IICUHelper;
    }

    class CObjectStringMap {
        interface IObjectStringMap;
    }

    class CDate {
        constructor();

        constructor(
            [in] Int32 year,
            [in] Int32 month,
            [in] Int32 day);

        constructor(
            [in] Int32 year,
            [in] Int32 month,
            [in] Int32 day,
            [in] Int32 hour,
            [in] Int32 minute);

        constructor(
            [in] Int32 year,
            [in] Int32 month,
            [in] Int32 day,
            [in] Int32 hour,
            [in] Int32 minute,
            [in] Int32 second);

        constructor(
            [in] Int64 milliseconds);

        constructor(
            [in] String string);

        interface IDate;
    }

    class CGregorianCalendar {
        constructor();

        constructor(
            [in] ILocale* locale);

        constructor(
            [in] ITimeZone* ITimeZone);

        constructor(
            [in] ITimeZone* ITimeZone,
            [in] ILocale* locale);

        constructor(
            [in] Int64 milliseconds);

        constructor(
            [in] Boolean ignored);

        interface IGregorianCalendar;
    }

    singleton class CCalendarHelper {
        interface ICalendarHelper;
    }

    singleton class CTimeZoneHelper {
        interface ITimeZoneHelper;
    }

    class CSimpleTimeZone {
        constructor(
            [in] Int32 offset,
            [in] String name);

        interface ISimpleTimeZone;
    }

    class CTimer {
        constructor(
            [in] String name,
            [in] Boolean isDaemon);

        constructor(
            [in] String name);

        constructor(
            [in] Boolean isDaemon);

        constructor();

        interface ITimer;
    }
}
