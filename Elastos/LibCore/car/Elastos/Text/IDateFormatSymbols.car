module
{
    [deprecated]
    interface IDateFormatSymbols {

        GetLongStandAloneMonths(
            [out, callee] ArrayOf<String>* longStandAloneMonths);

        GetShortStandAloneMonths(
            [out, callee] ArrayOf<String>* shortStandAloneMonths);

        GetLongStandAloneWeekdays(
            [out, callee] ArrayOf<String>* longStandAloneWeekdays);

        GetShortStandAloneWeekdays(
            [out, callee] ArrayOf<String>* shortStandAloneWeekdays);

        GetCustomZoneStrings(
            [out] Boolean* customZoneStrings);

        GetLocale(
            [out] ILocale** locale);
        /**
         * Returns the array of strings which represent AM and PM. Use the
         * {@link java.util.Calendar} constants {@code Calendar.AM} and
         * {@code Calendar.PM} as indices for the array.
         */
        GetAmPmStrings(
            [out, callee] ArrayOf<String>* amPmStrings);

        /**
         * Returns the array of strings which represent BC and AD. Use the
         * {@link java.util.Calendar} constants {@code GregorianCalendar.BC} and
         * {@code GregorianCalendar.AD} as indices for the array.
         */
        GetEras(
            [out, callee] ArrayOf<String>* eras);

        /**
         * Returns the pattern characters used by {@link SimpleDateFormat} to
         * specify date and time fields.
         */
        GetLocalPatternChars(
            [out] String* localPatternChars);

        /**
         * Returns the array of strings containing the full names of the months. Use
         * the {@link java.util.Calendar} constants {@code Calendar.JANUARY} etc. as
         * indices for the array.
         */
        GetMonths(
            [out, callee] ArrayOf<String>* months);

        /**
         * Returns the array of strings containing the abbreviated names of the
         * months. Use the {@link java.util.Calendar} constants
         * {@code Calendar.JANUARY} etc. as indices for the array.
         */
        GetShortMonths(
            [out, callee] ArrayOf<String>* shortMonths);

        /**
         * Returns the array of strings containing the abbreviated names of the days
         * of the week. Use the {@link java.util.Calendar} constants
         * {@code Calendar.SUNDAY} etc. as indices for the array.
         */
        GetShortWeekdays(
            [out, callee] ArrayOf<String>* shortWeekdays);

        /**
         * Returns the array of strings containing the full names of the days of the
         * week. Use the {@link java.util.Calendar} constants
         * {@code Calendar.SUNDAY} etc. as indices for the array.
         */
        GetWeekdays(
            [out, callee] ArrayOf<String>* weekdays);

        /**
         * Returns the two-dimensional array of strings containing localized names for time zones.
         * Each row is an array of five strings:
         * <ul>
         * <li>The time zone ID, for example "America/Los_Angeles".
         * This is not localized, and is used as a key into the table.
         * <li>The long display name, for example "Pacific Standard Time".
         * <li>The short display name, for example "PST".
         * <li>The long display name for DST, for example "Pacific Daylight Time".
         * <li>The short display name for DST, for example "PDT".
         * </ul>
         */
        //public String[][] GetZoneStrings();

        /**
         * Sets the array of strings which represent AM and PM. Use the
         * {@link java.util.Calendar} constants {@code Calendar.AM} and
         * {@code Calendar.PM} as indices for the array.
         */
        SetAmPmStrings(
            [in] ArrayOf<String>* data);

        /**
         * Sets the array of Strings which represent BC and AD. Use the
         * {@link java.util.Calendar} constants {@code GregorianCalendar.BC} and
         * {@code GregorianCalendar.AD} as indices for the array.
         */
        SetEras(
            [in] ArrayOf<String>* data);

        /**
         * Sets the pattern characters used by {@link SimpleDateFormat} to specify
         * date and time fields.
         */
        SetLocalPatternChars(
            [in] String data);

        /**
         * Sets the array of strings containing the full names of the months. Use
         * the {@link java.util.Calendar} constants {@code Calendar.JANUARY} etc. as
         * indices for the array.
         */
        SetMonths(
            [in] ArrayOf<String>* data);

        /**
         * Sets the array of strings containing the abbreviated names of the months.
         * Use the {@link java.util.Calendar} constants {@code Calendar.JANUARY}
         * etc. as indices for the array.
         */
        SetShortMonths(
            [in] ArrayOf<String>* data);

        /**
         * Sets the array of strings containing the abbreviated names of the days of
         * the week. Use the {@link java.util.Calendar} constants
         * {@code Calendar.SUNDAY} etc. as indices for the array.
         */
        SetShortWeekdays(
            [in] ArrayOf<String>* data);

        /**
         * Sets the array of strings containing the full names of the days of the
         * week. Use the {@link java.util.Calendar} constants
         * {@code Calendar.SUNDAY} etc. as indices for the array.
         */
        SetWeekdays(
            [in] ArrayOf<String>* data);

        /**
         * Sets the two-dimensional array of strings containing localized names for time zones.
         * See {@link #getZoneStrings} for details.
         * @throws IllegalArgumentException if any row has fewer than 5 elements.
         * @throws NullPointerException if {@code zoneStrings == null}.
         */
        //SetZoneStrings(String[][] zoneStrings);
    }

    interface IDateFormatSymbolsHelper
    {
        GetInstance(
            [out] IDateFormatSymbols** instance);

        GetInstanceEx(
            [in] ILocale* locale,
            [out] IDateFormatSymbols** instance);

        GetAvailableLocales(
            [out, callee] ArrayOf<ILocale*>* arrayOfLocales);
    }
}