module {
    interface INativeDecimalFormat {
        Close();

        /**
         * Copies the DecimalFormatSymbols settings into our native peer in bulk.
         */
        SetDecimalFormatSymbols(
            [in] IDecimalFormatSymbols* dfs);

//        SetDecimalFormatSymbolsEx(
//            [in] LocaleData* ld);

//        FormatBigDecimal(
//            [in] IBigDecimal* value,
//            [in] FieldPosition field,
//            [out, callee] ArrayOf<Char32>* array);

//        FormatBigInteger(
//            [in] IBigInteger* value,
//            [in] IFieldPosition* field,
//            [out, callee] ArrayOf<Char32>* array);

        FormatLong(
            [in] Int64 value,
            [in] IFieldPosition* field,
            [out, callee] ArrayOf<Char32>* array);

        FormatDouble(
            [in] Double value,
            [in] IFieldPosition* field,
            [out, callee] ArrayOf<Char32>* array);

        ApplyLocalizedPattern(
            [in] String pattern);

        ApplyPattern(
            [in] String pattern);

        FormatToCharacterIterator(
            [in] IInterface* object,
            [out] IAttributedCharacterIterator** result);

        ToLocalizedPattern(
            [out] String* localizedPattern);

        ToPattern(
            [out] String* pattern);

        Parse(
            [in] String string,
            [in] IParsePosition* position,
            [out] INumber** result);

        // start getter and setter

        GetMaximumFractionDigits(
            [out] Int32* maximumFractionDigits);

        GetMaximumIntegerDigits(
            [out] Int32* maximumIntegerDigits);

        GetMinimumFractionDigits(
            [out] Int32* minimumFractionDigits);

        GetMinimumIntegerDigits(
            [out] Int32* minimumIntegerDigits);

        GetGroupingSize(
            [out] Int32* groupingSize);

        GetMultiplier(
            [out] Int32* multiplier);

        GetNegativePrefix(
            [out] String* negativePrefix);

        GetNegativeSuffix(
            [out] String* negativeSuffix);

        GetPositivePrefix(
            [out] String* positivePrefix);

        GetPositiveSuffix(
            [out] String* positiveSuffix);

        IsDecimalSeparatorAlwaysShown(
            [out] Boolean* isDecimalSeparatorAlwaysShown);

        IsParseBigDecimal(
            [out] Boolean* isParseBigDecimal);

        IsParseIntegerOnly(
            [out] Boolean* isParseIntegerOnly);

        IsGroupingUsed(
            [out] Boolean* isGroupingUsed);

        SetDecimalSeparatorAlwaysShown(
            [in] Boolean value);

        SetCurrency(
            [in] ICurrency* currency);

        SetGroupingSize(
            [in] Int32 value);

        SetGroupingUsed(
            [in] Boolean value);

        SetMaximumFractionDigits(
            [in] Int32 value);

        SetMaximumIntegerDigits(
            [in] Int32 value);

        SetMinimumFractionDigits(
            [in] Int32 value);

        SetMinimumIntegerDigits(
            [in] Int32 value);

        SetMultiplier(
            [in] Int32 value);

        SetNegativePrefix(
            [in] String value);

        SetNegativeSuffix(
            [in] String value);

        SetPositivePrefix(
            [in] String value);

        SetPositiveSuffix(
            [in] String value);

        SetParseBigDecimal(
            [in] Boolean value);

        SetParseIntegerOnly(
            [in] Boolean value);

        SetRoundingMode(
            [in] RoundingMode roundingMode,
            [in] Double roundingIncrement);

        GetAddr(
            [out] Int32* value);

        GetLastPattern(
            [out] String* value);

        GetNegPrefNull(
            [out] Boolean* value);

        GetNegSuffNull(
            [out] Boolean* value);

        GetPosPrefNull(
            [out] Boolean* value);

        GetPosSuffNull(
            [out] Boolean* value);
    }
}