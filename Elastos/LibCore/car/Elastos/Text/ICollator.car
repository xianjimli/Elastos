module {
    interface IICUCollationKey;
    interface IICUCollator;

    /**
     * Constant used to specify the decomposition rule.
     */
    const ICollator_NO_DECOMPOSITION = 0;

    /**
     * Constant used to specify the decomposition rule.
     */
    const ICollator_CANONICAL_DECOMPOSITION = 1;

    /**
     * Constant used to specify the decomposition rule. This value for
     * decomposition is not supported.
     */
    const ICollator_FULL_DECOMPOSITION = 2;

    /**
     * Constant used to specify the collation strength.
     */
    const ICollator_PRIMARY = 0;

    /**
     * Constant used to specify the collation strength.
     */
    const ICollator_SECONDARY = 1;

    /**
     * Constant used to specify the collation strength.
     */
    const ICollator_TERTIARY = 2;

    /**
     * Constant used to specify the collation strength.
     */
    const ICollator_IDENTICAL = 3;

    interface ICollator {
        /**
         * Compares two strings to determine their relative order.
         *
         * @param string1
         *            the first string to compare.
         * @param string2
         *            the second string to compare.
         * @return a negative value if {@code string1} is less than {@code string2},
         *         0 if they are equal and a positive value if {@code string1} is
         *         greater than {@code string2}.
         */
        CompareEx(
            [in] String string1,
            [in] String string2,
            [out] Int32* result);

        /**
         * Compares two strings using the collation rules to determine if they are
         * equal.
         *
         * @param string1
         *            the first string to compare.
         * @param string2
         *            the second string to compare.
         * @return {@code true} if {@code string1} and {@code string2} are equal
         *         using the collation rules, false otherwise.
         */
        EqualsEx(
            [in] String string1,
            [in] String string2,
            [out] Boolean* result);

        /**
         * Returns a {@link CollationKey} for the specified string for this collator
         * with the current decomposition rule and strength value.
         */
        GetCollationKey(
            [in] String string,
            [out] IICUCollationKey** collationKey);

        /**
         * Returns the decomposition rule for this collator.
         */
        GetDecomposition(
            [out] Int32* decomposition);

        /**
         * Returns the strength value for this collator.
         */
        GetStrength(
            [out] Int32* strength);

        /**
         * Sets the decomposition rule for this collator.
         */
        SetDecomposition(
            [in] Int32 value);

        /**
         * Sets the strength value for this collator.
         */
        SetStrength(
            [in] Int32 value);

        GetICUCollator(
            [out] IICUCollator** icuCollator);
    }

    interface ICollatorHelper {
        /**
         * Returns an array of locales for which custom {@code Collator} instances
         * are available.
         * <p>Note that Android does not support user-supplied locale service providers.
         */
        GetAvailableLocales(
            [out, callee] ArrayOf<ILocale*>* locales);

        /**
         * Returns a {@code Collator} instance which is appropriate for the user's default
         * {@code Locale}.
         * See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
         */
        GetInstance(
            [out] ICollator** instance);

        /**
         * Returns a {@code Collator} instance which is appropriate for {@code locale}.
         */
        GetInstanceEx(
            [in] ILocale* locale,
            [out] ICollator** instance);

    }
}