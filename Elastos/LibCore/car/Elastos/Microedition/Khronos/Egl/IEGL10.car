
module
{
    const IEGL10_EGL_SUCCESS                     = 0x3000;
    const IEGL10_EGL_NOT_INITIALIZED             = 0x3001;
    const IEGL10_EGL_BAD_ACCESS                  = 0x3002;
    const IEGL10_EGL_BAD_ALLOC                   = 0x3003;
    const IEGL10_EGL_BAD_ATTRIBUTE               = 0x3004;
    const IEGL10_EGL_BAD_CONFIG                  = 0x3005;
    const IEGL10_EGL_BAD_CONTEXT                 = 0x3006;
    const IEGL10_EGL_BAD_CURRENT_SURFACE         = 0x3007;
    const IEGL10_EGL_BAD_DISPLAY                 = 0x3008;
    const IEGL10_EGL_BAD_MATCH                   = 0x3009;
    const IEGL10_EGL_BAD_NATIVE_PIXMAP           = 0x300A;
    const IEGL10_EGL_BAD_NATIVE_WINDOW           = 0x300B;
    const IEGL10_EGL_BAD_PARAMETER               = 0x300C;
    const IEGL10_EGL_BAD_SURFACE                 = 0x300D;
    const IEGL10_EGL_BUFFER_SIZE                 = 0x3020;
    const IEGL10_EGL_ALPHA_SIZE                  = 0x3021;
    const IEGL10_EGL_BLUE_SIZE                   = 0x3022;
    const IEGL10_EGL_GREEN_SIZE                  = 0x3023;
    const IEGL10_EGL_RED_SIZE                    = 0x3024;
    const IEGL10_EGL_DEPTH_SIZE                  = 0x3025;
    const IEGL10_EGL_STENCIL_SIZE                = 0x3026;
    const IEGL10_EGL_CONFIG_CAVEAT               = 0x3027;
    const IEGL10_EGL_CONFIG_ID                   = 0x3028;
    const IEGL10_EGL_LEVEL                       = 0x3029;
    const IEGL10_EGL_MAX_PBUFFER_HEIGHT          = 0x302A;
    const IEGL10_EGL_MAX_PBUFFER_PIXELS          = 0x302B;
    const IEGL10_EGL_MAX_PBUFFER_WIDTH           = 0x302C;
    const IEGL10_EGL_NATIVE_RENDERABLE           = 0x302D;
    const IEGL10_EGL_NATIVE_VISUAL_ID            = 0x302E;
    const IEGL10_EGL_NATIVE_VISUAL_TYPE          = 0x302F;
    const IEGL10_EGL_SAMPLES                     = 0x3031;
    const IEGL10_EGL_SAMPLE_BUFFERS              = 0x3032;
    const IEGL10_EGL_SURFACE_TYPE                = 0x3033;
    const IEGL10_EGL_TRANSPARENT_TYPE            = 0x3034;
    const IEGL10_EGL_TRANSPARENT_BLUE_VALUE      = 0x3035;
    const IEGL10_EGL_TRANSPARENT_GREEN_VALUE     = 0x3036;
    const IEGL10_EGL_TRANSPARENT_RED_VALUE       = 0x3037;
    const IEGL10_EGL_NONE                        = 0x3038;
    const IEGL10_EGL_LUMINANCE_SIZE              = 0x303D;
    const IEGL10_EGL_ALPHA_MASK_SIZE             = 0x303E;
    const IEGL10_EGL_COLOR_BUFFER_TYPE           = 0x303F;
    const IEGL10_EGL_RENDERABLE_TYPE             = 0x3040;
    const IEGL10_EGL_SLOW_CONFIG                 = 0x3050;
    const IEGL10_EGL_NON_CONFORMANT_CONFIG       = 0x3051;
    const IEGL10_EGL_TRANSPARENT_RGB             = 0x3052;
    const IEGL10_EGL_RGB_BUFFER                  = 0x308E;
    const IEGL10_EGL_LUMINANCE_BUFFER            = 0x308F;
    const IEGL10_EGL_VENDOR                      = 0x3053;
    const IEGL10_EGL_VERSION                     = 0x3054;
    const IEGL10_EGL_EXTENSIONS                  = 0x3055;
    const IEGL10_EGL_HEIGHT                      = 0x3056;
    const IEGL10_EGL_WIDTH                       = 0x3057;
    const IEGL10_EGL_LARGEST_PBUFFER             = 0x3058;
    const IEGL10_EGL_RENDER_BUFFER               = 0x3086;
    const IEGL10_EGL_COLORSPACE                  = 0x3087;
    const IEGL10_EGL_ALPHA_FORMAT                = 0x3088;
    const IEGL10_EGL_HORIZONTAL_RESOLUTION       = 0x3090;
    const IEGL10_EGL_VERTICAL_RESOLUTION         = 0x3091;
    const IEGL10_EGL_PIXEL_ASPECT_RATIO          = 0x3092;
    const IEGL10_EGL_SINGLE_BUFFER               = 0x3085;
    const IEGL10_EGL_CORE_NATIVE_ENGINE          = 0x305B;
    const IEGL10_EGL_DRAW                        = 0x3059;
    const IEGL10_EGL_READ                        = 0x305A;

    const IEGL10_EGL_DONT_CARE                   = -1;

    const IEGL10_EGL_PBUFFER_BIT                 = 0x01;
    const IEGL10_EGL_PIXMAP_BIT                  = 0x02;
    const IEGL10_EGL_WINDOW_BIT                  = 0x04;

    interface IEGLDisplay;
    interface IEGLSurface;
    interface IEGLConfig;
    interface IEGLContext;

    [deprecated]
    interface IEGL10 extends IEGL {
        EglChooseConfig(
            [in] IEGLDisplay* display,
            [in] ArrayOf<Int32>* attrib_list,
            [in] ArrayOf<IEGLConfig*>* configs,
            [in] Int32 config_size,
            [in] ArrayOf<Int32>* num_config,
            [out] Boolean* result);

        EglCopyBuffers(
            [in] IEGLDisplay* display,
            [in] IEGLSurface* surface,
            [in] IInterface* native_pixmap,
            [out] Boolean* result);

        EglCreateContext(
            [in] IEGLDisplay* display,
            [in] IEGLConfig* config,
            [in] IEGLContext* share_context,
            [in] ArrayOf<Int32>* attrib_list,
            [out] IEGLContext** context);

        EglCreatePbufferSurface(
            [in] IEGLDisplay* display,
            [in] IEGLConfig* config,
            [in] ArrayOf<Int32>* attrib_list,
            [out] IEGLSurface** surface);

        EglCreatePixmapSurface(
            [in] IEGLDisplay* display,
            [in] IEGLConfig* config,
            [in] IInterface* native_pixmap,
            [in] ArrayOf<Int32>* attrib_list,
            [out] IEGLSurface** surface);

        EglCreateWindowSurface(
            [in] IEGLDisplay* display,
            [in] IEGLConfig* config,
            [in] IInterface* native_window,
            [in] ArrayOf<Int32>* attrib_list,
            [out] IEGLSurface** surface);

        EglDestroyContext(
            [in] IEGLDisplay* display,
            [in] IEGLContext* context,
            [out] Boolean* result);

        EglDestroySurface(
            [in] IEGLDisplay* display,
            [in] IEGLSurface* surface,
            [out] Boolean* result);

        EglGetConfigAttrib(
            [in] IEGLDisplay* display,
            [in] IEGLConfig* config,
            [in] Int32 attribute,
            [in] ArrayOf<Int32>* value,
            [out] Boolean* result);

        EglGetConfigs(
            [in] IEGLDisplay* display,
            [in] ArrayOf<IEGLConfig*>* configs,
            [in] Int32 config_size,
            [in] ArrayOf<Int32>* num_config,
            [out] Boolean* result);

        EglGetCurrentContext(
            [out] IEGLContext** context);

        EglGetCurrentDisplay(
            [out] IEGLDisplay** display);

        EglGetCurrentSurface(
            [in] Int32 readdraw,
            [out] IEGLSurface** surface);

        EglGetDisplay(
            [in] IInterface* native_display,
            [out] IEGLDisplay** display);

        EglGetError(
            [out] Int32* error);

        EglInitialize(
            [in] IEGLDisplay* display,
            [in] ArrayOf<Int32>* major_minor,
            [out] Boolean* result);

        EglMakeCurrent(
            [in] IEGLDisplay* display,
            [in] IEGLSurface* draw,
            [in] IEGLSurface* read,
            [in] IEGLContext* context,
            [out] Boolean* result);

        EglQueryContext(
            [in] IEGLDisplay* display,
            [in] IEGLContext* context,
            [in] Int32 attribute,
            [in] ArrayOf<Int32>* value,
            [out] Boolean* result);

        EglQueryString(
            [in] IEGLDisplay* display,
            [in] Int32 name,
            [out] String* str);

        EglQuerySurface(
            [in] IEGLDisplay* display,
            [in] IEGLSurface* surface,
            [in] Int32 attribute,
            [in] ArrayOf<Int32>* value,
            [out] Boolean* result);

        EglSwapBuffers(
            [in] IEGLDisplay* display,
            [in] IEGLSurface* surface,
            [out] Boolean* result);

        EglTerminate(
            [in] IEGLDisplay* display,
            [out] Boolean* result);

        EglWaitGL(
            [out] Boolean* result);

        EglWaitNative(
            [in] Int32 engine,
            [in] IInterface* bindTarget,
            [out] Boolean* result);
    }
}
