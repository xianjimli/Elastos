
module
{
    interface IInetAddress;
    interface IInputStream;
    interface IOutputStream;
    interface ISocketAddress;
    interface ISocketChannel;

    interface ISocket {
        /**
         * Closes the socket. It is not possible to reconnect or rebind to this
         * socket thereafter which means a new socket instance has to be created.
         *
         * @throws IOException
         *             if an error occurs while closing the socket.
         */
        Close();

        /**
         * Gets the IP address of the target host this socket is connected to.
         *
         * @return the IP address of the connected target host or {@code null} if
         *         this socket is not yet connected.
         */
        GetInetAddress(
            [out] IInetAddress** address);

        /**
         * Gets an input stream to read data from this socket.
         *
         * @return the byte-oriented input stream.
         * @throws IOException
         *             if an error occurs while creating the input stream or the
         *             socket is in an invalid state.
         */
        GetInputStream(
            [out] IInputStream** is);

        /**
         * Gets the setting of the socket option {@code SocketOptions.SO_KEEPALIVE}.
         *
         * @return {@code true} if the {@code SocketOptions.SO_KEEPALIVE} is
         *         enabled, {@code false} otherwise.
         * @throws SocketException
         *             if an error occurs while reading the socket option.
         * @see SocketOptions#SO_KEEPALIVE
         */
        GetKeepAlive(
            [out] Boolean* keepAlive);

        /**
         * Returns the local IP address this socket is bound to, or {@code InetAddress.ANY} if
         * the socket is unbound.
         */
        GetLocalAddress(
            [out] IInetAddress** address);

        /**
         * Returns the local port this socket is bound to, or -1 if the socket is unbound.
         */
        GetLocalPort(
            [out] Int32* localPort);

        /**
         * Gets an output stream to write data into this socket.
         *
         * @return the byte-oriented output stream.
         * @throws IOException
         *             if an error occurs while creating the output stream or the
         *             socket is in an invalid state.
         */
        GetOutputStream(
            [out] IOutputStream** os);

        /**
         * Gets the port number of the target host this socket is connected to.
         *
         * @return the port number of the connected target host or {@code 0} if this
         *         socket is not yet connected.
         */
        GetPort(
            [out] Int32* port);

        /**
         * Gets the value of the socket option {@link SocketOptions#SO_LINGER}.
         *
         * @return the current value of the option {@code SocketOptions.SO_LINGER}
         *         or {@code -1} if this option is disabled.
         * @throws SocketException
         *             if an error occurs while reading the socket option.
         * @see SocketOptions#SO_LINGER
         */
        GetSoLinger(
            [out] Int32* value);

        /**
         * Gets the receive buffer size of this socket.
         *
         * @return the current value of the option {@code SocketOptions.SO_RCVBUF}.
         * @throws SocketException
         *             if an error occurs while reading the socket option.
         * @see SocketOptions#SO_RCVBUF
         */
        GetReceiveBufferSize(
            [out] Int32* size);

        /**
         * Gets the send buffer size of this socket.
         *
         * @return the current value of the option {@code SocketOptions.SO_SNDBUF}.
         * @throws SocketException
         *             if an error occurs while reading the socket option.
         * @see SocketOptions#SO_SNDBUF
         */
        GetSendBufferSize(
            [out] Int32* size);

        /**
         * Gets the socket {@link SocketOptions#SO_TIMEOUT receive timeout}.
         *
         * @throws SocketException
         *             if an error occurs while reading the socket option.
         */
        GetSoTimeout(
            [out] Int32* timeout);

        /**
         * Gets the setting of the socket option {@code SocketOptions.TCP_NODELAY}.
         *
         * @return {@code true} if the {@code SocketOptions.TCP_NODELAY} is enabled,
         *         {@code false} otherwise.
         * @throws SocketException
         *             if an error occurs while reading the socket option.
         * @see SocketOptions#TCP_NODELAY
         */
        GetTcpNoDelay(
            [out] Boolean* noDelay);

        /**
         * Sets the state of the {@code SocketOptions.SO_KEEPALIVE} for this socket.
         *
         * @param keepAlive
         *            the state whether this option is enabled or not.
         * @throws SocketException
         *             if an error occurs while setting the option.
         * @see SocketOptions#SO_KEEPALIVE
         */
        SetKeepAlive(
            [in] Boolean keepAlive);

        /**
         * Sets the send buffer size of this socket.
         *
         * @param size
         *            the buffer size in bytes. This value must be a positive number
         *            greater than {@code 0}.
         * @throws SocketException
         *             if an error occurs while setting the size or the given value
         *             is an invalid size.
         * @see SocketOptions#SO_SNDBUF
         */
        SetSendBufferSize(
            [in] Int32 size);

        /**
         * Sets the receive buffer size of this socket.
         *
         * @param size
         *            the buffer size in bytes. This value must be a positive number
         *            greater than {@code 0}.
         * @throws SocketException
         *             if an error occurs while setting the size or the given value
         *             is an invalid size.
         * @see SocketOptions#SO_RCVBUF
         */
        SetReceiveBufferSize(
            [in] Int32 size);

        /**
         * Sets the {@link SocketOptions#SO_LINGER} timeout in seconds.
         *
         * @param on
         *            the state whether this option is enabled or not.
         * @param timeout
         *            the linger timeout value in seconds.
         * @throws SocketException
         *             if an error occurs while setting the option.
         * @see SocketOptions#SO_LINGER
         */
        SetSoLinger(
            [in] Boolean on,
            [in] Int32 timeout);

        /**
         * Sets the {@link SocketOptions#SO_TIMEOUT read timeout} in milliseconds for this socket.
         * This receive timeout defines the period the socket will block waiting to
         * receive data before throwing an {@code InterruptedIOException}. The value
         * {@code 0} (default) is used to set an infinite timeout. To have effect
         * this option must be set before the blocking method was called.
         *
         * @param timeout the timeout in milliseconds or 0 for no timeout.
         * @throws SocketException
         *             if an error occurs while setting the option.
         */
        SetSoTimeout(
            [in] Int32 timeout);

        /**
         * Sets the state of the {@code SocketOptions.TCP_NODELAY} for this socket.
         *
         * @param on
         *            the state whether this option is enabled or not.
         * @throws SocketException
         *             if an error occurs while setting the option.
         * @see SocketOptions#TCP_NODELAY
         */
        SetTcpNoDelay(
            [in] Boolean on);

        /**
         * Closes the input stream of this socket. Any further data sent to this
         * socket will be discarded. Reading from this socket after this method has
         * been called will return the value {@code EOF}.
         *
         * @throws IOException
         *             if an error occurs while closing the socket input stream.
         * @throws SocketException
         *             if the input stream is already closed.
         */
        ShutdownInput();

        /**
         * Closes the output stream of this socket. All buffered data will be sent
         * followed by the termination sequence. Writing to the closed output stream
         * will cause an {@code IOException}.
         *
         * @throws IOException
         *             if an error occurs while closing the socket output stream.
         * @throws SocketException
         *             if the output stream is already closed.
         */
        ShutdownOutput();

        /**
         * Gets the local address and port of this socket as a SocketAddress or
         * {@code null} if the socket is unbound. This is useful on multihomed
         * hosts.
         *
         * @return the bound local socket address and port.
         */
        GetLocalSocketAddress(
            [out] ISocketAddress** address);

        /**
         * Gets the remote address and port of this socket as a {@code
         * SocketAddress} or {@code null} if the socket is not connected.
         *
         * @return the remote socket address and port.
         */
        GetRemoteSocketAddress(
            [out] ISocketAddress** address);

        /**
         * Returns whether this socket is bound to a local address and port.
         *
         * @return {@code true} if the socket is bound to a local address, {@code
         *         false} otherwise.
         */
        IsBound(
            [out] Boolean* isBound);

        /**
         * Returns whether this socket is connected to a remote host.
         *
         * @return {@code true} if the socket is connected, {@code false} otherwise.
         */
        IsConnected(
            [out] Boolean* isConnected);

        /**
         * Returns whether this socket is closed.
         *
         * @return {@code true} if the socket is closed, {@code false} otherwise.
         */
        IsClosed(
            [out] Boolean* isClosed);

        /**
         * Binds this socket to the given local host address and port specified by
         * the SocketAddress {@code localAddr}. If {@code localAddr} is set to
         * {@code null}, this socket will be bound to an available local address on
         * any free port.
         *
         * @param localAddr
         *            the specific address and port on the local machine to bind to.
         * @throws IllegalArgumentException
         *             if the given SocketAddress is invalid or not supported.
         * @throws IOException
         *             if the socket is already bound or an error occurs while
         *             binding.
         */
        Bind(
            [in] ISocketAddress* localAddr);

        /**
         * Connects this socket to the given remote host address and port specified
         * by the SocketAddress {@code remoteAddr}.
         *
         * @param remoteAddr
         *            the address and port of the remote host to connect to.
         * @throws IllegalArgumentException
         *             if the given SocketAddress is invalid or not supported.
         * @throws IOException
         *             if the socket is already connected or an error occurs while
         *             connecting.
         */
        Connect(
            [in] ISocketAddress* remoteAddr);

        /**
         * Connects this socket to the given remote host address and port specified
         * by the SocketAddress {@code remoteAddr} with the specified timeout. The
         * connecting method will block until the connection is established or an
         * error occurred.
         *
         * @param remoteAddr
         *            the address and port of the remote host to connect to.
         * @param timeout
         *            the timeout value in milliseconds or {@code 0} for an infinite
         *            timeout.
         * @throws IllegalArgumentException
         *             if the given SocketAddress is invalid or not supported or the
         *             timeout value is negative.
         * @throws IOException
         *             if the socket is already connected or an error occurs while
         *             connecting.
         */
        ConnectEx(
            [in] ISocketAddress* remoteAddr,
            [in] Int32 timeout);

        /**
         * Returns whether the incoming channel of the socket has already been
         * closed.
         *
         * @return {@code true} if reading from this socket is not possible anymore,
         *         {@code false} otherwise.
         */
        IsInputShutdown(
            [out] Boolean* isInputShutdown);

        /**
         * Returns whether the outgoing channel of the socket has already been
         * closed.
         *
         * @return {@code true} if writing to this socket is not possible anymore,
         *         {@code false} otherwise.
         */
        IsOutputShutdown(
            [out] Boolean* isOutputShutdown);

        /**
         * Sets the state of the {@code SocketOptions.SO_REUSEADDR} for this socket.
         *
         * @param reuse
         *            the state whether this option is enabled or not.
         * @throws SocketException
         *             if an error occurs while setting the option.
         * @see SocketOptions#SO_REUSEADDR
         */
        SetReuseAddress(
            [in] Boolean reuse);

        /**
         * Gets the setting of the socket option {@code SocketOptions.SO_REUSEADDR}.
         *
         * @return {@code true} if the {@code SocketOptions.SO_REUSEADDR} is
         *         enabled, {@code false} otherwise.
         * @throws SocketException
         *             if an error occurs while reading the socket option.
         * @see SocketOptions#SO_REUSEADDR
         */
        GetReuseAddress(
            [out] Boolean* reuse);

        /**
         * Sets the state of the {@code SocketOptions.SO_OOBINLINE} for this socket.
         * When this option is enabled urgent data can be received in-line with
         * normal data.
         *
         * @param oobinline
         *            whether this option is enabled or not.
         * @throws SocketException
         *             if an error occurs while setting the option.
         * @see SocketOptions#SO_OOBINLINE
         */
        SetOOBInline(
            [in] Boolean oobinline);

        /**
         * Gets the setting of the socket option {@code SocketOptions.SO_OOBINLINE}.
         *
         * @return {@code true} if the {@code SocketOptions.SO_OOBINLINE} is
         *         enabled, {@code false} otherwise.
         * @throws SocketException
         *             if an error occurs while reading the socket option.
         * @see SocketOptions#SO_OOBINLINE
         */
        GetOOBInline(
            [out] Boolean* oobinline);

        /**
         * Sets the {@see SocketOptions#IP_TOS} value for every packet sent by this socket.
         *
         * @throws SocketException
         *             if the socket is closed or the option could not be set.
         */
        SetTrafficClass(
            [in] Int32 value);

        /**
         * Returns this socket's {@see SocketOptions#IP_TOS} setting.
         *
         * @throws SocketException
         *             if the socket is closed or the option is invalid.
         */
        GetTrafficClass(
            [out] Int32* value);

        /**
         * Sends the given single byte data which is represented by the lowest octet
         * of {@code value} as "TCP urgent data".
         *
         * @param value
         *            the byte of urgent data to be sent.
         * @throws IOException
         *             if an error occurs while sending urgent data.
         */
        SendUrgentData(
            [in] Int32 value);

        /**
         * Gets the SocketChannel of this socket, if one is available. The current
         * implementation of this method returns always {@code null}.
         *
         * @return the related SocketChannel or {@code null} if no channel exists.
         */
        GetChannel(
            [out] ISocketChannel** channel);

        /**
         * Sets performance preferences for connectionTime, latency and bandwidth.
         * <p>
         * This method does currently nothing.
         *
         * @param connectionTime
         *            the value representing the importance of a short connecting
         *            time.
         * @param latency
         *            the value representing the importance of low latency.
         * @param bandwidth
         *            the value representing the importance of high bandwidth.
         */
        SetPerformancePreferences(
            [in] Int32 connectionTime,
            [in] Int32 latency,
            [in] Int32 bandwidth);
    }
}