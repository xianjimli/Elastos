
module
{
    // 2XX: generally "OK"
    // 3XX: relocation/redirect
    // 4XX: client error
    // 5XX: server error
    /**
     * Numeric status code, 202: Accepted
     */
    const HTTP_ACCEPTED = 202;

    /**
     * Numeric status code, 502: Bad Gateway
     */
    const HTTP_BAD_GATEWAY = 502;

    /**
     * Numeric status code, 405: Bad Method
     */
    const HTTP_BAD_METHOD = 405;

    /**
     * Numeric status code, 400: Bad Request
     */
    const HTTP_BAD_REQUEST = 400;

    /**
     * Numeric status code, 408: Client Timeout
     */
    const HTTP_CLIENT_TIMEOUT = 408;

    /**
     * Numeric status code, 409: Conflict
     */
    const HTTP_CONFLICT = 409;

    /**
     * Numeric status code, 201: Created
     */
    const HTTP_CREATED = 201;

    /**
     * Numeric status code, 413: Entity too large
     */
    const HTTP_ENTITY_TOO_LARGE = 413;

    /**
     * Numeric status code, 403: Forbidden
     */
    const HTTP_FORBIDDEN = 403;

    /**
     * Numeric status code, 504: Gateway timeout
     */
    const HTTP_GATEWAY_TIMEOUT = 504;

    /**
     * Numeric status code, 410: Gone
     */
    const HTTP_GONE = 410;

    /**
     * Numeric status code, 500: Internal error
     */
    const HTTP_INTERNAL_ERROR = 500;

    /**
     * Numeric status code, 411: Length required
     */
    const HTTP_LENGTH_REQUIRED = 411;

    /**
     * Numeric status code, 301 Moved permanently
     */
    const HTTP_MOVED_PERM = 301;

    /**
     * Numeric status code, 302: Moved temporarily
     */
    const HTTP_MOVED_TEMP = 302;

    /**
     * Numeric status code, 300: Multiple choices
     */
    const HTTP_MULT_CHOICE = 300;

    /**
     * Numeric status code, 204: No content
     */
    const HTTP_NO_CONTENT = 204;

    /**
     * Numeric status code, 406: Not acceptable
     */
    const HTTP_NOT_ACCEPTABLE = 406;

    /**
     * Numeric status code, 203: Not authoritative
     */
    const HTTP_NOT_AUTHORITATIVE = 203;

    /**
     * Numeric status code, 404: Not found
     */
    const HTTP_NOT_FOUND = 404;

    /**
     * Numeric status code, 501: Not implemented
     */
    const HTTP_NOT_IMPLEMENTED = 501;

    /**
     * Numeric status code, 304: Not modified
     */
    const HTTP_NOT_MODIFIED = 304;

    /**
     * Numeric status code, 200: OK
     */
    const HTTP_OK = 200;

    /**
     * Numeric status code, 206: Partial
     */
    const HTTP_PARTIAL = 206;

    /**
     * Numeric status code, 402: Payment required
     */
    const HTTP_PAYMENT_REQUIRED = 402;

    /**
     * Numeric status code, 412: Precondition failed
     */
    const HTTP_PRECON_FAILED = 412;

    /**
     * Numeric status code, 407: Proxy authentication required
     */
    const HTTP_PROXY_AUTH = 407;

    /**
     * Numeric status code, 414: Request too long
     */
    const HTTP_REQ_TOO_LONG = 414;

    /**
     * Numeric status code, 205: Reset
     */
    const HTTP_RESET = 205;

    /**
     * Numeric status code, 303: See other
     */
    const HTTP_SEE_OTHER = 303;

    /**
     * Numeric status code, 500: Internal error
     *
     * @deprecated Use {@link #HTTP_INTERNAL_ERROR}
     */
    //@Deprecated
    const HTTP_SERVER_ERROR = 500;

    /**
     * Numeric status code, 305: Use proxy
     */
    const HTTP_USE_PROXY = 305;

    /**
     * Numeric status code, 401: Unauthorized
     */
    const HTTP_UNAUTHORIZED = 401;

    /**
     * Numeric status code, 415: Unsupported type
     */
    const HTTP_UNSUPPORTED_TYPE = 415;

    /**
     * Numeric status code, 503: Unavailable
     */
    const HTTP_UNAVAILABLE = 503;

    /**
     * Numeric status code, 505: Version not supported
     */
    const HTTP_VERSION = 505;


    interface IHttpURLConnection extends IURLConnection {
        /**
         * Closes the connection to the HTTP server.
         *
         * @see URLConnection#connect()
         * @see URLConnection#connected
         */
        Disconnect();

        /**
         * Returns an input stream from the server in the case of an error such as
         * the requested file has not been found on the remote server. This stream
         * can be used to read the data the server will send back.
         *
         * @return the error input stream returned by the server.
         */
        GetErrorStream(
            [out] IInputStream** stream);

        /**
         * Returns the request method which will be used to make the request to the
         * remote HTTP server. All possible methods of this HTTP implementation is
         * listed in the class definition.
         *
         * @return the request method string.
         * @see #method
         * @see #setRequestMethod
         */
        GetRequestMethod(
            [out] String* method);

        /**
         * Returns the response code returned by the remote HTTP server.
         *
         * @return the response code, -1 if no valid response code.
         * @throws IOException
         *             if there is an IO error during the retrieval.
         * @see #getResponseMessage
         */
        GetResponseCode(
            [out] Int32* responseCode);

        /**
         * Returns the response message returned by the remote HTTP server.
         *
         * @return the response message. {@code null} if no such response exists.
         * @throws IOException
         *             if there is an error during the retrieval.
         * @see #getResponseCode()
         */
        GetResponseMessage(
            [out] String* message);

        /**
         * Sets the request command which will be sent to the remote HTTP server.
         * This method can only be called before the connection is made.
         *
         * @param method
         *            the string representing the method to be used.
         * @throws ProtocolException
         *             if this is called after connected, or the method is not
         *             supported by this HTTP implementation.
         * @see #getRequestMethod()
         * @see #method
         */
        SetRequestMethod(
            [in] String method);

        /**
         * Returns whether this connection uses a proxy server or not.
         *
         * @return {@code true} if this connection passes a proxy server, false
         *         otherwise.
         */
        UsingProxy(
            [out] Boolean* usingProxy);

        /**
         * Returns whether this connection follows redirects.
         *
         * @return {@code true} if this connection follows redirects, false
         *         otherwise.
         */
        GetInstanceFollowRedirects(
            [out] Boolean* followRedirects);

        /**
         * Sets whether this connection follows redirects.
         *
         * @param followRedirects
         *            {@code true} if this connection will follows redirects, false
         *            otherwise.
         */
        SetInstanceFollowRedirects(
            [in] Boolean followRedirects);

        /**
         * If the length of a HTTP request body is known ahead, sets fixed length to
         * enable streaming without buffering. Sets after connection will cause an
         * exception.
         *
         * @see #setChunkedStreamingMode
         * @param contentLength
         *            the fixed length of the HTTP request body.
         * @throws IllegalStateException
         *             if already connected or an other mode already set.
         * @throws IllegalArgumentException
         *             if {@code contentLength} is less than zero.
         */
        SetFixedLengthStreamingMode(
            [in] Int32 contentLength);

        /**
         * Stream a request body whose length is not known in advance. Old HTTP/1.0
         * only servers may not support this mode.
         *
         * <p>When HTTP chunked encoding is used, the stream is divided into
         * chunks, each prefixed with a header containing the chunk's size. Setting
         * a large chunk length requires a large internal buffer, potentially
         * wasting memory. Setting a small chunk length increases the number of
         * bytes that must be transmitted because of the header on every chunk.
         * Most caller should use {@code 0} to get the system default.
         *
         * @see #setFixedLengthStreamingMode
         * @param chunkLength the length to use, or {@code 0} for the default chunk
         *     length.
         * @throws IllegalStateException if already connected or another mode
         *     already set.
         */
        SetChunkedStreamingMode(
            [in] Int32 chunkLength);
    }
}
