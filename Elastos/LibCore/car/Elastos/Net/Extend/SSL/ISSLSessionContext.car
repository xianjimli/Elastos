module
{
    interface ISSLSession;
    interface ISSLSessionContext {
        /**
         * Returns the session for the specified session identifier.
         *
         * @param sessionId
         *            the session identifier of the session to look up.
         * @return the session for the specified session identifier, or {@code null}
         *         if the specified session identifier does not refer to a session
         *         in this context.
         */
        GetSession(
            [in] ArrayOf<Byte> sessionId,
            [out] ISSLSession** session);

        /**
         * Returns the size of the session cache for this session context.
         *
         * @return the size of the session cache for this session context, or
         *         {@code zero} if unlimited.
         */
        GetSessionCacheSize(
            [out] Int32* size);

        /**
         * Returns the timeout for sessions in this session context. Sessions
         * exceeding the timeout are invalidated.
         *
         * @return the timeout in seconds, or {@code zero} if unlimited.
         */
        GetSessionTimeout(
            [out] Int32* time);

        /**
         * Sets the size of the session cache for this session context.
         *
         * @param size
         *            the size of the session cache, or {@code zero} for unlimited
         *            cache size.
         * @throws IllegalArgumentException
         *             if {@code size} is negative.
         */
        SetSessionCacheSize(
            [in] Int32 size);

        /**
         * Sets the timeout for sessions in this context. Sessions exceeding the
         * timeout are invalidated.
         *
         * @param seconds
         *            the timeout in seconds, or {@code zero} if unlimited.
         * @throws IllegalArgumentException
         *             if {@code seconds} is negative.
         */
        SetSessionTimeout(
            [in] Int32 seconds);
    }
}