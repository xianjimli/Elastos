module
{
    interface ISSLSession{
        /**
         * Returns the maximum size that an application buffer can be for this
         * session.
         *
         * @return the maximum application buffer size.
         */
        GetApplicationBufferSize(
            [out] Int32* size);

        /**
         * Returns the name of the cipher suite used in this session.
         *
         * @return the name of the cipher suite used in this session.
         */
        GetCipherSuite(
            [out] String* str);

        /**
         * Returns the time this session was created, in milliseconds since midnight
         * January 1st 1970 UTC.
         *
         * @return the time the session was created.
         */
        GetCreationTime(
            [out] Int64* time);

        /**
         * Returns this sessions identifier.
         *
         * @return this sessions identifier.
         */
        GetId(
            [out, callee] ArrayOf<Byte>* id);

        /**
         * Returns the time this session was last accessed, in milliseconds since
         * midnight January 1st 1970 UTC.
         *
         * @return the time this session was last accessed.
         */
        GetLastAccessedTime(
            [out] Int64* time);

        /**
         * Returns the list of certificates that were used to identify the local
         * side to the peer during the handshake.
         *
         * @return the list of certificates, ordered from local certificate to
         *         CA's certificates.
         */
        GetLocalCertificates(
            [out, callee] ArrayOf<ICertificate*>* certificate);

        /**
         * Returns the principal used to identify the local side to the peer during
         * the handshake.
         *
         * @return the principal used to identify the local side.
         */
//        GetLocalPrincipal(
//            [out] IPrincipal* principal);

        /**
        * Returns the maximum size that a network buffer can be for this session.
        *
        * @return the maximum network buffer size.
        */
        GetPacketBufferSize(
            [out] Int32* size);

         /**
             * Returns the list of certificates the peer used to identify itself during
             * the handshake.
             * <p>
             * Note: this method exists for compatility reasons, use
             * {@link #getPeerCertificates()} instead.
             *
             * @return the list of certificates, ordered from the identity certificate to
             *         the CA's certificates
             * @throws SSLPeerUnverifiedException
             *             if the identity of the peer is not verified.
             */
        //GetPeerCertificateChain(
        //    [out, callee]  ArrayOf<IX509Certificate*>* certificate);

        /**
         * Returns the list of certificates the peer used to identify itself during
         * the handshake.
         *
         * @return the list of certificates, ordered from the identity certificate to
         *         the CA's certificates.
         * @throws SSLPeerUnverifiedException
         *             if the identity of the peer is not verified.
         */
        GetPeerCertificates(
            [out, callee] ArrayOf<ICertificate*>* certificate);

        /**
             * Returns the host name of the peer of this session. The host name is not
             * authenticated.
             *
             * @return the host name of the peer of this session, or {@code null} if no
             *         host name is available.
             */
       GetPeerHost(
        [out] String* strHost);

        /**
         * Returns the port number of the peer of this session. The port number is
         * not authenticated.
         *
         * @return the port number of the peer, of {@code -1} is no port number is
         *         available.
         */
        GetPeerPort(
            [out] Int32* port);

        /**
        * Returns the principal identifying the peer during the handshake.
        *
        * @return the principal identifying the peer.
        * @throws SSLPeerUnverifiedException
        *             if the identity of the peer has not been verified.
        */
        GetPeerPrincipal(
            [out] IPrincipal** principal);

        /**
         * Returns the protocol name that is used for all connections in this
         * session.
         *
         * @return the protocol name that is used for all connections in this
         *         session.
         */
        GetProtocol(
            [out] String* strProtocol);

        /**
         * Returns the context of this session. If a context is available and a
         * security manager is installed, the
         * {@code SSLPermission("getSSLSessionContext"} is checked with the security
         * manager.
         *
         * @return the context of this session or {@code null} if no context is
         *         available.
         */
        GetSessionContext(
            [out] ISSLSessionContext** context);

        /**
        * Returns the object bound to the specified name in this session's
        * application layer data.
        *
        * @param name
        *            the name of the bound value.
        * @return the value bound to the specified name, or {@code null} if the
        *         specified name does not exist or is not accessible in the current
        *         access control context.
        * @throws IllegalArgumentException
        *             if {@code name} is {@code null}.
        */
        GetValue(
            [in] String name,
            [out] IInterface** obj);

        /**
         * Returns the list of the object names bound to this session's application
         * layer data..
         * <p>
         * Depending on the current access control context, the list of object names
         * may be different.
         *
         * @return the list of the object names bound to this session's application
         *         layer data.
         */
        GetValueNames(
            [out, callee] ArrayOf<String>* names);

        /**
         * Invalidates this session.
         * <p>
         * No new connections can be created, but any existing connection remains
         * valid until it is closed.
         */
        Invalidate();

        /**
         * Returns whether this session is valid.
         *
         * @return {@code true} if this session is valid, otherwise {@code false}.
         */
        IsValid(
            [out] Boolean* isValid);

        /**
         * Binds the specified object under the specified name in this session's
         * application layer data.
         * <p>
         * For bindings (new or existing) implementing the
         * {@code SSLSessionBindingListener} interface the object will be notified.
         *
         * @param name
         *            the name to bind the object to.
         * @param value
         *            the object to bind.
         * @throws IllegalArgumentException
         *             if either {@code name} or {@code value} is {@code null}.
         */
        PutValue(
            [in] String name,
            [in] IInterface* value);

        /**
         * Removes the binding for the specified name in this session's application
         * layer data. If the existing binding implements the
         * {@code SSLSessionBindingListener} interface the object will be notified.
         *
         * @param name
         *            the binding to remove.
         * @throws IllegalArgumentException
         *             if {@code name} is {@code null}.
         */
        RemoveValue(
            [in] String name);
    }
}