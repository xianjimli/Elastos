module
{
	enum HandshakeStatus {
        /**
         * No handshake in progress.
         */
		HandshakeStatus_NOT_HANDSHAKING,
        /**
         * The handshake is finished.
         */
        HandshakeStatus_FINISHED,
        /**
         * The results of one (or more) delegated tasks are needed to continue
         * the handshake.
         */
        HandshakeStatus_NEED_TASK,
        /**
         * The engine must send data to the remote side to continue the
         * handshake.
         */
        HandshakeStatus_NEED_WRAP,
        /**
         * The engine needs to receive data from the remote side to continue the
         * handshake.
         */
        HandshakeStatus_NEED_UNWRAP		
	}
	
	enum Status {
        /**
         * The size of the destination buffer is too small to hold the result of
         * the current operation.
         */
        Status_BUFFER_OVERFLOW,
        /**
         * There were not enough bytes available in the source buffer to
         * complete the current operation.
         */
        Status_BUFFER_UNDERFLOW,
        /**
         * The operation closed this side of the communication or was already
         * closed.
         */
        Status_CLOSED,
        /**
         * The operation completed successfully.
         */
        Status_OK
    }
	
	interface ISSLEngineResult
	{
    /**
     * Returns the return value of the {@code SSLEngine} operation.
     *
     * @return the return value of the {@code SSLEngine} operation.
     */	
		GetStatus(
			[out] Status* status);
    /**
     * Returns the status of the current handshake.
     *
     * @return the status of the current handshake.
     */
    	GetHandshakeStatus(
    		[out] HandshakeStatus* status);

    /**
     * Returns the number of bytes retrieved from the source buffer(s).
     *
     * @return the number of bytes retrieved from the source buffer(s).
     */
    	BytesConsumed(
    		[out] Int32* number);    		

    /**
     * Returns the number of bytes transferred to the destination buffer(s).
     *
     * @return the number of bytes transferred to the destination buffer(s).
     */
    	BytesProduced(
    		[out] Int32* number);
    
		ToString(
			[out] String* str);
	}
}