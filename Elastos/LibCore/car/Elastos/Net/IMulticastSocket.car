
module
{
    interface IInetAddress;
    interface INetworkInterface;
    interface ISocketAddress;
    interface IDatagramPacket;


    interface IMulticastSocket extends IDatagramSocket {
        /**
         * Gets the network address used by this socket. This is useful on
         * multihomed machines.
         *
         * @return the address of the network interface through which the datagram
         *         packets are sent or received.
         * @throws SocketException
         *                if an error occurs while getting the interface address.
         */
        GetInterface(
            [out] IInetAddress** address);

        /**
         * Gets the network interface used by this socket. This is useful on
         * multihomed machines.
         *
         * @return the network interface used by this socket or {@code null} if no
         *         interface is set.
         * @throws SocketException
         *                if an error occurs while getting the interface.
         * @since 1.4
         */
        GetNetworkInterface(
            [out] INetworkInterface** networkInterface);

        /**
         * Gets the time-to-live (TTL) for multicast packets sent on this socket.
         *
         * @return the default value for the time-to-life field.
         * @throws IOException
         *                if an error occurs reading the default value.
         */
        GetTimeToLive(
            [out] Int32* ttl);

        /**
         * Gets the time-to-live (TTL) for multicast packets sent on this socket.
         *
         * @return the default value for the time-to-life field.
         * @throws IOException
         *                if an error occurs reading the default value.
         * @deprecated Replaced by {@link #getTimeToLive}
         * @see #getTimeToLive()
         */
        //@Deprecated
        GetTTL(
            [out] Byte* ttl);

        /**
         * Adds this socket to the specified multicast group. A socket must join a
         * group before data may be received. A socket may be a member of multiple
         * groups but may join any group only once.
         *
         * @param groupAddr
         *            the multicast group to be joined.
         * @throws IOException
         *                if an error occurs while joining a group.
         */
        JoinGroup(
            [in] IInetAddress* groupAddr);

        /**
         * Adds this socket to the specified multicast group. A socket must join a
         * group before data may be received. A socket may be a member of multiple
         * groups but may join any group only once.
         *
         * @param groupAddress
         *            the multicast group to be joined.
         * @param netInterface
         *            the network interface on which the datagram packets will be
         *            received.
         * @throws IOException
         *                if the specified address is not a multicast address.
         * @throws SecurityException
         *                if the caller is not authorized to join the group.
         * @throws IllegalArgumentException
         *                if no multicast group is specified.
         * @since 1.4
         */
        JoinGroupEx(
            [in] ISocketAddress* groupAddress,
            [in] INetworkInterface* netInterface);

        /**
         * Removes this socket from the specified multicast group.
         *
         * @param groupAddr
         *            the multicast group to be left.
         * @throws NullPointerException
         *                if {@code groupAddr} is {@code null}.
         * @throws IOException
         *                if the specified group address is not a multicast address.
         * @throws SecurityException
         *                if the caller is not authorized to leave the group.
         */
        LeaveGroup(
            [in] IInetAddress* groupAddr);

        /**
         * Removes this socket from the specified multicast group.
         *
         * @param groupAddress
         *            the multicast group to be left.
         * @param netInterface
         *            the network interface on which the addresses should be
         *            dropped.
         * @throws IOException
         *                if the specified group address is not a multicast address.
         * @throws SecurityException
         *                if the caller is not authorized to leave the group.
         * @throws IllegalArgumentException
         *                if {@code groupAddress} is {@code null}.
         * @since 1.4
         */
        LeaveGroupEx(
            [in] ISocketAddress* groupAddress,
            [in] INetworkInterface* netInterface);

        /**
         * Send the packet on this socket. The packet must satisfy the security
         * policy before it may be sent.
         *
         * @param pack
         *            the {@code DatagramPacket} to send
         * @param ttl
         *            the TTL setting for this transmission, overriding the socket
         *            default
         * @throws IOException
         *                if an error occurs while sending data or setting options.
         * @deprecated use {@link #setTimeToLive}.
         */
        //@Deprecated
        Send(
            [in] IDatagramPacket* pack,
            [in] Byte ttl);

        /**
         * Sets the interface address used by this socket. This allows to send
         * multicast packets on a different interface than the default interface of
         * the local system. This is useful on multihomed machines.
         *
         * @param addr
         *            the multicast interface network address to set.
         * @throws SocketException
         *                if an error occurs while setting the network interface
         *                address option.
         */
        SetInterface(
            [in] IInetAddress* addr);

        /**
         * Sets the network interface used by this socket. This is useful for
         * multihomed machines.
         *
         * @param netInterface
         *            the multicast network interface to set.
         * @throws SocketException
         *                if an error occurs while setting the network interface
         *                option.
         * @since 1.4
         */
        SetNetworkInterface(
            [in] INetworkInterface* netInterface);

        /**
         * Sets the time-to-live (TTL) for multicast packets sent on this socket.
         * Valid TTL values are between 0 and 255 inclusive.
         *
         * @param ttl
         *            the default time-to-live field value for packets sent on this
         *            socket. {@code 0 <= ttl <= 255}.
         * @throws IOException
         *                if an error occurs while setting the TTL option value.
         */
        SetTimeToLive(
            [in] Int32 ttl);

        /**
         * Sets the time-to-live (TTL) for multicast packets sent on this socket.
         * Valid TTL values are between 0 and 255 inclusive.
         *
         * @param ttl
         *            the default time-to-live field value for packets sent on this
         *            socket: {@code 0 <= ttl <= 255}.
         * @throws IOException
         *                if an error occurs while setting the TTL option value.
         * @deprecated Replaced by {@link #setTimeToLive}
         * @see #setTimeToLive(int)
         */
        //@Deprecated
        SetTTL(
            [in] Byte ttl);

        /**
         * Gets the state of the {@code SocketOptions.IP_MULTICAST_LOOP}.
         *
         * @return {@code true} if the IP multicast loop is enabled, {@code false}
         *         otherwise.
         * @throws SocketException
         *             if the socket is closed or the option is invalid.
         * @since 1.4
         */
        GetLoopbackMode(
            [out] Boolean* disable);

        /**
         * Sets the {@link SocketOptions#IP_MULTICAST_LOOP}.
         *
         * @param disable
         *            true to <i>disable</i> loopback
         * @throws SocketException
         *             if the socket is closed or the option is invalid.
         * @since 1.4
         */
        SetLoopbackMode(
            [in] Boolean disable);
    }
}