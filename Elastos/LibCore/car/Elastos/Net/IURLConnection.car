
module
{
    interface IURLConnection {
        /**
         * Opens a connection to the resource. This method will <strong>not</strong>
         * reconnect to a resource after the initial connection has been closed.
         *
         * @throws IOException
         *             if an error occurs while connecting to the resource.
         */
        Connect();

        /**
         * Returns the option value which indicates whether user interaction is allowed
         * on this {@code URLConnection}.
         *
         * @return the value of the option {@code allowUserInteraction}.
         * @see #allowUserInteraction
         */
        GetAllowUserInteraction(
            [out] Boolean* value);

        /**
         * Returns an object representing the content of the resource this {@code
         * URLConnection} is connected to. First, it attempts to get the content
         * type from the method {@code getContentType()} which looks at the response
         * header field "Content-Type". If none is found it will guess the content
         * type from the filename extension. If that fails the stream itself will be
         * used to guess the content type.
         *
         * @return the content representing object.
         * @throws IOException
         *             if an error occurs obtaining the content.
         */
        GetContent(
            [out] IInterface** content);

        /**
         * Returns an object representing the content of the resource this {@code
         * URLConnection} is connected to. First, it attempts to get the content
         * type from the method {@code getContentType()} which looks at the response
         * header field "Content-Type". If none is found it will guess the content
         * type from the filename extension. If that fails the stream itself will be
         * used to guess the content type. The content type must match with one of
         * the list {@code types}.
         *
         * @param types
         *            the list of acceptable content types.
         * @return the content representing object or {@code null} if the content
         *         type does not match with one of the specified types.
         * @throws IOException
         *             if an error occurs obtaining the content.
         */
        // Param is not generic in spec
//        public Object getContent(Class[] types);

        /**
         * Returns the content encoding type specified by the response header field
         * {@code content-encoding} or {@code null} if this field is not set.
         *
         * @return the value of the response header field {@code content-encoding}.
         */
        GetContentEncoding(
            [out] String* encoding);

        /**
         * Returns the content length in bytes specified by the response header field
         * {@code content-length} or {@code -1} if this field is not set.
         *
         * @return the value of the response header field {@code content-length}.
         */
        GetContentLength(
            [out] Int32* length);

        /**
         * Returns the MIME-type of the content specified by the response header field
         * {@code content-type} or {@code null} if type is unknown.
         *
         * @return the value of the response header field {@code content-type}.
         */
        GetContentType(
            [out] String* type);

        /**
         * Returns the timestamp when this response has been sent as a date in
         * milliseconds since January 1, 1970 GMT or {@code 0} if this timestamp is
         * unknown.
         *
         * @return the sending timestamp of the current response.
         */
        GetDate(
            [out] Int64* date);

        /**
         * Returns the default setting whether this connection allows using caches.
         *
         * @return the value of the default setting {@code defaultUseCaches}.
         * @see #useCaches
         */
        GetDefaultUseCaches(
            [out] Boolean* value);

        /**
         * Returns the value of the option {@code doInput} which specifies whether this
         * connection allows to receive data.
         *
         * @return {@code true} if this connection allows input, {@code false}
         *         otherwise.
         * @see #doInput
         */
        GetDoInput(
            [out] Boolean* allowed);

        /**
         * Returns the value of the option {@code doOutput} which specifies whether
         * this connection allows to send data.
         *
         * @return {@code true} if this connection allows output, {@code false}
         *         otherwise.
         * @see #doOutput
         */
        GetDoOutput(
            [out] Boolean* allowed);

        /**
         * Returns the timestamp when this response will be expired in milliseconds
         * since January 1, 1970 GMT or {@code 0} if this timestamp is unknown.
         *
         * @return the value of the response header field {@code expires}.
         */
        GetExpiration(
            [out] Int64* expiration);

        /**
         * Returns the header value at the field position {@code pos} or {@code null}
         * if the header has fewer than {@code pos} fields. The base
         * implementation of this method returns always {@code null}.
         *
         * <p>Some implementations (notably {@code HttpURLConnection}) include a mapping
         * for the null key; in HTTP's case, this maps to the HTTP status line and is
         * treated as being at position 0 when indexing into the header fields.
         *
         * @param pos
         *            the field position of the response header.
         * @return the value of the field at position {@code pos}.
         */
        GetHeaderFieldByPosition(
            [in] Int32 pos,
            [out] String* value);

        /**
         * Returns an unchangeable map of the response-header fields and values. The
         * response-header field names are the key values of the map. The map values
         * are lists of header field values associated with a particular key name.
         *
         * <p>Some implementations (notably {@code HttpURLConnection}) include a mapping
         * for the null key; in HTTP's case, this maps to the HTTP status line and is
         * treated as being at position 0 when indexing into the header fields.
         *
         * @return the response-header representing generic map.
         * @since 1.4
         */
    //    public Map<String, List<String>> getHeaderFields()

         /**
         * Returns an unchangeable map of general request properties used by this
         * connection. The request property names are the key values of the map. The
         * map values are lists of property values of the corresponding key name.
         *
         * @return the request-property representing generic map.
         * @since 1.4
         */
    //    public Map<String, List<String>> getRequestProperties()

        /**
         * Adds the given property to the request header. Existing properties with
         * the same name will not be overwritten by this method.
         *
         * @param field
         *            the request property field name to add.
         * @param newValue
         *            the value of the property which is to add.
         * @throws IllegalStateException
         *             if the connection has been already established.
         * @throws NullPointerException
         *             if the property name is {@code null}.
         * @since 1.4
         */
        AddRequestProperty(
            [in] String field,
            [in] String newValue);

        /**
         * Returns the value of the header field specified by {@code key} or {@code
         * null} if there is no field with this name. The base implementation of
         * this method returns always {@code null}.
         *
         * <p>Some implementations (notably {@code HttpURLConnection}) include a mapping
         * for the null key; in HTTP's case, this maps to the HTTP status line and is
         * treated as being at position 0 when indexing into the header fields.
         *
         * @param key
         *            the name of the header field.
         * @return the value of the header field.
         */
        GetHeaderFieldByKey(
            [in] String key,
            [out] String* value);

        /**
         * Returns the specified header value as a date in milliseconds since January
         * 1, 1970 GMT. Returns the {@code defaultValue} if no such header field
         * could be found.
         *
         * @param field
         *            the header field name whose value is needed.
         * @param defaultValue
         *            the default value if no field has been found.
         * @return the value of the specified header field as a date in
         *         milliseconds.
         */
        GetHeaderFieldDate(
            [in] String field,
            [in] Int64 defaultValue,
            [out] Int64* value);

        /**
         * Returns the specified header value as a number. Returns the {@code
         * defaultValue} if no such header field could be found or the value could
         * not be parsed as an {@code Integer}.
         *
         * @param field
         *            the header field name whose value is needed.
         * @param defaultValue
         *            the default value if no field has been found.
         * @return the value of the specified header field as a number.
         */
        GetHeaderFieldInt32(
            [in] String field,
            [in] Int32 defaultValue,
            [out] Int32* value);

        /**
         * Returns the name of the header field at the given position {@code posn} or
         * {@code null} if there are fewer than {@code posn} fields. The base
         * implementation of this method returns always {@code null}.
         *
         * <p>Some implementations (notably {@code HttpURLConnection}) include a mapping
         * for the null key; in HTTP's case, this maps to the HTTP status line and is
         * treated as being at position 0 when indexing into the header fields.
         *
         * @param posn
         *            the position of the header field which has to be returned.
         * @return the header field name at the given position.
         */
        GetHeaderFieldKey(
            [in] Int32 posn,
            [out] String* key);

        /**
         * Returns the point of time since when the data must be modified to be
         * transmitted. Some protocols transmit data only if it has been modified
         * more recently than a particular time.
         *
         * @return the time in milliseconds since January 1, 1970 GMT.
         * @see #ifModifiedSince
         */
        GetIfModifiedSince(
            [out] Int64* time);

        /**
         * Returns an {@code InputStream} for reading data from the resource pointed by
         * this {@code URLConnection}. It throws an UnknownServiceException by
         * default. This method must be overridden by its subclasses.
         *
         * @return the InputStream to read data from.
         * @throws IOException
         *             if no InputStream could be created.
         */
        GetInputStream(
            [out] IInputStream** is);

        /**
         * Returns the value of the response header field {@code last-modified} or
         * {@code 0} if this value is not set.
         *
         * @return the value of the {@code last-modified} header field.
         */
        GetLastModified(
            [out] Int64* value);

        /**
         * Returns an {@code OutputStream} for writing data to this {@code
         * URLConnection}. It throws an {@code UnknownServiceException} by default.
         * This method must be overridden by its subclasses.
         *
         * @return the OutputStream to write data.
         * @throws IOException
         *             if no OutputStream could be created.
         */
        GetOutputStream(
            [out] IOutputStream** os);

        /**
         * Returns a {@code Permission} object representing all needed permissions to
         * open this connection. The returned permission object depends on the state
         * of the connection and will be {@code null} if no permissions are
         * necessary. By default, this method returns {@code AllPermission}.
         * Subclasses should overwrite this method to return an appropriate
         * permission object.
         *
         * @return the permission object representing the needed permissions to open
         *         this connection.
         * @throws IOException
         *             if an I/O error occurs while creating the permission object.
         */
//        public java.security.Permission getPermission();

        /**
         * Returns the value of the request header property specified by {code field}
         * or {@code null} if there is no field with this name. The base
         * implementation of this method returns always {@code null}.
         *
         * @param field
         *            the name of the request header property.
         * @return the value of the property.
         * @throws IllegalStateException
         *             if the connection has been already established.
         */
        GetRequestProperty(
            [in] String field,
            [out] String* property);

        /**
         * Returns the URL represented by this {@code URLConnection}.
         *
         * @return the URL of this connection.
         */
        GetURL(
            [out] IURL** url);

        /**
         * Returns the value of the flag which specifies whether this {@code
         * URLConnection} allows to use caches.
         *
         * @return {@code true} if using caches is allowed, {@code false} otherwise.
         */
        GetUseCaches(
            [out] Boolean* allowed);

        /**
         * Sets the flag indicating whether this connection allows user interaction
         * or not. This method can only be called prior to the connection
         * establishment.
         *
         * @param newValue
         *            the value of the flag to be set.
         * @throws IllegalStateException
         *             if this method attempts to change the flag after the
         *             connection has been established.
         * @see #allowUserInteraction
         */
        SetAllowUserInteraction(
            [in] Boolean newValue);

        /**
         * Sets the default value for the flag indicating whether this connection
         * allows to use caches. Existing {@code URLConnection}s are unaffected.
         *
         * @param newValue
         *            the default value of the flag to be used for new connections.
         * @see #defaultUseCaches
         * @see #useCaches
         */
        SetDefaultUseCaches(
            [in] Boolean newValue);

        /**
         * Sets the flag indicating whether this {@code URLConnection} allows input.
         * It cannot be set after the connection is established.
         *
         * @param newValue
         *            the new value for the flag to be set.
         * @throws IllegalAccessError
         *             if this method attempts to change the value after the
         *             connection has been already established.
         * @see #doInput
         */
        SetDoInput(
            [in] Boolean newValue);

        /**
         * Sets the flag indicating whether this {@code URLConnection} allows
         * output. It cannot be set after the connection is established.
         *
         * @param newValue
         *            the new value for the flag to be set.
         * @throws IllegalAccessError
         *             if this method attempts to change the value after the
         *             connection has been already established.
         * @see #doOutput
         */
        SetDoOutput(
            [out] Boolean newValue);

        /**
         * Sets the point of time since when the data must be modified to be
         * transmitted. Some protocols transmit data only if it has been modified
         * more recently than a particular time. The data will be transmitted
         * regardless of its timestamp if this option is set to {@code 0}.
         *
         * @param newValue
         *            the time in milliseconds since January 1, 1970 GMT.
         * @throws IllegalStateException
         *             if this {@code URLConnection} has already been connected.
         * @see #ifModifiedSince
         */
        SetIfModifiedSince(
            [in] Int64 newValue);

        /**
         * Sets the value of the specified request header field. The value will only
         * be used by the current {@code URLConnection} instance. This method can
         * only be called before the connection is established.
         *
         * @param field
         *            the request header field to be set.
         * @param newValue
         *            the new value of the specified property.
         * @throws IllegalStateException
         *             if the connection has been already established.
         * @throws NullPointerException
         *             if the parameter {@code field} is {@code null}.
         */
        SetRequestProperty(
            [in] String field,
            [in] String newValue);

         /**
         * Sets the flag indicating whether this connection allows to use caches or
         * not. This method can only be called prior to the connection
         * establishment.
         *
         * @param newValue
         *            the value of the flag to be set.
         * @throws IllegalStateException
         *             if this method attempts to change the flag after the
         *             connection has been established.
         * @see #useCaches
         */
        SetUseCaches(
            [in] Boolean newValue);

        /**
         * Sets the timeout value in milliseconds for establishing the connection to
         * the resource pointed by this {@code URLConnection} instance. A {@code
         * SocketTimeoutException} is thrown if the connection could not be
         * established in this time. Default is {@code 0} which stands for an
         * infinite timeout.
         *
         * @param timeout
         *            the connecting timeout in milliseconds.
         * @throws IllegalArgumentException
         *             if the parameter {@code timeout} is less than zero.
         */
        SetConnectTimeout(
            [in] Int32 timeout);

        /**
         * Returns the configured connecting timeout.
         *
         * @return the connecting timeout value in milliseconds.
         */
        GetConnectTimeout(
            [out] Int32* timeout);

        /**
         * Sets the timeout value in milliseconds for reading from the input stream
         * of an established connection to the resource. A {@code
         * SocketTimeoutException} is thrown if the connection could not be
         * established in this time. Default is {@code 0} which stands for an
         * infinite timeout.
         *
         * @param timeout
         *            the reading timeout in milliseconds.
         * @throws IllegalArgumentException
         *             if the parameter {@code timeout} is less than zero.
         */
        SetReadTimeout(
            [in] Int32 timeout);

        /**
         * Returns the configured timeout for reading from the input stream of an
         * established connection to the resource.
         *
         * @return the reading timeout value in milliseconds.
         */
        GetReadTimeout(
            [out] Int32* timeout);
    }
}