
module
{
    interface IInetAddress;
    interface IFileDescriptor;

    interface ISocketImpl extends ISocketOptions {
        /**
         * Waits for an incoming request and blocks until the connection is opened
         * on the given socket.
         *
         * @param newSocket
         *            the socket to accept connections on.
         * @throws IOException
         *             if an error occurs while accepting a new connection.
         */
        Accept(
            [in] ISocketImpl* newSocket);

        /**
         * Returns the available number of bytes which are readable from this socket
         * without blocking.
         *
         * @return the number of bytes that may be read without blocking.
         * @throws IOException
         *             if an error occurs while reading the number of bytes.
         */
        Available(
            [out] Int32* num);

        /**
         * Binds this socket to the specified local host address and port number.
         *
         * @param address
         *            the local machine address to bind this socket to.
         * @param port
         *            the port on the local machine to bind this socket to.
         * @throws IOException
         *             if an error occurs while binding this socket.
         */
        Bind(
            [in] IInetAddress* address,
            [in] Int32 port);

        /**
         * Closes this socket. This makes later access invalid.
         *
         * @throws IOException
         *             if an error occurs while closing this socket.
         */
        Close();

        /**
         * Connects this socket to the specified remote host and port number.
         *
         * @param host
         *            the remote host this socket has to be connected to.
         * @param port
         *            the remote port on which this socket has to be connected.
         * @throws IOException
         *             if an error occurs while connecting to the remote host.
         */
        Connect(
            [in] String host,
            [in] Int32 port);

        /**
         * Connects this socket to the specified remote host address and port
         * number.
         *
         * @param address
         *            the remote host address this socket has to be connected to.
         * @param port
         *            the remote port on which this socket has to be connected.
         * @throws IOException
         *             if an error occurs while connecting to the remote host.
         */
        ConnectEx(
            [in] IInetAddress* address,
            [in] Int32 port);

        /**
         * Creates a new unconnected socket. The argument {@code isStreaming}
         * defines whether the new socket is a streaming or a datagram socket.
         *
         * @param isStreaming
         *            defines whether the type of the new socket is streaming or
         *            datagram.
         * @throws IOException
         *             if an error occurs while creating the socket.
         */
        Create(
            [in] Boolean isStreaming);

        /**
         * Gets the file descriptor of this socket.
         *
         * @return the file descriptor of this socket.
         */
        GetFileDescriptor(
            [out] IFileDescriptor** fileDescriptor);

        /**
         * Gets the remote address this socket is connected to.
         *
         * @return the remote address of this socket.
         */
        GetInetAddress(
            [out] IInetAddress** netAddress);

        /**
         * Gets the input stream of this socket.
         *
         * @return the input stream of this socket.
         * @throws IOException
         *             if an error occurs while accessing the input stream.
         */
        GetInputStream(
            [out] IInputStream** inputStream);

        /**
         * Gets the local port number of this socket. The field is initialized to
         * {@code -1} and upon demand will go to the IP stack to get the bound
         * value. See the class comment for the context of the local port.
         *
         * @return the local port number this socket is bound to.
         */
        GetLocalPort(
            [out] Int32* num);

        /**
         * Gets the output stream of this socket.
         *
         * @return the output stream of this socket.
         * @throws IOException
         *             if an error occurs while accessing the output stream.
         */
        GetOutputStream(
            [out] IOutputStream** outputStream);

        /**
         * Gets the remote port number of this socket. This value is not meaningful
         * when this instance is wrapped by a {@code ServerSocket}.
         *
         * @return the remote port this socket is connected to.
         */
        GetPort(
            [out] Int32* port);

        /**
         * Listens for connection requests on this streaming socket. Incoming
         * connection requests are queued up to the limit specified by {@code
         * backlog}. Additional requests are rejected. The method {@code listen()}
         * may only be invoked on streaming sockets.
         *
         * @param backlog
         *            the maximum number of outstanding connection requests.
         * @throws IOException
         *             if an error occurs while listening.
         */
        Listen(
            [in] Int32 backlog);

        /**
         * Closes the input channel of this socket.
         * <p>
         * This default implementation always throws an {@link IOException} to
         * indicate that the subclass should have overridden this method.
         *
         * @throws IOException
         *             always because this method should be overridden.
         */
        ShutdownInput();

        /**
         * Closes the output channel of this socket.
         * <p>
         * This default implementation always throws an {@link IOException} to
         * indicate that the subclass should have overridden this method.
         *
         * @throws IOException
         *             always because this method should be overridden.
         */
        ShutdownOutput();

        /**
         * Connects this socket to the remote host address and port number specified
         * by the {@code SocketAddress} object with the given timeout. This method
         * will block indefinitely if the timeout is set to zero.
         *
         * @param remoteAddr
         *            the remote host address and port number to connect to.
         * @param timeout
         *            the timeout value in milliseconds.
         * @throws IOException
         *             if an error occurs while connecting.
         */
        ConnectEx2(
            [in] ISocketAddress* remoteAddr,
            [in] Int32 timeout);

        /**
         * Returns whether the socket supports urgent data or not. Subclasses should
         * override this method.
         *
         * @return {@code false} because subclasses must override this method.
         */
        SupportsUrgentData(
            [out] Boolean* isSupports);

        /**
         * Sends the single byte of urgent data on the socket.
         *
         * @param value
         *            the byte of urgent data.
         * @throws IOException
         *             if an error occurs sending urgent data.
         */
        SendUrgentData(
            [in] Int32 value);

        /**
         * Sets performance preference for connection time, latency and bandwidth.
         * Does nothing by default.
         *
         * @param connectionTime
         *            the importance of connect time.
         * @param latency
         *            the importance of latency.
         * @param bandwidth
         *            the importance of bandwidth.
         */
        SetPerformancePreferences(
            [in] Int32 connectionTime,
            [in] Int32 latency,
            [in] Int32 bandwidth);
    }
}
