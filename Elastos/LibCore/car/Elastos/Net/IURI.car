
module
{
    interface IURL;

    interface IURI {
        /**
         * Compares this URI with the given argument {@code uri}. This method will
         * return a negative value if this URI instance is less than the given
         * argument and a positive value if this URI instance is greater than the
         * given argument. The return value {@code 0} indicates that the two
         * instances represent the same URI. To define the order the single parts of
         * the URI are compared with each other. String components will be ordered
         * in the natural case-sensitive way. A hierarchical URI is less than an
         * opaque URI and if one part is {@code null} the URI with the undefined
         * part is less than the other one.
         *
         * @param uri
         *            the URI this instance has to compare with.
         * @return the value representing the order of the two instances.
         */
        CompareTo(
            [in] IURI* uri,
            [out] Int32* result);

        /**
         * Gets the decoded authority part of this URI.
         *
         * @return the decoded authority part or {@code null} if undefined.
         */
        GetAuthority(
            [out] String* authority);

        /**
         * Gets the decoded fragment part of this URI.
         *
         * @return the decoded fragment part or {@code null} if undefined.
         */
        GetFragment(
            [out] String* fragment);

        /**
         * Gets the host part of this URI.
         *
         * @return the host part or {@code null} if undefined.
         */
        GetHost(
            [out] String* host);

        /**
         * Gets the decoded path part of this URI.
         *
         * @return the decoded path part or {@code null} if undefined.
         */
        GetPath(
            [out] String* path);

        /**
         * Gets the port number of this URI.
         *
         * @return the port number or {@code -1} if undefined.
         */
        GetPort(
            [out] Int32* port);

        /** @hide */
        GetEffectivePort(
            [out] Int32* port);

        /**
         * Gets the decoded query part of this URI.
         *
         * @return the decoded query part or {@code null} if undefined.
         */
        GetQuery(
            [out] String* query);

        /**
         * Gets the authority part of this URI in raw form.
         *
         * @return the encoded authority part or {@code null} if undefined.
         */
        GetRawAuthority(
            [out] String* authority);

        /**
         * Gets the fragment part of this URI in raw form.
         *
         * @return the encoded fragment part or {@code null} if undefined.
         */
        GetRawFragment(
            [out] String* fragment);

        /**
         * Gets the path part of this URI in raw form.
         *
         * @return the encoded path part or {@code null} if undefined.
         */
        GetRawPath(
            [out] String* path);

        /**
         * Gets the query part of this URI in raw form.
         *
         * @return the encoded query part or {@code null} if undefined.
         */
        GetRawQuery(
            [out] String* query);

        /**
         * Gets the scheme-specific part of this URI in raw form.
         *
         * @return the encoded scheme-specific part or {@code null} if undefined.
         */
        GetRawSchemeSpecificPart(
            [out] String* schemeSpecific);

        /**
         * Gets the user-info part of this URI in raw form.
         *
         * @return the encoded user-info part or {@code null} if undefined.
         */
        GetRawUserInfo(
            [out] String* userInfo);

        /**
         * Gets the scheme part of this URI.
         *
         * @return the scheme part or {@code null} if undefined.
         */
        GetScheme(
            [out] String* scheme);

        /**
         * Gets the decoded scheme-specific part of this URI.
         *
         * @return the decoded scheme-specific part or {@code null} if undefined.
         */
        GetSchemeSpecificPart(
            [out] String* schemeSpecific);

        /**
         * Gets the decoded user-info part of this URI.
         *
         * @return the decoded user-info part or {@code null} if undefined.
         */
        GetUserInfo(
            [out] String* userInfo);

        /**
         * Indicates whether this URI is absolute, which means that a scheme part is
         * defined in this URI.
         *
         * @return {@code true} if this URI is absolute, {@code false} otherwise.
         */
        IsAbsolute(
            [out] Boolean* isAbsolute);

        /**
         * Indicates whether this URI is opaque or not. An opaque URI is absolute
         * and has a scheme-specific part which does not start with a slash
         * character. All parts except scheme, scheme-specific and fragment are
         * undefined.
         *
         * @return {@code true} if the URI is opaque, {@code false} otherwise.
         */
        IsOpaque(
            [out] Boolean* isOpaque);

        /**
         * Normalizes the path part of this URI.
         *
         * @return an URI object which represents this instance with a normalized
         *         path.
         */
        Normalize(
            [out] IURI** uri);

        /**
         * Tries to parse the authority component of this URI to divide it into the
         * host, port, and user-info. If this URI is already determined as a
         * ServerAuthority this instance will be returned without changes.
         *
         * @return this instance with the components of the parsed server authority.
         * @throws URISyntaxException
         *             if the authority part could not be parsed as a server-based
         *             authority.
         */
        ParseServerAuthority();

        /**
         * Makes the given URI {@code relative} to a relative URI against the URI
         * represented by this instance.
         *
         * @param relative
         *            the URI which has to be relativized against this URI.
         * @return the relative URI.
         */
        Relativize(
            [in] IURI* relative,
            [out] IURI** uri);

        /**
         * Resolves the given URI {@code relative} against the URI represented by
         * this instance.
         *
         * @param relative
         *            the URI which has to be resolved against this URI.
         * @return the resolved URI.
         */
        Resolve(
            [in] IURI* relative,
            [out] IURI** uri);

        /**
         * Creates a new URI instance by parsing the given string {@code relative}
         * and resolves the created URI against the URI represented by this
         * instance.
         *
         * @param relative
         *            the given string to create the new URI instance which has to
         *            be resolved later on.
         * @return the created and resolved URI.
         */
        ResolveEx(
            [in] String relative,
            [out] IURI** uri);

        /**
         * Returns the textual string representation of this URI instance using the
         * US-ASCII encoding.
         *
         * @return the US-ASCII string representation of this URI.
         */
        ToASCIIString(
            [out] String* str);

        /**
         * Converts this URI instance to a URL.
         *
         * @return the created URL representing the same resource as this URI.
         * @throws MalformedURLException
         *             if an error occurs while creating the URL or no protocol
         *             handler could be found.
         */
        ToURL(
            [out] IURL** url);
    }
}