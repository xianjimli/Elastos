
module
{
    interface IThreadGroup {
        /**
         * Returns the number of running {@code Thread}s which are children of this thread group,
         * directly or indirectly.
         *
         * @return the number of children
         */
        ActiveCount(
            [out] Int32* number);

        /**
         * Returns the number of {@code ThreadGroup}s which are children of this group,
         * directly or indirectly.
         *
         * @return the number of children
         */
        ActiveGroupCount(
            [out] Int32* number);

        /**
         * Does nothing. The definition of this method depends on the deprecated
         * method {@link #suspend()}. The exact behavior of this call was never
         * specified.
         *
         * @param b Used to control low memory implicit suspension
         * @return {@code true} (always)
         *
         * @deprecated Required deprecated method suspend().
         */
        //@Deprecated
        AllowThreadSuspension(
            [in] Boolean b,
            [out] Boolean* result);

        /**
         * Checks the accessibility of this {@code ThreadGroup} from the perspective of the
         * caller. If there is a {@code SecurityManager} installed, calls
         * {@code checkAccess} with this thread group as a parameter, otherwise does
         * nothing.
         */
        CheckAccess();

        /**
         * Destroys this thread group and recursively all its subgroups. It is only legal
         * to destroy a {@code ThreadGroup} that has no threads in it. Any daemon
         * {@code ThreadGroup} is destroyed automatically when it becomes empty (no threads
         * or thread groups in it).
         *
         * @throws IllegalThreadStateException if this thread group or any of its
         *         subgroups has been destroyed already or if it still contains
         *         threads.
         * @throws SecurityException if {@code this.checkAccess()} fails with
         *         a SecurityException
         */
        Destroy();

        /**
         * Iterates over all active threads in this group (and its sub-groups) and
         * stores the threads in the given array. Returns when the array is full or
         * no more threads remain, whichever happens first.
         *
         * <p>Note that this method will silently ignore any threads that don't fit in the
         * supplied array.
         *
         * @param threads the array into which the {@code Thread}s will be copied
         * @return the number of {@code Thread}s that were copied
         */
        EnumerateThread(
            [out] ArrayOf<IThread*> threads,
            [out] Int32* number);

        /**
         * Iterates over all active threads in this group (and, optionally, its
         * sub-groups) and stores the threads in the given array. Returns when the
         * array is full or no more threads remain, whichever happens first.
         *
         * <p>Note that this method will silently ignore any threads that don't fit in the
         * supplied array.
         *
         * @param threads the array into which the {@code Thread}s will be copied
         * @param recurse indicates whether {@code Thread}s in subgroups should be
         *        recursively copied as well
         * @return the number of {@code Thread}s that were copied
         */
        EnumerateThreadEx(
            [in] Boolean recurse,
            [out] ArrayOf<IThread*> threads,
            [out] Int32* number);

        /**
         * Iterates over all thread groups in this group (and its sub-groups) and
         * and stores the groups in the given array. Returns when the array is full
         * or no more groups remain, whichever happens first.
         *
         * <p>Note that this method will silently ignore any thread groups that don't fit in the
         * supplied array.
         *
         * @param groups the array into which the {@code ThreadGroup}s will be copied
         * @return the number of {@code ThreadGroup}s that were copied
         */
        EnumerateThreadGroup(
            [out] ArrayOf<IThreadGroup*> groups,
            [out] Int32* number);

        /**
         * Iterates over all thread groups in this group (and, optionally, its
         * sub-groups) and stores the groups in the given array. Returns when
         * the array is full or no more groups remain, whichever happens first.
         *
         * <p>Note that this method will silently ignore any thread groups that don't fit in the
         * supplied array.
         *
         * @param groups the array into which the {@code ThreadGroup}s will be copied
         * @param recurse indicates whether {@code ThreadGroup}s in subgroups should be
         *        recursively copied as well or not
         * @return the number of {@code ThreadGroup}s that were copied
         */
        EnumerateThreadGroupEx(
            [in] Boolean recurse,
            [out] ArrayOf<IThreadGroup*> groups,
            [out] Int32* number);

        /**
         * Returns the maximum allowed priority for a {@code Thread} in this thread group.
         *
         * @return the maximum priority
         *
         * @see #setMaxPriority
         */
        GetMaxPriority(
            [out] Int32* maxPriority);

        /**
         * Returns the name of this thread group.
         *
         * @return the group's name
         */
        GetName(
            [out] String* name);

        /**
         * Returns this thread group's parent {@code ThreadGroup}. It can be null if this
         * is the the root ThreadGroup.
         *
         * @return the parent
         */
        GetParent(
            [out] IThreadGroup** parent);

        /**
         * Interrupts every {@code Thread} in this group and recursively in all its
         * subgroups.
         *
         * @throws SecurityException if {@code this.checkAccess()} fails with
         *         a SecurityException
         *
         * @see Thread#interrupt
         */
        Interrupt();

        /**
         * Checks whether this thread group is a daemon {@code ThreadGroup}.
         *
         * @return true if this thread group is a daemon {@code ThreadGroup}
         *
         * @see #setDaemon
         * @see #destroy
         */
        IsDaemon(
            [out] Boolean* isDaemon);

        /**
         * Checks whether this thread group has already been destroyed.
         *
         * @return true if this thread group has already been destroyed
         * @see #destroy
         */
        IsDestroyed(
            [out] Boolean* isDestroyed);

        /**
         * Outputs to {@code System.out} a text representation of the
         * hierarchy of {@code Thread}s and {@code ThreadGroup}s in this thread group (and recursively).
         * Proper indentation is used to show the nesting of groups inside groups
         * and threads inside groups.
         */
        List();

        /**
         * Checks whether this thread group is a direct or indirect parent group of a
         * given {@code ThreadGroup}.
         *
         * @param g the potential child {@code ThreadGroup}
         * @return true if this thread group is parent of {@code g}
         */
        IsParentOf(
            [in] IThreadGroup* g,
            [out] Boolean* result);

        /**
         * Resumes every thread in this group and recursively in all its
         * subgroups.
         *
         * @throws SecurityException if {@code this.checkAccess()} fails with
         *         a SecurityException
         *
         * @see Thread#resume
         * @see #suspend
         *
         * @deprecated Requires deprecated method Thread.resume().
         */
        //@Deprecated
        Resume();

        /**
         * Sets whether this is a daemon {@code ThreadGroup} or not. Daemon
         * thread groups are automatically destroyed when they become empty.
         *
         * @param isDaemon the new value
         * @throws SecurityException if {@code checkAccess()} for the parent
         *         group fails with a SecurityException
         *
         * @see #isDaemon
         * @see #destroy
         */
        SetDaemon(
            [in] Boolean isDaemon);

        /**
         * Configures the maximum allowed priority for a {@code Thread} in this group and
         * recursively in all its subgroups.
         *
         * <p>A caller can never increase the maximum priority of a thread group.
         * Such an attempt will not result in an exception, it will
         * simply leave the thread group with its current maximum priority.
         *
         * @param newMax the new maximum priority to be set
         *
         * @throws SecurityException if {@code checkAccess()} fails with a
         *         SecurityException
         * @throws IllegalArgumentException if the new priority is greater than
         *         Thread.MAX_PRIORITY or less than Thread.MIN_PRIORITY
         *
         * @see #getMaxPriority
         */
        SetMaxPriority(
            [in] Int32 newMax);

        /**
         * Stops every thread in this group and recursively in all its subgroups.
         *
         * @throws SecurityException if {@code this.checkAccess()} fails with
         *         a SecurityException
         *
         * @see Thread#stop()
         * @see Thread#stop(Throwable)
         * @see ThreadDeath
         *
         * @deprecated Requires deprecated method Thread.stop().
         */
        //@Deprecated
        Stop();

        /**
         * Suspends every thread in this group and recursively in all its
         * subgroups.
         *
         * @throws SecurityException if {@code this.checkAccess()} fails with
         *         a SecurityException
         *
         * @see Thread#suspend
         * @see #resume
         *
         * @deprecated Requires deprecated method Thread.suspend().
         */
        //@Deprecated
        Suspend();
    }
}
