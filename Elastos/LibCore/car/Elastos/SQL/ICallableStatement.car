
module
{
    interface IPreparedStatement;
    interface IArray;
    interface IClob;
    interface IDate;
    interface ICalendar;
    interface IReader;
    interface IRowId;
    interface INClob;
    interface ISQLXML;
    interface IBlob;

    /**
     * An interface used to call <i>Stored Procedures</i>.
     * <p>
     * The JDBC API provides an SQL escape syntax allowing <i>Stored Procedures</i>
     * to be called in a standard way for all databases. The JDBC escape syntax has
     * two forms. One form includes a result parameter. The second form does not
     * include a result parameter. Where the result parameter is used, it must be
     * declared as an {@code OUT} parameter. Other parameters can be declared as
     * {@code IN}, {@code OUT}, or {@code INOUT}. Parameters are referenced either by
     * name or by a numerical index starting at 1.
     * <p>
     * The correct syntax is:
     * <dd>
     * <dl>
     * { ?= call &lt;procedurename&gt; [( [parameter1,parameter2,...] )] }
     * </dl>
     * <dl>
     * { call &lt;procedurename&gt; [( [parameter1,parameter2,...] )] }
     * </dl>
     * </code></dd>
     * {@code IN} parameters are set before calling the procedure,
     * using the setter methods which are inherited from {@code PreparedStatement}.
     * For {@code OUT} parameters, their type must be registered before executing
     * the stored procedure. The values are retrieved using the getter methods
     * defined in the {@code CallableStatement} interface.
     * <p>
     * {@code CallableStatement}s can return one or more {@code ResultSets}. In the
     * event that multiple {@code ResultSets} are returned, they are accessed using
     * the methods inherited from the {@code Statement} interface.
     */
    interface ICallableStatement extends IPreparedStatement {

        /**
         * Gets the value of a specified JDBC {@code ARRAY} parameter as a
         * {@code java.sql.Array}.
         *
         * @param parameterIndex
         *            the parameter index, where the first parameter has
         *            index 1.
         * @return a {@code java.sql.Array} containing the parameter value.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetArrayByIndex(
            [in] Int32 parameterIndex,
            [out] IArray** value);

        /**
         * Gets the value of a specified JDBC {@code ARRAY} parameter as a {@code
         * java.sql.Array}.
         *
         * @param parameterName
         *            the desired parameter's name.
         * @return a {@code java.sql.Array} containing the parameter's value.
         * @throws SQLException
         *             if there is a problem accessing the database.
         */
        GetArrayByName(
            [in] CString parameterName,
            [out] IArray** value);

        /**
         * Returns a new {@link BigDecimal} representation of the JDBC {@code
         * NUMERIC} parameter specified by the input index.
         *
         * @param parameterIndex
         *            the parameter number index where the first parameter has index
         *            1.
         * @return a {@code java.math.BigDecimal} representing the value of the
         *         specified parameter. The value {@code null} is returned if
         *         the parameter in question is an SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetBigDecimalByIndex(
            [in] Int32 parameterIndex,
            [out] IBigDecimal** value);

        /**
         * Returns a new {@link BigDecimal} representation of the JDBC {@code
         * NUMERIC} parameter specified by the input index. The number of digits
         * after the decimal point is specified by {@code scale}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param scale
         *            the number of digits after the decimal point to get.
         * @return a {@code java.math.BigDecimal} representing the value of the
         *         specified parameter. The value {@code null} is returned if
         *         the parameter in question is an SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @deprecated Use {@link #getBigDecimal(int)} or
         *             {@link #getBigDecimal(String)}
         */
        //@Deprecated
        GetBigDecimalByIndexEx(
            [in] Int32 parameterIndex,
            [in] Int32 scale,
            [out] IBigDecimal** value);

        /**
         * Returns a new {@link BigDecimal} representation of the JDBC {@code
         * NUMERIC} parameter specified by the input name.
         *
         * @param parameterName
         *            the desired parameter's name.
         * @return a {@code java.math.BigDecimal} representing the value of the
         *         specified parameter. The value {@code null} is returned if
         *         the parameter in question is an SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetBigDecimalByName(
            [in] CString parameterName,
            [out] IBigDecimal** value);

        /**
         * Gets the value of a specified JDBC {@code BLOB} parameter as a {@code
         * java.sql.Blob}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return a {@code java.sql.Blob} representing the value of the
         *         specified parameter. The value {@code null} is returned if
         *         the parameter in question is an SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetBlobByIndex(
            [in] Int32 parameterIndex,
            [out] IBlob** value);

        /**
         * Gets the value of a specified JDBC {@code BLOB} parameter as a {@code
         * java.sql.Blob}.
         *
         * @param parameterName
         *            the desired parameter's name.
         * @return a {@code java.sql.Blob} representing the value of the
         *         specified parameter. The value {@code null} is returned if
         *         the parameter in question is an SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetBlobByName(
            [in] CString parameterName,
            [out] IBlob** value);

        /**
         * Gets the value of a specified JDBC {@code BIT} parameter as a boolean.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return a {@code boolean} representing the parameter value. {@code false}
         *            is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetBooleanByIndex(
            [in] Int32 parameterIndex,
            [out] Boolean* value);

        /**
         * Gets the value of a specified JDBC {@code BIT} parameter as a {@code
         * boolean}.
         *
         * @param parameterName
         *            the desired parameter's name.
         * @return a {@code boolean} representation of the value of the parameter.
         *         {@code false} is returned if the SQL value is {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetBooleanByName(
            [in] CString parameterName,
            [out] Boolean* value);

        /**
         * Gets the value of a specified JDBC {@code TINYINT} parameter as a {@code
         * byte}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return a {@code byte} representation of the value of the parameter.
         *            {@code 0} is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetByteByIndex(
            [in] Int32 parameterIndex,
            [out] Byte* value);

        /**
         * Gets the value of a specified JDBC {@code TINYINT} parameter as a Java
         * {@code byte}.
         *
         * @param parameterName
         *            the desired parameter's name.
         * @return a {@code byte} representation of the value of the parameter.
         *         {@code 0} is returned if the SQL value is {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetByteByName(
            [in] CString parameterName,
            [out] Byte* value);

        /**
         * Returns a byte array representation of the indexed JDBC {@code BINARY} or
         * {@code VARBINARY} parameter.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return an array of bytes giving the value of the parameter. {@code null}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetBytesByIndex(
            [in] Int32 parameterIndex,
            [out, callee] ArrayOf<Byte>* value);

        /**
         * Returns a byte array representation of the named JDBC {@code BINARY} or
         * {@code VARBINARY} parameter.
         *
         * @param parameterName
         *            the name of the parameter.
         * @return an array of bytes giving the value of the parameter. {@code null}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetBytesByName(
            [in] String parameterName,
            [out, callee] ArrayOf<Byte>* value);

        /**
         * Gets the value of a specified JDBC {@code CLOB} parameter as a {@code
         * java.sql.Clob}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return a {@code java.sql.Clob} representing the value of the
         *            parameter. {@code null} is returned if the value is SQL
         *            {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Clob
         */
        GetClobByIndex(
            [in] Int32 parameterIndex,
            [out] IClob** value);

        /**
         * Gets the value of a specified JDBC {@code CLOB} parameter as a {@code
         * java.sql.Clob}.
         *
         * @param parameterName
         *            the name of the parameter.
         * @return a {@code java.sql.Clob} with the value of the parameter. {@code
         *         null} is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Clob
         */
        GetClobByName(
            [in] CString parameterName,
            [out] IClob** value);

        /**
         * Gets the value of the specified JDBC {@code DATE} parameter as a {@code
         * java.sql.Date}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return the {@code java.sql.Date} representing the parameter's value.
         *         {@code null} is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Date
         */
        GetDateByIndex(
            [in] Int32 parameterIndex,
            [out] IDate** value);

        /**
         * Gets the value of the specified JDBC {@code DATE} parameter as a {@code
         * java.sql.Date}, using the specified {@code Calendar} to construct the date.
         * <p>
         * The JDBC driver uses the calendar to create the Date using a particular
         * timezone and locale. The default behavior of the driver is to use the Java
         * virtual machine default settings.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param cal
         *            the {@code Calendar} to use to construct the date
         * @return the {@code java.sql.Date} giving the parameter's value. {@code null}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Date
         */
        GetDateByIndexEx(
            [in] Int32 parameterIndex,
            [in] ICalendar* cal,
            [out] IDate** value);

        /**
         * Gets the value of the specified JDBC {@code DATE} parameter as a {@code
         * java.sql.Date}.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @return the {@code java.sql.Date} giving the parameter's value. {@code null}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Date
         */
        GetDateByName(
            [in] CString parameterName,
            [out] IDate** value);

        /**
         * Gets the value of the specified JDBC {@code DATE} parameter as a {@code
         * java.sql.Date}, using the specified {@code Calendar} to construct the date.
         * <p>
         * The JDBC driver uses the calendar to create the date using a particular
         * timezone and locale. The default behavior of the driver is to use the Java
         * virtual machine default settings.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @param cal
         *            used for creating the returned {@code Date}.
         * @return the {@code java.sql.Date} giving the parameter's value. {@code null}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Date
         */
        GetDateByNameEx(
            [in] CString parameterName,
            [in] ICalendar* cal,
            [out] IDate** value);

        /**
         * Gets the value of the specified JDBC {@code DOUBLE} parameter as a
         * {@code double}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return the parameter's value as a {@code double}. {@code 0.0}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetDoubleByIndex(
            [in] Int32 parameterIndex,
            [out] Double* value);

        /**
         * Gets the value of the specified JDBC {@code DOUBLE} parameter as a
         * {@code double}.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @return the parameter's value as a {@code double}. {@code 0.0}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a problem accessing the database.
         */
        GetDoubleByName(
            [in] CString parameterName,
            [out] Double* value);

        /**
         * Gets the value of the specified JDBC {@code FLOAT} parameter as a {@code
         * float}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return the parameter's value as a {@code float}. {@code 0.0}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetFloatByIndex(
            [in] Int32 parameterIndex,
            [out] Float* value);

        /**
         * Gets the value of the specified JDBC {@code FLOAT} parameter as a Java
         * {@code float}.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @return the parameter's value as a {@code float}. {@code 0.0}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a problem accessing the database.
         */
        GetFloatByName(
            [in] CString parameterName,
            [out] Float* value);

        /**
         * Gets the value of the specified JDBC {@code INTEGER} parameter as an
         * {@code int}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return the {@code int} giving the parameter's value. {@code 0}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetInt32ByIndex(
            [in] Int32 parameterIndex,
            [out] Int32* value);

        /**
         * Gets the value of the specified JDBC {@code INTEGER} parameter as an
         * {@code int}.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @return the {@code int} giving the parameter's value. {@code 0}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetInt32ByName(
            [in] CString parameterName,
            [out] Int32* value);

        /**
         * Gets the value of the specified JDBC {@code BIGINT} parameter as a
         * {@code long}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return the {@code long} giving the parameter's value. {@code 0}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetInt64ByIndex(
            [in] Int32 parameterIndex,
            [out] Int64* value);

        /**
         * Gets the value of the specified JDBC {@code BIGINT} parameter as a
         * {@code long}.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @return the {@code long} giving the parameter's value. {@code 0}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetInt64ByName(
            [in] CString parameterName,
            [out] Int64* value);

        /**
         * Gets the value of the specified parameter as a Java {@code Object}.
         * <p>
         * The object type returned is the JDBC type registered for the parameter
         * with a {@code registerOutParameter} call. If a parameter was registered
         * as a {@code java.sql.Types.OTHER} then it may hold abstract types that
         * are particular to the connected database.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return an Object holding the value of the parameter.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetObjectByIndex(
            [in] Int32 parameterIndex,
            [out] IInterface** value);

//        /**
//         * Gets the value of the specified parameter as an {@code Object}. The
//         * {@code Map} gives the correspondence between SQL types and Java classes.
//         *
//         * @param parameterIndex
//         *            the parameter number index, where the first parameter has
//         *            index 1.
//         * @param map
//         *            the {@code Map} giving the correspondence between SQL
//         *            types and Java classes.
//         * @return an Object holding the value of the parameter.
//         * @throws SQLException
//         *             if a database error occurs.
//         */
//        public Object getObject(int parameterIndex, Map<String, Class<?>> map)
//                throws SQLException;

        /**
         * Gets the value of the specified parameter as an {@code Object}.
         * <p>
         * The object type returned is the JDBC type that was registered for
         * the parameter by an earlier call to {@link #registerOutParameter}.
         * If a parameter was registered as a {@code java.sql.Types.OTHER}
         * then it may hold abstract types that are particular to the
         * connected database.
         *
         * @param parameterName
         *            the parameter name.
         * @return the Java {@code Object} representation of the value of the
         *         parameter.
         * @throws SQLException
         *             if there is a problem accessing the database.
         */
        GetObjectByName(
            [in] CString parameterName,
            [out] IInterface** value);

//        /**
//         * Gets the value of a specified parameter as an {@code Object}. The
//         * actual return type is determined by the {@code Map} parameter which
//         * gives the correspondence between SQL types and Java classes.
//         *
//         * @param parameterName
//         *            the parameter name.
//         * @param map
//         *            the {@code Map} of SQL types to their Java counterparts
//         * @return an {@code Object} holding the value of the parameter.
//         * @throws SQLException
//         *             if there is a problem accessing the database.
//         */
//        public Object getObject(String parameterName, Map<String, Class<?>> map)
//                throws SQLException;

        /**
         * Gets the value of a specified SQL {@code REF(<structured type>)}
         * parameter as a {@code java.sql.Ref}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return a {@code java.sql.Ref} with the parameter value. {@code null}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetRefByIndex(
            [in] Int32 parameterIndex,
            [out] IRef** value);

        /**
         * Gets the value of a specified SQL {@code REF(<structured type>)}
         * parameter as a {@code java.sql.Ref}.
         *
         * @param parameterName
         *            the desired parameter's name.
         * @return the parameter's value in the form of a {@code
         *         java.sql.Ref}. A {@code null} reference is returned if the
         *         parameter's value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a problem accessing the database.
         * @see Ref
         */
        GetRefByName(
            [in] CString parameterName,
            [out] IRef** value);

        /**
         * Gets the value of a specified JDBC {@code SMALLINT} parameter as a
         * {@code short}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return the parameter's value as a {@code short}. 0 is returned
         *         if the parameter's value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetInt16ByIndex(
            [in] Int32 parameterIndex,
            [out] Int16* value);

        /**
         * Gets the value of a specified JDBC {@code SMALLINT} parameter as a
         * {@code short}.
         *
         * @param parameterName
         *            the desired parameter's name.
         * @return the parameter's value as a {@code short}. 0 is returned
         *         if the parameter's value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a problem accessing the database.
         */
        GetInt16ByName(
            [in] CString parameterName,
            [out] Int16* value);

        /**
         * Returns the indexed parameter's value as a {@code String}. The
         * parameter value must be one of the JDBC types {@code CHAR},
         * {@code VARCHAR} or {@code LONGVARCHAR}.
         * <p>
         * The {@code String} corresponding to a {@code CHAR} of fixed length
         * will be of identical length to the value in the database inclusive
         * of padding characters.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return the parameter's value as a {@code String}. {@code null}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a problem accessing the database.
         */
        GetStringByIndex(
            [in] Int32 parameterIndex,
            [out] String* value);

        /**
         * Returns the named parameter's value as a string. The parameter value must
         * be one of the JDBC types {@code CHAR}, {@code VARCHAR} or {@code
         * LONGVARCHAR}.
         * <p>
         * The string corresponding to a {@code CHAR} of fixed length will be of
         * identical length to the value in the database inclusive of padding
         * characters.
         *
         * @param parameterName
         *            the desired parameter's name.
         * @return the parameter's value as a {@code String}. {@code null}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a problem accessing the database.
         */
        GetStringByName(
            [in] CString parameterName,
            [out] String* value);

        /**
         * Gets the value of a specified JDBC {@code TIME} parameter as a {@code
         * java.sql.Time}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return the parameter's value as a {@code java.sql.Time}.
         *         {@code null} is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Time
         */
        GetTimeByIndex(
            [in] Int32 parameterIndex,
            [out] ITime** value);

        /**
         * Gets the value of a specified JDBC {@code TIME} parameter as a {@code
         * java.sql.Time}, using the supplied {@code Calendar} to construct the
         * time. The JDBC driver uses the calendar to handle specific timezones
         * and locales in order to determine {@code Time}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param cal
         *            the calendar to use in constructing {@code Time}.
         * @return the parameter's value as a {@code java.sql.Time}.
         *         {@code null} is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Time
         * @see java.util.Calendar
         */
        GetTimeByIndexEx(
            [in] Int32 parameterIndex,
            [in] ICalendar* cal,
            [out] ITime** value);

        /**
         * Gets the value of a specified JDBC {@code TIME} parameter as a {@code
         * java.sql.Time}.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @return a new {@code java.sql.Time} with the parameter's value. A {@code
         *         null} reference is returned for an SQL value of {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Time
         */
        GetTimeByName(
            [in] CString parameterName,
            [out] ITime** value);

        /**
         * Gets the value of a specified JDBC {@code TIME} parameter as a {@code
         * java.sql.Time}, using the supplied {@code Calendar} to construct
         * the time. The JDBC driver uses the calendar to handle specific
         * timezones and locales when creating {@code Time}.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @param cal
         *            used for creating the returned {@code Time}
         * @return a new {@code java.sql.Time} with the parameter's value. A {@code
         *         null} reference is returned for an SQL value of {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Time
         * @see java.util.Calendar
         */
        GetTimeByNameEx(
            [in] CString parameterName,
            [in] ICalendar* cal,
            [out] ITime** value);

        /**
         * Returns the indexed parameter's {@code TIMESTAMP} value as a {@code
         * java.sql.Timestamp}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1
         * @return the parameter's value as a {@code java.sql.Timestamp}. A
         *         {@code null} reference is returned for an SQL value of {@code
         *         NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Timestamp
         */
        GetTimestampByIndex(
            [in] Int32 parameterIndex,
            [out] ITimestamp** value);

        /**
         * Returns the indexed parameter's {@code TIMESTAMP} value as a {@code
         * java.sql.Timestamp}. The JDBC driver uses the supplied {@code Calendar}
         * to handle specific timezones and locales when creating the result.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1
         * @param cal
         *            used for creating the returned {@code Timestamp}
         * @return the parameter's value as a {@code java.sql.Timestamp}. A
         *         {@code null} reference is returned for an SQL value of {@code
         *         NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Timestamp
         */
        GetTimestampByIndexEx(
            [in] Int32 parameterIndex,
            [in] ICalendar* cal,
            [out] ITimestamp** value);

        /**
         * Returns the named parameter's {@code TIMESTAMP} value as a {@code
         * java.sql.Timestamp}.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @return the parameter's value as a {@code java.sql.Timestamp}. A
         *         {@code null} reference is returned for an SQL value of {@code
         *         NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Timestamp
         */
        GetTimestampByName(
            [in] CString parameterName,
            [out] ITimestamp** value);

        /**
         * Returns the indexed parameter's {@code TIMESTAMP} value as a {@code
         * java.sql.Timestamp}. The JDBC driver uses the supplied {@code Calendar}
         * to handle specific timezones and locales when creating the result.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @param cal
         *            used for creating the returned {@code Timestamp}
         * @return the parameter's value as a {@code java.sql.Timestamp}. A
         *         {@code null} reference is returned for an SQL value of {@code
         *         NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Timestamp
         */
        GetTimestampByNameEx(
            [in] CString parameterName,
            [in] ICalendar* cal,
            [out] ITimestamp** value);

        /**
         * Gets the value of a specified JDBC {@code DATALINK} parameter as a
         * {@code java.net.URL}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @return a {@code URL} giving the parameter's value. {@code null}
         *         is returned if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see java.net.URL
         */
        GetURLByIndex(
            [in] Int32 parameterIndex,
            [out] IURL** value);

        /**
         * Returns the named parameter's JDBC {@code DATALINK} value in a new Java
         * {@code java.net.URL}.
         *
         * @param parameterName
         *            the name of the desired parameter.
         * @return a new {@code java.net.URL} encapsulating the parameter value. A
         *         {@code null} reference is returned for an SQL value of {@code
         *         NULL}.
         * @throws SQLException
         *             if a database error occurs.
         * @see java.net.URL
         */
        GetURLByName(
            [in] CString parameterName,
            [out] IURL** value);

        /**
         * Defines the type of a specified {@code OUT} parameter. All {@code OUT}
         * parameters must have their type defined before a stored procedure is
         * executed.
         * <p>
         * The type supplied in the {@code sqlType} parameter fixes the
         * type that will be returned by the getter methods of
         * {@code CallableStatement}.
         * If a database specific type is expected for a parameter, the Type {@code
         * java.sql.Types.OTHER} should be used. Note that there is another variant
         * of this method for User Defined Types or a {@code REF} type.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1
         * @param sqlType
         *            the JDBC type as defined by {@code java.sql.Types}. The JDBC
         *            types {@code NUMERIC} and {@code DECIMAL} should be defined
         *            using {@link #registerOutParameter(int, int, int)}.
         * @throws SQLException
         *             if a database error occurs.
         * @see Types
         */
        RegisterOutParameterByIndex(
            [in] Int32 parameterIndex,
            [in] Int32 sqlType);

        /**
         * Defines the Type of a specified {@code OUT} parameter. All {@code OUT}
         * parameters must have their type defined before a stored procedure is
         * executed. This version of the {@code registerOutParameter} method, which
         * has a scale parameter, should be used for the JDBC types {@code NUMERIC}
         * and {@code DECIMAL}, where there is a need to specify the number of
         * digits expected after the decimal point.
         * <p>
         * The type supplied in the {@code sqlType} parameter fixes the
         * type that will be returned by the getter methods of
         * {@code CallableStatement}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1
         * @param sqlType
         *            the JDBC type as defined by {@code java.sql.Types}.
         * @param scale
         *            the number of digits after the decimal point. Must be greater
         *            than or equal to 0.
         * @throws SQLException
         *             if a database error occurs.
         * @see Types
         */
        RegisterOutParameterByIndexEx(
            [in] Int32 parameterIndex,
            [in] Int32 sqlType,
            [in] Int32 scale);

        /**
         * Defines the Type of a specified {@code OUT} parameter. This variant
         * of the method is designed for use with parameters that are
         * <i>User Defined Types</i> (UDT) or a {@code REF} type, although it
         * can be used for any type.
         *
         * @param paramIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param sqlType
         *            a JDBC type expressed as a constant from {@link Types}.
         * @param typeName
         *            an SQL type name. For a {@code REF} type, this name should be
         *            the fully qualified name of the referenced type.
         * @throws SQLException
         *             if a database error occurs.
         * @see Ref
         */
        RegisterOutParameterByIndexEx2(
            [in] Int32 parameterIndex,
            [in] Int32 sqlType,
            [in] String typeName);

        /**
         * Defines the Type of a specified {@code OUT} parameter. All OUT parameters
         * must have their Type defined before a stored procedure is executed.
         * <p>
         * The type supplied in the {@code sqlType} parameter fixes the
         * type that will be returned by the getter methods of
         * {@code CallableStatement}.
         * If a database-specific type is expected for a parameter, the Type {@code
         * java.sql.Types.OTHER} should be used. Note that there is another variant
         * of this method for User Defined Types or a {@code REF} type.
         *
         * @param parameterName
         *            the parameter name.
         * @param sqlType
         *            a JDBC type expressed as a constant from {@link Types}. Types
         *            {@code NUMERIC} and {@code DECIMAL} should be defined using
         *            the variant of this method that takes a {@code scale}
         *            parameter.
         * @throws SQLException
         *             if a database error occurs.
         */
        RegisterOutParameterByName(
            [in] CString parameterName,
            [in] Int32 sqlType);

        /**
         * Defines the Type of a specified {@code OUT} parameter. All {@code OUT}
         * parameters must have their Type defined before a stored procedure is
         * executed. This version of the {@code registerOutParameter} method, which
         * has a scale parameter, should be used for the JDBC types {@code NUMERIC}
         * and {@code DECIMAL}, where there is a need to specify the number of
         * digits expected after the decimal point.
         * <p>
         * The type supplied in the {@code sqlType} parameter fixes the
         * type that will be returned by the getter methods of
         * {@code CallableStatement}.
         *
         * @param parameterName
         *            the parameter name.
         * @param sqlType
         *            a JDBC type expressed as a constant from {@link Types}.
         * @param scale
         *            the number of digits after the decimal point. Must be greater
         *            than or equal to 0.
         * @throws SQLException
         *             if a database error occurs.
         */
        RegisterOutParameterByNameEx(
            [in] CString parameterName,
            [in] Int32 sqlType,
            [in] Int32 scale);

        /**
         * Defines the Type of a specified {@code OUT} parameter. This variant of
         * the method is designed for use with parameters that are <i>User Defined
         * Types</i> (UDT) or a {@code REF} type, although it can be used for any
         * type.
         *
         * @param parameterName
         *            the parameter name
         * @param sqlType
         *            a JDBC type expressed as a constant from {@link Types}
         * @param typeName
         *            the fully qualified name of an SQL structured type. For a
         *            {@code REF} type, this name should be the fully qualified name
         *            of the referenced type.
         * @throws SQLException
         *             if a database error occurs.
         */
        RegisterOutParameterByNameEx2(
            [in] CString parameterName,
            [in] Int32 sqlType,
            [in] String typeName);

        /**
         * Sets the value of a specified parameter to a supplied {@code
         * java.sql.Date} value, using a supplied calendar to map the date. The
         * calendar allows the application to control the timezone used to compute
         * the SQL {@code DATE} in the database. In case that no calendar is
         * supplied, the driver uses the default timezone of the Java virtual
         * machine.
         *
         * @param parameterName
         *            the parameter name.
         * @param theDate
         *            the new value with which to update the parameter.
         * @param cal
         *            a {@code Calendar} to use to construct the SQL {@code DATE}
         *            value.
         * @throws SQLException
         *             if a database error occurs.
         * @see java.util.Calendar
         * @see Date
         */
        SetDateEx(
            [in] String parameterName,
            [in] IDate* theDate,
            [in] ICalendar* cal);

        /**
         * Gets whether the value of the last {@code OUT} parameter read was SQL
         * {@code NULL}.
         *
         * @return true if the last parameter was SQL {@code NULL}, {@code false}
         *         otherwise.
         * @throws SQLException
         *             if a database error occurs.
         */
        WasNull(
            [out] Boolean* wasNull);

        /**
         * Gets the value of a specified {@code ROWID} parameter as a {@code
         * java.sql.RowId}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetRowIdByIndex(
            [in] Int32 parameterIndex,
            [out] IRowId** value);

        /**
         * Returns the value of the specified SQL ROWID parameter as a {@code
         * java.sql.RowId}.
         * @param parameterName the parameter name
         * @throws SQLException if a database error occurs
         */
        GetRowIdByName(
            [in] CString parameterName,
            [out] IRowId** value);

        /**
         * Returns the value of the specified SQL NCLOB parameter as a {@code
         * java.sql.NClob}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetNClobByIndex(
            [in] Int32 parameterIndex,
            [out] INClob** value);

        /**
         * Returns the value of the specified SQL NCLOB parameter as a {@code
         * java.sql.NClob}.
         * @param parameterName the parameter name
         * @throws SQLException if a database error occurs
         */
        GetNClobByName(
            [in] CString parameterName,
            [out] INClob** value);

        /**
         * Returns the value of the specified SQL XML parameter as a {@code
         * java.sql.SQLXML}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetSQLXMLByIndex(
            [in] Int32 parameterIndex,
            [out] ISQLXML** value);

        /**
         * Returns the value of the specified SQL XML parameter as a {@code
         * java.sql.SQLXML}.
         * @param parameterName the parameter name
         * @throws SQLException if a database error occurs
         */
        GetSQLXMLByName(
            [in] CString parameterName,
            [out] ISQLXML** value);

        /**
         * Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter as a
         * {@code java.lang.String}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetNStringByIndex(
            [in] Int32 parameterIndex,
            [out] String* value);

        /**
         * Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter as a {@code
         * java.lang.String}.
         * @param parameterName the parameter name
         * @throws SQLException if a database error occurs
         */
        GetNStringByName(
            [in] CString parameterName,
            [out] String* value);

        /**
         * Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter
         * as a {@link Reader}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetNCharacterStreamByIndex(
            [in] Int32 parameterIndex,
            [out] IReader** value);

        /**
         * Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter as a {@code
         * java.io.Reader}.
         * @param parameterName the parameter name
         * @throws SQLException if a database error occurs
         */
        GetNCharacterStreamByName(
            [in] CString parameterName,
            [out] IReader** value);

        /**
         * Returns the value of the specified parameter as a {@code java.io.Reader}.
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetCharacterStreamByIndex(
            [in] Int32 parameterIndex,
            [out] IReader** value);

        /**
         * Returns the value of the specified parameter as a {@code java.io.Reader}.
         * @param parameterName the parameter name
         * @throws SQLException if a database error occurs
         */
        GetCharacterStreamByName(
            [in] CString parameterName,
            [out] IReader** value);

        /**
         * Sets the named parameter to the given {@code blob}.
         * @throws SQLException if a database error occurs
         */
        SetBlob2(
            [in] String parameterName,
            [in] IBlob* blob);

        /**
         * Sets the named parameter to the given {@code clob}.
         * @throws SQLException if a database error occurs
         */
        SetClob2(
            [in] String parameterName,
            [in] IClob* clob);

        /**
         * Sets the named parameter to the next {@code length} characters from the given {@code reader}.
         * @throws SQLException if a database error occurs
         */
        SetCharacterStream2(
            [in] String parameterName,
            [in] IReader* reader,
            [in] Int64 length);

        /**
         * Sets the named parameter to the characters from the given {@code reader}.
         * @throws SQLException if a database error occurs
         */
        SetCharacterStream3(
            [in] String parameterName,
            [in] IReader* reader);

        /**
         * Sets the named parameter to the characters from the given {@code reader}.
         * @throws SQLException if a database error occurs
         */
        SetClob3(
            [in] String parameterName,
            [in] IReader* reader);

        /**
         * Sets the named parameter to the bytes from the given {@code inputStream}.
         * @throws SQLException if a database error occurs
         */
        SetBlob3(
            [in] String parameterName,
            [in] IInputStream* inputStream);
    }
}
