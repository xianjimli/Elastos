
module
{
    interface IStatement;
    interface IResultSet;
    interface IResultSetMetaData;
    interface IInputStream;
    interface IBigDecimal;
    interface IReader;
    interface IClob;
    interface IDate;
    interface ICalendar;
    interface ITime;
    interface ITimestamp;
    interface IURL;
    interface IRowId;
    interface INClob;

    /**
     * An interface for a precompiled SQL Statement.
     * <p>
     * An SQL Statement is put into a {@code PreparedStatement} and is precompiled
     * so that it can be executed efficiently multiple times.
     * <p>
     * Setter methods are supplied in the {@code PreparedStatement} interface for
     * the setting of {@code IN} parameters for the statement. The setter method
     * used for each {@code IN} parameter must match the parameter's type.
     */
    interface IPreparedStatement extends IStatement {
        /**
         * Clear the current parameter values.
         * <p>
         * Typically, parameter values are retained for multiple executions of the
         * {@code Statement}. Setting a parameter value replaces the previous value. This
         * method clears the values for all parameters, releasing all resources used
         * by those parameters.
         *
         * @throws SQLException
         *             if a database error happens.
         */
        ClearParameters();

        /**
         * Returns a {@code ResultSetMetaData} describing the {@code
         * ResultSet} that would be produced by execution of the {@code PreparedStatement}.
         * <p>
         * It is possible to know the metadata for the {@code ResultSet} without
         * executing the {@code PreparedStatement}, because the {@code
         * PreparedStatement} is precompiled. As a result the metadata can be
         * queried ahead of time without actually executing the statement.
         *
         * @return a {@code ResultSetMetaData} object with the information about the
         *         columns of the {@code ResultSet}, if the driver can return a
         *         {@code ResultSetMetaData}. {@code null} otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        GetMetaData(
            [out] IResultSetMetaData** resultSetMetaData);

        /**
         * Gets information about the parameters of the {@code PreparedStatement}.
         *
         * @return a {@code ParameterMetaData} object which holds information about
         *         the number, type, and properties of the parameters of this {@code
         *         PreparedStatement}.
         * @throws SQLException
         *             if a database error happens.
         */
        GetParameterMetaData(
            [out] IParameterMetaData** parameterMetaData);

        /**
         * Sets the value of a specified parameter to the supplied {@code Array}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theArray
         *            a {@code java.sql.Array} giving the new value of the parameter at {@code
         *            parameterIndex}.
         * @throws SQLException
         *             if a database error happens.
         * @see Array
         */
        SetArray(
            [in] Int32 parameterIndex,
            [in] IArray* theArray);

        /**
         * Sets the value of a specified parameter to the content of a supplied
         * {@code InputStream}, which has a specified number of bytes.
         * <p>
         * This is a good method for setting an SQL {@code LONGVARCHAR} parameter
         * where the length of the data is large. Data is read from the {@code
         * InputStream} until end-of-file is reached or the specified number of
         * bytes is copied.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theInputStream
         *            the ASCII {@code InputStream} carrying the data to which the
         *            parameter at {@code parameterIndex} is set.
         * @param length
         *            the number of bytes in the {@code InputStream} to copy to the
         *            parameter.
         * @throws SQLException
         *             if a database error happens.
         */
        SetAsciiStream(
            [in] Int32 parameterIndex,
            [in] IInputStream* theInputStream,
            [in] Int32 length);

        /**
         * Sets the value of a specified parameter to a supplied {@code
         * java.math.BigDecimal} value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theBigDecimal
         *            the value to which the parameter at {@code parameterIndex} is
         *            set.
         * @throws SQLException
         *             if a database error happens.
         * @see java.math.BigDecimal
         */
        SetBigDecimal(
            [in] Int32 parameterIndex,
            [in] IBigDecimal* theBigDecimal);

        /**
         * Sets the value of a specified parameter to the content of a supplied
         * binary {@code InputStream}, which has a specified number of bytes.
         * <p>
         * Use this method when a large amount of data needs to be set into a
         * {@code LONGVARBINARY} parameter.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theInputStream
         *            the binary {@code InputStream} carrying the data to update the
         *            parameter.
         * @param length
         *            the number of bytes in the {@code InputStream} to copy to the
         *            parameter.
         * @throws SQLException
         *             if a database error happens.
         */
        SetBinaryStream(
            [in] Int32 parameterIndex,
            [in] IInputStream* theInputStream,
            [in] Int32 length);

        /**
         * Sets the value of a specified parameter to the given {@code Blob} object.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theBlob
         *            the {@code java.sql.Blob} to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         * @see Blob
         */
        SetBlob(
            [in] Int32 parameterIndex,
            [in] IBlob* theBlob);

        /**
         * Sets the value of a specified parameter to a supplied {@code boolean}
         * value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theBoolean
         *            the boolean value to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetBoolean(
            [in] Int32 parameterIndex,
            [in] Boolean theBoolean);

        /**
         * Sets the value of a specified parameter to a supplied {@code byte} value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theByte
         *            the byte value to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetByte(
            [in] Int32 parameterIndex,
            [in] Byte theByte);

        /**
         * Sets the value of a specified parameter to a supplied array of bytes. The
         * array is mapped to a {@code VARBINARY} or {@code LONGVARBINARY} in the
         * database.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theBytes
         *            the array of bytes to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetBytes(
            [in] Int32 parameterIndex,
            [in] ArrayOf<Byte> theBytes);

        /**
         * Sets the value of a specified parameter to the character content of a
         * {@code Reader} object, with the specified length of character data.
         * <p>
         * Data is read from the {@code
         * Reader} until end-of-file is reached or the specified number of
         * characters are copied.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1
         * @param reader
         *            the {@code java.io.Reader} containing the character data.
         * @param length
         *            the number of characters to be read.
         * @throws SQLException
         *             if a database error happens.
         */
        SetCharacterStream(
            [in] Int32 parameterIndex,
            [in] IReader* reader,
            [in] Int32 length);

        /**
         * Sets the value of a specified parameter to the given {@code Clob} object.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theClob
         *            a {@code java.sql.Clob} holding the data to which the
         *            parameter at {@code parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetClob(
            [in] Int32 parameterIndex,
            [in] IClob* theClob);

        /**
         * Sets the value of a specified parameter to a supplied {@code
         * java.sql.Date} value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theDate
         *            a {@code java.sql.Date} to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetDate(
            [in] Int32 parameterIndex,
            [in] IDate* theDate);

        /**
         * Sets the value of a specified parameter to a supplied {@code
         * java.sql.Date} value, using a supplied {@code Calendar} to map the Date.
         * The {@code Calendar} allows the application to control the timezone used
         * to compute the SQL {@code DATE} in the database - without the supplied
         * {@code Calendar}, the driver uses the default timezone of the Java
         * virtual machine.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theDate
         *            a {@code java.sql.Date} to which the parameter at {@code
         *            parameterIndex} is set.
         * @param cal
         *            a {@code Calendar} to use to construct the SQL {@code DATE}
         *            value.
         * @throws SQLException
         *             if a database error happens.
         * @see Date
         * @see java.util.Calendar
         */
        SetDate2(
            [in] Int32 parameterIndex,
            [in] IDate* theDate,
            [in] ICalendar* cal);

        /**
         * Sets the value of a specified parameter to a supplied {@code double}
         * value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theDouble
         *            the {@code double} value to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetDouble(
            [in] Int32 parameterIndex,
            [in] Double theDouble);

        /**
         * Sets the value of a specified parameter to to a supplied {@code float}
         * value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theFloat
         *            the {@code float} value to update the parameter.
         * @throws SQLException
         *             if a database error happens.
         */
        SetFloat(
            [in] Int32 parameterIndex,
            [in] Float theFloat);

        /**
         * Sets the value of a specified parameter to a supplied {@code int} value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theInt
         *            the {@code int} value to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetInt32(
            [in] Int32 parameterIndex,
            [in] Int32 theInt32);

        /**
         * Sets the value of a specified parameter to a supplied {@code long} value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theLong
         *            the {@code long} value to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetInt64(
            [in] Int32 parameterIndex,
            [in] Int64 theInt64);

        /**
         * Sets the value of a specified parameter to SQL {@code NULL}. Don't use
         * this version of {@code setNull} for <i>User Defined Types</i> (UDT) or
         * for REF type parameters.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param sqlType
         *            the SQL type of the parameter, as defined in {@code
         *            java.sql.Types}.
         * @throws SQLException
         *             if a database error happens.
         */
        SetNull(
            [in] Int32 parameterIndex,
            [in] Int32 sqlType);

        /**
         * Sets the value of a specified parameter to SQL {@code NULL}. This version
         * of {@code setNull} should be used for <i>User Defined Types</i> (UDTs)
         * and also REF types. UDTs can be {@code STRUCT}, {@code DISTINCT}, {@code
         * JAVA_OBJECT} and named array types.
         * <p>
         * Applications must provide the SQL type code and also a fully qualified
         * SQL type name when supplying a {@code NULL} UDT or REF. For a UDT, the
         * type name is the type name of the parameter itself, but for a REF
         * parameter the type name is the type name of the referenced type.
         *
         * @param paramIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param sqlType
         *            the SQL type of the parameter, as defined in {@code
         *            java.sql.Types}.
         * @param typeName
         *            the fully qualified name of a UDT or REF type - ignored if the
         *            parameter is not a UDT.
         * @throws SQLException
         *             if a database error happens.
         * @see Types
         */
        SetNullEx(
            [in] Int32 paramIndex,
            [in] Int32 sqlType,
            [in] String typeName);

        /**
         * Sets the value of a specified parameter using a supplied object.
         * <p>
         * There is a standard mapping from Java types to SQL types, defined in the
         * JDBC specification. The passed object is then transformed into the
         * appropriate SQL type, and then transferred to the database. {@code
         * setObject} can be used to pass abstract data types unique to the
         * database, by using a JDBC driver specific Java type. If the object's
         * class implements the interface {@code SQLData}, the JDBC driver calls
         * {@code SQLData.writeSQL} to write it to the SQL data stream. If the
         * object's class implements {@code Ref}, {@code Blob}, {@code Clob},
         * {@code Struct}, or {@code Array}, the driver passes it to the database as
         * a value of the corresponding SQL type.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theObject
         *            the object containing the value to which the parameter at
         *            {@code parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetObject(
            [in] Int32 parameterIndex,
            [in] IInterface* theObject);

        /**
         * Sets the value of a specified parameter using a supplied object.
         * <p>
         * The object is converted to the given {@code targetSqlType} before it is
         * sent to the database. If the object has a custom mapping (its class
         * implements the interface {@code SQLData}), the JDBC driver will call the method
         * {@code SQLData.writeSQL} to write it to the SQL data stream. If the
         * object's class implements {@code Ref}, {@code Blob}, {@code Clob},
         * {@code Struct}, or {@code Array}, the driver will pass it to the database
         * in the form of the relevant SQL type.
         *
         * @param parameterIndex
         *            the parameter index, where the first parameter has index 1.
         * @param theObject
         *            the Object containing the value to which the parameter at
         *            {@code parameterIndex} is set.
         * @param targetSqlType
         *            the SQL type to send to the database, as defined in {@code
         *            java.sql.Types}.
         * @throws SQLException
         *             if a database error happens.
         */
        SetObjectEx(
            [in] Int32 parameterIndex,
            [in] IInterface* theObject,
            [in] Int32 targetSqlType);

        /**
         * Sets the value of a specified parameter using a supplied object.
         * <p>
         * The object is converted to the given {@code targetSqlType} before it is
         * sent to the database. If the object has a custom mapping (its class
         * implements the interface {@code SQLData}), the JDBC driver will call the method
         * {@code SQLData.writeSQL} to write it to the SQL data stream. If the
         * object's class implements {@code Ref}, {@code Blob}, {@code Clob},
         * {@code Struct}, or {@code Array}, the driver will pass it to the database
         * in the form of the relevant SQL type.
         *
         * @param parameterIndex
         *            the parameter index, where the first parameter has index 1.
         * @param theObject
         *            the Object containing the value to which the parameter at
         *            {@code parameterIndex} is set.
         * @param targetSqlType
         *            the SQL type to send to the database, as defined in {@code
         *            java.sql.Types}.
         * @param scale
         *            the number of digits after the decimal point - only applies to
         *            the types {@code java.sql.Types.DECIMAL} and {@code
         *            java.sql.Types.NUMERIC} - ignored for all other types.
         * @throws SQLException
         *             if a database error happens.
         */
        SetObjectEx2(
            [in] Int32 parameterIndex,
            [in] IInterface* theObject,
            [in] Int32 targetSqlType,
            [in] Int32 scale);

        /**
         * Sets the value of a specified parameter to a supplied {@code
         * REF(<structured-type>)} value. This is stored as an SQL {@code REF}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theRef
         *            a {@code java.sql.Ref} value to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         * @see Ref
         */
        SetRef(
            [in] Int32 parameterIndex,
            [in] IRef* theRef);

        /**
         * Sets the value of a specified parameter to a supplied {@code short}
         * value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theShort
         *            a {@code short} value to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetInt16(
            [in] Int32 parameterIndex,
            [in] Int16 theInt16);

        /**
         * Sets the value of a specified parameter to a supplied string.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theString
         *            the value to which the parameter at {@code parameterIndex} is
         *            set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetString(
            [in] Int32 parameterIndex,
            [in] String theString);

        /**
         * Sets the value of a specified parameter to a supplied {@code
         * java.sql.Time} value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theTime
         *            a {@code java.sql.Time} value to which the parameter at
         *            {@code parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetTime(
            [in] Int32 parameterIndex,
            [in] ITime* theTime);

        /**
         * Sets the value of a specified parameter to a supplied {@code
         * java.sql.Time} value, using a supplied {@code Calendar}.
         * <p>
         * The driver uses the supplied {@code Calendar} to create the SQL {@code
         * TIME} value, which allows it to use a custom timezone - otherwise the
         * driver uses the default timezone of the Java virtual machine.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theTime
         *            a {@code java.sql.Time} value to which the parameter at
         *            {@code parameterIndex} is set.
         * @param cal
         *            a {@code Calendar} to use to construct the SQL {@code TIME}
         *            value.
         * @throws SQLException
         *             if a database error happens.
         * @see Time
         * @see java.util.Calendar
         */
        SetTimeEx(
            [in] Int32 parameterIndex,
            [in] ITime* theTime,
            [in] ICalendar* cal);

        /**
         * Sets the value of a specified parameter to a supplied java.sql.Timestamp
         * value.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theTimestamp
         *            the java.sql.Timestamp value to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         */
        SetTimestamp(
            [in] Int32 parameterIndex,
            [in] ITimestamp* theTimestamp);

        /**
         * Sets the value of a specified parameter to a supplied {@code
         * java.sql.Timestamp} value, using the supplied {@code Calendar}.
         * <p>
         * The driver uses the supplied {@code Calendar} to create the SQL {@code
         * TIMESTAMP} value, which allows it to use a custom timezone - otherwise
         * the driver uses the default timezone of the Java virtual machine.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theTimestamp
         *            the {@code java.sql.Timestamp} value to which the parameter at
         *            {@code parameterIndex} is set.
         * @param cal
         *            a {@code Calendar} to use to construct the SQL {@code
         *            TIMESTAMP} value
         * @throws SQLException
         *             if a database error happens.
         * @see Timestamp
         * @see java.util.Calendar
         */
        SetTimestampEx(
            [in] Int32 parameterIndex,
            [in] ITimestamp* theTimestamp,
            [in] ICalendar* cal);

        /**
         * Sets the value of a specified parameter to the characters from a supplied
         * {@code InputStream}, with a specified number of bytes.
         *
         * @deprecated Use {@link #setCharacterStream(int, Reader, int)}
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theInputStream
         *            the {@code InputStream} with the character data to which the
         *            parameter at {@code parameterIndex} is set.
         * @param length
         *            the number of bytes to read from the {@code InputStream}.
         * @throws SQLException
         *             if a database error happens.
         */
        //@Deprecated
        SetUnicodeStream(
            [in] Int32 parameterIndex,
            [in] IInputStream* theInputStream,
            [in] Int32 length);

        /**
         * Sets the value of a specified parameter to a supplied {@code
         * java.net.URL}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theURL
         *            the {@code URL} to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException
         *             if a database error happens.
         * @see URL
         */
        SetURL(
            [in] Int32 parameterIndex,
            [in] IURL* theURL);

        /**
         * Sets the value of a specified parameter to a supplied {@code
         * java.sql.RowId}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theRowId
         *            the {@code RowId} to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException if a database error happens.
         */
        SetRowId(
            [in] Int32 parameterIndex,
            [in] IRowId* theRowId);

        /**
         * Sets the value of a specified parameter to a supplied string.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param theString
         *            the {@code String} to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException if a database error happens.
         */
        SetNString(
            [in] Int32 parameterIndex,
            [in] String theString);

        /**
         * Sets the value of the specified parameter to the next {@code length} characters
         * from {@code reader}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param reader the {@code Reader}
         * @param length character count
         * @throws SQLException if a database error happens.
         */
        SetNCharacterStream(
            [in] Int32 parameterIndex,
            [in] IReader* reader,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter to {@code value}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param value
         *            the {@code NClob} to which the parameter at {@code
         *            parameterIndex} is set.
         * @throws SQLException if a database error happens.
         */
        SetNClob(
            [in] Int32 parameterIndex,
            [in] INClob* value);

        /**
         * Sets the value of the specified parameter to the next {@code length} characters
         * from {@code reader}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param reader the {@code Reader}
         * @param length character count
         * @throws SQLException if a database error happens.
         */
        SetClobEx(
            [in] Int32 parameterIndex,
            [in] IReader* reader,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter to the next {@code length} bytes
         * from {@code inputStream}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param inputStream the {@code InputStream}
         * @param length character count
         * @throws SQLException if a database error happens.
         */
        SetBlobEx(
            [in] Int32 parameterIndex,
            [in] IInputStream* inputStream,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter to the next {@code length} characters
         * from {@code reader}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param reader the {@code Reader}
         * @param length character count
         * @throws SQLException if a database error happens.
         */
        SetNClobEx(
            [in] Int32 parameterIndex,
            [in] IReader* reader,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter to the value of {@code xmlObject}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param xmlObject the {@code SQLXML}
         * @throws SQLException if a database error happens.
         */
        SetSQLXML(
            [in] Int32 parameterIndex,
            [in] ISQLXML* xmlObject);

        /**
         * Sets the value of the specified parameter to the next {@code length} bytes
         * from {@code inputStream}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param inputStream the {@code InputStream}
         * @param length character count
         * @throws SQLException if a database error happens.
         */
        SetAsciiStreamEx(
            [in] Int32 parameterIndex,
            [in] IInputStream* inputStream,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter to the next {@code length} bytes
         * from {@code inputStream}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param inputStream the {@code InputStream}
         * @param length character count
         * @throws SQLException if a database error happens.
         */
        SetBinaryStreamEx(
            [in] Int32 parameterIndex,
            [in] IInputStream* inputStream,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter to the next {@code length} characters
         * from {@code reader}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param reader the {@code Reader}
         * @param length character count
         * @throws SQLException if a database error happens.
         */
        SetCharacterStreamEx(
            [in] Int32 parameterIndex,
            [in] IReader* reader,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter to the bytes
         * from {@code inputStream}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param inputStream the {@code InputStream}
         * @throws SQLException if a database error happens.
         */
        SetAsciiStreamEx2(
            [in] Int32 parameterIndex,
            [in] IInputStream* inputStream);

        /**
         * Sets the value of the specified parameter to the bytes
         * from {@code inputStream}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param inputStream the {@code InputStream}
         * @throws SQLException if a database error happens.
         */
        SetBinaryStreamEx2(
            [in] Int32 parameterIndex,
            [in] IInputStream* inputStream);

        /**
         * Sets the value of the specified parameter to the characters
         * from {@code reader}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param reader the {@code Reader}
         * @throws SQLException if a database error happens.
         */
        SetCharacterStreamEx2(
            [in] Int32 parameterIndex,
            [in] IReader* reader);

        /**
         * Sets the value of the specified parameter to the characters
         * from {@code reader}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param reader the {@code Reader}
         * @throws SQLException if a database error happens.
         */
        SetNCharacterStreamEx(
            [in] Int32 parameterIndex,
            [in] IReader* reader);

        /**
         * Sets the value of the specified parameter to the characters
         * from {@code reader}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param reader the {@code Reader}
         * @throws SQLException if a database error happens.
         */
        SetClobEx2(
            [in] Int32 parameterIndex,
            [in] IReader* reader);

        /**
         * Sets the value of the specified parameter to the bytes
         * from {@code inputStream}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param inputStream the {@code InputStream}
         * @throws SQLException if a database error happens.
         */
        SetBlobEx2(
            [in] Int32 parameterIndex,
            [in] IInputStream* inputStream);

        /**
         * Sets the value of the specified parameter to the characters
         * from {@code reader}.
         *
         * @param parameterIndex
         *            the parameter number index, where the first parameter has
         *            index 1.
         * @param reader the {@code Reader}
         * @throws SQLException if a database error happens.
         */
        SetNClobEx2(
            [in] Int32 parameterIndex,
            [in] IReader* reader);
    }
}
