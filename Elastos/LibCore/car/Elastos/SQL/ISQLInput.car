
module
{
    interface IBigDecimal;
    interface IDate;
    interface ITime;
    interface ITimestamp;
    interface IReader;
    interface IInputStream;
    interface IRef;
    interface IBlob;
    interface IClob;
    interface IArray;
    interface IURL;
    interface INClob;
    interface ISQLXML;
    interface IRowId;

    /**
     * The {@code SQLInput} interface defines operations which apply to a type of
     * input stream which carries a series of values representing an instance of
     * an SQL structured type or SQL distinct type.
     * <p>
     * This interface is used to define custom mappings of SQL <i>User Defined
     * Types</i> (UDTs) to Java classes. It is used by JDBC drivers, therefore
     * application programmers do not normally use the {@code SQLInput} methods
     * directly. Reader methods such as {@code readLong} and {@code readBytes}
     * provide means to read values from an {@code SQLInput} stream.
     * <p>
     * When the {@code getObject} method is called with an object which implements
     * the {@code SQLData} interface, the JDBC driver determines the SQL type of the
     * UDT being mapped by calling the {@code SQLData.getSQLType} method. The driver
     * creates an instance of an {@code SQLInput} stream, filling the stream with
     * the attributes of the UDT. The {@code SQLInput} stream is passed to the
     * {@code SQLData.readSQL} method which then calls the {@code SQLInput} reader
     * methods to read the attributes.
     *
     * @see SQLData
     */

    interface ISQLInput {

        /**
         * Returns the next attribute in the stream in the form of a {@code String}.
         *
         * @return the next attribute. {@code null} if the value is SQL {@code NULL}.
         *
         * @throws SQLException
         *             if there is a database error.
         */
        ReadString(
            [out] String* attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code boolean}
         * .
         *
         * @return the next attribute as a {@code boolean}. {@code false} if the
         *         value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadBoolean(
            [out] Boolean* attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code byte}.
         *
         * @return the next attribute as a {@code byte}. 0 if the value is SQL
         *         {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadByte(
            [out] Byte* attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code short}.
         *
         * @return the next attribute as a {@code short}. 0 if the value is SQL
         *         {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadInt16(
            [out] Int16* attribute);

        /**
         * Returns the next attribute in the stream in the form of an {@code int}.
         *
         * @return the next attribute as an {@code int}. 0 if the value is SQL
         *         {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadInt32(
            [out] Int32* attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code long}.
         *
         * @return the next attribute as a {@code long}. 0 if the value is SQL
         *         {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadInt64(
            [out] Int64* attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code float}.
         *
         * @return the next attribute as a {@code float}. 0 if the value is SQL
         *         {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadFloat(
            [out] Float* attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code double}.
         *
         * @return the next attribute as a {@code double}. 0 if the value is SQL
         *         {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadDouble(
            [out] Double* attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.math.BigDecimal}.
         *
         * @return the attribute as a {@code java.math.BigDecimal}. {@code null} if
         *         the read returns SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see java.math.BigDecimal
         */
        ReadBigDecimal(
            [out] IBigDecimal** attribute);

        /**
         * Returns the next attribute in the stream in the form of a byte array.
         *
         * @return the attribute as a byte array. {@code null} if the read returns
         *         SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadBytes(
            [out, callee] ArrayOf<Byte>* attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.sql.Date}.
         *
         * @return the next attribute as a {@code java.sql.Date}. {@code null} if
         *         the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see Date
         */
        ReadDate(
            [out] IDate** attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.sql.Time}.
         *
         * @return the attribute as a {@code java.sql.Time}. {@code null} if the
         *         read returns SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see Time
         */
        ReadTime(
            [out] ITime** attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.sql.Timestamp}.
         *
         * @return the attribute as a {@code java.sql.Timestamp}. {@code null} if
         *         the read returns SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see Timestamp
         */
        ReadTimestamp(
            [out] ITimestamp** attribute);

        /**
         * Returns the next attribute in the stream in the form of a Unicode
         * character stream embodied as a {@code java.io.Reader}.
         *
         * @return the next attribute as a {@code java.io.Reader}. {@code null} if
         *         the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see java.io.Reader
         */
        ReadCharacterStream(
            [out] IReader** attribute);

        /**
         * Returns the next attribute in the stream in the form of an ASCII
         * character stream embodied as a {@code java.io.InputStream}.
         *
         * @return the next attribute as a {@code java.io.InputStream}. {@code null}
         *         if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see java.io.InputStream
         */
        ReadAsciiStream(
            [out] IInputStream** attribute);

        /**
         * Returns the next attribute in the stream in the form of a stream of bytes
         * embodied as a {@code java.io.InputStream}.
         *
         * @return the next attribute as a {@code java.io.InputStream}. {@code null}
         *         if the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see java.io.InputStream
         */
        ReadBinaryStream(
            [out] IInputStream** attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.lang.Object}.
         * <p>
         * The type of the {@code Object} returned is determined by the type mapping
         * for this JDBC driver, including any customized mappings, if present. A
         * type map is given to the {@code SQLInput} by the JDBC driver before the
         * {@code SQLInput} is given to the application.
         * <p>
         * If the attribute is an SQL structured or distinct type, its SQL type is
         * determined. If the stream's type map contains an element for that SQL
         * type, the driver creates an object for the relevant type and invokes the
         * method {@code SQLData.readSQL} on it, which reads supplementary data from
         * the stream using whichever protocol is defined for that method.
         *
         * @return the next attribute as an Object. {@code null} if the value is SQL
         *         {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadObject(
            [out] IInterface** attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.sql.Ref}.
         *
         * @return the next attribute as a {@code java.sql.Ref}. {@code null} if the
         *         value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see Ref
         */
        ReadRef(
            [out] IRef** attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.sql.Blob}.
         *
         * @return the next attribute as a {@code java.sql.Blob}. {@code null} if
         *         the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadBlob(
            [out] IBlob** attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.sql.Clob}.
         *
         * @return the next attribute as a {@code java.sql.Clob}. {@code null} if
         *         the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see Clob
         */
        ReadClob(
            [out] IClob** attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.sql.Array}.
         *
         * @return the next attribute as an {@code Array}. {@code null} if the value
         *         is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see Array
         */
        ReadArray(
            [out] IArray** attribute);

        /**
         * Reports whether the last value read was SQL {@code NULL}.
         *
         * @return {@code true} if the last value read was SQL {@code NULL}, {@code
         *         false} otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        WasNull(
            [out] Boolean* wasNull);

        /**
         * Reads the next attribute in the stream (SQL DATALINK value) and returns
         * it as a {@code java.net.URL} object.
         *
         * @return the next attribute as a {@code java.net.URL}. {@code null} if the
         *         value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         * @see java.net.URL
         */
        ReadURL(
            [out] IURL** attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.sql.NClob}.
         *
         * @return the next attribute as a {@code java.sql.NClob}. {@code null} if
         *         the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadNClob(
            [out] INClob** attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.lang.String}. Used for the NCHAR, NVARCHAR and LONGNVARCHAR types.
         * See {@link #readString} otherwise.
         *
         * @return the next attribute as a {@code java.lang.String}. {@code null} if
         *         the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadNString(
            [out] String* attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.sql.SQLXML}.
         *
         * @return the next attribute as a {@code java.sql.SQLXML}. {@code null} if
         *         the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadSQLXML(
            [out] ISQLXML** attribute);

        /**
         * Returns the next attribute in the stream in the form of a {@code
         * java.sql.RowId}. Used for the ROWID type.
         *
         * @return the next attribute as a {@code java.sql.RowId}. {@code null} if
         *         the value is SQL {@code NULL}.
         * @throws SQLException
         *             if there is a database error.
         */
        ReadRowId(
            [out] IRowId** attribute);
    }

}
