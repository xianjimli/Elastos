
module
{
    interface IDate;

    interface ITimestamp extends IDate {
        /**
         * Compares this {@code Timestamp} object with a supplied {@code Timestamp}
         * object.
         *
         * @param theTimestamp
         *            the timestamp to compare with this {@code Timestamp} object,
         *            passed in as a {@code Timestamp}.
         * @return one of the following:
         *         <ul>
         *         <li>{@code 0}, if the two {@code Timestamp} objects are
         *         equal in time</li>
         *         <li>{@code < 0}, if this {@code Timestamp} object is before the
         *         supplied {@code Timestamp}</li>
         *         <li> {@code > 0}, if this {@code Timestamp} object is after the
         *         supplied {@code Timestamp}</li>
         *         </ul>
         */
        CompareTo(
            [in] ITimestamp* theTimestamp,
            [out] Int32* result);

        /**
         * Tests to see if this timestamp is equal to a supplied timestamp.
         *
         * @param theTimestamp
         *            the timestamp to compare with this {@code Timestamp} object,
         *            passed as an {@code Object}.
         * @return {@code true} if this {@code Timestamp} object is equal to the
         *         supplied {@code Timestamp} object, {@code false} otherwise.
         */
        Equals(
            [in] ITimestamp* theTimestamp,
            [out] Boolean* isEqual);

        /**
         * Gets this {@code Timestamp}'s nanosecond value
         *
         * @return The timestamp's nanosecond value, an integer between 0 and
         *         999,999,999.
         */
        GetNanos(
            [out] Int32* nanos);

        /**
         * Sets the nanosecond value for this {@code Timestamp}.
         *
         * @param n
         *            number of nanoseconds.
         * @throws IllegalArgumentException
         *             if number of nanoseconds smaller than 0 or greater than
         *             999,999,999.
         */
        SetNanos(
            [in] Int32 n);
    }
}
