
module
{
    interface IWrapper;


    /**
     * Provides information about the columns returned in a {@code ResultSet}.
     */

    /**
     * Indicates that a column cannot contain {@code NULL} values.
     */
    const IResultSetMetaData_ColumnNoNulls = 0;

    /**
     * Indicates that a column can contain {@code NULL} values.
     */
    const IResultSetMetaData_ColumnNullable = 1;

    /**
     * Indicates that it is unknown whether a column can contain {@code NULL}s or not.
     */
    const IResultSetMetaData_ColumnNullableUnknown = 2;


    interface IResultSetMetaData extends IWrapper {

        /**
         * Returns the title of an indexed column's catalog.
         *
         * @param column
         *            the column index, starting at 1.
         * @return the catalog title.
         * @throws SQLException
         *             if there is a database error.
         */
        GetCatalogName(
            [in] Int32 column,
            [out] String* catalog);

        /**
         * Returns the fully-qualified type of the class that is produced when
         * invoking {@code ResultSet.getObject} to recover this column's value.
         *
         * @param column
         *            the column index, starting at 1.
         * @return the fully-qualified class name.
         * @throws SQLException
         *             if there is a database error.
         * @see ResultSet#getObject
         */
        GetColumnClassName(
            [in] Int32 column,
            [out] String* columnClass);

        /**
         * Returns number of columns contained in the associated result set.
         *
         * @return the column count.
         * @throws SQLException
         *             if there is a database error.
         */
        GetColumnCount(
            [out] Int32* count);

        /**
         * Returns the indexed column's standard maximum width, expressed in number
         * of characters.
         *
         * @param column
         *            the column index, starting at 1.
         * @return the column's max width.
         * @throws SQLException
         *             if there is a database error.
         */
        GetColumnDisplaySize(
            [in] Int32 column,
            [out] Int32* size);

        /**
         * Returns a recommended title for the indexed column, to be used when the
         * title needs to be displayed.
         *
         * @param column
         *            the column index, starting at 1.
         * @return the column's title.
         * @throws SQLException
         *             if there is a database error.
         */
        GetColumnLabel(
            [in] Int32 column,
            [out] String* label);

        /**
         * Returns the title of the indexed column.
         *
         * @param column
         *            the column index, starting at 1.
         * @return the column title.
         * @throws SQLException
         *             if there is a database error.
         */
        GetColumnName(
            [in] Int32 column,
            [out] String* name);

        /**
         * Returns the type of the indexed column as SQL type code.
         *
         * @param column
         *            the column index, starting at 1.
         * @return the column type code.
         * @throws SQLException
         *             if there is a database error.
         * @see Types
         */
        GetColumnType(
            [in] Int32 column,
            [out] Int32* type);

        /**
         * Returns the type name of the indexed column.
         *
         * @param column
         *            the column index, starting at 1.
         * @return the type name.
         * @throws SQLException
         *             if there is a database error.
         */
        GetColumnTypeName(
            [in] Int32 column,
            [out] String* type);

        /**
         * Returns the decimal precision of the indexed column.
         *
         * @param column
         *            the column index, starting at 1.
         * @return the precision.
         * @throws SQLException
         *             if there is a database error.
         */
        GetPrecision(
            [in] Int32 column,
            [out] Int32* precision);

        /**
         * Returns the number of digits to the right of the decimal point of the
         * indexed column.
         *
         * @param column
         *            the column index, starting at 1.
         * @return number of decimal places.
         * @throws SQLException
         *             if there is a database error.
         */
        GetScale(
            [in] Int32 column,
            [out] Int32* scale);

        /**
         * Returns the name of the indexed columns schema.
         *
         * @param column
         *            the column index, starting at 1.
         * @return the name of the columns schema.
         * @throws SQLException
         *             if there is a database error.
         */
        GetSchemaName(
            [in] Int32 column,
            [out] String* schema);

        /**
         * Returns the title of the indexed columns table.
         *
         * @param column
         *            the column index, starting at 1.
         * @return the table title.
         * @throws SQLException
         *             if there is a database error.
         */
        GetTableName(
            [in] Int32 column,
            [out] String* name);

        /**
         * Returns an indication of whether the indexed column is automatically
         * incremented and is therefore read-only.
         *
         * @param column
         *            the column index, starting at 1.
         * @return {@code true} if it is automatically numbered, {@code false}
         *         otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        IsAutoIncrement(
            [in] Int32 column,
            [out] Boolean* isAutoIncrement);

        /**
         * Returns an indication of whether the case of the indexed column is
         * important.
         *
         * @param column
         *            the column index, starting at 1.
         * @return {@code true} if case matters, {@code false} otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        IsCaseSensitive(
            [in] Int32 column,
            [out] Boolean* isCaseSensitive);

        /**
         * Returns whether the indexed column contains a monetary amount.
         *
         * @param column
         *            the column index, starting at 1.
         * @return {@code true} if it is a monetary value, {@code false} otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        IsCurrency(
            [in] Int32 column,
            [out] Boolean* isCurrency);

        /**
         * Returns an indication of whether writing to the indexed column is
         * guaranteed to be successful.
         *
         * @param column
         *            the column index, starting at 1.
         * @return {@code true} if the write is guaranteed, {@code false} otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        IsDefinitelyWritable(
            [in] Int32 column,
            [out] Boolean* isDefinitelyWritable);

        /**
         * Returns whether the indexed column is nullable.
         *
         * @param column
         *            the column index, starting at 1.
         * @return {@code true} if it is nullable, {@code false} otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        IsNullable(
            [in] Int32 column,
            [out] Boolean* isNullable);

        /**
         * Returns an indication of whether writing to the indexed column is
         * guaranteed to be unsuccessful.
         *
         * @param column
         *            the column index, starting at 1.
         * @return {@code true} if the column is read-only, {@code false} otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        IsReadOnly(
            [in] Int32 column,
            [out] Boolean* isReadOnly);

        /**
         * Returns an indication of whether the indexed column is searchable.
         *
         * @param column
         *            the column index, starting at 1.
         * @return {@code true} if the indexed column is searchable, {@code false}
         *         otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        IsSearchable(
            [in] Int32 column,
            [out] Boolean* isSearchable);

        /**
         * Returns an indication of whether the values contained in the indexed
         * column are signed.
         *
         * @param column
         *            the column index, starting at 1.
         * @return {@code true} if they are signed, {@code false} otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        IsSigned(
            [in] Int32 column,
            [out] Boolean* isSigned);

        /**
         * Returns an indication of whether writing to the indexed column is
         * possible.
         *
         * @param column
         *            the column index, starting at 1.
         * @return {@code true} if it is possible to write, {@code false} otherwise.
         * @throws SQLException
         *             if there is a database error.
         */
        IsWritable(
            [in] Int32 column,
            [out] Boolean* isWritable);
    }
}
