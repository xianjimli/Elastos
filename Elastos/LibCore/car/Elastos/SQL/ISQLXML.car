
module
{
    interface IInputStream;
    interface IOutputStream;
    interface IReader;
    interface IWriter;


    /**
     * Maps SQL's XML type into Java.
     */
    interface ISQLXML {
        /**
         * Frees any resources held by this object. After {@code free} is called, calling
         * method other than {@code free} will throw {@code SQLException} (calling {@code free}
         * repeatedly will do nothing).
         * @throws SQLException
         */
        Free();

        /**
         * Returns a stream that can be used to read binary data from this SQL {@code XML} object.
         * @throws SQLException if an error occurs accessing the data
         */
        GetBinaryStream(
            [out] IInputStream** stream);

        /**
         * Returns a stream that can be used to write binary data to this SQL {@code XML} object.
         * @throws SQLException if an error occurs accessing the data
         */
        SetBinaryStream(
            [out] IOutputStream** stream);

        /**
         * Returns a reader that can be used to read character data from this SQL {@code XML} object.
         * @throws SQLException if an error occurs accessing the data
         */
        GetCharacterStream(
            [out] IReader** reader);

        /**
         * Returns a writer that can be used to write character data to this SQL {@code XML} object.
         * @throws SQLException if an error occurs accessing the data
         */
        SetCharacterStream(
            [out] IWriter** writer);

        /**
         * Returns this object's data as an XML string.
         * @throws SQLException if an error occurs accessing the data
         */
        GetString(
            [out] String* value);

        /**
         * Sets this object's data to the given XML string.
         * @throws SQLException if an error occurs accessing the data
         */
        SetString(
            [in] CString value);

//        /**
//         * Returns a {@link Source} for reading this object's data.
//         * @throws SQLException if an error occurs accessing the data
//         */
//        <T extends Source> T getSource(Class<T> sourceClass) throws SQLException;
//
//        /**
//         * Returns a {@link Result} for writing this object's data.
//         * @throws SQLException if an error occurs accessing the data
//         */
//        <T extends Result> T setResult(Class<T> resultClass) throws SQLException;
    }
}
