
module
{
    interface IStringEncoder {
        /**
         * Encodes the given byte array into a string that can be used by
         * the SQLite database. The database cannot handle null (0x00) and
         * the character '\'' (0x27). The encoding consists of escaping
         * these characters with a reserved character (0x01). The escaping
         * is applied after determining and applying a shift that minimizes
         * the number of escapes required.
         * With this encoding the data of original size n is increased to a
         * maximum of 1+(n*257)/254.
         * For sufficiently large n the overhead is thus less than 1.2%.
         * @param a the byte array to be encoded. A null reference is handled as
         *     an empty array.
         * @return the encoded bytes as a string. When an empty array is
         *     provided a string of length 1 is returned, the value of
         *     which is bogus.
         *     When decoded with this class' <code>decode</code> method
         *     a string of size 1 will return an empty byte array.
         */
        Encode(
            [in] ArrayOf<Byte> a,
            [out] String* str);

        /**
         * Decodes the given string that is assumed to be a valid encoding
         * of a byte array. Typically the given string is generated by
         * this class' <code>encode</code> method.
         * @param s the given string encoding.
         * @return the byte array obtained from the decoding.
         * @throws IllegalArgumentException when the string given is not
         *    a valid encoded string for this encoder.
         */
        Decode(
            [in] String s,
            [out,callee] ArrayOf<Byte>* code);

        /**
         * Encodes the given byte array into SQLite3 blob notation, ie X'..'
         * @param a the byte array to be encoded. A null reference is handled as
         *     an empty array.
         * @return the encoded bytes as a string.
         */
        EncodeX(
            [in] ArrayOf<Byte> a,
            [out] String* str);
    }
}