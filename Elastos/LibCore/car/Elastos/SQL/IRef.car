
module
{
    /**
     * This interface represents an SQL Ref - a data object containing a cursor
     * or pointer to a result table.
     * <p>
     * The data structure identified by an instance of Ref is held in the
     * database, so the data is not necessarily read and converted
     * into a Java object until {@code getObject} is called. However, if
     * the database supports the {@code Ref} type, it is not typically
     * necessary to get the underlying object before using it in a method call -
     * the {@code Ref} object can be used in place of the data structure.
     * <p>
     * A {@code Ref} object is stored into the database using the
     * {@link PreparedStatement#setRef(int, Ref)} method.
     */
    interface IRef {

        /**
         * Gets the fully-qualified SQL name of the SQL structured type that this
         * {@code Ref} references.
         *
         * @return the fully qualified name of the SQL structured type.
         * @throws SQLException
         *             if there is a database error.
         */
        GetBaseTypeName(
            [out] String* typeName);

        /**
         * Gets the SQL structured type instance referenced by this {@code Ref}.
         *
         * @return a Java object whose type is defined by the mapping for the SQL
         *         structured type.
         * @throws SQLException
         *             if there is a database error.
         */
        GetObject(
            [out] IInterface** value);

//        /**
//         * Returns the associated object and uses the relevant mapping to convert it
//         * to a Java type.
//         *
//         * @param map
//         *            the mapping for type conversion.
//         * @return a Java object whose type is defined by the mapping for the SQL
//         *         structured type.
//         * @throws SQLException
//         *             if there is a database error.
//         */
//        public Object getObject(Map<String, Class<?>> map) throws SQLException;

        /**
         * Sets the value of the structured type that this {@code Ref} references to
         * a supplied object.
         *
         * @param value
         *            the {@code Object} representing the new SQL structured type
         *            that this {@code Ref} references.
         * @throws SQLException
         *             if there is a database error.
         */
        SetObject(
            [in] IInterface* value);
    }
}
