module
{
    interface IDataOutput;
    interface IObjectOutput extends IDataOutput {
        /**
         * Closes the target stream. Implementations of this method should free any
         * resources used by the stream.
         *
         * @throws IOException
         *             if an error occurs while closing the target stream.
         */
        Close();

        /**
         * Flushes the target stream. Implementations of this method should ensure
         * that any pending writes are written out to the target stream.
         *
         * @throws IOException
         *             if an error occurs while flushing the target stream.
         */
        Flush();

        /**
         * Writes the entire contents of the byte array {@code buffer} to the output
         * stream. Blocks until all bytes are written.
         *
         * @param buffer
         *            the buffer to write.
         * @throws IOException
         *             if an error occurs while writing to the target stream.
         */
        WriteBuffer(
            [in] BufferOf<Byte> buffer);

        /**
         * Writes {@code count} bytes from the byte array {@code buffer} starting at
         * position {@code offset} to the target stream. Blocks until all bytes are
         * written.
         *
         * @param buffer
         *            the buffer to write.
         * @param offset
         *            the index of the first byte in {@code buffer} to write.
         * @param count
         *            the number of bytes from {@code buffer} to write to the target
         *            stream.
         * @throws IOException
         *             if an error occurs while writing to the target stream.
         */
        WriteBufferEx(
            [in] Int32 offset,
            [in] Int32 count,
            [in] BufferOf<Byte> buffer);

        /**
         * Writes a single byte to the target stream. Only the least significant
         * byte of the integer {@code value} is written to the stream. Blocks until
         * the byte is actually written.
         *
         * @param value
         *            the byte to write.
         * @throws IOException
         *             if an error occurs while writing to the target stream.
         */
        Write(
            [in] Int32 value);

        /**
         * Writes the specified object {@code obj} to the target stream.
         *
         * @param obj
         *            the object to write.
         * @throws IOException
         *             if an error occurs while writing to the target stream.
         */
//        public void writeObject(Object obj) throws IOException;
    }
}