
module
{
    interface ISelectableChannel;

    interface IServerSocketChannel extends ISelectableChannel {
//        /**
//         * Return the server-socket assigned this channel, which does not declare
//         * any public methods that are not declared in {@code ServerSocket}.
//         *
//         * @return the server-socket assigned to this channel.
//         */
//        public abstract ServerSocket socket();

        /**
         * Accepts a connection to this server-socket channel.
         * <p>
         * This method returns {@code null} when this channel is non-blocking and no
         * connection is available, otherwise it blocks until a new connection is
         * available or an I/O error occurs. The socket channel returned by this
         * method will always be in blocking mode.
         * <p>
         * This method just executes the same security checks as the {@code
         * accept()} method of the {@link ServerSocket} class.
         *
         * @return the accepted {@code SocketChannel} instance, or {@code null} if
         *         the channel is non-blocking and no connection is available.
         * @throws AsynchronousCloseException
         *             if this channel is closed by another thread while this method
         *             is in operation.
         * @throws ClosedByInterruptException
         *             if another thread interrupts the calling thread while this
         *             operation is in progress. The interrupt state of the calling
         *             thread is set and the channel is closed.
         * @throws ClosedChannelException
         *             if this channel is closed.
         * @throws IOException
         *             if another I/O error occurs.
         * @throws NotYetBoundException
         *             if the socket has not yet been bound.
         * @throws SecurityException
         *             if there is a security manager and it does not permit to
         *             access the new connection.
         */
        Accept(
            [out] ISocketChannel** channel);
    }
}