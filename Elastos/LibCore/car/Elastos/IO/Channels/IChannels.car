
module
{
	/**
	 * Predeclared interfaces
	*/
	interface IReadableByteChannel;
	interface IWritableByteChannel;
	interface ICharsetDecoder;
	interface ICharsetEncoder;	

	/**
 	 * This interface provides several utilities to get I/O streams from channels.
 	 */
	[deprecated]
	interface IChannels {
    	
		/**
         * Returns an input stream on the given channel. The resulting stream has
         * the following properties:
         * <ul>
         * <li>If the stream is closed, then the underlying channel is closed as
         * well.</li>
         * <li>It is thread safe.</li>
         * <li>It throws an {@link IllegalBlockingModeException} if the channel is
         * in non-blocking mode and {@code read} is called.</li>
         * <li>Neither {@code mark} nor {@code reset} is supported.</li>
         * <li>It is not buffered.</li>
         * </ul>
         *
         * @param channel
         *            the channel to be wrapped by an InputStream.
         * @return an InputStream that takes bytes from the given byte channel.
         */
		NewInputStream(
			[in]  IReadableByteChannel* channel,
			[out] IInputStream** inputStream);

		/**
         * Returns an output stream on the given channel. The resulting stream has
         * the following properties:
         * <ul>
         * <li>If the stream is closed, then the underlying channel is closed as
         * well.</li>
         * <li>It is thread safe.</li>
         * <li>It throws an {@link IllegalBlockingModeException} if the channel is
         * in non-blocking mode and {@code write} is called.</li>
         * <li>It is not buffered.</li>
         * </ul>
         *
         * @param channel
         *            the channel to be wrapped by an OutputStream.
         * @return an OutputStream that puts bytes onto the given byte channel.
         */
		NewOutputStream(
			[in]  IWritableByteChannel* channel,
            [out] IOutputStream** outputStream);

		/**
         * Returns a readable channel on the given input stream. The resulting
         * channel has the following properties:
         * <ul>
         * <li>If the channel is closed, then the underlying stream is closed as
         * well.</li>
         * <li>It is not buffered.</li>
         * </ul>
         *
         * @param inputStream
         *            the stream to be wrapped by a byte channel.
         * @return a byte channel that reads bytes from the input stream.
         */
		NewChannel(
			[in]  IInputStream* inputStream,
            [out] IReadableByteChannel** inputChannel);

		/**
         * Returns a writable channel on the given output stream.
         *
         * The resulting channel has following properties:
         * <ul>
         * <li>If the channel is closed, then the underlying stream is closed as
         * well.</li>
         * <li>It is not buffered.</li>
         * </ul>
         *
         * @param outputStream
         *            the stream to be wrapped by a byte channel.
         * @return a byte channel that writes bytes to the output stream.
         */
		NewChannelEx(
			[in]  IOutputStream* outputStream,
			[out]  IWritableByteChannel** outputChannel);

		 /**
         * Returns a reader that decodes bytes from a channel.
         *
         * @param channel
         *            the Channel to be read.
         * @param decoder
         *            the Charset decoder to be used.
         * @param minBufferCapacity
         *            The minimum size of the byte buffer, -1 means to use the
         *            default size.
         * @return the reader.
         */
		NewReader(
			[in]  IReadableByteChannel* channel,
			[in]  ICharsetDecoder* decoder, 
			[in]  Int32  minBufferCapacity,
			[out] IReader** reader);

		/**
     	 * Returns a reader that decodes bytes from a channel. This method creates a
     	 * reader with a buffer of default size.
     	 *
     	 * @param channel
     	 *            the Channel to be read.
     	 * @param charsetName
     	 *            the name of the charset.
     	 * @return the reader.
     	 * @throws java.nio.charset.UnsupportedCharsetException
     	 *             if the given charset name is not supported.
     	 */
		NewReaderEx(
			[in]  IReadableByteChannel* channel,
            [in]  String charsetName,
			[out] IReader** reader);

		/**
         * Returns a writer that encodes characters with the specified
         * {@code encoder} and sends the bytes to the specified channel.
         *
         * @param channel
         *            the Channel to write to.
         * @param encoder
         *            the CharsetEncoder to be used.
         * @param minBufferCapacity
         *            the minimum size of the byte buffer, -1 means to use the
         *            default size.
         * @return the writer.
         */
		NewWriter(
			[in]  IWritableByteChannel* channel,
            [in]  ICharsetEncoder* encoder, 
			[in]  Int32 minBufferCapacity,
			[out] IWriter** writer);

		/**
         * Returns a writer that encodes characters with the specified
         * {@code encoder} and sends the bytes to the specified channel. This method
         * creates a writer with a buffer of default size.
         *
         * @param channel
         *            the Channel to be written to.
         * @param charsetName
         *            the name of the charset.
         * @return the writer.
         * @throws java.nio.charset.UnsupportedCharsetException
         *             if the given charset name is not supported.
         */
		NewWriterEx(
			[in]  IWritableByteChannel* channel,
            [in]  String charsetName,
			[out] IWriter** writer);

	}
}




