
module
{
    /**
     * Interest set mask bit for socket-accept operations.
     */
    const ISelectionKey_OP_ACCEPT = 16;

    /**
     * Interest set mask bit for socket-connect operations.
     */
    const ISelectionKey_OP_CONNECT = 8;

    /**
     * Interesting operation mask bit for read operations.
     */
    const ISelectionKey_OP_READ = 1;

    /**
     * Interest set mask bit for write operations.
     */
    const ISelectionKey_OP_WRITE = 4;


    interface ISelectableChannel;
    interface ISelector;

    /**
     * A {@code SelectionKey} represents the relationship between a channel and a
     * selector for which the channel is registered.
     * <h3>Operation set</h3>
     * An operation set is represented by an integer value. The bits of an operation
     * set represent categories of operations for a key's channel: Accepting socket
     * connections ({@code OP_ACCEPT}), connecting with a socket ({@code OP_CONNECT}),
     * reading ({@code OP_READ}) and writing ({@code OP_WRITE}).
     * <h4>Interest set</h4>
     * The interest set is an operation set that defines the operations that a
     * {@link SelectableChannel channel} is interested in performing.
     * <h4>Ready set</h4>
     * The ready set is an operation set that shows the operations that a
     * {@code channel} is ready to execute.
     */
    interface ISelectionKey {
        /**
         * Attaches an object to this key. It is acceptable to attach {@code null},
         * this discards the old attachment.
         *
         * @param anObject
         *            the object to attach, or {@code null} to discard the current
         *            attachment.
         * @return the last attached object or {@code null} if no object has been
         *         attached.
         */
        Attach(
            [in] IInterface* anObject,
            [out] IInterface** oldObject);

        /**
         * Gets the attached object.
         *
         * @return the attached object or {@code null} if no object has been
         *         attached.
         */
        Attachment(
            [out] IInterface** anObject);

        /**
         * Cancels this key.
         * <p>
         * A key that has been canceled is no longer valid. Calling this method on
         * an already canceled key does nothing.
         * <p>
         * Calling this method is safe at any time. The call might block until
         * another ongoing call to a method of this selector has finished. The
         * reason is that it is synchronizing on the key set of the selector. After
         * this call finishes, the key will have been added to the selectors
         * canceled-keys set and will not be included in any future selects of this
         * selector.
         */
        Cancel();

        /**
         * Gets the channel of this key.
         *
         * @return the channel of this key.
         */
        Channel(
            [out] ISelectableChannel** channel);

        /**
         * Gets this key's {@link SelectionKey interest set}. The returned set has
         * only those bits set that are valid for this key's channel.
         *
         * @return the interest set of this key.
         * @throws CancelledKeyException
         *             if the key has already been canceled.
         */
        GetInterestOps(
            [out] Int32* operations);

        /**
         * Sets the {@link SelectionKey interest set} for this key.
         *
         * @param operations
         *            the new interest set.
         * @return this key.
         * @throws IllegalArgumentException
         *             if a bit in {@code operations} is not in the set of
         *             {@link SelectableChannel#validOps() valid operations} of this
         *             key's channel.
         * @throws CancelledKeyException
         *             if the key has already been canceled.
         */
        SetInterestOps(
            [in] Int32 operations);

        /**
         * Indicates whether this key's channel is interested in the accept
         * operation and is ready to accept new connections. A call to this method
         * is equal to executing {@code (readyOps() & OP_ACCEPT) == OP_ACCEPT}.
         *
         * @return {@code true} if the channel is interested in the accept operation
         *         and is ready to accept new connections, {@code false} otherwise.
         * @throws CancelledKeyException
         *             if the key has already been canceled.
         */
        IsAcceptable(
            [out] Boolean* isAcceptable);

        /**
         * Indicates whether this key's channel is interested in the connect
         * operation and is ready to connect. A call to this method is equal to
         * executing {@code (readyOps() & OP_CONNECT) == OP_CONNECT}.
         *
         * @return {@code true} if the channel is interested in the connect
         *         operation and is ready to connect, {@code false} otherwise.
         * @throws CancelledKeyException
         *             if the key has already been canceled.
         */
        IsConnectable(
            [out] Boolean* isConnectable);

        /**
         * Indicates whether this key's channel is interested in the read operation
         * and is ready to read. A call to this method is equal to executing
         * {@code (readyOps() & OP_READ) == OP_READ}.
         *
         * @return {@code true} if the channel is interested in the read operation
         *         and is ready to read, {@code false} otherwise.
         * @throws CancelledKeyException
         *             if the key has already been canceled.
         */
        IsReadable(
            [out] Boolean* isReadable);

        /**
         * Indicates whether this key is valid. A key is valid as long as it has not
         * been canceled.
         *
         * @return {@code true} if this key has not been canceled, {@code false}
         *         otherwise.
         */
        IsValid(
            [out] Boolean* isValid);

        /**
         * Indicates whether this key's channel is interested in the write operation
         * and is ready to write. A call to this method is equal to executing
         * {@code (readyOps() & OP_WRITE) == OP_WRITE}.
         *
         * @return {@code true} if the channel is interested in the write operation
         *         and is ready to write, {@code false} otherwise.
         * @throws CancelledKeyException
         *             if the key has already been canceled.
         */
        IsWritable(
            [out] Boolean* isWritable);

        /**
         * Gets the set of operations that are ready. The returned set has only
         * those bits set that are valid for this key's channel.
         *
         * @return the operations for which this key's channel is ready.
         * @throws CancelledKeyException
         *             if the key has already been canceled.
         */
        ReadyOps(
            [out] Int32* operations);

        /**
         * Gets the selector for which this key's channel is registered.
         *
         * @return the related selector.
         */
        Selector(
            [out] ISelector** selector);
    }
}