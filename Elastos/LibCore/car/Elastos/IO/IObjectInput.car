module
{
    interface IDataInput;
    interface IObjectInput extends IDataInput {
        /**
         * Indicates the number of bytes of primitive data that can be read without
         * blocking.
         *
         * @return the number of bytes available.
         * @throws IOException
         *             if an I/O error occurs.
         */
        Available(
            [out] Int32* number);

        /**
         * Closes this stream. Implementations of this method should free any
         * resources used by the stream.
         *
         * @throws IOException
         *             if an I/O error occurs while closing the input stream.
         */
        Close();

        /**
         * Reads a single byte from this stream and returns it as an integer in the
         * range from 0 to 255. Returns -1 if the end of this stream has been
         * reached. Blocks if no input is available.
         *
         * @return the byte read or -1 if the end of this stream has been reached.
         * @throws IOException
         *             if this stream is closed or another I/O error occurs.
         */
        Read(
            [out] Int32* value);

        /**
         * Reads bytes from this stream into the byte array {@code buffer}. Blocks
         * while waiting for input.
         *
         * @param buffer
         *            the array in which to store the bytes read.
         * @return the number of bytes read or -1 if the end of this stream has been
         *         reached.
         * @throws IOException
         *             if this stream is closed or another I/O error occurs.
         */
        ReadBuffer(
            [out] ArrayOf<Byte> buffer,
            [out] Int32* number);

        /**
         * Reads at most {@code count} bytes from this stream and stores them in
         * byte array {@code buffer} starting at offset {@code count}. Blocks while
         * waiting for input.
         *
         * @param buffer
         *            the array in which to store the bytes read.
         * @param offset
         *            the initial position in {@code buffer} to store the bytes read
         *            from this stream.
         * @param count
         *            the maximum number of bytes to store in {@code buffer}.
         * @return the number of bytes read or -1 if the end of this stream has been
         *         reached.
         * @throws IOException
         *             if this stream is closed or another I/O error occurs.
         */
        ReadBufferEx(
            [in] Int32 offset,
            [in] Int32 count,
            [out] ArrayOf<Byte> buffer,
            [out] Int32* number);

        /**
         * Reads the next object from this stream.
         *
         * @return the object read.
         *
         * @throws ClassNotFoundException
         *             if the object's class cannot be found.
         * @throws IOException
         *             if this stream is closed or another I/O error occurs.
         */
//        public Object readObject() throws ClassNotFoundException, IOException;

        /**
         * Skips {@code toSkip} bytes on this stream. Less than {@code toSkip} byte are
         * skipped if the end of this stream is reached before the operation
         * completes.
         *
         * @param toSkip
         *            the number of bytes to skip.
         * @return the number of bytes actually skipped.
         *
         * @throws IOException
         *             if this stream is closed or another I/O error occurs.
         */
        Skip(
            [in] Int64 toSkip,
            [out] Int64* number);
    }
}