
module
{
    interface IOutputStream;

    interface IByteArrayOutputStream extends IOutputStream {
        /**
         * Resets this stream to the beginning of the underlying byte array. All
         * subsequent writes will overwrite any bytes previously stored in this
         * stream.
         */
        Reset();

        /**
         * Returns the total number of bytes written to this stream so far.
         *
         * @return the number of bytes written to this stream.
         */
        GetSize(
            [out] Int32* size);

        /**
         * Returns the contents of this ByteArrayOutputStream as a byte array. Any
         * changes made to the receiver after returning will not be reflected in the
         * byte array returned to the caller.
         *
         * @return this stream's current contents as a byte array.
         */
        ToByteArray(
            [out, callee] ArrayOf<Byte>* bytes);

        /**
         * Returns the contents of this ByteArrayOutputStream as a string. Any
         * changes made to the receiver after returning will not be reflected in the
         * string returned to the caller.
         *
         * @return this stream's current contents as a string.
         */
        ToString(
            [out] String* str);

        /**
         * Returns the contents of this ByteArrayOutputStream as a string converted
         * according to the encoding declared in {@code enc}.
         *
         * @param enc
         *            a string representing the encoding to use when translating
         *            this stream to a string.
         * @return this stream's current contents as an encoded string.
         * @throws UnsupportedEncodingException
         *             if the provided encoding is not supported.
         */
        ToStringEx(
            [in] String enc,
            [out] String* str);

        /**
         * Takes the contents of this stream and writes it to the output stream
         * {@code out}.
         *
         * @param out
         *            an OutputStream on which to write the contents of this stream.
         * @throws IOException
         *             if an error occurs while writing to {@code out}.
         */
        WriteTo(
            [in] IOutputStream* os);
    }
}