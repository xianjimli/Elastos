
module
{
    interface IFilterInputStream;

    interface IPushbackInputStream extends IFilterInputStream {
        /**
         * Pushes the specified byte {@code oneByte} back to this stream. Only the
         * least significant byte of the integer {@code oneByte} is pushed back.
         * This is done in such a way that the next byte read from this stream is
         * {@code (byte) oneByte}.
         * <p>
         * If this stream's internal pushback buffer cannot store the byte, an
         * {@code IOException} is thrown.
         *
         * @param oneByte
         *            the byte to push back to this stream.
         * @throws IOException
         *             if this stream is closed or the internal pushback buffer is
         *             full.
         */
        Unread(
            [in] Int32 oneByte);

        /**
         * Pushes all the bytes in {@code buffer} back to this stream. The bytes are
         * pushed back in such a way that the next byte read from this stream is
         * buffer[0], then buffer[1] and so on.
         * <p>
         * If this stream's internal pushback buffer cannot store the entire
         * contents of {@code buffer}, an {@code IOException} is thrown. Parts of
         * {@code buffer} may have already been copied to the pushback buffer when
         * the exception is thrown.
         *
         * @param buffer
         *            the buffer containing the bytes to push back to this stream.
         * @throws IOException
         *             if the free space in the internal pushback buffer is not
         *             sufficient to store the contents of {@code buffer}.
         */
        UnreadBuffer(
            [in] ArrayOf<Byte> buffer);

        /**
         * Pushes a subset of the bytes in {@code buffer} back to this stream. The
         * subset is defined by the start position {@code offset} within
         * {@code buffer} and the number of bytes specified by {@code length}. The
         * bytes are pushed back in such a way that the next byte read from this
         * stream is {@code buffer[offset]}, then {@code buffer[1]} and so on.
         * <p>
         * If this stream's internal pushback buffer cannot store the selected
         * subset of {@code buffer}, an {@code IOException} is thrown. Parts of
         * {@code buffer} may have already been copied to the pushback buffer when
         * the exception is thrown.
         *
         * @param buffer
         *            the buffer containing the bytes to push back to this stream.
         * @param offset
         *            the index of the first byte in {@code buffer} to push back.
         * @param length
         *            the number of bytes to push back.
         * @throws IndexOutOfBoundsException
         *             if {@code offset < 0} or {@code length < 0}, or if
         *             {@code offset + length} is greater than the length of
         *             {@code buffer}.
         * @throws IOException
         *             if the free space in the internal pushback buffer is not
         *             sufficient to store the selected contents of {@code buffer}.
         */
        UnreadBufferEx(
            [in] Int32 offset,
            [in] Int32 length,
            [in] ArrayOf<Byte> buffer);
    }
}