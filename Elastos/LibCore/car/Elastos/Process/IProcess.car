
module
{
    /**
     * Represents an external process. Enables writing to, reading from, destroying,
     * and waiting for the external process, as well as querying its exit value.
     *
     * @see Runtime#exec
     * @see ProcessBuilder#start()
     */
    interface IProcess {
        /**
         * Terminates this process and closes any associated streams.
         */
        Destroy();

        /**
         * Returns the exit value of the native process represented by this object.
         * It is available only when the native process has terminated.
         *
         * @return the exit value of this process.
         * @throws IllegalThreadStateException
         *             if this process has not terminated.
         */
        ExitValue(
            [out] Int32* value);

        /**
         * Returns an input stream that is connected to the error stream
         * <em>(stderr)</em> of the native process represented by this object.
         *
         * @return the input stream to read from the error stream associated with
         *         the native process.
         */
        GetErrorStream(
            [out] IInputStream** es);

        /**
         * Returns an input stream that is connected to the standard output stream
         * <em>(stdout)</em> of the native process represented by this object.
         *
         * @return the input stream to read from the output stream associated with
         *         the native process.
         */
        GetInputStream(
            [out] IInputStream** is);

        /**
         * Returns an output stream that is connected to the standard input stream
         * <em>(stdin)</em> of the native process represented by this object.
         *
         * @return the output stream to write to the input stream associated with
         *         the native process.
         */
        GetOutputStream(
            [out] IOutputStream** os);

        /**
         * Causes the calling thread to wait for the native process associated with
         * this object to finish executing.
         *
         * @return the exit value of the native process being waited on.
         * @throws InterruptedException
         *             if the calling thread is interrupted.
         */
        WaitFor(
            [out] Int32* value);
    }
}
