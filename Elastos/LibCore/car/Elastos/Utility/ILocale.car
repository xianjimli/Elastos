module
{
    interface ILocale {
        /**
         * Returns the country code for this locale, or {@code ""} if this locale
         * doesn't correspond to a specific country.
         */
        GetCountry(
            [out] String* country);

        /**
         * Equivalent to {@code getDisplayCountry(Locale.getDefault())}.
         */
        GetDisplayCountry(
            [out] String* country);

         /**
         * Returns the name of this locale's country, localized to {@code locale}.
         * Returns the empty string if this locale does not correspond to a specific
         * country.
         */
        GetDisplayCountryEx(
            [in] ILocale* locale,
            [out] String* country);

        /**
         * Equivalent to {@code getDisplayLanguage(Locale.getDefault())}.
         */
        GetDisplayLanguage(
            [out] String* language);

        /**
         * Returns the name of this locale's language, localized to {@code locale}.
         * If the language name is unknown, the language code is returned.
         */
        GetDisplayLanguageEx(
            [in] ILocale* locale,
            [out] String* language);

        /**
         * Equivalent to {@code getDisplayName(Locale.getDefault())}.
         */
        GetDisplayName(
            [out] String* name);

        /**
         * Returns this locale's language name, country name, and variant, localized
         * to {@code locale}. The exact output form depends on whether this locale
         * corresponds to a specific language, country and variant, such as:
         * {@code English}, {@code English (United States)}, {@code English (United
         * States,Computer)}, {@code anglais (&#x00c9;tats-Unis)}, {@code anglais
         * (&#x00c9;tats-Unis,informatique)}.
         */
        GetDisplayNameEx(
            [in] ILocale* locale,
            [out] String* name);

        /**
         * Gets the full variant name in the default {@code Locale} for the variant code of
         * this {@code Locale}. If there is no matching variant name, the variant code is
         * returned.
         *
         * @return a variant name.
         */
        GetDisplayVariant(
            [out] String* variantName);

        /**
         * Gets the full variant name in the specified {@code Locale} for the variant code
         * of this {@code Locale}. If there is no matching variant name, the variant code is
         * returned.
         *
         * @param locale
         *            the {@code Locale} for which the display name is retrieved.
         * @return a variant name.
         */
        GetDisplayVariantEx(
            [in] ILocale* locale,
            [out] String* variantName);

         /**
         * Gets the three letter ISO country code which corresponds to the country
         * code for this {@code Locale}.
         *
         * @return a three letter ISO language code.
         * @throws MissingResourceException
         *                if there is no matching three letter ISO country code.
         */
        GetISO3Country(
            [out] String* country);

        /**
         * Gets the three letter ISO language code which corresponds to the language
         * code for this {@code Locale}.
         *
         * @return a three letter ISO language code.
         * @throws MissingResourceException
         *                if there is no matching three letter ISO language code.
         */
        GetISO3Language(
            [out] String* language);

        /**
         * Gets the language code for this {@code Locale} or the empty string of no language
         * was set.
         *
         * @return a language code.
         */
        GetLanguage(
            [out] String* language);

        /**
         * Gets the variant code for this {@code Locale} or an empty {@code String} if no variant
         * was set.
         *
         * @return a variant code.
         */
        GetVariant(
            [out] String* variant);
    }
}