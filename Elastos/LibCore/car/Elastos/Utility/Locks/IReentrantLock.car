

module
{
    interface ILock;
    interface IThread;
    interface IReentrantLock extends ILock
    {
        /**
         * Queries the number of holds on this lock by the current thread.
         *
         * <p>A thread has a hold on a lock for each lock action that is not
         * matched by an unlock action.
         *
         * <p>The hold count information is typically only used for testing and
         * debugging purposes. For example, if a certain section of code should
         * not be entered with the lock already held then we can assert that
         * fact:
         *
         * <pre>
         * class X {
         *   ReentrantLock lock = new ReentrantLock();
         *   // ...
         *   public void m() {
         *     assert lock.getHoldCount() == 0;
         *     lock.lock();
         *     try {
         *       // ... method body
         *     } finally {
         *       lock.unlock();
         *     }
         *   }
         * }
         * </pre>
         *
         * @return the number of holds on this lock by the current thread,
         *         or zero if this lock is not held by the current thread
         */
         GetHoldCount(
            [out] Int32 *value);

        /**
         * Queries if this lock is held by the current thread.
         *
         * <p>Analogous to the {@link Thread#holdsLock} method for built-in
         * monitor locks, this method is typically used for debugging and
         * testing. For example, a method that should only be called while
         * a lock is held can assert that this is the case:
         *
         * <pre>
         * class X {
         *   ReentrantLock lock = new ReentrantLock();
         *   // ...
         *
         *   public void m() {
         *       assert lock.isHeldByCurrentThread();
         *       // ... method body
         *   }
         * }
         * </pre>
         *
         * <p>It can also be used to ensure that a reentrant lock is used
         * in a non-reentrant manner, for example:
         *
         * <pre>
         * class X {
         *   ReentrantLock lock = new ReentrantLock();
         *   // ...
         *
         *   public void m() {
         *       assert !lock.isHeldByCurrentThread();
         *       lock.lock();
         *       try {
         *           // ... method body
         *       } finally {
         *           lock.unlock();
         *       }
         *   }
         * }
         * </pre>
         *
         * @return {@code true} if current thread holds this lock and
         *         {@code false} otherwise
         */
        IsHeldByCurrentThread(
            [out] Boolean *value);

        /**
         * Queries if this lock is held by any thread. This method is
         * designed for use in monitoring of the system state,
         * not for synchronization control.
         *
         * @return {@code true} if any thread holds this lock and
         *         {@code false} otherwise
         */
        IsLocked(
            [out] Boolean *isLocked);

        /**
         * Returns {@code true} if this lock has fairness set true.
         *
         * @return {@code true} if this lock has fairness set true
         */
        IsFair(
            [out] Boolean *isFair);

        /**
         * Returns the thread that currently owns this lock, or
         * {@code null} if not owned. When this method is called by a
         * thread that is not the owner, the return value reflects a
         * best-effort approximation of current lock status. For example,
         * the owner may be momentarily {@code null} even if there are
         * threads trying to acquire the lock but have not yet done so.
         * This method is designed to facilitate construction of
         * subclasses that provide more extensive lock monitoring
         * facilities.
         *
         * @return the owner, or {@code null} if not owned
         */
        GetOwner(
            [out] IThread** thread);

        /**
         * Queries whether any threads are waiting to acquire this lock. Note that
         * because cancellations may occur at any time, a {@code true}
         * return does not guarantee that any other thread will ever
         * acquire this lock.  This method is designed primarily for use in
         * monitoring of the system state.
         *
         * @return {@code true} if there may be other threads waiting to
         *         acquire the lock
         */
        HasQueuedThreads(
            [out] Boolean* value);


        /**
         * Queries whether the given thread is waiting to acquire this
         * lock. Note that because cancellations may occur at any time, a
         * {@code true} return does not guarantee that this thread
         * will ever acquire this lock.  This method is designed primarily for use
         * in monitoring of the system state.
         *
         * @param thread the thread
         * @return {@code true} if the given thread is queued waiting for this lock
         * @throws NullPointerException if the thread is null
         */
        HasQueuedThread(
            [in] IThread* thread,
            [out] Boolean* value);


        /**
         * Returns an estimate of the number of threads waiting to
         * acquire this lock.  The value is only an estimate because the number of
         * threads may change dynamically while this method traverses
         * internal data structures.  This method is designed for use in
         * monitoring of the system state, not for synchronization
         * control.
         *
         * @return the estimated number of threads waiting for this lock
         */
        GetQueueLength(
            [out] Int32* value);


        /**
         * Queries whether any threads are waiting on the given condition
         * associated with this lock. Note that because timeouts and
         * interrupts may occur at any time, a {@code true} return does
         * not guarantee that a future {@code signal} will awaken any
         * threads.  This method is designed primarily for use in
         * monitoring of the system state.
         *
         * @param condition the condition
         * @return {@code true} if there are any waiting threads
         * @throws IllegalMonitorStateException if this lock is not held
         * @throws IllegalArgumentException if the given condition is
         *         not associated with this lock
         * @throws NullPointerException if the condition is null
         */
        HasWaiters(
            [in] ICondition* condition,
            [out] Boolean* value);

        /**
         * Returns an estimate of the number of threads waiting on the
         * given condition associated with this lock. Note that because
         * timeouts and interrupts may occur at any time, the estimate
         * serves only as an upper bound on the actual number of waiters.
         * This method is designed for use in monitoring of the system
         * state, not for synchronization control.
         *
         * @param condition the condition
         * @return the estimated number of waiting threads
         * @throws IllegalMonitorStateException if this lock is not held
         * @throws IllegalArgumentException if the given condition is
         *         not associated with this lock
         * @throws NullPointerException if the condition is null
         */
        GetWaitQueueLength(
            [in] ICondition* condition,
            [out] Int32* value);

        /**
         * Returns a collection containing those threads that may be
         * waiting on the given condition associated with this lock.
         * Because the actual set of threads may change dynamically while
         * constructing this result, the returned collection is only a
         * best-effort estimate. The elements of the returned collection
         * are in no particular order.  This method is designed to
         * facilitate construction of subclasses that provide more
         * extensive condition monitoring facilities.
         *
         * @param condition the condition
         * @return the collection of threads
         * @throws IllegalMonitorStateException if this lock is not held
         * @throws IllegalArgumentException if the given condition is
         *         not associated with this lock
         * @throws NullPointerException if the condition is null
         */
        /**
         * Returns a string identifying this lock, as well as its lock state.
         * The state, in brackets, includes either the String {@code "Unlocked"}
         * or the String {@code "Locked by"} followed by the
         * {@linkplain Thread#getName name} of the owning thread.
         *
         * @return a string identifying this lock, as well as its lock state
         */
        ToString();
    }
}