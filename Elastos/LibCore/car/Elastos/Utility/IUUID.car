
module
{
    interface IUUID {
        /**
         * <p>
         * The 64 least significant bits of the UUID.
         *
         * @return the 64 least significant bits.
         */
        GetLeastSignificantBits(
            [out] Int64* bits);

        /**
         * <p>
         * The 64 most significant bits of the UUID.
         *
         * @return the 64 most significant bits.
         */
        GetMostSignificantBits(
            [out] Int64* bits);

        /**
         * <p>
         * The version of the variant 2 UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>. If the variant
         * is not 2, then the version will be 0.
         * <ul>
         * <li>1 - Time-based UUID</li>
         * <li>2 - DCE Security UUID</li>
         * <li>3 - Name-based with MD5 hashing UUID ({@link #nameUUIDFromBytes(byte[])})</li>
         * <li>4 - Randomly generated UUID ({@link #randomUUID()})</li>
         * <li>5 - Name-based with SHA-1 hashing UUID</li>
         * </ul>
         *
         * @return an {@code int} value.
         */
        Version(
            [out] Int32* ver);

        /**
         * <p>
         * The variant of the UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         * <ul>
         * <li>0 - Reserved for NCS compatibility</li>
         * <li>2 - RFC 4122/Leach-Salz</li>
         * <li>6 - Reserved for Microsoft Corporation compatibility</li>
         * <li>7 - Reserved for future use</li>
         * </ul>
         *
         * @return an {@code int} value.
         */
        Variant(
            [out] Int32* variant);

        /**
         * <p>
         * The timestamp value of the version 1, variant 2 UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * @return a {@code long} value.
         * @throws UnsupportedOperationException
         *             if {@link #version()} is not 1.
         */
        Timestamp(
            [out] Int64* timestamp);

        /**
         * <p>
         * The clock sequence value of the version 1, variant 2 UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * @return a {@code long} value.
         * @throws UnsupportedOperationException
         *             if {@link #version()} is not 1.
         */
        ClockSequence(
            [out] Int32* clockSequence);

        /**
         * <p>
         * The node value of the version 1, variant 2 UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * @return a {@code long} value.
         * @throws UnsupportedOperationException
         *             if {@link #version()} is not 1.
         */
        Node(
            [out] Int64* node);

        /**
         * <p>
         * Compares this UUID to the specified UUID. The natural ordering of UUIDs
         * is based upon the value of the bits from most significant to least
         * significant.
         *
         * @param uuid
         *            the UUID to compare to.
         * @return a value of -1, 0 or 1 if this UUID is less than, equal to or
         *         greater than {@code uuid}.
         */
        CompareTo(
            [in] IUUID* uuid,
            [out] Int32* result);

        /**
         * <p>
         * Compares this UUID to another object for equality. If {@code object}
         * is not {@code null}, is a UUID instance, and all bits are equal, then
         * {@code true} is returned.
         *
         * @param object
         *            the {@code Object} to compare to.
         * @return {@code true} if this UUID is equal to {@code object}
         *         or {@code false} if not.
         */
        Equals(
            [in] IUUID* object,
            [out] Boolean* result);

        /**
         * <p>
         * Returns a hash value for this UUID that is consistent with the
         * {@link #equals(Object)} method.
         *
         * @return an {@code int} value.
         */
        HashCode(
            [out] Int32* hashCode);

        /**
         * <p>
         * Returns a string representation of this UUID in the following format, as
         * per <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * <pre>
         *            UUID                   = time-low &quot;-&quot; time-mid &quot;-&quot;
         *                                     time-high-and-version &quot;-&quot;
         *                                     clock-seq-and-reserved
         *                                     clock-seq-low &quot;-&quot; node
         *            time-low               = 4hexOctet
         *            time-mid               = 2hexOctet
         *            time-high-and-version  = 2hexOctet
         *            clock-seq-and-reserved = hexOctet
         *            clock-seq-low          = hexOctet
         *            node                   = 6hexOctet
         *            hexOctet               = hexDigit hexDigit
         *            hexDigit =
         *                &quot;0&quot; / &quot;1&quot; / &quot;2&quot; / &quot;3&quot; / &quot;4&quot; / &quot;5&quot; / &quot;6&quot; / &quot;7&quot; / &quot;8&quot; / &quot;9&quot; /
         *                &quot;a&quot; / &quot;b&quot; / &quot;c&quot; / &quot;d&quot; / &quot;e&quot; / &quot;f&quot; /
         *                &quot;A&quot; / &quot;B&quot; / &quot;C&quot; / &quot;D&quot; / &quot;E&quot; / &quot;F&quot;
         * </pre>
         *
         * @return a String instance.
         */
        ToString(
            [out] String* value);
    }

    interface IUUIDHelper {
        /**
         * <p>
         * Generates a variant 2, version 4 (randomly generated number) UUID as per
         * <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * @return an UUID instance.
         */
        RandomUUID(
            [out] IUUID** uuid);

        /**
         * <p>
         * Generates a variant 2, version 3 (name-based, MD5-hashed) UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * @param name
         *            the name used as byte array to create an UUID.
         * @return an UUID instance.
         */
        NameUUIDFromBytes(
            [in] ArrayOf<Byte> name,
            [out] IUUID** uuid);

        /**
         * <p>
         * Parses a UUID string with the format defined by {@link #toString()}.
         *
         * @param uuid
         *            the UUID string to parse.
         * @return an UUID instance.
         * @throws NullPointerException
         *             if {@code uuid} is {@code null}.
         * @throws IllegalArgumentException
         *             if {@code uuid} is not formatted correctly.
         */
        FromString(
            [in] String uuidStr,
            [out] IUUID** uuid);
    }
}