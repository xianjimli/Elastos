
module
{
    interface IDate {
        /**
         * Returns if this {@code Date} is after the specified Date.
         *
         * @param date
         *            a Date instance to compare.
         * @return {@code true} if this {@code Date} is after the specified {@code Date},
         *         {@code false} otherwise.
         */
        IsAfter(
            [in] IDate* date,
            [out] Boolean* isAfter);

        /**
         * Returns if this {@code Date} is before the specified Date.
         *
         * @param date
         *            a {@code Date} instance to compare.
         * @return {@code true} if this {@code Date} is before the specified {@code Date},
         *         {@code false} otherwise.
         */
        IsBefore(
            [in] IDate* date,
            [out] Boolean* isBefore);

        /**
         * Compare the receiver to the specified {@code Date} to determine the relative
         * ordering.
         *
         * @param date
         *            a {@code Date} to compare against.
         * @return an {@code int < 0} if this {@code Date} is less than the specified {@code Date}, {@code 0} if
         *         they are equal, and an {@code int > 0} if this {@code Date} is greater.
         */
        CompareTo(
            [in] IDate* date,
            [out] Int32* result);

        /**
         * Returns the gregorian calendar day of the month for this {@code Date} object.
         *
         * @return the day of the month.
         *
         * @deprecated use {@code Calendar.get(Calendar.DATE)}
         */
        //@Deprecated
        GetDate(
            [out] Int32* date);

        /**
         * Returns the gregorian calendar day of the week for this {@code Date} object.
         *
         * @return the day of the week.
         *
         * @deprecated use {@code Calendar.get(Calendar.DAY_OF_WEEK)}
         */
        //@Deprecated
        GetDay(
            [out] Int32* day);

        /**
         * Returns the gregorian calendar hour of the day for this {@code Date} object.
         *
         * @return the hour of the day.
         *
         * @deprecated use {@code Calendar.get(Calendar.HOUR_OF_DAY)}
         */
        //@Deprecated
        GetHours(
            [out] Int32* hours);

        /**
         * Returns the gregorian calendar minute of the hour for this {@code Date} object.
         *
         * @return the minutes.
         *
         * @deprecated use {@code Calendar.get(Calendar.MINUTE)}
         */
        //@Deprecated
        GetMinutes(
            [out] Int32* minutes);

        /**
         * Returns the gregorian calendar month for this {@code Date} object.
         *
         * @return the month.
         *
         * @deprecated use {@code Calendar.get(Calendar.MONTH)}
         */
        //@Deprecated
        GetMonth(
            [out] Int32* month);

        /**
         * Returns the gregorian calendar second of the minute for this {@code Date} object.
         *
         * @return the seconds.
         *
         * @deprecated use {@code Calendar.get(Calendar.SECOND)}
         */
        //@Deprecated
        GetSeconds(
            [out] Int32* seconds);

        /**
         * Returns this {@code Date} as a millisecond value. The value is the number of
         * milliseconds since Jan. 1, 1970, midnight GMT.
         *
         * @return the number of milliseconds since Jan. 1, 1970, midnight GMT.
         */
        GetTime(
            [out] Int64* time);

        /**
         * Returns the timezone offset in minutes of the default {@code TimeZone}.
         *
         * @return the timezone offset in minutes of the default {@code TimeZone}.
         *
         * @deprecated use
         *             {@code (Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / 60000}
         */
        //@Deprecated
        GetTimezoneOffset(
            [out] Int32* timezoneOffset);

        /**
         * Returns the gregorian calendar year since 1900 for this {@code Date} object.
         *
         * @return the year - 1900.
         *
         * @deprecated use {@code Calendar.get(Calendar.YEAR) - 1900}
         */
        //@Deprecated
        GetYear(
            [out] Int32* year);

        /**
         * Sets the gregorian calendar day of the month for this {@code Date} object.
         *
         * @param day
         *            the day of the month.
         *
         * @deprecated use {@code Calendar.set(Calendar.DATE, day)}
         */
        //@Deprecated
        SetDate(
            [in] Int32 day);

        /**
         * Sets the gregorian calendar hour of the day for this {@code Date} object.
         *
         * @param hour
         *            the hour of the day.
         *
         * @deprecated use {@code Calendar.set(Calendar.HOUR_OF_DAY, hour)}
         */
        //@Deprecated
        SetHours(
            [in] Int32 hour);

        /**
         * Sets the gregorian calendar minute of the hour for this {@code Date} object.
         *
         * @param minute
         *            the minutes.
         *
         * @deprecated use {@code Calendar.set(Calendar.MINUTE, minute)}
         */
        //@Deprecated
        SetMinutes(
            [in] Int32 minute);

        /**
         * Sets the gregorian calendar month for this {@code Date} object.
         *
         * @param month
         *            the month.
         *
         * @deprecated use {@code Calendar.set(Calendar.MONTH, month)}
         */
        //@Deprecated
        SetMonth(
            [in] Int32 month);

        /**
         * Sets the gregorian calendar second of the minute for this {@code Date} object.
         *
         * @param second
         *            the seconds.
         *
         * @deprecated use {@code Calendar.set(Calendar.SECOND, second)}
         */
        //@Deprecated
        SetSeconds(
            [in] Int32 second);

        /**
         * Sets this {@code Date} to the specified millisecond value. The value is the
         * number of milliseconds since Jan. 1, 1970 GMT.
         *
         * @param milliseconds
         *            the number of milliseconds since Jan. 1, 1970 GMT.
         */
        SetTime(
            [in] Int64 milliseconds);

        /**
         * Sets the gregorian calendar year since 1900 for this {@code Date} object.
         *
         * @param year
         *            the year since 1900.
         *
         * @deprecated use {@code Calendar.set(Calendar.YEAR, year + 1900)}
         */
        //@Deprecated
        SetYear(
            [in] Int32 year);

        /**
         * Returns the string representation of this {@code Date} in GMT in the format: 22
         * Jun 1999 13:02:00 GMT
         *
         * @return the string representation of this {@code Date} in GMT.
         *
         * @deprecated use {@link DateFormat}
         */
        //@Deprecated
        ToGMTString(
            [out] String* gmtStr);

        /**
         * Returns the string representation of this {@code Date} for the default {@code Locale}.
         *
         * @return the string representation of this {@code Date} for the default {@code Locale}.
         *
         * @deprecated use {@link DateFormat}
         */
        //@Deprecated
        ToLocaleString(
            [out] String* localeStr);

        /**
         * Returns a string representation of this {@code Date}.
         * The formatting is equivalent to using a {@code SimpleDateFormat} with
         * the format string "EEE MMM dd HH:mm:ss zzz yyyy", which looks something
         * like "Tue Jun 22 13:07:00 PDT 1999". The current default time zone and
         * locale are used. If you need control over the time zone or locale,
         * use {@code SimpleDateFormat} instead.
         *
         * @return the string representation of this {@code Date}.
         */
        //@Override
        ToString(
            [out] String* str);
    }
}
