
module
{
	/**
	 * This class provides methods that return pseudo-random values.
	 */
    interface IRandom
	{
		/**
		 * Returns a pseudo-random uniformly distributed {@code boolean}.
		 */
		NextBoolean(
            [out] Boolean* value);

		/**
		 * Fills {@code buf} with random bytes.
		 */
		NextBytes(
            [in] ArrayOf<Byte> buf);

		/**
		 * Returns a pseudo-random uniformly distributed {@code double}
		 * in the half-open range [0.0, 1.0).
		 */
		NextDouble(
            [out] Double* value);

		/**
		 * Returns a pseudo-random uniformly distributed {@code float}
		 * in the half-open range [0.0, 1.0).
		 */
		NextFloat(
            [out] Float* value);

		/**
		 * Returns a pseudo-random (approximately) normally distributed
		 * {@code double} with mean 0.0 and standard deviation 1.0.
		 * This method uses the <i>polar method<i> of G. E. P. Box, M.
		 * E. Muller, and G. Marsaglia, as described by Donald E. Knuth in <i>The
		 * Art of Computer Programming, Volume 2: Seminumerical Algorithms</i>,
		 * section 3.4.1, subsection C, algorithm P.
		 */
		NextGaussian(
            [out] Double* value);

		/**
		 * Returns a pseudo-random uniformly distributed {@code int}.
		 */
		NextInt(
            [out] Int32* value);

		/**
		 * Returns a pseudo-random uniformly distributed {@code int}
		 * in the half-open range [0, n).
		 */
		NextInt2(
            [in] Int32 n,
            [out] Int32* value);

		/**
		 * Returns a pseudo-random uniformly distributed {@code long}.
		 */
		NextLong(
            [out] Int64* value);

		/**
		 * Modifies the seed a using linear congruential formula presented in <i>The
		 * Art of Computer Programming, Volume 2</i>, Section 3.2.1.
		 */
		SetSeed(
            [in] Int64 seed);   
	}
}