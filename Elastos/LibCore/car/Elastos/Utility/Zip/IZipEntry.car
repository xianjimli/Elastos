
module
{
    /**
     * Zip entry state: Deflated.
     */
    const IZipEntry_DEFLATED = 8;

    /**
     * Zip entry state: Stored.
     */
    const IZipEntry_STORED = 0;


    [deprecated]
    interface IZipEntry {
        /**
         * Gets the comment for this {@code ZipEntry}.
         *
         * @return the comment for this {@code ZipEntry}, or {@code null} if there
         *         is no comment. If we're reading an archive with
         *         {@code ZipInputStream} the comment is not available.
         */
        GetComment(
            [out] String* comment);

        /**
         * Gets the compressed size of this {@code ZipEntry}.
         *
         * @return the compressed size, or -1 if the compressed size has not been
         *         set.
         */
        GetCompressedSize(
            [out] Int64* size);

        /**
         * Gets the checksum for this {@code ZipEntry}.
         *
         * @return the checksum, or -1 if the checksum has not been set.
         */
        GetCrc(
            [out] Int64* checksum);

        /**
         * Gets the extra information for this {@code ZipEntry}.
         *
         * @return a byte array containing the extra information, or {@code null} if
         *         there is none.
         */
        GetExtra(
            [out, callee] ArrayOf<Byte>* extra);

        /**
         * Gets the compression method for this {@code ZipEntry}.
         *
         * @return the compression method, either {@code DEFLATED}, {@code STORED}
         *         or -1 if the compression method has not been set.
         */
        GetMethod(
            [out] Int32* method);

        /**
         * Gets the name of this {@code ZipEntry}.
         *
         * @return the entry name.
         */
        GetName(
            [out] String* name);

        /**
         * Gets the uncompressed size of this {@code ZipEntry}.
         *
         * @return the uncompressed size, or {@code -1} if the size has not been
         *         set.
         */
        GetSize(
            [out] Int64* size);

        /**
         * Gets the last modification time of this {@code ZipEntry}.
         *
         * @return the last modification time as the number of milliseconds since
         *         Jan. 1, 1970.
         */
        GetTime(
            [out] Int64* time);

        /**
         * Determine whether or not this {@code ZipEntry} is a directory.
         *
         * @return {@code true} when this {@code ZipEntry} is a directory, {@code
         *         false} otherwise.
         */
        IsDirectory(
            [out] Boolean* isDirectory);

        /**
         * Sets the comment for this {@code ZipEntry}.
         *
         * @param string
         *            the comment for this entry.
         */
        SetComment(
            [in] String comment);

        /**
         * Sets the compressed size for this {@code ZipEntry}.
         *
         * @param value
         *            the compressed size (in bytes).
         */
        SetCompressedSize(
            [in] Int64 size);

        /**
         * Sets the checksum for this {@code ZipEntry}.
         *
         * @param value
         *            the checksum for this entry.
         * @throws IllegalArgumentException
         *             if {@code value} is < 0 or > 0xFFFFFFFFL.
         */
        SetCrc(
            [in] Int64 checksum);

        /**
         * Sets the extra information for this {@code ZipEntry}.
         *
         * @param data
         *            a byte array containing the extra information.
         * @throws IllegalArgumentException
         *             when the length of data is greater than 0xFFFF bytes.
         */
        SetExtra(
            [in] ArrayOf<Byte>* data);

        /**
         * Sets the compression method for this {@code ZipEntry}.
         *
         * @param value
         *            the compression method, either {@code DEFLATED} or {@code
         *            STORED}.
         * @throws IllegalArgumentException
         *             when value is not {@code DEFLATED} or {@code STORED}.
         */
        SetMethod(
            [in] Int32 method);

        /**
         * Sets the uncompressed size of this {@code ZipEntry}.
         *
         * @param value
         *            the uncompressed size for this entry.
         * @throws IllegalArgumentException
         *             if {@code value} < 0 or {@code value} > 0xFFFFFFFFL.
         */
        SetSize(
            [in] Int64 size);

        /**
         * Sets the modification time of this {@code ZipEntry}.
         *
         * @param value
         *            the modification time as the number of milliseconds since Jan.
         *            1, 1970.
         */
        SetTime(
            [in] Int64 time);
    }
}
