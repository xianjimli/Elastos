
module
{
    /**
     * Indicates deflated entries.
     */
    const IZipOutputStream_DEFLATED = 8;

    /**
     * Indicates uncompressed entries.
     */
    const IZipOutputStream_STORED = 0;


    interface IDeflaterOutputStream;
    interface IZipEntry;


    interface IZipOutputStream extends IDeflaterOutputStream {
        /**
         * Closes the current {@code ZipEntry}. Any entry terminal data is written
         * to the underlying stream.
         *
         * @throws IOException
         *             If an error occurs closing the entry.
         */
        CloseEntry();

        /**
         * Writes entry information to the underlying stream. Data associated with
         * the entry can then be written using {@code write()}. After data is
         * written {@code closeEntry()} must be called to complete the writing of
         * the entry to the underlying stream.
         *
         * @param ze
         *            the {@code ZipEntry} to store.
         * @throws IOException
         *             If an error occurs storing the entry.
         * @see #write
         */
        PutNextEntry(
            [in] IZipEntry* ze);

        /**
         * Sets the {@code ZipFile} comment associated with the file being written.
         *
         * @param comment
         *            the comment associated with the file.
         */
        SetComment(
            [in] String comment);

        /**
         * Sets the compression level to be used for writing entry data. This level
         * may be set on a per entry basis. The level must have a value between -1
         * and 8 according to the {@code Deflater} compression level bounds.
         *
         * @param level
         *            the compression level (ranging from -1 to 8).
         * @see Deflater
         */
        SetLevel(
            [in] Int32 level);

        /**
         * Sets the compression method to be used when compressing entry data.
         * method must be one of {@code STORED} (for no compression) or {@code
         * DEFLATED}.
         *
         * @param method
         *            the compression method to use.
         */
        SetMethod(
            [in] Int32 method);
    }
}
