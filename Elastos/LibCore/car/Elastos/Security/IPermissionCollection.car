
module
{
    interface IPermission;

    interface IPermissionCollection {
        /**
         * Adds the specified {@code Permission} to this collection.
         *
         * @param permission
         *            the {@code Permission} to add.
         * @throws IllegalStateException
         *             if the collection is read only.
         */
        Add(
            [in] IPermission* permission);

        /**
         * Returns an enumeration over all {@link Permission}s encapsulated by this
         * {@code PermissionCollection}.
         *
         * @return an enumeration over all {@link Permission}s.
         */
        GetElements(
            [out] IObjectContainer** permissions);

        /**
         * Indicates whether the specified permission is implied by this {@code
         * PermissionCollection}.
         *
         * @param permission
         *            the permission to check.
         * @return {@code true} if the given permission is implied by the
         *         permissions in this collection, {@code false} otherwise.
         */
        Implies(
            [in] IPermission* permission,
            [out] Boolean* isImplied);

        /**
         * Indicates whether new permissions can be added to this {@code
         * PermissionCollection}.
         *
         * @return {@code true} if the receiver is read only, {@code false} if new
         *         elements can still be added to this {@code PermissionCollection}.
         */
        IsReadOnly(
            [out] Boolean* isReadOnly);

        /**
         * Marks this {@code PermissionCollection} as read only, so that no new
         * permissions can be added to it.
         */
        SetReadOnly();
    }
}