
module
{
    interface IPermissionCollection;


    interface IPermission extends IGuard {
        /**
         * Returns a comma separated string identifying the actions associated with
         * this permission. The returned actions are in canonical form. For example:
         *
         * <pre>
         * sp0 = new SocketPermission(&quot;www.example.com&quot;, &quot;connect,resolve&quot;)
         * sp1 = new SocketPermission(&quot;www.example.com&quot;, &quot;resolve,connect&quot;)
         * sp0.getActions().equals(sp1.getActions()) //yields true
         * </pre>
         *
         * Both permissions return "connect,resolve" (in that order) if {@code
         * #getActions()} is invoked. Returns an empty String, if no actions are
         * associated with this permission.
         *
         * @return the actions associated with this permission or an empty string if
         *         no actions are associated with this permission.
         */
        GetActions(
            [out] String* actions);

        /**
         * Indicates whether the specified permission is implied by this permission.
         * The {@link AccessController} uses this method to check whether permission
         * protected access is allowed with the present policy.
         *
         * @param permission
         *            the permission to check against this permission.
         * @return {@code true} if the specified permission is implied by this
         *         permission, {@code false} otherwise.
         */
        Implies(
            [in] IPermission* permission,
            [out] Boolean* isImplied);

        /**
         * Returns the name of this permission.
         *
         * @return the name of this permission.
         */
        GetName(
            [out] String* name);

        /**
         * Returns a specific {@link PermissionCollection} container for permissions
         * of this type. Returns {@code null} if any permission collection can be
         * used.
         * <p>
         * Subclasses may override this method to return an appropriate collection
         * for the specific permissions they implement.
         *
         * @return an empty {@link PermissionCollection} or {@code null} if any
         *         permission collection can be used.
         */
        NewPermissionCollection(
            [out] IPermissionCollection** permissionCollection);
    }
}