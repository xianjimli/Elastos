
module
{
    interface IPublicKey;

    interface ICertificate {
        /**
         * Returns the certificate type.
         *
         * @return the certificate type.
         */
        GetType(
            [out] String* type);

        /**
         * Returns the encoded representation for this certificate.
         *
         * @return the encoded representation for this certificate.
         * @throws CertificateEncodingException
         *             if the encoding fails.
         */
        GetEncoded(
            [out, callee] ArrayOf<Byte>* encoded);

        /**
         * Verifies that this certificate was signed with the given public key.
         *
         * @param key
         *            PublicKey public key for which verification should be
         *            performed.
         * @throws CertificateException
         *             if encoding errors are detected.
         * @throws NoSuchAlgorithmException
         *             if an unsupported algorithm is detected.
         * @throws InvalidKeyException
         *             if an invalid key is detected.
         * @throws NoSuchProviderException
         *             if there is no default provider.
         * @throws SignatureException
         *             if signature errors are detected.
         */
        Verify(
            [in] IPublicKey* key);

        /**
         * Verifies that this certificate was signed with the given public key. It
         * Uses the signature algorithm given by the provider.
         *
         * @param key
         *            PublicKey public key for which verification should be
         *            performed.
         * @param sigProvider
         *            String the name of the signature provider.
         * @exception CertificateException
         *                if encoding errors are detected.
         * @exception NoSuchAlgorithmException
         *                if an unsupported algorithm is detected.
         * @exception InvalidKeyException
         *                if an invalid key is detected.
         * @exception NoSuchProviderException
         *                if the specified provider does not exists.
         * @exception SignatureException
         *                if signature errors are detected.
         */
        VerifyEx(
            [in] IPublicKey* key,
            [in] String sigProvider);

        /**
         * Returns the public key corresponding to this certificate.
         *
         * @return the public key corresponding to this certificate.
         */
        GetPublicKey(
            [out] IPublicKey** key);
    }
}