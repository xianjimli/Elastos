
module
{
    enum RoundingMode;
    interface IMathContext;
    interface IBigInteger;

    /**
     * The constant zero as a {@code BigDecimal}.
     */
//    public static final BigDecimal ZERO = new BigDecimal(0, 0);

    /**
     * The constant one as a {@code BigDecimal}.
     */
//    public static final BigDecimal ONE = new BigDecimal(1, 0);

    /**
     * The constant ten as a {@code BigDecimal}.
     */
//    public static final BigDecimal TEN = new BigDecimal(10, 0);

    /**
     * Rounding mode where positive values are rounded towards positive infinity
     * and negative values towards negative infinity.
     *
     * @see RoundingMode#UP
     */
    const BigDecimal_ROUND_UP = 0;

    /**
     * Rounding mode where the values are rounded towards zero.
     *
     * @see RoundingMode#DOWN
     */
    const BigDecimal_ROUND_DOWN = 1;

    /**
     * Rounding mode to round towards positive infinity. For positive values
     * this rounding mode behaves as {@link #ROUND_UP}, for negative values as
     * {@link #ROUND_DOWN}.
     *
     * @see RoundingMode#CEILING
     */
    const BigDecimal_ROUND_CEILING = 2;

    /**
     * Rounding mode to round towards negative infinity. For positive values
     * this rounding mode behaves as {@link #ROUND_DOWN}, for negative values as
     * {@link #ROUND_UP}.
     *
     * @see RoundingMode#FLOOR
     */
    const BigDecimal_ROUND_FLOOR = 3;

    /**
     * Rounding mode where values are rounded towards the nearest neighbor.
     * Ties are broken by rounding up.
     *
     * @see RoundingMode#HALF_UP
     */
    const BigDecimal_ROUND_HALF_UP = 4;

    /**
     * Rounding mode where values are rounded towards the nearest neighbor.
     * Ties are broken by rounding down.
     *
     * @see RoundingMode#HALF_DOWN
     */
    const BigDecimal_ROUND_HALF_DOWN = 5;

    /**
     * Rounding mode where values are rounded towards the nearest neighbor.
     * Ties are broken by rounding to the even neighbor.
     *
     * @see RoundingMode#HALF_EVEN
     */
    const BigDecimal_ROUND_HALF_EVEN = 6;

    /**
     * Rounding mode where the rounding operations throws an {@code
     * ArithmeticException} for the case that rounding is necessary, i.e. for
     * the case that the value cannot be represented exactly.
     *
     * @see RoundingMode#UNNECESSARY
     */
    const BigDecimal_ROUND_UNNECESSARY = 7;

	interface IBigDecimal extends INumber
	{
		/**
		 * Returns a new {@code BigDecimal} instance whose value is equal to {@code
		 * unscaledVal} 10^(-{@code scale}). The scale of the result is {@code
		 * scale}, and its unscaled value is {@code unscaledVal}.
		 *
		 * @param unscaledVal
		 *            unscaled value to be used to construct the new {@code
		 *            BigDecimal}.
		 * @param scale
		 *            scale to be used to construct the new {@code BigDecimal}.
		 * @return {@code BigDecimal} instance with the value {@code unscaledVal}*
		 *         10^(-{@code unscaledVal}).
		 */
		ValueOf(
			[in] Int64 unscaledVal,
			[in] Int64 scale,
			[out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} instance whose value is equal to {@code
		 * unscaledVal}. The scale of the result is {@code 0}, and its unscaled
		 * value is {@code unscaledVal}.
		 *
		 * @param unscaledVal
		 *            value to be converted to a {@code BigDecimal}.
		 * @return {@code BigDecimal} instance with the value {@code unscaledVal}.
		 */
		ValueOf2(
			[in] Int64 unscaledVal,
			[out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} instance whose value is equal to {@code
		 * val}. The new decimal is constructed as if the {@code BigDecimal(String)}
		 * constructor is called with an argument which is equal to {@code
		 * Double.toString(val)}. For example, {@code valueOf("0.1")} is converted to
		 * (unscaled=1, scale=1), although the double {@code 0.1} cannot be
		 * represented exactly as a double value. In contrast to that, a new {@code
		 * BigDecimal(0.1)} instance has the value {@code
		 * 0.1000000000000000055511151231257827021181583404541015625} with an
		 * unscaled value {@code 1000000000000000055511151231257827021181583404541015625}
		 * and the scale {@code 55}.
		 *
		 * @param val
		 *            double value to be converted to a {@code BigDecimal}.
		 * @return {@code BigDecimal} instance with the value {@code val}.
		 * @throws NumberFormatException
		 *             if {@code val} is infinite or {@code val} is not a number
		 */
		ValueOf3(
			[in] Double val,
			[out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this + augend}.
		 * The scale of the result is the maximum of the scales of the two
		 * arguments.
		 *
		 * @param augend
		 *            value to be added to {@code this}.
		 * @return {@code this + augend}.
		 * @throws NullPointerException
		 *             if {@code augend == null}.
		 */
		Add(
			[in] IBigDecimal* augend,
			[out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this + augend}.
		 * The result is rounded according to the passed context {@code mc}.
		 *
		 * @param augend
		 *            value to be added to {@code this}.
		 * @param mc
		 *            rounding mode and precision for the result of this operation.
		 * @return {@code this + augend}.
		 * @throws NullPointerException
		 *             if {@code augend == null} or {@code mc == null}.
		 */
		Add2(
            [in] IBigDecimal* augend,
            [in] IMathContext* mc,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}.
		 * The scale of the result is the maximum of the scales of the two arguments.
		 *
		 * @param subtrahend
		 *            value to be subtracted from {@code this}.
		 * @return {@code this - subtrahend}.
		 * @throws NullPointerException
		 *             if {@code subtrahend == null}.
		 */
		Subtract(
            [in] IBigDecimal* subtrahend,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}.
		 * The result is rounded according to the passed context {@code mc}.
		 *
		 * @param subtrahend
		 *            value to be subtracted from {@code this}.
		 * @param mc
		 *            rounding mode and precision for the result of this operation.
		 * @return {@code this - subtrahend}.
		 * @throws NullPointerException
		 *             if {@code subtrahend == null} or {@code mc == null}.
		 */
		Subtract2(
            [in] IBigDecimal* subtrahend,
            [in] IMathContext* mc,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this *
		 * multiplicand}. The scale of the result is the sum of the scales of the
		 * two arguments.
		 *
		 * @param multiplicand
		 *            value to be multiplied with {@code this}.
		 * @return {@code this * multiplicand}.
		 * @throws NullPointerException
		 *             if {@code multiplicand == null}.
		 */
		Multiply(
		    [in] IBigDecimal* multiplicand,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this *
		 * multiplicand}. The result is rounded according to the passed context
		 * {@code mc}.
		 *
		 * @param multiplicand
		 *            value to be multiplied with {@code this}.
		 * @param mc
		 *            rounding mode and precision for the result of this operation.
		 * @return {@code this * multiplicand}.
		 * @throws NullPointerException
		 *             if {@code multiplicand == null} or {@code mc == null}.
		 */
		Multiply2(
            [in] IBigDecimal* multiplicand,
            [in] IMathContext* mc,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
		 * As scale of the result the parameter {@code scale} is used. If rounding
		 * is required to meet the specified scale, then the specified rounding mode
		 * {@code roundingMode} is applied.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @param scale
		 *            the scale of the result returned.
		 * @param roundingMode
		 *            rounding mode to be used to round the result.
		 * @return {@code this / divisor} rounded according to the given rounding
		 *         mode.
		 * @throws NullPointerException
		 *             if {@code divisor == null}.
		 * @throws IllegalArgumentException
		 *             if {@code roundingMode} is not a valid rounding mode.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 * @throws ArithmeticException
		 *             if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
		 *             necessary according to the given scale.
		 */
		Divide(
            [in] IBigDecimal* divisor,
            [in] Int32 scale,
            [in] Int32 roundingMode,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
		 * As scale of the result the parameter {@code scale} is used. If rounding
		 * is required to meet the specified scale, then the specified rounding mode
		 * {@code roundingMode} is applied.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @param scale
		 *            the scale of the result returned.
		 * @param roundingMode
		 *            rounding mode to be used to round the result.
		 * @return {@code this / divisor} rounded according to the given rounding
		 *         mode.
		 * @throws NullPointerException
		 *             if {@code divisor == null} or {@code roundingMode == null}.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 * @throws ArithmeticException
		 *             if {@code roundingMode == RoundingMode.UNNECESSAR}Y and
		 *             rounding is necessary according to the given scale and given
		 *             precision.
		 */
		Divide2(
            [in] IBigDecimal* divisor,
            [in] Int32 scale,
            [in] RoundingMode roundingMode,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
		 * The scale of the result is the scale of {@code this}. If rounding is
		 * required to meet the specified scale, then the specified rounding mode
		 * {@code roundingMode} is applied.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @param roundingMode
		 *            rounding mode to be used to round the result.
		 * @return {@code this / divisor} rounded according to the given rounding
		 *         mode.
		 * @throws NullPointerException
		 *             if {@code divisor == null}.
		 * @throws IllegalArgumentException
		 *             if {@code roundingMode} is not a valid rounding mode.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 * @throws ArithmeticException
		 *             if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
		 *             necessary according to the scale of this.
		 */
		Divide3(
            [in] IBigDecimal* divisor,
            [in] Int32 roundingMode,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
		 * The scale of the result is the scale of {@code this}. If rounding is
		 * required to meet the specified scale, then the specified rounding mode
		 * {@code roundingMode} is applied.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @param roundingMode
		 *            rounding mode to be used to round the result.
		 * @return {@code this / divisor} rounded according to the given rounding
		 *         mode.
		 * @throws NullPointerException
		 *             if {@code divisor == null} or {@code roundingMode == null}.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 * @throws ArithmeticException
		 *             if {@code roundingMode == RoundingMode.UNNECESSARY} and
		 *             rounding is necessary according to the scale of this.
		 */
		Divide4(
            [in] IBigDecimal* divisor,
			[in] RoundingMode roundingMode,
			[out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
		 * The scale of the result is the difference of the scales of {@code this}
		 * and {@code divisor}. If the exact result requires more digits, then the
		 * scale is adjusted accordingly. For example, {@code 1/128 = 0.0078125}
		 * which has a scale of {@code 7} and precision {@code 5}.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @return {@code this / divisor}.
		 * @throws NullPointerException
		 *             if {@code divisor == null}.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 * @throws ArithmeticException
		 *             if the result cannot be represented exactly.
		 */
		Divide5(
            [in] IBigDecimal* divisor,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
		 * The result is rounded according to the passed context {@code mc}. If the
		 * passed math context specifies precision {@code 0}, then this call is
		 * equivalent to {@code this.divide(divisor)}.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @param mc
		 *            rounding mode and precision for the result of this operation.
		 * @return {@code this / divisor}.
		 * @throws NullPointerException
		 *             if {@code divisor == null} or {@code mc == null}.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 * @throws ArithmeticException
		 *             if {@code mc.getRoundingMode() == UNNECESSARY} and rounding
		 *             is necessary according {@code mc.getPrecision()}.
		 */
		Divide6(
		    [in] IBigDecimal* divisor,
			[in] IMathContext* mc,
			[out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is the integral part of
		 * {@code this / divisor}. The quotient is rounded down towards zero to the
		 * next integer. For example, {@code 0.5/0.2 = 2}.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @return integral part of {@code this / divisor}.
		 * @throws NullPointerException
		 *             if {@code divisor == null}.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 */
		DivideToIntegralValue(
            [in] IBigDecimal* divisor,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is the integral part of
		 * {@code this / divisor}. The quotient is rounded down towards zero to the
		 * next integer. The rounding mode passed with the parameter {@code mc} is
		 * not considered. But if the precision of {@code mc > 0} and the integral
		 * part requires more digits, then an {@code ArithmeticException} is thrown.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @param mc
		 *            math context which determines the maximal precision of the
		 *            result.
		 * @return integral part of {@code this / divisor}.
		 * @throws NullPointerException
		 *             if {@code divisor == null} or {@code mc == null}.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 * @throws ArithmeticException
		 *             if {@code mc.getPrecision() > 0} and the result requires more
		 *             digits to be represented.
		 */
        DivideToIntegralValue2(
		    [in] IBigDecimal* divisor,
			[in] IMathContext* mc,
			[out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this % divisor}.
		 * <p>
		 * The remainder is defined as {@code this -
		 * this.divideToIntegralValue(divisor) * divisor}.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @return {@code this % divisor}.
		 * @throws NullPointerException
		 *             if {@code divisor == null}.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 */
		Remainder(
            [in] IBigDecimal* divisor,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this % divisor}.
		 * <p>
		 * The remainder is defined as {@code this -
		 * this.divideToIntegralValue(divisor) * divisor}.
		 * <p>
		 * The specified rounding mode {@code mc} is used for the division only.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @param mc
		 *            rounding mode and precision to be used.
		 * @return {@code this % divisor}.
		 * @throws NullPointerException
		 *             if {@code divisor == null}.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 * @throws ArithmeticException
		 *             if {@code mc.getPrecision() > 0} and the result of {@code
		 *             this.divideToIntegralValue(divisor, mc)} requires more digits
		 *             to be represented.
		 */
        Remainder2(
		    [in] IBigDecimal* divisor,
			[in] IMathContext* mc,
			[out] IBigDecimal** newObj);

		/**
		 * Returns a {@code BigDecimal} array which contains the integral part of
		 * {@code this / divisor} at index 0 and the remainder {@code this %
		 * divisor} at index 1. The quotient is rounded down towards zero to the
		 * next integer.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @return {@code [this.divideToIntegralValue(divisor),
		 *         this.remainder(divisor)]}.
		 * @throws NullPointerException
		 *             if {@code divisor == null}.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 * @see #divideToIntegralValue
		 * @see #remainder
		 */
		DivideAndRemainder(
    		[in] IBigDecimal* divisor,
            [out] ArrayOf<IBigDecimal*> newObjArray);

		/**
		 * Returns a {@code BigDecimal} array which contains the integral part of
		 * {@code this / divisor} at index 0 and the remainder {@code this %
		 * divisor} at index 1. The quotient is rounded down towards zero to the
		 * next integer. The rounding mode passed with the parameter {@code mc} is
		 * not considered. But if the precision of {@code mc > 0} and the integral
		 * part requires more digits, then an {@code ArithmeticException} is thrown.
		 *
		 * @param divisor
		 *            value by which {@code this} is divided.
		 * @param mc
		 *            math context which determines the maximal precision of the
		 *            result.
		 * @return {@code [this.divideToIntegralValue(divisor),
		 *         this.remainder(divisor)]}.
		 * @throws NullPointerException
		 *             if {@code divisor == null}.
		 * @throws ArithmeticException
		 *             if {@code divisor == 0}.
		 * @see #divideToIntegralValue
		 * @see #remainder
		 */
		DivideAndRemainder2(
		    [in] IBigDecimal* divisor,
			[in] IMathContext* mc,
			[out] ArrayOf<IBigDecimal*> newObjArray);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this ^ n}. The
		 * scale of the result is {@code n} times the scales of {@code this}.
		 * <p>
		 * {@code x.pow(0)} returns {@code 1}, even if {@code x == 0}.
		 * <p>
		 * Implementation Note: The implementation is based on the ANSI standard
		 * X3.274-1996 algorithm.
		 *
		 * @param n
		 *            exponent to which {@code this} is raised.
		 * @return {@code this ^ n}.
		 * @throws ArithmeticException
		 *             if {@code n < 0} or {@code n > 999999999}.
		 */
		Pow(
            [in] Int32 n,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this ^ n}. The
		 * result is rounded according to the passed context {@code mc}.
		 * <p>
		 * Implementation Note: The implementation is based on the ANSI standard
		 * X3.274-1996 algorithm.
		 *
		 * @param n
		 *            exponent to which {@code this} is raised.
		 * @param mc
		 *            rounding mode and precision for the result of this operation.
		 * @return {@code this ^ n}.
		 * @throws ArithmeticException
		 *             if {@code n < 0} or {@code n > 999999999}.
		 */
		Pow2(
            [in] Int32 n,
            [in] IMathContext* mc,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is the absolute value of
		 * {@code this}. The scale of the result is the same as the scale of this.
		 *
		 * @return {@code abs(this)}
		 */
		Abs(
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is the absolute value of
		 * {@code this}. The result is rounded according to the passed context
		 * {@code mc}.
		 *
		 * @param mc
		 *            rounding mode and precision for the result of this operation.
		 * @return {@code abs(this)}
		 */
		Abs2(
            [in] IMathContext* mc,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is the {@code -this}. The
		 * scale of the result is the same as the scale of this.
		 *
		 * @return {@code -this}
		 */
		Negate(
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is the {@code -this}. The
		 * result is rounded according to the passed context {@code mc}.
		 *
		 * @param mc
		 *            rounding mode and precision for the result of this operation.
		 * @return {@code -this}
		 */
		Negate2(
            [in] IMathContext* mc,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code +this}. The scale
		 * of the result is the same as the scale of this.
		 *
		 * @return {@code this}
		 */
		Plus(
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code +this}. The result
		 * is rounded according to the passed context {@code mc}.
		 *
		 * @param mc
		 *            rounding mode and precision for the result of this operation.
		 * @return {@code this}, rounded
		 */
		Plus2(
            [in] IMathContext* mc,
            [out] IBigDecimal** newObj);

		/**
		 * Returns the sign of this {@code BigDecimal}.
		 *
		 * @return {@code -1} if {@code this < 0},
		 *         {@code 0} if {@code this == 0},
		 *         {@code 1} if {@code this > 0}.     */
		Signum(
            [out] Int32* sign);

		/**
		 * Returns the scale of this {@code BigDecimal}. The scale is the number of
		 * digits behind the decimal point. The value of this {@code BigDecimal} is
		 * the unsignedValue * 10^(-scale). If the scale is negative, then this
		 * {@code BigDecimal} represents a big integer.
		 *
		 * @return the scale of this {@code BigDecimal}.
		 */
		Scale(
            [out] Int32* scale);

		/**
		 * Returns the precision of this {@code BigDecimal}. The precision is the
		 * number of decimal digits used to represent this decimal. It is equivalent
		 * to the number of digits of the unscaled value. The precision of {@code 0}
		 * is {@code 1} (independent of the scale).
		 *
		 * @return the precision of this {@code BigDecimal}.
		 */
		Precision(
            [out] Int32* precision);

		/**
		 * Returns the unscaled value (mantissa) of this {@code BigDecimal} instance
		 * as a {@code BigInteger}. The unscaled value can be computed as {@code
		 * this} 10^(scale).
		 *
		 * @return unscaled value (this * 10^(scale)).
		 */
		UnscaledValue(
            [out] IBigInteger** unscaledValue);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this}, rounded
		 * according to the passed context {@code mc}.
		 * <p>
		 * If {@code mc.precision = 0}, then no rounding is performed.
		 * <p>
		 * If {@code mc.precision > 0} and {@code mc.roundingMode == UNNECESSARY},
		 * then an {@code ArithmeticException} is thrown if the result cannot be
		 * represented exactly within the given precision.
		 *
		 * @param mc
		 *            rounding mode and precision for the result of this operation.
		 * @return {@code this} rounded according to the passed context.
		 * @throws ArithmeticException
		 *             if {@code mc.precision > 0} and {@code mc.roundingMode ==
		 *             UNNECESSARY} and this cannot be represented within the given
		 *             precision.
		 */
		Round(
            [in] IMathContext* mc,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} instance with the specified scale.
		 * <p>
		 * If the new scale is greater than the old scale, then additional zeros are
		 * added to the unscaled value. In this case no rounding is necessary.
		 * <p>
		 * If the new scale is smaller than the old scale, then trailing digits are
		 * removed. If these trailing digits are not zero, then the remaining
		 * unscaled value has to be rounded. For this rounding operation the
		 * specified rounding mode is used.
		 *
		 * @param newScale
		 *            scale of the result returned.
		 * @param roundingMode
		 *            rounding mode to be used to round the result.
		 * @return a new {@code BigDecimal} instance with the specified scale.
		 * @throws NullPointerException
		 *             if {@code roundingMode == null}.
		 * @throws ArithmeticException
		 *             if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
		 *             necessary according to the given scale.
		 */
		SetScale(
		    [in] Int32 newScale,
		    [in] RoundingMode roundingMode,
			[out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} instance with the specified scale.
		 * <p>
		 * If the new scale is greater than the old scale, then additional zeros are
		 * added to the unscaled value. In this case no rounding is necessary.
		 * <p>
		 * If the new scale is smaller than the old scale, then trailing digits are
		 * removed. If these trailing digits are not zero, then the remaining
		 * unscaled value has to be rounded. For this rounding operation the
		 * specified rounding mode is used.
		 *
		 * @param newScale
		 *            scale of the result returned.
		 * @param roundingMode
		 *            rounding mode to be used to round the result.
		 * @return a new {@code BigDecimal} instance with the specified scale.
		 * @throws IllegalArgumentException
		 *             if {@code roundingMode} is not a valid rounding mode.
		 * @throws ArithmeticException
		 *             if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
		 *             necessary according to the given scale.
		 */
		SetScale2(
            [in] Int32 newScale,
			[in] Int32 roundingMode,
            [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} instance with the specified scale. If
		 * the new scale is greater than the old scale, then additional zeros are
		 * added to the unscaled value. If the new scale is smaller than the old
		 * scale, then trailing zeros are removed. If the trailing digits are not
		 * zeros then an ArithmeticException is thrown.
		 * <p>
		 * If no exception is thrown, then the following equation holds: {@code
		 * x.setScale(s).compareTo(x) == 0}.
		 *
		 * @param newScale
		 *            scale of the result returned.
		 * @return a new {@code BigDecimal} instance with the specified scale.
		 * @throws ArithmeticException
		 *             if rounding would be necessary.
		 */
		SetScale3(
            [in] Int32 newScale,
			[out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} instance where the decimal point has
		 * been moved {@code n} places to the left. If {@code n < 0} then the
		 * decimal point is moved {@code -n} places to the right.
		 * <p>
		 * The result is obtained by changing its scale. If the scale of the result
		 * becomes negative, then its precision is increased such that the scale is
		 * zero.
		 * <p>
		 * Note, that {@code movePointLeft(0)} returns a result which is
		 * mathematically equivalent, but which has {@code scale >= 0}.
		 *
		 * @param n
		 *            number of placed the decimal point has to be moved.
		 * @return {@code this * 10^(-n}).
		 */
		MovePointLeft(
           [in] Int32 n,
		   [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} instance where the decimal point has
		 * been moved {@code n} places to the right. If {@code n < 0} then the
		 * decimal point is moved {@code -n} places to the left.
		 * <p>
		 * The result is obtained by changing its scale. If the scale of the result
		 * becomes negative, then its precision is increased such that the scale is
		 * zero.
		 * <p>
		 * Note, that {@code movePointRight(0)} returns a result which is
		 * mathematically equivalent, but which has scale >= 0.
		 *
		 * @param n
		 *            number of placed the decimal point has to be moved.
		 * @return {@code this * 10^n}.
		 */
		MovePointRight(
           [in] Int32 n,
		   [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} whose value is {@code this} 10^{@code n}.
		 * The scale of the result is {@code this.scale()} - {@code n}.
		 * The precision of the result is the precision of {@code this}.
		 * <p>
		 * This method has the same effect as {@link #movePointRight}, except that
		 * the precision is not changed.
		 *
		 * @param n
		 *            number of places the decimal point has to be moved.
		 * @return {@code this * 10^n}
		 */
		ScaleByPowerOfTen(
     	   [in] Int32 n,
		   [out] IBigDecimal** newObj);

		/**
		 * Returns a new {@code BigDecimal} instance with the same value as {@code
		 * this} but with a unscaled value where the trailing zeros have been
		 * removed. If the unscaled value of {@code this} has n trailing zeros, then
		 * the scale and the precision of the result has been reduced by n.
		 *
		 * @return a new {@code BigDecimal} instance equivalent to this where the
		 *         trailing zeros of the unscaled value have been removed.
		 */
		StripTrailingZeros(
		   [out] IBigDecimal** newObj);

		/**
		 * Compares this {@code BigDecimal} with {@code val}. Returns one of the
		 * three values {@code 1}, {@code 0}, or {@code -1}. The method behaves as
		 * if {@code this.subtract(val)} is computed. If this difference is > 0 then
		 * 1 is returned, if the difference is < 0 then -1 is returned, and if the
		 * difference is 0 then 0 is returned. This means, that if two decimal
		 * instances are compared which are equal in value but differ in scale, then
		 * these two instances are considered as equal.
		 *
		 * @param val
		 *            value to be compared with {@code this}.
		 * @return {@code 1} if {@code this > val}, {@code -1} if {@code this < val},
		 *         {@code 0} if {@code this == val}.
		 * @throws NullPointerException
		 *             if {@code val == null}.
		 */
		CompareTo(
            [in] IBigDecimal* val,
            [out] Int32* cpmResult);

		/**
		 * Returns the minimum of this {@code BigDecimal} and {@code val}.
		 *
		 * @param val
		 *            value to be used to compute the minimum with this.
		 * @return {@code min(this, val}.
		 * @throws NullPointerException
		 *             if {@code val == null}.
		 */
		Min(
            [in] IBigDecimal* val,
            [out] IBigDecimal** minObj);

		/**
		 * Returns the maximum of this {@code BigDecimal} and {@code val}.
		 *
		 * @param val
		 *            value to be used to compute the maximum with this.
		 * @return {@code max(this, val}.
		 * @throws NullPointerException
		 *             if {@code val == null}.
		 */
		Max(
            [in] IBigDecimal* val,
            [out] IBigDecimal** maxObj);

		/**
		 * Returns a string representation of this {@code BigDecimal}. This
		 * representation always prints all significant digits of this value.
		 * <p>
		 * If the scale is negative or if {@code scale - precision >= 6} then
		 * engineering notation is used. Engineering notation is similar to the
		 * scientific notation except that the exponent is made to be a multiple of
		 * 3 such that the integer part is >= 1 and < 1000.
		 *
		 * @return a string representation of {@code this} in engineering notation
		 *         if necessary.
		 */
		ToEngineeringString(
            [out] String* representation);

		/**
		 * Returns a string representation of this {@code BigDecimal}. No scientific
		 * notation is used. This methods adds zeros where necessary.
		 * <p>
		 * If this string representation is used to create a new instance, this
		 * instance is generally not identical to {@code this} as the precision
		 * changes.
		 * <p>
		 * {@code x.equals(new BigDecimal(x.toPlainString())} usually returns
		 * {@code false}.
		 * <p>
		 * {@code x.compareTo(new BigDecimal(x.toPlainString())} returns {@code 0}.
		 *
		 * @return a string representation of {@code this} without exponent part.
		 */
		ToPlainString(
            [out] String* representation);

		/**
		 * Returns this {@code BigDecimal} as a big integer instance. A fractional
		 * part is discarded.
		 *
		 * @return this {@code BigDecimal} as a big integer instance.
		 */
		ToBigInteger(
            [out] IBigInteger** newObj);

		/**
		 * Returns this {@code BigDecimal} as a big integer instance if it has no
		 * fractional part. If this {@code BigDecimal} has a fractional part, i.e.
		 * if rounding would be necessary, an {@code ArithmeticException} is thrown.
		 *
		 * @return this {@code BigDecimal} as a big integer value.
		 * @throws ArithmeticException
		 *             if rounding is necessary.
		 */
		ToBigIntegerExact(
            [out] IBigInteger** newObj);

		/**
		 * Returns this {@code BigDecimal} as a long value if it has no fractional
		 * part and if its value fits to the int range ([-2^{63}..2^{63}-1]). If
		 * these conditions are not met, an {@code ArithmeticException} is thrown.
		 *
		 * @return this {@code BigDecimal} as a long value.
		 * @throws ArithmeticException
		 *             if rounding is necessary or the number doesn't fit in a long.
		 */
		LongValueExact(
            [out] Int64* value);

		/**
		 * Returns this {@code BigDecimal} as a int value if it has no fractional
		 * part and if its value fits to the int range ([-2^{31}..2^{31}-1]). If
		 * these conditions are not met, an {@code ArithmeticException} is thrown.
		 *
		 * @return this {@code BigDecimal} as a int value.
		 * @throws ArithmeticException
		 *             if rounding is necessary or the number doesn't fit in a int.
		 */
		IntValueExact(
            [out] Int32* value);

		/**
		 * Returns this {@code BigDecimal} as a short value if it has no fractional
		 * part and if its value fits to the short range ([-2^{15}..2^{15}-1]). If
		 * these conditions are not met, an {@code ArithmeticException} is thrown.
		 *
		 * @return this {@code BigDecimal} as a short value.
		 * @throws ArithmeticException
		 *             if rounding is necessary of the number doesn't fit in a
		 *             short.
		 */
		ShortValueExact(
            [out] Int16* value);

		/**
		 * Returns this {@code BigDecimal} as a byte value if it has no fractional
		 * part and if its value fits to the byte range ([-128..127]). If these
		 * conditions are not met, an {@code ArithmeticException} is thrown.
		 *
		 * @return this {@code BigDecimal} as a byte value.
		 * @throws ArithmeticException
		 *             if rounding is necessary or the number doesn't fit in a byte.
		 */
		ByteValueExact(
            [out] Byte* value);

		/**
		 * Returns the unit in the last place (ULP) of this {@code BigDecimal}
		 * instance. An ULP is the distance to the nearest big decimal with the same
		 * precision.
		 * <p>
		 * The amount of a rounding error in the evaluation of a floating-point
		 * operation is often expressed in ULPs. An error of 1 ULP is often seen as
		 * a tolerable error.
		 * <p>
		 * For class {@code BigDecimal}, the ULP of a number is simply 10^(-scale).
		 * <p>
		 * For example, {@code new BigDecimal(0.1).ulp()} returns {@code 1E-55}.
		 *
		 * @return unit in the last place (ULP) of this {@code BigDecimal} instance.
		 */
		Ulp(
            [out] IBigDecimal** newObj);
    }
}