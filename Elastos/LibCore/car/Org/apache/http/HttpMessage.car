
module
{
    interface IProtocolVersion;
    interface IHeader;
    interface IHeaderIterator;
    interface IHttpParams;

    /**
     * A generic HTTP message.
     * Holds what is common between requests and responses.
     *
     * @author <a href="mailto:oleg at ural.ru">Oleg Kalnichevski</a>
     *
     * @version $Revision: 610823 $
     *
     * @since 4.0
     */
    interface IHttpMessage {
        /**
         * Returns the protocol version this message is compatible with.
         */
        GetProtocolVersion(
            [out] IProtocolVersion** protocolVersion);

        /**
         * Checks if a certain header is present in this message. Header values are
         * ignored.
         *
         * @param name the header name to check for.
         * @return true if at least one header with this name is present.
         */
        ContainsHeader(
            [in] String name,
            [out] Boolean* result);

        /**
         * Returns all the headers with a specified name of this message. Header values
         * are ignored. Headers are orderd in the sequence they will be sent over a
         * connection.
         *
         * @param name the name of the headers to return.
         * @return the headers whose name property equals <code>name</code>.
         */
        GetHeaders(
            [in] String name,
            [out] IObjectContainer** headers);

        /**
         * Returns the first header with a specified name of this message. Header
         * values are ignored. If there is more than one matching header in the
         * message the first element of {@link #getHeaders(String)} is returned.
         * If there is no matching header in the message <code>null</code> is
         * returned.
         *
         * @param name the name of the header to return.
         * @return the first header whose name property equals <code>name</code>
         *   or <code>null</code> if no such header could be found.
         */
        GetFirstHeader(
            [in] String name,
            [out] IHeader** header);

        /**
         * Returns the last header with a specified name of this message. Header values
         * are ignored. If there is more than one matching header in the message the
         * last element of {@link #getHeaders(String)} is returned. If there is no
         * matching header in the message <code>null</code> is returned.
         *
         * @param name the name of the header to return.
         * @return the last header whose name property equals <code>name</code>.
         *   or <code>null</code> if no such header could be found.
         */
        GetLastHeader(
            [in] String name,
            [out] IHeader** header);

        /**
         * Returns all the headers of this message. Headers are orderd in the sequence
         * they will be sent over a connection.
         *
         * @return all the headers of this message
         */
        GetAllHeaders(
            [out] IObjectContainer** headers);

        /**
         * Adds a header to this message. The header will be appended to the end of
         * the list.
         *
         * @param header the header to append.
         */
        AddHeader(
            [in] IHeader* header);

        /**
         * Adds a header to this message. The header will be appended to the end of
         * the list.
         *
         * @param name the name of the header.
         * @param value the value of the header.
         */
        AddHeaderEx(
            [in] String name,
            [in] String value);

        /**
         * Overwrites the first header with the same name. The new header will be appended to
         * the end of the list, if no header with the given name can be found.
         *
         * @param header the header to set.
         */
        SetHeader(
            [in] IHeader* header);

        /**
         * Overwrites the first header with the same name. The new header will be appended to
         * the end of the list, if no header with the given name can be found.
         *
         * @param name the name of the header.
         * @param value the value of the header.
         */
        SetHeaderEx(
            [in] String name,
            [in] String value);

        /**
         * Overwrites all the headers in the message.
         *
         * @param headers the array of headers to set.
         */
        SetHeaders(
            [in] IObjectContainer* headers);

        /**
         * Removes a header from this message.
         *
         * @param header the header to remove.
         */
        RemoveHeader(
            [in] IHeader* header);

        /**
         * Removes all headers with a certain name from this message.
         *
         * @param name The name of the headers to remove.
         */
        RemoveHeaders(
            [in] String name);

        /**
         * Returns an iterator of all the headers.
         *
         * @return Iterator that returns Header objects in the sequence they are
         *         sent over a connection.
         */
        HeaderIterator(
            [out] IHeaderIterator** it);

        /**
         * Returns an iterator of the headers with a given name.
         *
         * @param name      the name of the headers over which to iterate, or
         *                  <code>null</code> for all headers
         *
         * @return Iterator that returns Header objects with the argument name
         *         in the sequence they are sent over a connection.
         */
        HeaderIteratorEx(
            [in] String name,
            [out] IHeaderIterator** it);

        /**
         * Returns the parameters effective for this message as set by
         * {@link #setParams(HttpParams)}.
         */
        GetParams(
            [out] IHttpParams** params);

        /**
         * Provides parameters to be used for the processing of this message.
         * @param params the parameters
         */
        SetParams(
            [in] IHttpParams* params);
    }
}
