
module
{
    interface IHttpHost;

    /**
     * The tunnelling type of a route.
     * Plain routes are established by connecting to the target or
     * the first proxy.
     * Tunnelled routes are established by connecting to the first proxy
     * and tunnelling through all proxies to the target.
     * Routes without a proxy cannot be tunnelled.
     */
    enum TunnelType {
        PLAIN,
        TUNNELLED,
    }

    /**
     * The layering type of a route.
     * Plain routes are established by connecting or tunnelling.
     * Layered routes are established by layering a protocol such as TLS/SSL
     * over an existing connection.
     * Protocols can only be layered over a tunnel to the target, or
     * or over a direct connection without proxies.
     * <br/>
     * Layering a protocol
     * over a direct connection makes little sense, since the connection
     * could be established with the new protocol in the first place.
     * But we don't want to exclude that use case.
     */
    enum LayerType  {
        PLAIN,
        LAYERED,
    }

    /**
     * Read-only interface for route information.
     *
     * @author <a href="mailto:rolandw at apache.org">Roland Weber</a>
     *
     *
     * <!-- empty lines to avoid svn diff problems -->
     * @version $Revision: 652200 $
     *
     * @since 4.0
     */
    interface IRouteInfo {
        /**
         * Obtains the target host.
         *
         * @return the target host
         */
        GetTargetHost(
            [out] IHttpHost** host);

        /**
         * Obtains the local address to connect from.
         *
         * @return  the local address,
         *          or <code>null</code>
         */
        GetLocalAddress(
            [out] IInetAddress** localAddress);

        /**
         * Obtains the number of hops in this route.
         * A direct route has one hop. A route through a proxy has two hops.
         * A route through a chain of <i>n</i> proxies has <i>n+1</i> hops.
         *
         * @return  the number of hops in this route
         */
        GetHopCount(
            [out] Int32* num);

        /**
         * Obtains the target of a hop in this route.
         * The target of the last hop is the {@link #getTargetHost target host},
         * the target of previous hops is the respective proxy in the chain.
         * For a route through exactly one proxy, target of hop 0 is the proxy
         * and target of hop 1 is the target host.
         *
         * @param hop       index of the hop for which to get the target,
         *                  0 for first
         *
         * @return  the target of the given hop
         *
         * @throws IllegalArgumentException
         *  if the argument is negative or not less than
         *  {@link #getHopCount getHopCount()}
         */
        GetHopTarget(
            [in] Int32 hop,
            [out] IHttpHost** host);

        /**
         * Obtains the first proxy host.
         *
         * @return the first proxy in the proxy chain, or
         *         <code>null</code> if this route is direct
         */
        GetProxyHost(
            [out] IHttpHost** host);

        /**
         * Obtains the tunnel type of this route.
         * If there is a proxy chain, only end-to-end tunnels are considered.
         *
         * @return  the tunnelling type
         */
        GetTunnelType(
            [out] TunnelType* tunnelType);

        /**
         * Checks whether this route is tunnelled through a proxy.
         * If there is a proxy chain, only end-to-end tunnels are considered.
         *
         * @return  <code>true</code> if tunnelled end-to-end through at least
         *          one proxy,
         *          <code>false</code> otherwise
         */
        IsTunnelled(
            [out] Boolean* isTunnelled);

        /**
         * Obtains the layering type of this route.
         * In the presence of proxies, only layering over an end-to-end tunnel
         * is considered.
         *
         * @return  the layering type
         */
        GetLayerType(
            [out] LayerType* layerType);

        /**
         * Checks whether this route includes a layered protocol.
         * In the presence of proxies, only layering over an end-to-end tunnel
         * is considered.
         *
         * @return  <code>true</code> if layered,
         *          <code>false</code> otherwise
         */
        IsLayered(
            [out] Boolean* isLayered);

        /**
         * Checks whether this route is secure.
         *
         * @return  <code>true</code> if secure,
         *          <code>false</code> otherwise
         */
        IsSecure(
            [out] Boolean* isSecure);
    }
}
