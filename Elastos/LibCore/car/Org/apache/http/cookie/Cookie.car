
module
{
    /**
     * HTTP "magic-cookie" represents a piece of state information
     * that the HTTP agent and the target server can exchange to maintain
     * a session.
     *
     * @author <a href="mailto:oleg at ural.ru">Oleg Kalnichevski</a>
     *
     * @since 4.0
     */
    interface ICookie {
        /**
         * Returns the name.
         *
         * @return String name The name
         */
        GetName(
            [out] String* name);

        /**
         * Returns the value.
         *
         * @return String value The current value.
         */
        GetValue(
            [out] String* value);

        /**
         * Returns the comment describing the purpose of this cookie, or
         * <tt>null</tt> if no such comment has been defined.
         *
         * @return comment
         */
        GetComment(
            [out] String* comment);

        /**
         * If a user agent (web browser) presents this cookie to a user, the
         * cookie's purpose will be described by the information at this URL.
         */
        GetCommentURL(
            [out] String* URL);

        /**
         * Returns the expiration {@link Date} of the cookie, or <tt>null</tt>
         * if none exists.
         * <p><strong>Note:</strong> the object returned by this method is
         * considered immutable. Changing it (e.g. using setTime()) could result
         * in undefined behaviour. Do so at your peril. </p>
         * @return Expiration {@link Date}, or <tt>null</tt>.
         */
        GetExpiryDate(
            [out] IDate** date);

        /**
         * Returns <tt>false</tt> if the cookie should be discarded at the end
         * of the "session"; <tt>true</tt> otherwise.
         *
         * @return <tt>false</tt> if the cookie should be discarded at the end
         *         of the "session"; <tt>true</tt> otherwise
         */
        IsPersistent(
            [out] Boolean* isPersistent);

        /**
         * Returns domain attribute of the cookie.
         *
         * @return the value of the domain attribute
         */
        GetDomain(
            [out] String* value);

        /**
         * Returns the path attribute of the cookie
         *
         * @return The value of the path attribute.
         */
        GetPath(
            [out] String* path);

        /**
         * Get the Port attribute. It restricts the ports to which a cookie
         * may be returned in a Cookie request header.
         */
        GetPorts(
            [out, callee] ArrayOf<Int32>* ports);

        /**
         * Indicates whether this cookie requires a secure connection.
         *
         * @return  <code>true</code> if this cookie should only be sent
         *          over secure connections, <code>false</code> otherwise.
         */
        IsSecure(
            [out] Boolean* isSecure);

        /**
         * Returns the version of the cookie specification to which this
         * cookie conforms.
         *
         * @return the version of the cookie.
         */
        GetVersion(
            [out] Int32* value);

        /**
         * Returns true if this cookie has expired.
         * @param date Current time
         *
         * @return <tt>true</tt> if the cookie has expired.
         */
        IsExpired(
            [in] IDate* date,
            [out] Boolean* result);
    }
}
