
module
{
    interface IHttpParams;
    interface IClientConnectionManager;
    interface IHttpUriRequest;
    interface IHttpResponse;
    interface IHttpContext;
    interface IHttpHost;
    interface IHttpRequest;

    /**
     * Interface for an HTTP client.
     * HTTP clients encapsulate a smorgasbord of objects required to
     * execute HTTP requests while handling cookies, authentication,
     * connection management, and other features.
     * Thread safety of HTTP clients depends on the implementation
     * and configuration of the specific client.
     *
     * @author <a href="mailto:rolandw at apache.org">Roland Weber</a>
     *
     *
     * <!-- empty lines to avoid svn diff problems -->
     * @version   $Revision: 676020 $
     *
     * @since 4.0
     */
    interface IHttpClient {
        /**
         * Obtains the parameters for this client.
         * These parameters will become defaults for all requests being
         * executed with this client, and for the parameters of
         * dependent objects in this client.
         *
         * @return  the default parameters
         */
        GetParams(
            [out] IHttpParams** params);

        /**
         * Obtains the connection manager used by this client.
         *
         * @return  the connection manager
         */
        GetConnectionManager(
            [out] IClientConnectionManager** connManager);

        /**
         * Executes a request using the default context.
         *
         * @param request   the request to execute
         *
         * @return  the response to the request. This is always a final response,
         *          never an intermediate response with an 1xx status code.
         *          Whether redirects or authentication challenges will be returned
         *          or handled automatically depends on the implementation and
         *          configuration of this client.
         * @throws IOException in case of a problem or the connection was aborted
         * @throws ClientProtocolException in case of an http protocol error
         */
        Execute(
            [in] IHttpUriRequest* request,
            [out] IHttpResponse** response);


        /**
         * Executes a request using the given context.
         * The route to the target will be determined by the HTTP client.
         *
         * @param request   the request to execute
         * @param context   the context to use for the execution, or
         *                  <code>null</code> to use the default context
         *
         * @return  the response to the request. This is always a final response,
         *          never an intermediate response with an 1xx status code.
         *          Whether redirects or authentication challenges will be returned
         *          or handled automatically depends on the implementation and
         *          configuration of this client.
         * @throws IOException in case of a problem or the connection was aborted
         * @throws ClientProtocolException in case of an http protocol error
         */
        ExecuteEx(
            [in] IHttpUriRequest* request,
            [in] IHttpContext* context,
            [out] IHttpResponse** response);


        /**
         * Executes a request to the target using the default context.
         *
         * @param target    the target host for the request.
         *                  Implementations may accept <code>null</code>
         *                  if they can still determine a route, for example
         *                  to a default target or by inspecting the request.
         * @param request   the request to execute
         *
         * @return  the response to the request. This is always a final response,
         *          never an intermediate response with an 1xx status code.
         *          Whether redirects or authentication challenges will be returned
         *          or handled automatically depends on the implementation and
         *          configuration of this client.
         * @throws IOException in case of a problem or the connection was aborted
         * @throws ClientProtocolException in case of an http protocol error
         */
        ExecuteEx2(
            [in] IHttpHost* target,
            [in] IHttpRequest* request,
            [out] IHttpResponse** response);

        /**
         * Executes a request to the target using the given context.
         *
         * @param target    the target host for the request.
         *                  Implementations may accept <code>null</code>
         *                  if they can still determine a route, for example
         *                  to a default target or by inspecting the request.
         * @param request   the request to execute
         * @param context   the context to use for the execution, or
         *                  <code>null</code> to use the default context
         *
         * @return  the response to the request. This is always a final response,
         *          never an intermediate response with an 1xx status code.
         *          Whether redirects or authentication challenges will be returned
         *          or handled automatically depends on the implementation and
         *          configuration of this client.
         * @throws IOException in case of a problem or the connection was aborted
         * @throws ClientProtocolException in case of an http protocol error
         */
        ExecuteEx3(
            [in] IHttpHost* target,
            [in] IHttpRequest* request,
            [in] IHttpContext* context,
            [out] IHttpResponse** response);

        /**
         * Executes a request using the default context and processes the
         * response using the given response handler.
         *
         * @param request   the request to execute
         * @param responseHandler the response handler
         *
         * @return  the response object as generated by the response handler.
         * @throws IOException in case of a problem or the connection was aborted
         * @throws ClientProtocolException in case of an http protocol error
         */
        //<T> T ExecuteEx4(
        //    [in] IHttpUriRequest* request,
        //    ResponseHandler<? extends T> responseHandler);

        /**
         * Executes a request using the given context and processes the
         * response using the given response handler.
         *
         * @param request   the request to execute
         * @param responseHandler the response handler
         *
         * @return  the response object as generated by the response handler.
         * @throws IOException in case of a problem or the connection was aborted
         * @throws ClientProtocolException in case of an http protocol error
         */
        //<T> T ExecuteEx5(
        //    HttpUriRequest request,
        //    ResponseHandler<? extends T> responseHandler,
        //    HttpContext context);

        /**
         * Executes a request to the target using the default context and
         * processes the response using the given response handler.
         *
         * @param target    the target host for the request.
         *                  Implementations may accept <code>null</code>
         *                  if they can still determine a route, for example
         *                  to a default target or by inspecting the request.
         * @param request   the request to execute
         * @param responseHandler the response handler
         *
         * @return  the response object as generated by the response handler.
         * @throws IOException in case of a problem or the connection was aborted
         * @throws ClientProtocolException in case of an http protocol error
         */
        //<T> T ExecuteEx6(
        //    HttpHost target,
        //    HttpRequest request,
        //    ResponseHandler<? extends T> responseHandler);

        /**
         * Executes a request to the target using the given context and
         * processes the response using the given response handler.
         *
         * @param target    the target host for the request.
         *                  Implementations may accept <code>null</code>
         *                  if they can still determine a route, for example
         *                  to a default target or by inspecting the request.
         * @param request   the request to execute
         * @param responseHandler the response handler
         * @param context   the context to use for the execution, or
         *                  <code>null</code> to use the default context
         *
         * @return  the response object as generated by the response handler.
         * @throws IOException in case of a problem or the connection was aborted
         * @throws ClientProtocolException in case of an http protocol error
         */
        //<T> T ExecuteEx7(
        //    HttpHost target,
        //    HttpRequest request,
        //    ResponseHandler<? extends T> responseHandler,
        //    HttpContext context);
    }
}
