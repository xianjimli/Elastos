
module
{
    /**
     * Defines the class name of the default {@link org.apache.http.conn.ClientConnectionManager}
     * <p>
     * This parameter expects a value of type {@link String}.
     * </p>
     */
    const ClientPNames_CONNECTION_MANAGER_FACTORY_CLASS_NAME = "http.connection-manager.factory-class-name";

    /**
     * Defines the factory to create a default {@link org.apache.http.conn.ClientConnectionManager}.
     * <p>
     * This parameters expects a value of type {@link org.apache.http.conn.ClientConnectionManagerFactory}.
     * </p>
     */
    const ClientPNames_CONNECTION_MANAGER_FACTORY = "http.connection-manager.factory-object";

    /**
     * Defines whether redirects should be handled automatically
     * <p>
     * This parameter expects a value of type {@link Boolean}.
     * </p>
     */
    const ClientPNames_HANDLE_REDIRECTS = "http.protocol.handle-redirects";

    /**
     * Defines whether relative redirects should be rejected.
     * <p>
     * This parameter expects a value of type {@link Boolean}.
     * </p>
     */
    const ClientPNames_REJECT_RELATIVE_REDIRECT = "http.protocol.reject-relative-redirect";

    /**
     * Defines the maximum number of redirects to be followed.
     * The limit on number of redirects is intended to prevent infinite loops.
     * <p>
     * This parameter expects a value of type {@link Integer}.
     * </p>
     */
    const ClientPNames_MAX_REDIRECTS = "http.protocol.max-redirects";

    /**
     * Defines whether circular redirects (redirects to the same location) should be allowed.
     * The HTTP spec is not sufficiently clear whether circular redirects are permitted,
     * therefore optionally they can be enabled
     * <p>
     * This parameter expects a value of type {@link Boolean}.
     * </p>
     */
    const ClientPNames_ALLOW_CIRCULAR_REDIRECTS = "http.protocol.allow-circular-redirects";

    /**
     * Defines whether authentication should be handled automatically.
     * <p>
     * This parameter expects a value of type {@link Boolean}.
     * </p>
     */
    const ClientPNames_HANDLE_AUTHENTICATION = "http.protocol.handle-authentication";

    /**
     * Defines the name of the cookie specification to be used for HTTP state management.
     * <p>
     * This parameter expects a value of type {@link String}.
     * </p>
     */
    const ClientPNames_COOKIE_POLICY = "http.protocol.cookie-policy";

    /**
     * Defines the virtual host name.
     * <p>
     * This parameter expects a value of type {@link org.apache.http.HttpHost}.
     * </p>
     */
    const ClientPNames_VIRTUAL_HOST = "http.virtual-host";

    /**
     * Defines the request headers to be sent per default with each request.
     * <p>
     * This parameter expects a value of type {@link java.util.Collection}. The
     * collection is expected to contain {@link org.apache.http.Header}s.
     * </p>
     */
    const ClientPNames_DEFAULT_HEADERS = "http.default-headers";

    /**
     * Defines the default host. The default value will be used if the target host is
     * not explicitly specified in the request URI.
     * <p>
     * This parameter expects a value of type {@link org.apache.http.HttpHost}.
     * </p>
     */
    const ClientPNames_DEFAULT_HOST = "http.default-host";

    /**
     * Parameter names for the HttpClient module.
     * This does not include parameters for informational units
     * HttpAuth, HttpCookie, or HttpConn.
     *
     * @version $Revision: 659595 $
     *
     * @since 4.0
     */
    interface IClientPNames {
    }
}
