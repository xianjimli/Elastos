
module
{
    interface IHttpHost;
    interface IHttpRequest;
    interface IHttpContext;
    interface IHttpResponse;

    /**
     * A client-side request director.
     * The director decides which steps are necessary to execute a request.
     * It establishes connections and optionally processes redirects and
     * authentication challenges. The director may therefore generate and
     * send a sequence of requests in order to execute one initial request.
     *
     * <br/><b>Note:</b>
     * It is most likely that implementations of this interface will
     * allocate connections, and return responses that depend on those
     * connections for reading the response entity. Such connections
     * MUST be released, but that is out of the scope of a request director.
     *
     * @author <a href="mailto:rolandw at apache.org">Roland Weber</a>
     *
     *
     * <!-- empty lines to avoid svn diff problems -->
     * @version $Revision: 676020 $
     *
     * @since 4.0
     */
    interface IRequestDirector {
        /**
         * Executes a request.
         * <br/><b>Note:</b>
         * For the time being, a new director is instantiated for each request.
         * This is the same behavior as for <code>HttpMethodDirector</code>
         * in HttpClient 3.
         *
         * @param target    the target host for the request.
         *                  Implementations may accept <code>null</code>
         *                  if they can still determine a route, for example
         *                  to a default target or by inspecting the request.
         * @param request   the request to execute
         * @param context   the context for executing the request
         *
         * @return  the final response to the request.
         *          This is never an intermediate response with status code 1xx.
         *
         * @throws HttpException            in case of a problem
         * @throws IOException              in case of an IO problem
         *                                     or if the connection was aborted
         */
        Execute(
            [in] IHttpHost* target,
            [in] IHttpRequest* request,
            [in] IHttpContext* context,
            [out] IHttpResponse** response);
    }
}
