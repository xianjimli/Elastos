
module
{
    const IFileSystem_SHARED_LOCK_TYPE = 1;

    const IFileSystem_EXCLUSIVE_LOCK_TYPE = 2;

    const IFileSystem_SEEK_SET = 1;

    const IFileSystem_SEEK_CUR = 2;

    const IFileSystem_SEEK_END = 4;

    const IFileSystem_O_RDONLY = 0x00000000;

    const IFileSystem_O_WRONLY = 0x00000001;

    const IFileSystem_O_RDWR = 0x00000010;

    const IFileSystem_O_RDWRSYNC = 0x00000020;

    const IFileSystem_O_APPEND = 0x00000100;

    const IFileSystem_O_CREAT = 0x00001000;

    const IFileSystem_O_EXCL = 0x00010000;

    const IFileSystem_O_NOCTTY = 0x00100000;

    const IFileSystem_O_NONBLOCK = 0x01000000;

    const IFileSystem_O_TRUNC = 0x10000000;


    interface IFileSystem {
        Read(
            [in] Int32 fileDescriptor,
            [out] ArrayOf<Byte> bytes,
            [in] Int32 offset,
            [in] Int32 length,
            [out] Int64* number);

        Write(
            [in] Int32 fileDescriptor,
            [in] ArrayOf<Byte> bytes,
            [in] Int32 offset,
            [in] Int32 length,
            [out] Int64* number);

        Readv(
            [in] Int32 fileDescriptor,
            [in] ArrayOf<Int32> addresses,
            [in] ArrayOf<Int32> offsets,
            [in] ArrayOf<Int32> lengths,
            [in] Int32 size,
            [out] Int64* number);

        Writev(
            [in] Int32 fileDescriptor,
            [in] ArrayOf<Int32> addresses,
            [in] ArrayOf<Int32> offsets,
            [in] ArrayOf<Int32> lengths,
            [in] Int32 size,
            [out] Int64* number);

        // Required to support direct byte buffers
        ReadDirect(
            [in] Int32 fileDescriptor,
            [in] Int32 address,
            [in] Int32 offset,
            [in] Int32 length,
            [out] Int64* number);

        WriteDirect(
            [in] Int32 fileDescriptor,
            [in] Int32 address,
            [in] Int32 offset,
            [in] Int32 length,
            [out] Int64* number);

        GetLength(
            [in] Int32 fileDescriptor,
            [out] Int64* size);

        Lock(
            [in] Int32 fileDescriptor,
            [in] Int64 start,
            [in] Int64 length,
            [in] Int32 type,
            [in] Boolean waitFlag,
            [out] Boolean* succeeded);

        Unlock(
            [in] Int32 fileDescriptor,
            [in] Int64 start,
            [in] Int64 length);

        Seek(
            [in] Int32 fileDescriptor,
            [in] Int64 offset,
            [in] Int32 whence,
            [out] Int64* number);

        Fsync(
            [in] Int32 fileDescriptor,
            [in] Boolean metadata);

        Truncate(
            [in] Int32 fileDescriptor,
            [in] Int64 length);

        /**
         * Returns the granularity for virtual memory allocation.
         */
        GetAllocGranularity(
            [out] Int32* granularity);

        Open(
            [in] String path,
            [in] Int32 mode,
            [out] Int32* fileDescriptor);

        Transfer(
            [in] Int32 fileDescriptor,
            [in] Int32 socketDescriptor,
            [in] Int64 offset,
            [in] Int64 count,
            [out] Int64* number);

        // BEGIN android-deleted
        // public long ttyAvailable() throws IOException;
        // public long ttyRead(byte[] bytes, int offset, int length) throws IOException;
        // END android-deleted

        // BEGIN android-added
        IoctlAvailable(
            [in] Int32 fileDescriptor,
            [out] Int32* avail);
        // END android-added
    }
}
