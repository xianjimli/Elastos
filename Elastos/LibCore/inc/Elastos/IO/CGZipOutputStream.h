//==========================================================================
// Copyright (c) 2000-2008,  Elastos, Inc.  All Rights Reserved.
//==========================================================================
#ifndef __CGZIPOUTPUTSTREAM_H__
#define __CGZIPOUTPUTSTREAM_H__

#include "_CGZipOutputStream.h"
#include "zlib.h"
/*!
  @brief This class implements a stream filter for writing compressed data in the GZIP file format. 
  @since
  @sa
*/
CarClass(CGZipOutputStream)
{
public:
/*!
  @brief creates a null CGZipOutputStream.
*/
    CGZipOutputStream(): m_pIos(NULL), m_pBuf(NULL) {}
/*!
	@brief Destructor of a CGZipOutStream.
*/
    ~CGZipOutputStream();
/*!
	@brief Creates a data of file compression Stream reading from the specified Output stream.
	@param pStream <b>[in]</b> the output stream.
	@param pIGZipOutputStream <b>[out]</b> the secondary pointer pointed to the created file compression
	stream interface .
	@return
    @since
    @sa
*/
    CARAPI constructor(
        /* [in] */ IOutputStream * pStream);
/*!
	@brief Creates a data of file compression Stream reading from the specified Output stream.
	@param pStream <b>[in]</b> the output stream.
	@param windowsBits <b>[in]</b> Compression window's size(the size of history buffer) for
	2 logarithmic. Range of 8 to 15,in the case of loss of memory, the greater the 
	value the better the compression's effect, the default value is 15. When windowBits 
	take 8 to 15,means that the generated  zlib compressed data  contains the head and 
	tail.windowBits can take -15 to -8, that is-windowBIts, means that the generated 
	zlib compressed data  doesn't contain the head and tail or adler32-tested code.When 
	windowBits  adds 16, will add  the head and tail  gzip for the generated compressed 
	data .
	@param compressLevel <b>[in]</b> The compression levels. Range of 0 to 9. When compressLevel is 1 ,
	the compression speed is the fastest; When compressLevel is 9 , the compression is the best 
	effect; When compressLevel is 0 ,it is not compressed(equivalent to copy). The default value 
	is 6.
	@param memoryU@geLevel <b>[in]</b> According to the internal compression condition for the size of 
	the corresponding size of  memory. Value range is in 1 ~ 9. When memoryU@geLevel is 1 ,it 
	uses the least size of  the memory , but the speed is slow, and will reduce the compression 
	ratio; When memoryU@geLevel is 9 , it uses the biggest size of  the memory , the speed is 
	the best. The default value is 8.
	@param strategy <b>[in]</b> the adjusting compression algorithm.
    CompressStrategy_DEFAULT: the default method, used to handle the general data;
	CompressStrategy_FILTERED: dealing the data generated by the filter or predictor;
	CompressStrategy_HUFFMAN: mandatory to use Huffman coding only(no string matching);
	CompressStrategy_RLE: travel coding, provide better compression effect  for PNG image data;
	CompressStrategy_FIXED: prohibited the use of dynamic Huffman coding, allows to  use simple 
	decoder for special applications. Its effect is Between CompressStrategy_DEFAULT and 
	CompressStrategy_HUFFMAN.
	@param pIGZipOutputStream <b>[out]</b> the secondary pointer pointed to the created file compression
	stream interface .
	@return
    @since
    @sa
*/
    CARAPI constructor(
        /* [in] */ IOutputStream * pStream,
        /* [in] */ Int32 windowBits,
        /* [in] */ Int32 compressLevel,
        /* [in] */ Int32 memoryUsageLevel,
        /* [in] */ CompressStrategy strategy);
/*!
	@brief Creates a data of file compression Stream reading from the specified Output stream.
	@param pStream <b>[in]</b> the output stream.
	@param windowsBits <b>[in]</b> Compression window's size(the size of history buffer) for
	2 logarithmic. Range of 8 to 15,in the case of loss of memory, the greater the 
	value the better the compression's effect, the default value is 15. When windowBits 
	take 8 to 15,means that the generated  zlib compressed data  contains the head and 
	tail.windowBits can take -15 to -8, that is-windowBIts, means that the generated 
	zlib compressed data  doesn't contain the head and tail or adler32-tested code.When 
	windowBits  adds 16, will add  the head and tail  gzip for the generated compressed 
	data .
	@param compressLevel <b>[in]</b> The compression levels. Range of 0 to 9. When compressLevel is 1 ,
	the compression speed is the fastest; When compressLevel is 9 , the compression is the best 
	effect; When compressLevel is 0 ,it is not compressed(equivalent to copy). The default value 
	is 6.
	@param memoryU@geLevel <b>[in]</b> According to the internal compression condition for the size of 
	the corresponding size of  memory. Value range is in 1 ~ 9. When memoryU@geLevel is 1 ,it 
	uses the least size of  the memory , but the speed is slow, and will reduce the compression 
	ratio; When memoryU@geLevel is 9 , it uses the biggest size of  the memory , the speed is 
	the best. The default value is 8.
	@param strategy <b>[in]</b> the adjusting compression algorithm.
    CompressStrategy_DEFAULT: the default method, used to handle the general data;
	CompressStrategy_FILTERED: dealing the data generated by the filter or predictor;
	CompressStrategy_HUFFMAN: mandatory to use Huffman coding only(no string matching);
	CompressStrategy_RLE: travel coding, provide better compression effect  for PNG image data;
	CompressStrategy_FIXED: prohibited the use of dynamic Huffman coding, allows to  use simple 
	decoder for special applications. Its effect is Between CompressStrategy_DEFAULT and 
	CompressStrategy_HUFFMAN.
	@param dictionary <b>[in]</b> Set the dictionary, when compression and decompression,the setting must 
	be set the @me.
	@param pIGZipOutputStream <b>[out]</b> the secondary pointer pointed to the created file compression
	stream interface .
	@return
    @since
    @sa
*/
    CARAPI constructor(
        /* [in] */ IOutputStream * pStream,
        /* [in] */ Int32 windowBits,
        /* [in] */ Int32 compressLevel,
        /* [in] */ Int32 memoryUsageLevel,
        /* [in] */ CompressStrategy strategy,
        /* [in] */ const BufferOf<Byte> & dictionary);
/*!
	@brief Closes this GZip output stream and releases any system resources associated with
	this stream. This GZip output stream may no longer be used for writing bytes. 
    @return
    @since
    @sa
*/
    CARAPI Close();
/*!
	@brief The flush method of CGZipOutputStream does nothing. 
	@return
    @since
    @sa
*/
    CARAPI Flush();
/*!
	@brief Writes the specified byte @a value to this output stream. The general contract for
	write is that one byte is written to the output stream. 
	@param value <b>[in]</b> the byte to be written. 
*/
    CARAPI Write(
        /* [in] */ Byte value);
/*!
	@brief Writes length bytes of the byte buffer @a buffer from the specified byte array to
	this output stream.The general contract for this method is that it should have exactly the
	@me effect as the call write(0, buffer.length,buffer,pBytesWritten). 
	@param buffer <b>[in]</b> the data.
	@param pBytesWritten <b>[out]</b> the pointer pointed to the value of number of written bytes.
	@return
    @since
    @sa
*/
    CARAPI WriteBuffer(
        /* [in] */ const BufferOf<Byte> & buffer,
        /* [out] */ Int32 * pBytesWritten);
/*!
	@brief Writes @a length bytes from the specified byte array starting at offset @a offset to this
	output stream. The general contract for write(offset,length,buffer,pBytesWritten) is that some of 
	the bytes in the array @a buffer are written to the output stream in order; element @a buffer[offset]
	is the first byte written and b[off+len-1] is the last byte written by this operation. 
	
	@param offset <b>[in]</b> the start offset in the data.
	@param length <b>[in]</b> the number of bytes to write. 
	@param buffer <b>[in]</b> the data.
	@param pBytesWritten <b>[out]</b> the pointer pointed to the value of number of written bytes.
	@return
    @since
    @sa

*/
    CARAPI WriteBufferEx(
        /* [in] */ Int32 offset,
        /* [in] */ Int32 length,
        /* [in] */ const BufferOf<Byte> & buffer,
        /* [out] */ Int32 * pBytesWritten);

private:
/*!
	@brief 
	@param pBuffer 
	@param bufferSize
	@param pCount
	@return
    @since
    @sa
*/
    ECode DeflateStream(
        Byte * pBuffer,
        Int32 bufferSize,
        Int32 *pCount);

private:
/*!
	@brief the underlying output stream.
*/
    IOutputStream * m_pIos;
/*!
	@brief A pointer of Byte buffer that was provided by the creator of the stream. Elements m_pBuf[0]
	through m_pBuf[m_tail-1] are the only bytes that can ever be written on the stream; element m_pBuf[m_pos]
	is the next byte to be written. 
*/	
    BufferOf<Byte>* m_pBuf;
/*!
	@brief the compressed stream.
*/	
    z_stream m_stream;
};

#endif // __CGZIPOUTPUTSTREAM_H__
